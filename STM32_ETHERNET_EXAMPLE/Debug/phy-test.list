
phy-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cbc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c14  08013e6c  08013e6c  00023e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a80  08016a80  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08016a80  08016a80  00026a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a88  08016a88  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a88  08016a88  00026a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a8c  08016a8c  00026a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08016a90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000ab34  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000abc0  2000abc0  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023e19  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005e75  00000000  00000000  00053f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ce0  00000000  00000000  00059d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000171e  00000000  00000000  0005ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000319f6  00000000  00000000  0005d18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ebe2  00000000  00000000  0008eb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6e4b  00000000  00000000  000bd766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008098  00000000  00000000  001b45b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001bc64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013e54 	.word	0x08013e54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08013e54 	.word	0x08013e54

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <fifo_init>:
#include "stdio.h"

/******************************************************************************/

void
fifo_init(fifo_t* fi) {
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    fi->put = 0;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
    fi->grab = 0;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
    fi->nb_elements = 0;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <fifo_push>:


/* Adding data */

int
fifo_push(fifo_t* f, uint8_t val) {
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]
    if (f->nb_elements == FIFO_SIZE) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	2b64      	cmp	r3, #100	; 0x64
 80005c4:	d101      	bne.n	80005ca <fifo_push+0x18>
        /* FIFO/queue is full */
        return FALSE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e017      	b.n	80005fa <fifo_push+0x48>
    }
    f->buffer[f->put] = val;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	78fa      	ldrb	r2, [r7, #3]
 80005d4:	731a      	strb	r2, [r3, #12]
    f->put++;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	601a      	str	r2, [r3, #0]
    f->nb_elements++;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	609a      	str	r2, [r3, #8]
    if(f->put == FIFO_SIZE){
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b64      	cmp	r3, #100	; 0x64
 80005f0:	d102      	bne.n	80005f8 <fifo_push+0x46>
       f->put=0;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
    }
    return TRUE;
 80005f8:	2301      	movs	r3, #1
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	fifo_init(&fi);
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <main+0x78>)
 800060e:	f7ff ffbd 	bl	800058c <fifo_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f003 fc7d 	bl	8003f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f843 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9b5 	bl	8000988 <MX_GPIO_Init>
  MX_LWIP_Init();
 800061e:	f007 fa5b 	bl	8007ad8 <MX_LWIP_Init>
  MX_TIM1_Init();
 8000622:	f000 f8e3 	bl	80007ec <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f95b 	bl	80008e0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800062a:	f000 f92f 	bl	800088c <MX_USART1_UART_Init>
  MX_SPI5_Init();
 800062e:	f000 f8a7 	bl	8000780 <MX_SPI5_Init>
  MX_USART3_UART_Init();
 8000632:	f000 f97f 	bl	8000934 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  buf = 'A';
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x7c>)
 8000638:	2241      	movs	r2, #65	; 0x41
 800063a:	701a      	strb	r2, [r3, #0]
  tcp_server_init();
 800063c:	f002 fed6 	bl	80033ec <tcp_server_init>

//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
//HAL_Delay(1000);
  HAL_GPIO_WritePin(MDAC_NRST_GPIO_Port, MDAC_NRST_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2104      	movs	r1, #4
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <main+0x80>)
 8000646:	f005 f963 	bl	8005910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HMG_NRST_GPIO_Port, HMG_NRST_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <main+0x80>)
 8000652:	f005 f95d 	bl	8005910 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IIRS_NRST_GPIO_Port, IIRS_NRST_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x84>)
 800065e:	f005 f957 	bl	8005910 <HAL_GPIO_WritePin>
//  HAL_UART_Receive_IT(&huart2, uart_buff, 10);
  HAL_UART_Receive_IT(&huart3, ds_message_fb, 8);
 8000662:	2208      	movs	r2, #8
 8000664:	490a      	ldr	r1, [pc, #40]	; (8000690 <main+0x88>)
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <main+0x8c>)
 8000668:	f006 fac5 	bl	8006bf6 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start(&htim1);
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <main+0x90>)
 800066e:	f005 fee9 	bl	8006444 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <main+0x94>)
 8000674:	f007 fc92 	bl	8007f9c <ethernetif_input>

	  sys_check_timeouts();
 8000678:	f00f fe88 	bl	801038c <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 800067c:	e7f9      	b.n	8000672 <main+0x6a>
 800067e:	bf00      	nop
 8000680:	2000053c 	.word	0x2000053c
 8000684:	200005ac 	.word	0x200005ac
 8000688:	40021000 	.word	0x40021000
 800068c:	40021800 	.word	0x40021800
 8000690:	20000520 	.word	0x20000520
 8000694:	200001d8 	.word	0x200001d8
 8000698:	20000100 	.word	0x20000100
 800069c:	200005b8 	.word	0x200005b8

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f012 fd23 	bl	80130fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <SystemClock_Config+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <SystemClock_Config+0xd8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xd8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <SystemClock_Config+0xdc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemClock_Config+0xdc>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <SystemClock_Config+0xdc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000714:	23b4      	movs	r3, #180	; 0xb4
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f005 f95d 	bl	80059e4 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f002 fbf8 	bl	8002f24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000734:	f005 f906 	bl	8005944 <HAL_PWREx_EnableOverDrive>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073e:	f002 fbf1 	bl	8002f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2105      	movs	r1, #5
 8000760:	4618      	mov	r0, r3
 8000762:	f005 fbb7 	bl	8005ed4 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800076c:	f002 fbda 	bl	8002f24 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_SPI5_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_SPI5_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_SPI5_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_SPI5_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_SPI5_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007b4:	2210      	movs	r2, #16
 80007b6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_SPI5_Init+0x64>)
 80007d2:	f005 fd5f 	bl	8006294 <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80007dc:	f002 fba2 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000a8 	.word	0x200000a8
 80007e8:	40015000 	.word	0x40015000

080007ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM1_Init+0x98>)
 800080a:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <MX_TIM1_Init+0x9c>)
 800080c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM1_Init+0x98>)
 8000810:	22b3      	movs	r2, #179	; 0xb3
 8000812:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_TIM1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM1_Init+0x98>)
 800081c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000820:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_TIM1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_TIM1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_TIM1_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <MX_TIM1_Init+0x98>)
 8000836:	f005 fdb6 	bl	80063a6 <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000840:	f002 fb70 	bl	8002f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_TIM1_Init+0x98>)
 8000852:	f005 fe5f 	bl	8006514 <HAL_TIM_ConfigClockSource>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800085c:	f002 fb62 	bl	8002f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_TIM1_Init+0x98>)
 800086e:	f006 f85f 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000878:	f002 fb54 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000100 	.word	0x20000100
 8000888:	40010000 	.word	0x40010000

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART1_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f006 f8b0 	bl	8006a28 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f002 fb29 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000148 	.word	0x20000148
 80008dc:	40011000 	.word	0x40011000

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f006 f886 	bl	8006a28 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f002 faff 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000190 	.word	0x20000190
 8000930:	40004400 	.word	0x40004400

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART3_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART3_UART_Init+0x4c>)
 800096c:	f006 f85c 	bl	8006a28 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f002 fad5 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001d8 	.word	0x200001d8
 8000984:	40004800 	.word	0x40004800

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b090      	sub	sp, #64	; 0x40
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a2:	4bb0      	ldr	r3, [pc, #704]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4aaf      	ldr	r2, [pc, #700]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4bad      	ldr	r3, [pc, #692]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
 80009be:	4ba9      	ldr	r3, [pc, #676]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4aa8      	ldr	r2, [pc, #672]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4ba6      	ldr	r3, [pc, #664]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
 80009da:	4ba2      	ldr	r3, [pc, #648]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4aa1      	ldr	r2, [pc, #644]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009e0:	f043 0320 	orr.w	r3, r3, #32
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b9f      	ldr	r3, [pc, #636]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0320 	and.w	r3, r3, #32
 80009ee:	623b      	str	r3, [r7, #32]
 80009f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
 80009f6:	4b9b      	ldr	r3, [pc, #620]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a9a      	ldr	r2, [pc, #616]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b98      	ldr	r3, [pc, #608]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	4b94      	ldr	r3, [pc, #592]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a93      	ldr	r2, [pc, #588]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b91      	ldr	r3, [pc, #580]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	4b8d      	ldr	r3, [pc, #564]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a8c      	ldr	r2, [pc, #560]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b8a      	ldr	r3, [pc, #552]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b86      	ldr	r3, [pc, #536]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a85      	ldr	r2, [pc, #532]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b83      	ldr	r3, [pc, #524]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b7f      	ldr	r3, [pc, #508]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a7e      	ldr	r2, [pc, #504]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b7c      	ldr	r3, [pc, #496]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b78      	ldr	r3, [pc, #480]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a77      	ldr	r2, [pc, #476]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b75      	ldr	r3, [pc, #468]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b71      	ldr	r3, [pc, #452]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a70      	ldr	r2, [pc, #448]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b6e      	ldr	r3, [pc, #440]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b6a      	ldr	r3, [pc, #424]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a69      	ldr	r2, [pc, #420]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b67      	ldr	r3, [pc, #412]	; (8000c64 <MX_GPIO_Init+0x2dc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MDAC_NRST_Pin|HMG_NRST_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f240 4106 	movw	r1, #1030	; 0x406
 8000ad8:	4863      	ldr	r0, [pc, #396]	; (8000c68 <MX_GPIO_Init+0x2e0>)
 8000ada:	f004 ff19 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PS3_HMG_RLY_CNT_Pin|PS4_PROP1_RLY_CNT_Pin|PS5_PROP2_RLY_CNT_Pin|PS6_CLT_RLY_CNT_Pin
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f248 0179 	movw	r1, #32889	; 0x8079
 8000ae4:	4860      	ldr	r0, [pc, #384]	; (8000c68 <MX_GPIO_Init+0x2e0>)
 8000ae6:	f004 ff13 	bl	8005910 <HAL_GPIO_WritePin>
                          |DEPTH_SIM_RLY_CNT_Pin|MDAC_MS_RLY_CNT_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SADC_NSS_GPIO_Port, SADC_NSS_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2140      	movs	r1, #64	; 0x40
 8000aee:	485f      	ldr	r0, [pc, #380]	; (8000c6c <MX_GPIO_Init+0x2e4>)
 8000af0:	f004 ff0e 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WS_1M_AF_RL_CNT2_GPIO_Port, WS_1M_AF_RL_CNT2_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	485d      	ldr	r0, [pc, #372]	; (8000c70 <MX_GPIO_Init+0x2e8>)
 8000afa:	f004 ff09 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T1_RL_CNT3_GPIO_Port, T1_RL_CNT3_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b04:	4859      	ldr	r0, [pc, #356]	; (8000c6c <MX_GPIO_Init+0x2e4>)
 8000b06:	f004 ff03 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, WCT_RLY_CNT_Pin|HMG_MS_RLY_CNT_1_Pin|IIRS_MS_RLY_CNT_3_Pin|IIRS_MS_RLY_CNT_2_Pin
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f643 4110 	movw	r1, #15376	; 0x3c10
 8000b10:	4858      	ldr	r0, [pc, #352]	; (8000c74 <MX_GPIO_Init+0x2ec>)
 8000b12:	f004 fefd 	bl	8005910 <HAL_GPIO_WritePin>
                          |IIRS_MS_RLY_CNT_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PS1_TON_RLY_CNT_Pin|PS1_CON_RLY_CNT_Pin|PS2_AUX_RLY_CNT_Pin|HMG_MS_RLY_CNT_2_Pin
 8000b16:	2201      	movs	r2, #1
 8000b18:	f249 1138 	movw	r1, #37176	; 0x9138
 8000b1c:	4856      	ldr	r0, [pc, #344]	; (8000c78 <MX_GPIO_Init+0x2f0>)
 8000b1e:	f004 fef7 	bl	8005910 <HAL_GPIO_WritePin>
                          |MS_RL_CNT7_Pin|T2_RL_CNT4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IIRS_NRST_GPIO_Port, IIRS_NRST_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	4853      	ldr	r0, [pc, #332]	; (8000c78 <MX_GPIO_Init+0x2f0>)
 8000b2a:	f004 fef1 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS_RL_CNT8_GPIO_Port, MS_RL_CNT8_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	4851      	ldr	r0, [pc, #324]	; (8000c7c <MX_GPIO_Init+0x2f4>)
 8000b36:	f004 feeb 	bl	8005910 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MDAC_NRST_Pin PS3_HMG_RLY_CNT_Pin PS4_PROP1_RLY_CNT_Pin PS5_PROP2_RLY_CNT_Pin
                           PS6_CLT_RLY_CNT_Pin HMG_NRST_Pin DEPTH_SIM_RLY_CNT_Pin MDAC_MS_RLY_CNT_Pin
                           PE1 */
  GPIO_InitStruct.Pin = MDAC_NRST_Pin|PS3_HMG_RLY_CNT_Pin|PS4_PROP1_RLY_CNT_Pin|PS5_PROP2_RLY_CNT_Pin
 8000b3a:	f248 437f 	movw	r3, #33919	; 0x847f
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PS6_CLT_RLY_CNT_Pin|HMG_NRST_Pin|DEPTH_SIM_RLY_CNT_Pin|MDAC_MS_RLY_CNT_Pin
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	4619      	mov	r1, r3
 8000b52:	4845      	ldr	r0, [pc, #276]	; (8000c68 <MX_GPIO_Init+0x2e0>)
 8000b54:	f004 fd18 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS1A_K_OV_Pin HS1A_K_UV_Pin PS2_AUX_ON_Pin PS3_HMG_ON_Pin
                           PS5_PROP2_ON_Pin LS17_A_UV_Pin HS1A_A_OV_Pin HS1A_A_UV_Pin
                           HS1A_F_OV_Pin HS1A_F_UV_Pin HS1A_G_OV_Pin HS1A_G_UV_Pin
                           HS1A_H_OV_Pin HS1A_H_UV_Pin */
  GPIO_InitStruct.Pin = HS1A_K_OV_Pin|HS1A_K_UV_Pin|PS2_AUX_ON_Pin|PS3_HMG_ON_Pin
 8000b58:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PS5_PROP2_ON_Pin|LS17_A_UV_Pin|HS1A_A_OV_Pin|HS1A_A_UV_Pin
                          |HS1A_F_OV_Pin|HS1A_F_UV_Pin|HS1A_G_OV_Pin|HS1A_G_UV_Pin
                          |HS1A_H_OV_Pin|HS1A_H_UV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4844      	ldr	r0, [pc, #272]	; (8000c80 <MX_GPIO_Init+0x2f8>)
 8000b6e:	f004 fd0b 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS6_CLT_ON_Pin DEPTH_SIM_ON_Pin LS2_A_UV_Pin */
  GPIO_InitStruct.Pin = PS6_CLT_ON_Pin|DEPTH_SIM_ON_Pin|LS2_A_UV_Pin;
 8000b72:	f240 430c 	movw	r3, #1036	; 0x40c
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b84:	4619      	mov	r1, r3
 8000b86:	4839      	ldr	r0, [pc, #228]	; (8000c6c <MX_GPIO_Init+0x2e4>)
 8000b88:	f004 fcfe 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SADC_NSS_Pin T1_RL_CNT3_Pin */
  GPIO_InitStruct.Pin = SADC_NSS_Pin|T1_RL_CNT3_Pin;
 8000b8c:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4831      	ldr	r0, [pc, #196]	; (8000c6c <MX_GPIO_Init+0x2e4>)
 8000ba6:	f004 fcef 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : WS_1M_AF_RL_CNT2_Pin */
  GPIO_InitStruct.Pin = WS_1M_AF_RL_CNT2_Pin;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WS_1M_AF_RL_CNT2_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482b      	ldr	r0, [pc, #172]	; (8000c70 <MX_GPIO_Init+0x2e8>)
 8000bc2:	f004 fce1 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS16_S_OV_Pin LS16_S_UV_Pin SQB1_A_OV_Pin SQB1_A_UV_Pin
                           SQB1_B_OV_Pin SQB1_B_UV_Pin C5B_OV_Pin C5A_UV_Pin
                           C5A_OV_Pin */
  GPIO_InitStruct.Pin = LS16_S_OV_Pin|LS16_S_UV_Pin|SQB1_A_OV_Pin|SQB1_A_UV_Pin
 8000bc6:	f64f 6330 	movw	r3, #65072	; 0xfe30
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SQB1_B_OV_Pin|SQB1_B_UV_Pin|C5B_OV_Pin|C5A_UV_Pin
                          |C5A_OV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482a      	ldr	r0, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x2fc>)
 8000bdc:	f004 fcd4 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS16_T_OV_Pin C5C_UV_Pin C5C_OV_Pin C5B_UV_Pin */
  GPIO_InitStruct.Pin = LS16_T_OV_Pin|C5C_UV_Pin|C5C_OV_Pin|C5B_UV_Pin;
 8000be0:	f641 1308 	movw	r3, #6408	; 0x1908
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4824      	ldr	r0, [pc, #144]	; (8000c88 <MX_GPIO_Init+0x300>)
 8000bf6:	f004 fcc7 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS16_T_UV_Pin ES15_A_OV_Pin ES15_A_UV_Pin */
  GPIO_InitStruct.Pin = LS16_T_UV_Pin|ES15_A_OV_Pin|ES15_A_UV_Pin;
 8000bfa:	f240 4303 	movw	r3, #1027	; 0x403
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481b      	ldr	r0, [pc, #108]	; (8000c7c <MX_GPIO_Init+0x2f4>)
 8000c10:	f004 fcba 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS17_C_OV_Pin LS17_C_UV_Pin LS17_E_OV_Pin LS17_E_UV_Pin
                           LS17_G_OV_Pin LS17_G_UV_Pin LS17_J_OV_Pin LS17_J_UV_Pin
                           LS2_A_OV_Pin */
  GPIO_InitStruct.Pin = LS17_C_OV_Pin|LS17_C_UV_Pin|LS17_E_OV_Pin|LS17_E_UV_Pin
 8000c14:	f240 23ff 	movw	r3, #767	; 0x2ff
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LS17_G_OV_Pin|LS17_G_UV_Pin|LS17_J_OV_Pin|LS17_J_UV_Pin
                          |LS2_A_OV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <MX_GPIO_Init+0x304>)
 8000c2a:	f004 fcad 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LP26_A_UV_Pin HV_PS_OV_Pin HV_PS_UV_Pin */
  GPIO_InitStruct.Pin = LP26_A_UV_Pin|HV_PS_OV_Pin|HV_PS_UV_Pin;
 8000c2e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c40:	4619      	mov	r1, r3
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <MX_GPIO_Init+0x2e0>)
 8000c44:	f004 fca0 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : WCT_RLY_CNT_Pin HMG_MS_RLY_CNT_1_Pin IIRS_MS_RLY_CNT_3_Pin IIRS_MS_RLY_CNT_2_Pin
                           IIRS_MS_RLY_CNT_1_Pin */
  GPIO_InitStruct.Pin = WCT_RLY_CNT_Pin|HMG_MS_RLY_CNT_1_Pin|IIRS_MS_RLY_CNT_3_Pin|IIRS_MS_RLY_CNT_2_Pin
 8000c48:	f643 4310 	movw	r3, #15376	; 0x3c10
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |IIRS_MS_RLY_CNT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	4619      	mov	r1, r3
 8000c60:	e016      	b.n	8000c90 <MX_GPIO_Init+0x308>
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40021400 	.word	0x40021400
 8000c70:	40020800 	.word	0x40020800
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40022000 	.word	0x40022000
 8000c84:	40021c00 	.word	0x40021c00
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40022400 	.word	0x40022400
 8000c90:	482b      	ldr	r0, [pc, #172]	; (8000d40 <MX_GPIO_Init+0x3b8>)
 8000c92:	f004 fc79 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : SQB3_A_UV_Pin WS1_A_OV_Pin WS1_A_UV_Pin LP26_A_OV_Pin
                           SQB2_B_UV_Pin SQB3_A_OV_Pin */
  GPIO_InitStruct.Pin = SQB3_A_UV_Pin|WS1_A_OV_Pin|WS1_A_UV_Pin|LP26_A_OV_Pin
 8000c96:	f24c 030f 	movw	r3, #49167	; 0xc00f
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SQB2_B_UV_Pin|SQB3_A_OV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4825      	ldr	r0, [pc, #148]	; (8000d40 <MX_GPIO_Init+0x3b8>)
 8000cac:	f004 fc6c 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS1_TON_RLY_CNT_Pin PS1_CON_RLY_CNT_Pin PS2_AUX_RLY_CNT_Pin HMG_MS_RLY_CNT_2_Pin
                           IIRS_NRST_Pin MS_RL_CNT7_Pin T2_RL_CNT4_Pin */
  GPIO_InitStruct.Pin = PS1_TON_RLY_CNT_Pin|PS1_CON_RLY_CNT_Pin|PS2_AUX_RLY_CNT_Pin|HMG_MS_RLY_CNT_2_Pin
 8000cb0:	f249 5338 	movw	r3, #38200	; 0x9538
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |IIRS_NRST_Pin|MS_RL_CNT7_Pin|T2_RL_CNT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481e      	ldr	r0, [pc, #120]	; (8000d44 <MX_GPIO_Init+0x3bc>)
 8000cca:	f004 fc5d 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS17_A_OV_Pin */
  GPIO_InitStruct.Pin = LS17_A_OV_Pin;
 8000cce:	2340      	movs	r3, #64	; 0x40
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LS17_A_OV_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_GPIO_Init+0x3bc>)
 8000ce2:	f004 fc51 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : C5D_UV_Pin C5D_OV_Pin SQB2_A_OV_Pin SQB2_A_UV_Pin
                           SQB2_B_OV_Pin */
  GPIO_InitStruct.Pin = C5D_UV_Pin|C5D_OV_Pin|SQB2_A_OV_Pin|SQB2_A_UV_Pin
 8000ce6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SQB2_B_OV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4813      	ldr	r0, [pc, #76]	; (8000d48 <MX_GPIO_Init+0x3c0>)
 8000cfc:	f004 fc44 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS1_CON_Pin PS1_TON_Pin PS4_PROP1_ON_Pin */
  GPIO_InitStruct.Pin = PS1_CON_Pin|PS1_TON_Pin|PS4_PROP1_ON_Pin;
 8000d00:	23e0      	movs	r3, #224	; 0xe0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MX_GPIO_Init+0x3c4>)
 8000d14:	f004 fc38 	bl	8005588 <HAL_GPIO_Init>

  /*Configure GPIO pin : MS_RL_CNT8_Pin */
  GPIO_InitStruct.Pin = MS_RL_CNT8_Pin;
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(MS_RL_CNT8_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MX_GPIO_Init+0x3c8>)
 8000d32:	f004 fc29 	bl	8005588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d36:	bf00      	nop
 8000d38:	3740      	adds	r7, #64	; 0x40
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020c00 	.word	0x40020c00
 8000d44:	40021800 	.word	0x40021800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40022800 	.word	0x40022800
 8000d50:	40020400 	.word	0x40020400

08000d54 <delaymicroseconds>:

/* USER CODE BEGIN 4 */
void delaymicroseconds(uint32_t us) {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
     __HAL_TIM_SET_COUNTER(&htim1, 0);  // Reset timer counter
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <delaymicroseconds+0x2c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24

     // Wait until the counter reaches the desired value
     while (__HAL_TIM_GET_COUNTER(&htim1) < us) ;
 8000d64:	bf00      	nop
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <delaymicroseconds+0x2c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d8f9      	bhi.n	8000d66 <delaymicroseconds+0x12>
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000100 	.word	0x20000100

08000d84 <delaymilliseconds>:
void delaymilliseconds(uint32_t ms) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
   for (uint32_t i = 0; i < ms; ++i) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e006      	b.n	8000da0 <delaymilliseconds+0x1c>
	   delaymicroseconds(1000);  // 1000 microseconds = 1 millisecond
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f7ff ffdd 	bl	8000d54 <delaymicroseconds>
   for (uint32_t i = 0; i < ms; ++i) {
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3f4      	bcc.n	8000d92 <delaymilliseconds+0xe>
   }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <power_check>:




 POWER_CHECK_STATUS power_check (connector_type connector,pin_num pin){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]

	 POWER_CHECK_STATUS status;
	 switch(connector){
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	2b0d      	cmp	r3, #13
 8000dca:	f201 8195 	bhi.w	80020f8 <power_check+0x1344>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <power_check+0x20>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000e0d 	.word	0x08000e0d
 8000dd8:	080010db 	.word	0x080010db
 8000ddc:	080014bf 	.word	0x080014bf
 8000de0:	08001587 	.word	0x08001587
 8000de4:	08001717 	.word	0x08001717
 8000de8:	08001727 	.word	0x08001727
 8000dec:	08001737 	.word	0x08001737
 8000df0:	08001741 	.word	0x08001741
 8000df4:	08001b05 	.word	0x08001b05
 8000df8:	08001bbf 	.word	0x08001bbf
 8000dfc:	08001d49 	.word	0x08001d49
 8000e00:	08001f89 	.word	0x08001f89
 8000e04:	08001eb9 	.word	0x08001eb9
 8000e08:	0800203f 	.word	0x0800203f
	 case c5:
		 switch(pin){
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	f200 8153 	bhi.w	80010bc <power_check+0x308>
 8000e16:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <power_check+0x68>)
 8000e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1c:	08000e2d 	.word	0x08000e2d
 8000e20:	08000ed3 	.word	0x08000ed3
 8000e24:	08000f79 	.word	0x08000f79
 8000e28:	0800101b 	.word	0x0800101b
		 case a:
			#ifdef UNIT_TEST
			 ov[c5][a] = 1;
			 uv[c5][a] = 1;
			#else
			 ov[c5][a] = HAL_GPIO_ReadPin(C5A_OV_GPIO_Port, C5A_OV_Pin);
 8000e2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e30:	48b7      	ldr	r0, [pc, #732]	; (8001110 <power_check+0x35c>)
 8000e32:	f004 fd55 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4bb6      	ldr	r3, [pc, #728]	; (8001114 <power_check+0x360>)
 8000e3c:	741a      	strb	r2, [r3, #16]
			 uv[c5][a] = HAL_GPIO_ReadPin(C5A_UV_GPIO_Port, C5A_UV_Pin);
 8000e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e42:	48b3      	ldr	r0, [pc, #716]	; (8001110 <power_check+0x35c>)
 8000e44:	f004 fd4c 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4bb2      	ldr	r3, [pc, #712]	; (8001118 <power_check+0x364>)
 8000e4e:	741a      	strb	r2, [r3, #16]
			 delaymilliseconds(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f7ff ff97 	bl	8000d84 <delaymilliseconds>
			 ov[c5][a] = HAL_GPIO_ReadPin(C5A_OV_GPIO_Port, C5A_OV_Pin);
 8000e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e5a:	48ad      	ldr	r0, [pc, #692]	; (8001110 <power_check+0x35c>)
 8000e5c:	f004 fd40 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4bab      	ldr	r3, [pc, #684]	; (8001114 <power_check+0x360>)
 8000e66:	741a      	strb	r2, [r3, #16]
			 uv[c5][a] = HAL_GPIO_ReadPin(C5A_UV_GPIO_Port, C5A_UV_Pin);
 8000e68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6c:	48a8      	ldr	r0, [pc, #672]	; (8001110 <power_check+0x35c>)
 8000e6e:	f004 fd37 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4ba8      	ldr	r3, [pc, #672]	; (8001118 <power_check+0x364>)
 8000e78:	741a      	strb	r2, [r3, #16]
			 delaymilliseconds(100);
 8000e7a:	2064      	movs	r0, #100	; 0x64
 8000e7c:	f7ff ff82 	bl	8000d84 <delaymilliseconds>
			#endif
			 if (ov[c5][a] == 1 && uv[c5][a] == 1){
 8000e80:	4ba4      	ldr	r3, [pc, #656]	; (8001114 <power_check+0x360>)
 8000e82:	7c1b      	ldrb	r3, [r3, #16]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <power_check+0xe6>
 8000e88:	4ba3      	ldr	r3, [pc, #652]	; (8001118 <power_check+0x364>)
 8000e8a:	7c1b      	ldrb	r3, [r3, #16]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d104      	bne.n	8000e9a <power_check+0xe6>
				 //under voltage <26
				 status = UNDER_VOLTAGE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	f001 b930 	b.w	80020fa <power_check+0x1346>
			 }
			 else if (ov[c5][a] == 1 && uv[c5][a]  == 0){
 8000e9a:	4b9e      	ldr	r3, [pc, #632]	; (8001114 <power_check+0x360>)
 8000e9c:	7c1b      	ldrb	r3, [r3, #16]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d108      	bne.n	8000eb4 <power_check+0x100>
 8000ea2:	4b9d      	ldr	r3, [pc, #628]	; (8001118 <power_check+0x364>)
 8000ea4:	7c1b      	ldrb	r3, [r3, #16]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d104      	bne.n	8000eb4 <power_check+0x100>
				 //Proper voltage
				 status = NORMAL;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	f001 b923 	b.w	80020fa <power_check+0x1346>
			 }
			 else if ( ov[c5][a]== 0 && uv[c5][a] == 0){
 8000eb4:	4b97      	ldr	r3, [pc, #604]	; (8001114 <power_check+0x360>)
 8000eb6:	7c1b      	ldrb	r3, [r3, #16]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f040 8102 	bne.w	80010c2 <power_check+0x30e>
 8000ebe:	4b96      	ldr	r3, [pc, #600]	; (8001118 <power_check+0x364>)
 8000ec0:	7c1b      	ldrb	r3, [r3, #16]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 80fd 	bne.w	80010c2 <power_check+0x30e>
				 //Over voltage > 33
				 status = OVER_VOLTAGE;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f001 b914 	b.w	80020fa <power_check+0x1346>
		 case b:
			#ifdef UNIT_TEST
			 ov[c5][b] = 1;
			 uv[c5][b] = 1;
			#else
			 ov[c5][b] = HAL_GPIO_ReadPin(C5B_OV_GPIO_Port, C5B_OV_Pin);
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	488e      	ldr	r0, [pc, #568]	; (8001110 <power_check+0x35c>)
 8000ed8:	f004 fd02 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <power_check+0x360>)
 8000ee2:	745a      	strb	r2, [r3, #17]
			 uv[c5][b] = HAL_GPIO_ReadPin(C5B_UV_GPIO_Port, C5B_UV_Pin);
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	488c      	ldr	r0, [pc, #560]	; (800111c <power_check+0x368>)
 8000eea:	f004 fcf9 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b89      	ldr	r3, [pc, #548]	; (8001118 <power_check+0x364>)
 8000ef4:	745a      	strb	r2, [r3, #17]
			 delaymilliseconds(100);
 8000ef6:	2064      	movs	r0, #100	; 0x64
 8000ef8:	f7ff ff44 	bl	8000d84 <delaymilliseconds>
			 ov[c5][b] = HAL_GPIO_ReadPin(C5B_OV_GPIO_Port, C5B_OV_Pin);
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	4883      	ldr	r0, [pc, #524]	; (8001110 <power_check+0x35c>)
 8000f02:	f004 fced 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b82      	ldr	r3, [pc, #520]	; (8001114 <power_check+0x360>)
 8000f0c:	745a      	strb	r2, [r3, #17]
			 uv[c5][b] = HAL_GPIO_ReadPin(C5B_UV_GPIO_Port, C5B_UV_Pin);
 8000f0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f12:	4882      	ldr	r0, [pc, #520]	; (800111c <power_check+0x368>)
 8000f14:	f004 fce4 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b7e      	ldr	r3, [pc, #504]	; (8001118 <power_check+0x364>)
 8000f1e:	745a      	strb	r2, [r3, #17]
			 delaymilliseconds(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f7ff ff2f 	bl	8000d84 <delaymilliseconds>
			#endif
			 if (ov[c5][b] == 1 && uv[c5][b] == 1){
 8000f26:	4b7b      	ldr	r3, [pc, #492]	; (8001114 <power_check+0x360>)
 8000f28:	7c5b      	ldrb	r3, [r3, #17]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <power_check+0x18c>
 8000f2e:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <power_check+0x364>)
 8000f30:	7c5b      	ldrb	r3, [r3, #17]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d104      	bne.n	8000f40 <power_check+0x18c>
				 //under voltage <26
				 status = UNDER_VOLTAGE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	f001 b8dd 	b.w	80020fa <power_check+0x1346>
			 }
			 else if (ov[c5][b] == 1 && uv[c5][b]  == 0){
 8000f40:	4b74      	ldr	r3, [pc, #464]	; (8001114 <power_check+0x360>)
 8000f42:	7c5b      	ldrb	r3, [r3, #17]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <power_check+0x1a6>
 8000f48:	4b73      	ldr	r3, [pc, #460]	; (8001118 <power_check+0x364>)
 8000f4a:	7c5b      	ldrb	r3, [r3, #17]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d104      	bne.n	8000f5a <power_check+0x1a6>
				 //Proper voltage
				 status = NORMAL;
 8000f50:	2302      	movs	r3, #2
 8000f52:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f001 b8d0 	b.w	80020fa <power_check+0x1346>
			 }
			 else if ( ov[c5][b]== 0 && uv[c5][b] == 0){
 8000f5a:	4b6e      	ldr	r3, [pc, #440]	; (8001114 <power_check+0x360>)
 8000f5c:	7c5b      	ldrb	r3, [r3, #17]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 80b2 	bne.w	80010c8 <power_check+0x314>
 8000f64:	4b6c      	ldr	r3, [pc, #432]	; (8001118 <power_check+0x364>)
 8000f66:	7c5b      	ldrb	r3, [r3, #17]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f040 80ad 	bne.w	80010c8 <power_check+0x314>
				 //Over voltage > 33
				 status = OVER_VOLTAGE;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	f001 b8c1 	b.w	80020fa <power_check+0x1346>
		 case c:
			#ifdef UNIT_TEST
			 ov[c5][c] = 1;
			 uv[c5][c] = 1;
			#else
			 ov[c5][c] = HAL_GPIO_ReadPin(C5C_OV_GPIO_Port, C5C_OV_Pin);
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	4867      	ldr	r0, [pc, #412]	; (800111c <power_check+0x368>)
 8000f7e:	f004 fcaf 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b63      	ldr	r3, [pc, #396]	; (8001114 <power_check+0x360>)
 8000f88:	749a      	strb	r2, [r3, #18]
			 uv[c5][c] = HAL_GPIO_ReadPin(C5C_UV_GPIO_Port, C5C_UV_Pin);
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4863      	ldr	r0, [pc, #396]	; (800111c <power_check+0x368>)
 8000f90:	f004 fca6 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <power_check+0x364>)
 8000f9a:	749a      	strb	r2, [r3, #18]
			 delaymilliseconds(100);
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f7ff fef1 	bl	8000d84 <delaymilliseconds>
			 ov[c5][c] = HAL_GPIO_ReadPin(C5C_OV_GPIO_Port, C5C_OV_Pin);
 8000fa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa6:	485d      	ldr	r0, [pc, #372]	; (800111c <power_check+0x368>)
 8000fa8:	f004 fc9a 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <power_check+0x360>)
 8000fb2:	749a      	strb	r2, [r3, #18]
			 uv[c5][c] = HAL_GPIO_ReadPin(C5C_UV_GPIO_Port, C5C_UV_Pin);
 8000fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb8:	4858      	ldr	r0, [pc, #352]	; (800111c <power_check+0x368>)
 8000fba:	f004 fc91 	bl	80058e0 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b55      	ldr	r3, [pc, #340]	; (8001118 <power_check+0x364>)
 8000fc4:	749a      	strb	r2, [r3, #18]
			 delaymilliseconds(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f7ff fedc 	bl	8000d84 <delaymilliseconds>
			#endif
			 if (ov[c5][c] == 1 && uv[c5][c] == 1){
 8000fcc:	4b51      	ldr	r3, [pc, #324]	; (8001114 <power_check+0x360>)
 8000fce:	7c9b      	ldrb	r3, [r3, #18]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d108      	bne.n	8000fe6 <power_check+0x232>
 8000fd4:	4b50      	ldr	r3, [pc, #320]	; (8001118 <power_check+0x364>)
 8000fd6:	7c9b      	ldrb	r3, [r3, #18]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d104      	bne.n	8000fe6 <power_check+0x232>
				 //under voltage <26
				 status = UNDER_VOLTAGE;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f001 b88a 	b.w	80020fa <power_check+0x1346>
			 }
			 else if (ov[c5][c] == 1 && uv[c5][c]  == 0){
 8000fe6:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <power_check+0x360>)
 8000fe8:	7c9b      	ldrb	r3, [r3, #18]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <power_check+0x24c>
 8000fee:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <power_check+0x364>)
 8000ff0:	7c9b      	ldrb	r3, [r3, #18]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d104      	bne.n	8001000 <power_check+0x24c>
				 //Proper voltage
				 status = NORMAL;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	73fb      	strb	r3, [r7, #15]
				 return status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f001 b87d 	b.w	80020fa <power_check+0x1346>
			 }
			 else if ( ov[c5][c]== 0 && uv[c5][c] == 0){
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <power_check+0x360>)
 8001002:	7c9b      	ldrb	r3, [r3, #18]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d162      	bne.n	80010ce <power_check+0x31a>
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <power_check+0x364>)
 800100a:	7c9b      	ldrb	r3, [r3, #18]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d15e      	bne.n	80010ce <power_check+0x31a>
				 //Over voltage > 33
				 status = OVER_VOLTAGE;
 8001010:	2303      	movs	r3, #3
 8001012:	73fb      	strb	r3, [r7, #15]
				 return status;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f001 b870 	b.w	80020fa <power_check+0x1346>
		 case d:
			#ifdef UNIT_TEST
			 ov[c5][d] = 1;
			 uv[c5][d] = 1;
			#else
			 ov[c5][d] = HAL_GPIO_ReadPin(C5D_OV_GPIO_Port, C5D_OV_Pin);
 800101a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101e:	4840      	ldr	r0, [pc, #256]	; (8001120 <power_check+0x36c>)
 8001020:	f004 fc5e 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <power_check+0x360>)
 800102a:	74da      	strb	r2, [r3, #19]
			 uv[c5][d] = HAL_GPIO_ReadPin(C5D_UV_GPIO_Port, C5D_UV_Pin);
 800102c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001030:	483b      	ldr	r0, [pc, #236]	; (8001120 <power_check+0x36c>)
 8001032:	f004 fc55 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <power_check+0x364>)
 800103c:	74da      	strb	r2, [r3, #19]
			 delaymilliseconds(100);
 800103e:	2064      	movs	r0, #100	; 0x64
 8001040:	f7ff fea0 	bl	8000d84 <delaymilliseconds>
			 ov[c5][d] = HAL_GPIO_ReadPin(C5D_OV_GPIO_Port, C5D_OV_Pin);
 8001044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001048:	4835      	ldr	r0, [pc, #212]	; (8001120 <power_check+0x36c>)
 800104a:	f004 fc49 	bl	80058e0 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <power_check+0x360>)
 8001054:	74da      	strb	r2, [r3, #19]
			 uv[c5][d] = HAL_GPIO_ReadPin(C5D_UV_GPIO_Port, C5D_UV_Pin);
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	4831      	ldr	r0, [pc, #196]	; (8001120 <power_check+0x36c>)
 800105c:	f004 fc40 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <power_check+0x364>)
 8001066:	74da      	strb	r2, [r3, #19]
			 delaymilliseconds(100);
 8001068:	2064      	movs	r0, #100	; 0x64
 800106a:	f7ff fe8b 	bl	8000d84 <delaymilliseconds>
			#endif
			 if (ov[c5][d] == 1 && uv[c5][d] == 1){
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <power_check+0x360>)
 8001070:	7cdb      	ldrb	r3, [r3, #19]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <power_check+0x2d4>
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <power_check+0x364>)
 8001078:	7cdb      	ldrb	r3, [r3, #19]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d104      	bne.n	8001088 <power_check+0x2d4>
				 //under voltage <26
				 status = UNDER_VOLTAGE;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
				 return status;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	f001 b839 	b.w	80020fa <power_check+0x1346>
			 }
			 else if (ov[c5][d] == 1 && uv[c5][d]  == 0){
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <power_check+0x360>)
 800108a:	7cdb      	ldrb	r3, [r3, #19]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <power_check+0x2ee>
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <power_check+0x364>)
 8001092:	7cdb      	ldrb	r3, [r3, #19]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <power_check+0x2ee>
				 //Proper voltage
				 status = NORMAL;
 8001098:	2302      	movs	r3, #2
 800109a:	73fb      	strb	r3, [r7, #15]
				 return status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f001 b82c 	b.w	80020fa <power_check+0x1346>
			 }
			 else if ( ov[c5][d]== 0 && uv[c5][d] == 0){
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <power_check+0x360>)
 80010a4:	7cdb      	ldrb	r3, [r3, #19]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <power_check+0x320>
 80010aa:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <power_check+0x364>)
 80010ac:	7cdb      	ldrb	r3, [r3, #19]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d110      	bne.n	80010d4 <power_check+0x320>
				 //Over voltage > 33
				 status = OVER_VOLTAGE;
 80010b2:	2303      	movs	r3, #3
 80010b4:	73fb      	strb	r3, [r7, #15]
				 return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	f001 b81f 	b.w	80020fa <power_check+0x1346>
			 }
			 //tcp_server_feedback(tpcb, response_buffer, response_buffer_size, es);
			 break;
		 default:
			 break;
 80010bc:	bf00      	nop
 80010be:	f001 b81c 	b.w	80020fa <power_check+0x1346>
			 break;
 80010c2:	bf00      	nop
 80010c4:	f001 b819 	b.w	80020fa <power_check+0x1346>
			 break;
 80010c8:	bf00      	nop
 80010ca:	f001 b816 	b.w	80020fa <power_check+0x1346>
			 break;
 80010ce:	bf00      	nop
 80010d0:	f001 b813 	b.w	80020fa <power_check+0x1346>
			 break;
 80010d4:	bf00      	nop
		 }
		 break;
 80010d6:	f001 b810 	b.w	80020fa <power_check+0x1346>
	case ls17:
		switch(pin){
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	3b01      	subs	r3, #1
 80010de:	2b08      	cmp	r3, #8
 80010e0:	f200 81db 	bhi.w	800149a <power_check+0x6e6>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <power_check+0x338>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	08001125 	.word	0x08001125
 80010f0:	0800149b 	.word	0x0800149b
 80010f4:	080011c7 	.word	0x080011c7
 80010f8:	0800149b 	.word	0x0800149b
 80010fc:	08001279 	.word	0x08001279
 8001100:	0800149b 	.word	0x0800149b
 8001104:	0800132b 	.word	0x0800132b
 8001108:	0800149b 	.word	0x0800149b
 800110c:	080013ed 	.word	0x080013ed
 8001110:	40021c00 	.word	0x40021c00
 8001114:	200002f0 	.word	0x200002f0
 8001118:	200003d4 	.word	0x200003d4
 800111c:	40020000 	.word	0x40020000
 8001120:	40020800 	.word	0x40020800
			 case a:
				#ifdef UNIT_TEST
				 ov[ls17][a] = 1;
				 uv[ls17][a] = 1;
				#else
				 ov[ls17][a] = HAL_GPIO_ReadPin(LS17_A_OV_GPIO_Port, LS17_A_OV_Pin);
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	48ac      	ldr	r0, [pc, #688]	; (80013d8 <power_check+0x624>)
 8001128:	f004 fbda 	bl	80058e0 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4baa      	ldr	r3, [pc, #680]	; (80013dc <power_check+0x628>)
 8001132:	77da      	strb	r2, [r3, #31]
				 uv[ls17][a] = HAL_GPIO_ReadPin(LS17_A_UV_GPIO_Port, LS17_A_UV_Pin);
 8001134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001138:	48a9      	ldr	r0, [pc, #676]	; (80013e0 <power_check+0x62c>)
 800113a:	f004 fbd1 	bl	80058e0 <HAL_GPIO_ReadPin>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4ba8      	ldr	r3, [pc, #672]	; (80013e4 <power_check+0x630>)
 8001144:	77da      	strb	r2, [r3, #31]
				 delaymilliseconds(100);
 8001146:	2064      	movs	r0, #100	; 0x64
 8001148:	f7ff fe1c 	bl	8000d84 <delaymilliseconds>
				 ov[ls17][a] = HAL_GPIO_ReadPin(LS17_A_OV_GPIO_Port, LS17_A_OV_Pin);
 800114c:	2140      	movs	r1, #64	; 0x40
 800114e:	48a2      	ldr	r0, [pc, #648]	; (80013d8 <power_check+0x624>)
 8001150:	f004 fbc6 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4ba0      	ldr	r3, [pc, #640]	; (80013dc <power_check+0x628>)
 800115a:	77da      	strb	r2, [r3, #31]
				 uv[ls17][a] = HAL_GPIO_ReadPin(LS17_A_UV_GPIO_Port, LS17_A_UV_Pin);
 800115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001160:	489f      	ldr	r0, [pc, #636]	; (80013e0 <power_check+0x62c>)
 8001162:	f004 fbbd 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b9e      	ldr	r3, [pc, #632]	; (80013e4 <power_check+0x630>)
 800116c:	77da      	strb	r2, [r3, #31]
				 delaymilliseconds(100);
 800116e:	2064      	movs	r0, #100	; 0x64
 8001170:	f7ff fe08 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ls17][a] == 1 &&  uv[ls17][a] == 1){
 8001174:	4b99      	ldr	r3, [pc, #612]	; (80013dc <power_check+0x628>)
 8001176:	7fdb      	ldrb	r3, [r3, #31]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d108      	bne.n	800118e <power_check+0x3da>
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <power_check+0x630>)
 800117e:	7fdb      	ldrb	r3, [r3, #31]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d104      	bne.n	800118e <power_check+0x3da>
					 //under voltage <26
					 status = UNDER_VOLTAGE;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f000 bfb6 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][a] == 1 &&  uv[ls17][a] == 0){
 800118e:	4b93      	ldr	r3, [pc, #588]	; (80013dc <power_check+0x628>)
 8001190:	7fdb      	ldrb	r3, [r3, #31]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d108      	bne.n	80011a8 <power_check+0x3f4>
 8001196:	4b93      	ldr	r3, [pc, #588]	; (80013e4 <power_check+0x630>)
 8001198:	7fdb      	ldrb	r3, [r3, #31]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d104      	bne.n	80011a8 <power_check+0x3f4>
					 //Proper voltage
					 status = NORMAL;
 800119e:	2302      	movs	r3, #2
 80011a0:	73fb      	strb	r3, [r7, #15]
					 return status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f000 bfa9 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][a] == 0 &&  uv[ls17][a] == 0){
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <power_check+0x628>)
 80011aa:	7fdb      	ldrb	r3, [r3, #31]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f040 8177 	bne.w	80014a0 <power_check+0x6ec>
 80011b2:	4b8c      	ldr	r3, [pc, #560]	; (80013e4 <power_check+0x630>)
 80011b4:	7fdb      	ldrb	r3, [r3, #31]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f040 8172 	bne.w	80014a0 <power_check+0x6ec>
					 //Over voltage > 33
					 status = OVER_VOLTAGE;
 80011bc:	2303      	movs	r3, #3
 80011be:	73fb      	strb	r3, [r7, #15]
					 return status;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	f000 bf9a 	b.w	80020fa <power_check+0x1346>
			 case c:
				#ifdef UNIT_TEST
				 ov[ls17][c] = 1;
				 uv[ls17][c] = 1;
				#else
				 ov[ls17][c] = HAL_GPIO_ReadPin(LS17_C_OV_GPIO_Port, LS17_C_OV_Pin);
 80011c6:	2101      	movs	r1, #1
 80011c8:	4887      	ldr	r0, [pc, #540]	; (80013e8 <power_check+0x634>)
 80011ca:	f004 fb89 	bl	80058e0 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b82      	ldr	r3, [pc, #520]	; (80013dc <power_check+0x628>)
 80011d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				 uv[ls17][c] = HAL_GPIO_ReadPin(LS17_C_UV_GPIO_Port, LS17_C_UV_Pin);
 80011d8:	2102      	movs	r1, #2
 80011da:	4883      	ldr	r0, [pc, #524]	; (80013e8 <power_check+0x634>)
 80011dc:	f004 fb80 	bl	80058e0 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <power_check+0x630>)
 80011e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				 delaymilliseconds(100);
 80011ea:	2064      	movs	r0, #100	; 0x64
 80011ec:	f7ff fdca 	bl	8000d84 <delaymilliseconds>
				 ov[ls17][c] = HAL_GPIO_ReadPin(LS17_C_OV_GPIO_Port, LS17_C_OV_Pin);
 80011f0:	2101      	movs	r1, #1
 80011f2:	487d      	ldr	r0, [pc, #500]	; (80013e8 <power_check+0x634>)
 80011f4:	f004 fb74 	bl	80058e0 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b77      	ldr	r3, [pc, #476]	; (80013dc <power_check+0x628>)
 80011fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				 uv[ls17][c] = HAL_GPIO_ReadPin(LS17_C_UV_GPIO_Port, LS17_C_UV_Pin);
 8001202:	2102      	movs	r1, #2
 8001204:	4878      	ldr	r0, [pc, #480]	; (80013e8 <power_check+0x634>)
 8001206:	f004 fb6b 	bl	80058e0 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b75      	ldr	r3, [pc, #468]	; (80013e4 <power_check+0x630>)
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				 delaymilliseconds(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f7ff fdb5 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ls17][c] == 1 && uv[ls17][c] == 1){
 800121a:	4b70      	ldr	r3, [pc, #448]	; (80013dc <power_check+0x628>)
 800121c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001220:	2b01      	cmp	r3, #1
 8001222:	d109      	bne.n	8001238 <power_check+0x484>
 8001224:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <power_check+0x630>)
 8001226:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800122a:	2b01      	cmp	r3, #1
 800122c:	d104      	bne.n	8001238 <power_check+0x484>
					//response_buffer[0] = 0x01;
					 //under voltage <26
					 status = UNDER_VOLTAGE;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f000 bf61 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][c] == 1 && uv[ls17][c] == 0){
 8001238:	4b68      	ldr	r3, [pc, #416]	; (80013dc <power_check+0x628>)
 800123a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123e:	2b01      	cmp	r3, #1
 8001240:	d109      	bne.n	8001256 <power_check+0x4a2>
 8001242:	4b68      	ldr	r3, [pc, #416]	; (80013e4 <power_check+0x630>)
 8001244:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <power_check+0x4a2>
					// response_buffer[0] = 0x02;
					 //Proper voltage
					 status = NORMAL;
 800124c:	2302      	movs	r3, #2
 800124e:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f000 bf52 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][c] == 0 && uv[ls17][c] == 0){
 8001256:	4b61      	ldr	r3, [pc, #388]	; (80013dc <power_check+0x628>)
 8001258:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800125c:	2b00      	cmp	r3, #0
 800125e:	f040 8122 	bne.w	80014a6 <power_check+0x6f2>
 8001262:	4b60      	ldr	r3, [pc, #384]	; (80013e4 <power_check+0x630>)
 8001264:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 811c 	bne.w	80014a6 <power_check+0x6f2>
					//response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 800126e:	2303      	movs	r3, #3
 8001270:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f000 bf41 	b.w	80020fa <power_check+0x1346>
			 case e:
				#ifdef UNIT_TEST
				 ov[ls17][e] = 1;
				 uv[ls17][e] = 1;
				#else
				 ov[ls17][e] = HAL_GPIO_ReadPin(LS17_E_OV_GPIO_Port, LS17_E_OV_Pin);
 8001278:	2104      	movs	r1, #4
 800127a:	485b      	ldr	r0, [pc, #364]	; (80013e8 <power_check+0x634>)
 800127c:	f004 fb30 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <power_check+0x628>)
 8001286:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 uv[ls17][e] = HAL_GPIO_ReadPin(LS17_E_UV_GPIO_Port, LS17_E_UV_Pin);
 800128a:	2108      	movs	r1, #8
 800128c:	4856      	ldr	r0, [pc, #344]	; (80013e8 <power_check+0x634>)
 800128e:	f004 fb27 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <power_check+0x630>)
 8001298:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 delaymilliseconds(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f7ff fd71 	bl	8000d84 <delaymilliseconds>
				 ov[ls17][e] = HAL_GPIO_ReadPin(LS17_E_OV_GPIO_Port, LS17_E_OV_Pin);
 80012a2:	2104      	movs	r1, #4
 80012a4:	4850      	ldr	r0, [pc, #320]	; (80013e8 <power_check+0x634>)
 80012a6:	f004 fb1b 	bl	80058e0 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b4b      	ldr	r3, [pc, #300]	; (80013dc <power_check+0x628>)
 80012b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 uv[ls17][e] = HAL_GPIO_ReadPin(LS17_E_UV_GPIO_Port, LS17_E_UV_Pin);
 80012b4:	2108      	movs	r1, #8
 80012b6:	484c      	ldr	r0, [pc, #304]	; (80013e8 <power_check+0x634>)
 80012b8:	f004 fb12 	bl	80058e0 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <power_check+0x630>)
 80012c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 delaymilliseconds(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f7ff fd5c 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ls17][e] == 1 && uv[ls17][e] == 1){
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <power_check+0x628>)
 80012ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d109      	bne.n	80012ea <power_check+0x536>
 80012d6:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <power_check+0x630>)
 80012d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d104      	bne.n	80012ea <power_check+0x536>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
					 return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	f000 bf08 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][e] == 1 && uv[ls17][e] == 0){
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <power_check+0x628>)
 80012ec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d109      	bne.n	8001308 <power_check+0x554>
 80012f4:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <power_check+0x630>)
 80012f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d104      	bne.n	8001308 <power_check+0x554>
					//response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 80012fe:	2302      	movs	r3, #2
 8001300:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	f000 bef9 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][e] == 0 && uv[ls17][e] == 0){
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <power_check+0x628>)
 800130a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 80cc 	bne.w	80014ac <power_check+0x6f8>
 8001314:	4b33      	ldr	r3, [pc, #204]	; (80013e4 <power_check+0x630>)
 8001316:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800131a:	2b00      	cmp	r3, #0
 800131c:	f040 80c6 	bne.w	80014ac <power_check+0x6f8>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001320:	2303      	movs	r3, #3
 8001322:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	f000 bee8 	b.w	80020fa <power_check+0x1346>
			 case g:
				#ifdef UNIT_TEST
				 ov[ls17][g] = 1;
				 uv[ls17][g] = 1;
				#else
				 ov[ls17][g] = HAL_GPIO_ReadPin(LS17_G_OV_GPIO_Port, LS17_G_OV_Pin);
 800132a:	2110      	movs	r1, #16
 800132c:	482e      	ldr	r0, [pc, #184]	; (80013e8 <power_check+0x634>)
 800132e:	f004 fad7 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <power_check+0x628>)
 8001338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 uv[ls17][g] = HAL_GPIO_ReadPin(LS17_G_UV_GPIO_Port, LS17_G_UV_Pin);
 800133c:	2120      	movs	r1, #32
 800133e:	482a      	ldr	r0, [pc, #168]	; (80013e8 <power_check+0x634>)
 8001340:	f004 face 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <power_check+0x630>)
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 delaymilliseconds(100);
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f7ff fd18 	bl	8000d84 <delaymilliseconds>
				 ov[ls17][g] = HAL_GPIO_ReadPin(LS17_G_OV_GPIO_Port, LS17_G_OV_Pin);
 8001354:	2110      	movs	r1, #16
 8001356:	4824      	ldr	r0, [pc, #144]	; (80013e8 <power_check+0x634>)
 8001358:	f004 fac2 	bl	80058e0 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <power_check+0x628>)
 8001362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 uv[ls17][g] = HAL_GPIO_ReadPin(LS17_G_UV_GPIO_Port, LS17_G_UV_Pin);
 8001366:	2120      	movs	r1, #32
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <power_check+0x634>)
 800136a:	f004 fab9 	bl	80058e0 <HAL_GPIO_ReadPin>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <power_check+0x630>)
 8001374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 delaymilliseconds(100);
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	f7ff fd03 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ls17][g] == 1 && uv[ls17][g] == 1){
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <power_check+0x628>)
 8001380:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001384:	2b01      	cmp	r3, #1
 8001386:	d109      	bne.n	800139c <power_check+0x5e8>
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <power_check+0x630>)
 800138a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800138e:	2b01      	cmp	r3, #1
 8001390:	d104      	bne.n	800139c <power_check+0x5e8>
					// response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	f000 beaf 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][g] == 1 && uv[ls17][g] == 0){
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <power_check+0x628>)
 800139e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d109      	bne.n	80013ba <power_check+0x606>
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <power_check+0x630>)
 80013a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d104      	bne.n	80013ba <power_check+0x606>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 80013b0:	2302      	movs	r3, #2
 80013b2:	73fb      	strb	r3, [r7, #15]
					 return status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	f000 bea0 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][g] == 0 && uv[ls17][g] == 0){
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <power_check+0x628>)
 80013bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d176      	bne.n	80014b2 <power_check+0x6fe>
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <power_check+0x630>)
 80013c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d171      	bne.n	80014b2 <power_check+0x6fe>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 80013ce:	2303      	movs	r3, #3
 80013d0:	73fb      	strb	r3, [r7, #15]
					 return status;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	f000 be91 	b.w	80020fa <power_check+0x1346>
 80013d8:	40021800 	.word	0x40021800
 80013dc:	200002f0 	.word	0x200002f0
 80013e0:	40022000 	.word	0x40022000
 80013e4:	200003d4 	.word	0x200003d4
 80013e8:	40022400 	.word	0x40022400
			 case j:
				#ifdef UNIT_TEST
				 ov[ls17][j] = 1;
				 uv[ls17][j] = 1;
				#else
				ov[ls17][j] = HAL_GPIO_ReadPin(LS17_J_OV_GPIO_Port, LS17_J_OV_Pin);
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	48b8      	ldr	r0, [pc, #736]	; (80016d0 <power_check+0x91c>)
 80013f0:	f004 fa76 	bl	80058e0 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4bb6      	ldr	r3, [pc, #728]	; (80016d4 <power_check+0x920>)
 80013fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				uv[ls17][j] = HAL_GPIO_ReadPin(LS17_J_UV_GPIO_Port, LS17_J_UV_Pin);
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	48b3      	ldr	r0, [pc, #716]	; (80016d0 <power_check+0x91c>)
 8001402:	f004 fa6d 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4bb3      	ldr	r3, [pc, #716]	; (80016d8 <power_check+0x924>)
 800140c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				delaymilliseconds(100);
 8001410:	2064      	movs	r0, #100	; 0x64
 8001412:	f7ff fcb7 	bl	8000d84 <delaymilliseconds>
				ov[ls17][j] = HAL_GPIO_ReadPin(LS17_J_OV_GPIO_Port, LS17_J_OV_Pin);
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	48ad      	ldr	r0, [pc, #692]	; (80016d0 <power_check+0x91c>)
 800141a:	f004 fa61 	bl	80058e0 <HAL_GPIO_ReadPin>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4bac      	ldr	r3, [pc, #688]	; (80016d4 <power_check+0x920>)
 8001424:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				uv[ls17][j] = HAL_GPIO_ReadPin(LS17_J_UV_GPIO_Port, LS17_J_UV_Pin);
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	48a9      	ldr	r0, [pc, #676]	; (80016d0 <power_check+0x91c>)
 800142c:	f004 fa58 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4ba8      	ldr	r3, [pc, #672]	; (80016d8 <power_check+0x924>)
 8001436:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				delaymilliseconds(100);
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	f7ff fca2 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ls17][j] == 1 && uv[ls17][j] == 1){
 8001440:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <power_check+0x920>)
 8001442:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001446:	2b01      	cmp	r3, #1
 8001448:	d109      	bne.n	800145e <power_check+0x6aa>
 800144a:	4ba3      	ldr	r3, [pc, #652]	; (80016d8 <power_check+0x924>)
 800144c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001450:	2b01      	cmp	r3, #1
 8001452:	d104      	bne.n	800145e <power_check+0x6aa>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f000 be4e 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][j] == 1 && uv[ls17][j] == 0){
 800145e:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <power_check+0x920>)
 8001460:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001464:	2b01      	cmp	r3, #1
 8001466:	d109      	bne.n	800147c <power_check+0x6c8>
 8001468:	4b9b      	ldr	r3, [pc, #620]	; (80016d8 <power_check+0x924>)
 800146a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800146e:	2b00      	cmp	r3, #0
 8001470:	d104      	bne.n	800147c <power_check+0x6c8>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8001472:	2302      	movs	r3, #2
 8001474:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	f000 be3f 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls17][j] == 0 && uv[ls17][j] == 0){
 800147c:	4b95      	ldr	r3, [pc, #596]	; (80016d4 <power_check+0x920>)
 800147e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <power_check+0x704>
 8001486:	4b94      	ldr	r3, [pc, #592]	; (80016d8 <power_check+0x924>)
 8001488:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <power_check+0x704>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001490:	2303      	movs	r3, #3
 8001492:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	f000 be30 	b.w	80020fa <power_check+0x1346>
				 }
				 break;
			 default:
				 break;
 800149a:	bf00      	nop
 800149c:	f000 be2d 	b.w	80020fa <power_check+0x1346>
				 break;
 80014a0:	bf00      	nop
 80014a2:	f000 be2a 	b.w	80020fa <power_check+0x1346>
				 break;
 80014a6:	bf00      	nop
 80014a8:	f000 be27 	b.w	80020fa <power_check+0x1346>
				 break;
 80014ac:	bf00      	nop
 80014ae:	f000 be24 	b.w	80020fa <power_check+0x1346>
				 break;
 80014b2:	bf00      	nop
 80014b4:	f000 be21 	b.w	80020fa <power_check+0x1346>
				 break;
 80014b8:	bf00      	nop
			 }
			break;
 80014ba:	f000 be1e 	b.w	80020fa <power_check+0x1346>
		case ls2:
			switch(pin){
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d15a      	bne.n	800157a <power_check+0x7c6>
			 case a:
				#ifdef UNIT_TEST
				 ov[ls2][a] = 1;
				 uv[ls2][a] = 1;
				#else
				ov[ls2][a] =  HAL_GPIO_ReadPin(LS2_A_OV_GPIO_Port, LS2_A_OV_Pin);
 80014c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c8:	4881      	ldr	r0, [pc, #516]	; (80016d0 <power_check+0x91c>)
 80014ca:	f004 fa09 	bl	80058e0 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <power_check+0x920>)
 80014d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				uv[ls2][a] = HAL_GPIO_ReadPin(LS2_A_UV_GPIO_Port, LS2_A_UV_Pin);
 80014d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014dc:	487f      	ldr	r0, [pc, #508]	; (80016dc <power_check+0x928>)
 80014de:	f004 f9ff 	bl	80058e0 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <power_check+0x924>)
 80014e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				delaymilliseconds(100);
 80014ec:	2064      	movs	r0, #100	; 0x64
 80014ee:	f7ff fc49 	bl	8000d84 <delaymilliseconds>
				ov[ls2][a] =  HAL_GPIO_ReadPin(LS2_A_OV_GPIO_Port, LS2_A_OV_Pin);
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	4876      	ldr	r0, [pc, #472]	; (80016d0 <power_check+0x91c>)
 80014f8:	f004 f9f2 	bl	80058e0 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <power_check+0x920>)
 8001502:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				uv[ls2][a] = HAL_GPIO_ReadPin(LS2_A_UV_GPIO_Port, LS2_A_UV_Pin);
 8001506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150a:	4874      	ldr	r0, [pc, #464]	; (80016dc <power_check+0x928>)
 800150c:	f004 f9e8 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <power_check+0x924>)
 8001516:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				delaymilliseconds(100);
 800151a:	2064      	movs	r0, #100	; 0x64
 800151c:	f7ff fc32 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ls2][a] == 1 && uv[ls2][a] == 1){
 8001520:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <power_check+0x920>)
 8001522:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001526:	2b01      	cmp	r3, #1
 8001528:	d109      	bne.n	800153e <power_check+0x78a>
 800152a:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <power_check+0x924>)
 800152c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001530:	2b01      	cmp	r3, #1
 8001532:	d104      	bne.n	800153e <power_check+0x78a>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f000 bdde 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls2][a] == 1 && uv[ls2][a] == 0){
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <power_check+0x920>)
 8001540:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001544:	2b01      	cmp	r3, #1
 8001546:	d109      	bne.n	800155c <power_check+0x7a8>
 8001548:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <power_check+0x924>)
 800154a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800154e:	2b00      	cmp	r3, #0
 8001550:	d104      	bne.n	800155c <power_check+0x7a8>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8001552:	2302      	movs	r3, #2
 8001554:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	f000 bdcf 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[ls2][a] == 0 && uv[ls2][a] == 0){
 800155c:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <power_check+0x920>)
 800155e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <power_check+0x7cc>
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <power_check+0x924>)
 8001568:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <power_check+0x7cc>
					// response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001570:	2303      	movs	r3, #3
 8001572:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f000 bdc0 	b.w	80020fa <power_check+0x1346>
				 }
				 break;
			 default:
				 break;
 800157a:	bf00      	nop
 800157c:	f000 bdbd 	b.w	80020fa <power_check+0x1346>
				 break;
 8001580:	bf00      	nop
			}
			break;
 8001582:	f000 bdba 	b.w	80020fa <power_check+0x1346>
		case ls16:
			switch(pin){
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	2b0b      	cmp	r3, #11
 800158a:	d002      	beq.n	8001592 <power_check+0x7de>
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d057      	beq.n	8001640 <power_check+0x88c>
					 status = OVER_VOLTAGE;
					 return status;
				 }
				 break;
			 default:
				 break;
 8001590:	e0bf      	b.n	8001712 <power_check+0x95e>
				ov[ls16][s] = HAL_GPIO_ReadPin(LS16_S_OV_GPIO_Port, LS16_S_OV_Pin);
 8001592:	2110      	movs	r1, #16
 8001594:	4852      	ldr	r0, [pc, #328]	; (80016e0 <power_check+0x92c>)
 8001596:	f004 f9a3 	bl	80058e0 <HAL_GPIO_ReadPin>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <power_check+0x920>)
 80015a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				uv[ls16][s] = HAL_GPIO_ReadPin(LS16_S_UV_GPIO_Port, LS16_S_UV_Pin);
 80015a4:	2120      	movs	r1, #32
 80015a6:	484e      	ldr	r0, [pc, #312]	; (80016e0 <power_check+0x92c>)
 80015a8:	f004 f99a 	bl	80058e0 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <power_check+0x924>)
 80015b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				delaymilliseconds(100);
 80015b6:	2064      	movs	r0, #100	; 0x64
 80015b8:	f7ff fbe4 	bl	8000d84 <delaymilliseconds>
				ov[ls16][s] = HAL_GPIO_ReadPin(LS16_S_OV_GPIO_Port, LS16_S_OV_Pin);
 80015bc:	2110      	movs	r1, #16
 80015be:	4848      	ldr	r0, [pc, #288]	; (80016e0 <power_check+0x92c>)
 80015c0:	f004 f98e 	bl	80058e0 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <power_check+0x920>)
 80015ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				uv[ls16][s] = HAL_GPIO_ReadPin(LS16_S_UV_GPIO_Port, LS16_S_UV_Pin);
 80015ce:	2120      	movs	r1, #32
 80015d0:	4843      	ldr	r0, [pc, #268]	; (80016e0 <power_check+0x92c>)
 80015d2:	f004 f985 	bl	80058e0 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <power_check+0x924>)
 80015dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				delaymilliseconds(100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f7ff fbcf 	bl	8000d84 <delaymilliseconds>
				 if (ov[ls16][s] == 1 && uv[ls16][s] == 1){
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <power_check+0x920>)
 80015e8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d109      	bne.n	8001604 <power_check+0x850>
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <power_check+0x924>)
 80015f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d104      	bne.n	8001604 <power_check+0x850>
					 status = UNDER_VOLTAGE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
					 return status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	f000 bd7b 	b.w	80020fa <power_check+0x1346>
				 else if (ov[ls16][s] == 1 && uv[ls16][s] == 0){
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <power_check+0x920>)
 8001606:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800160a:	2b01      	cmp	r3, #1
 800160c:	d109      	bne.n	8001622 <power_check+0x86e>
 800160e:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <power_check+0x924>)
 8001610:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001614:	2b00      	cmp	r3, #0
 8001616:	d104      	bne.n	8001622 <power_check+0x86e>
					 status = NORMAL;
 8001618:	2302      	movs	r3, #2
 800161a:	73fb      	strb	r3, [r7, #15]
					 return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f000 bd6c 	b.w	80020fa <power_check+0x1346>
				 else if (ov[ls16][s] == 0 && uv[ls16][s] == 0){
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <power_check+0x920>)
 8001624:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001628:	2b00      	cmp	r3, #0
 800162a:	d16e      	bne.n	800170a <power_check+0x956>
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <power_check+0x924>)
 800162e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001632:	2b00      	cmp	r3, #0
 8001634:	d169      	bne.n	800170a <power_check+0x956>
					 status = OVER_VOLTAGE;
 8001636:	2303      	movs	r3, #3
 8001638:	73fb      	strb	r3, [r7, #15]
					 return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f000 bd5d 	b.w	80020fa <power_check+0x1346>
				ov[ls16][t] = HAL_GPIO_ReadPin(LS16_T_OV_GPIO_Port, LS16_T_OV_Pin);
 8001640:	2108      	movs	r1, #8
 8001642:	4828      	ldr	r0, [pc, #160]	; (80016e4 <power_check+0x930>)
 8001644:	f004 f94c 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <power_check+0x920>)
 800164e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				 uv[ls16][t] = HAL_GPIO_ReadPin(LS16_T_UV_GPIO_Port, LS16_T_UV_Pin);
 8001652:	2101      	movs	r1, #1
 8001654:	4824      	ldr	r0, [pc, #144]	; (80016e8 <power_check+0x934>)
 8001656:	f004 f943 	bl	80058e0 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <power_check+0x924>)
 8001660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				 delaymilliseconds(100);
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	f7ff fb8d 	bl	8000d84 <delaymilliseconds>
				 ov[ls16][t] = HAL_GPIO_ReadPin(LS16_T_OV_GPIO_Port, LS16_T_OV_Pin);
 800166a:	2108      	movs	r1, #8
 800166c:	481d      	ldr	r0, [pc, #116]	; (80016e4 <power_check+0x930>)
 800166e:	f004 f937 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <power_check+0x920>)
 8001678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				 uv[ls16][t] = HAL_GPIO_ReadPin(LS16_T_UV_GPIO_Port, LS16_T_UV_Pin);
 800167c:	2101      	movs	r1, #1
 800167e:	481a      	ldr	r0, [pc, #104]	; (80016e8 <power_check+0x934>)
 8001680:	f004 f92e 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <power_check+0x924>)
 800168a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				 delaymilliseconds(100);
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f7ff fb78 	bl	8000d84 <delaymilliseconds>
				 if (ov[ls16][t] == 1 && uv[ls16][t] == 1){
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <power_check+0x920>)
 8001696:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800169a:	2b01      	cmp	r3, #1
 800169c:	d109      	bne.n	80016b2 <power_check+0x8fe>
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <power_check+0x924>)
 80016a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d104      	bne.n	80016b2 <power_check+0x8fe>
					 status = UNDER_VOLTAGE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
					 return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f000 bd24 	b.w	80020fa <power_check+0x1346>
				 else if (ov[ls16][t] == 1 && uv[ls16][t] == 0){
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <power_check+0x920>)
 80016b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d117      	bne.n	80016ec <power_check+0x938>
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <power_check+0x924>)
 80016be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d112      	bne.n	80016ec <power_check+0x938>
					 status = NORMAL;
 80016c6:	2302      	movs	r3, #2
 80016c8:	73fb      	strb	r3, [r7, #15]
					 return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	f000 bd15 	b.w	80020fa <power_check+0x1346>
 80016d0:	40022400 	.word	0x40022400
 80016d4:	200002f0 	.word	0x200002f0
 80016d8:	200003d4 	.word	0x200003d4
 80016dc:	40021400 	.word	0x40021400
 80016e0:	40021c00 	.word	0x40021c00
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
				 else if (ov[ls16][t] == 0 && uv[ls16][t] == 0){
 80016ec:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <power_check+0xbd4>)
 80016ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <power_check+0x95c>
 80016f6:	4ba5      	ldr	r3, [pc, #660]	; (800198c <power_check+0xbd8>)
 80016f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <power_check+0x95c>
					 status = OVER_VOLTAGE;
 8001700:	2303      	movs	r3, #3
 8001702:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	f000 bcf8 	b.w	80020fa <power_check+0x1346>
				 break;
 800170a:	bf00      	nop
 800170c:	f000 bcf5 	b.w	80020fa <power_check+0x1346>
				 break;
 8001710:	bf00      	nop
			}
			break;
 8001712:	f000 bcf2 	b.w	80020fa <power_check+0x1346>
		case ls21:
			switch(pin){
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d001      	beq.n	8001720 <power_check+0x96c>
 800171c:	2b04      	cmp	r3, #4
			case a:
				break;
			case d:
				break;
 800171e:	e000      	b.n	8001722 <power_check+0x96e>
				break;
 8001720:	bf00      	nop
			default:
				break;
			}
			break;
 8001722:	f000 bcea 	b.w	80020fa <power_check+0x1346>
		case ls22:
			switch(pin){
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d001      	beq.n	8001730 <power_check+0x97c>
 800172c:	2b04      	cmp	r3, #4
			case a:
				break;
			case d:
				break;
 800172e:	e000      	b.n	8001732 <power_check+0x97e>
				break;
 8001730:	bf00      	nop
			default:
				break;
			}
			break;
 8001732:	f000 bce2 	b.w	80020fa <power_check+0x1346>
		case lp23:
			switch(pin){
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	2b08      	cmp	r3, #8
			case h:
				break;
			default:
				break;
 800173a:	bf00      	nop
			}
			break;
 800173c:	f000 bcdd 	b.w	80020fa <power_check+0x1346>
		case hs1a:
			switch(pin){
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	3b01      	subs	r3, #1
 8001744:	2b09      	cmp	r3, #9
 8001746:	f200 81d1 	bhi.w	8001aec <power_check+0xd38>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <power_check+0x99c>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001779 	.word	0x08001779
 8001754:	08001aed 	.word	0x08001aed
 8001758:	08001aed 	.word	0x08001aed
 800175c:	08001aed 	.word	0x08001aed
 8001760:	08001aed 	.word	0x08001aed
 8001764:	0800182b 	.word	0x0800182b
 8001768:	080018dd 	.word	0x080018dd
 800176c:	08001995 	.word	0x08001995
 8001770:	08001aed 	.word	0x08001aed
 8001774:	08001a3d 	.word	0x08001a3d
			case a:
				#ifdef UNIT_TEST
				 ov[hs1a][a] = 1;
				 uv[hs1a][a] = 1;
				#else
				ov[hs1a][a] =  HAL_GPIO_ReadPin(HS1A_A_OV_GPIO_Port, HS1A_A_OV_Pin);
 8001778:	2101      	movs	r1, #1
 800177a:	4885      	ldr	r0, [pc, #532]	; (8001990 <power_check+0xbdc>)
 800177c:	f004 f8b0 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b80      	ldr	r3, [pc, #512]	; (8001988 <power_check+0xbd4>)
 8001786:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				uv[hs1a][a] = HAL_GPIO_ReadPin(HS1A_A_UV_GPIO_Port, HS1A_A_UV_Pin);
 800178a:	2102      	movs	r1, #2
 800178c:	4880      	ldr	r0, [pc, #512]	; (8001990 <power_check+0xbdc>)
 800178e:	f004 f8a7 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b7d      	ldr	r3, [pc, #500]	; (800198c <power_check+0xbd8>)
 8001798:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				delaymilliseconds(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f7ff faf1 	bl	8000d84 <delaymilliseconds>
				ov[hs1a][a] =  HAL_GPIO_ReadPin(HS1A_A_OV_GPIO_Port, HS1A_A_OV_Pin);
 80017a2:	2101      	movs	r1, #1
 80017a4:	487a      	ldr	r0, [pc, #488]	; (8001990 <power_check+0xbdc>)
 80017a6:	f004 f89b 	bl	80058e0 <HAL_GPIO_ReadPin>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <power_check+0xbd4>)
 80017b0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				uv[hs1a][a] = HAL_GPIO_ReadPin(HS1A_A_UV_GPIO_Port, HS1A_A_UV_Pin);
 80017b4:	2102      	movs	r1, #2
 80017b6:	4876      	ldr	r0, [pc, #472]	; (8001990 <power_check+0xbdc>)
 80017b8:	f004 f892 	bl	80058e0 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b72      	ldr	r3, [pc, #456]	; (800198c <power_check+0xbd8>)
 80017c2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
				delaymilliseconds(100);
 80017c6:	2064      	movs	r0, #100	; 0x64
 80017c8:	f7ff fadc 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[hs1a][a] == 1 && uv[hs1a][a] == 1){
 80017cc:	4b6e      	ldr	r3, [pc, #440]	; (8001988 <power_check+0xbd4>)
 80017ce:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <power_check+0xa36>
 80017d6:	4b6d      	ldr	r3, [pc, #436]	; (800198c <power_check+0xbd8>)
 80017d8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <power_check+0xa36>
					// response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
					 return status;
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	f000 bc88 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][a] == 1 && uv[hs1a][a] == 0){
 80017ea:	4b67      	ldr	r3, [pc, #412]	; (8001988 <power_check+0xbd4>)
 80017ec:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d109      	bne.n	8001808 <power_check+0xa54>
 80017f4:	4b65      	ldr	r3, [pc, #404]	; (800198c <power_check+0xbd8>)
 80017f6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d104      	bne.n	8001808 <power_check+0xa54>
					// response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 80017fe:	2302      	movs	r3, #2
 8001800:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f000 bc79 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][a] == 0 && uv[hs1a][a] == 0){
 8001808:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <power_check+0xbd4>)
 800180a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 816e 	bne.w	8001af0 <power_check+0xd3c>
 8001814:	4b5d      	ldr	r3, [pc, #372]	; (800198c <power_check+0xbd8>)
 8001816:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 8168 	bne.w	8001af0 <power_check+0xd3c>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001820:	2303      	movs	r3, #3
 8001822:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	f000 bc68 	b.w	80020fa <power_check+0x1346>
			case f:
				#ifdef UNIT_TEST
				 ov[hs1a][f] = 1;
				 uv[hs1a][f] = 1;
				#else
				ov[hs1a][f] =  HAL_GPIO_ReadPin(HS1A_F_OV_GPIO_Port, HS1A_F_OV_Pin);
 800182a:	2104      	movs	r1, #4
 800182c:	4858      	ldr	r0, [pc, #352]	; (8001990 <power_check+0xbdc>)
 800182e:	f004 f857 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b54      	ldr	r3, [pc, #336]	; (8001988 <power_check+0xbd4>)
 8001838:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				uv[hs1a][f] = HAL_GPIO_ReadPin(HS1A_F_UV_GPIO_Port, HS1A_F_UV_Pin);
 800183c:	2108      	movs	r1, #8
 800183e:	4854      	ldr	r0, [pc, #336]	; (8001990 <power_check+0xbdc>)
 8001840:	f004 f84e 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <power_check+0xbd8>)
 800184a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				delaymilliseconds(100);
 800184e:	2064      	movs	r0, #100	; 0x64
 8001850:	f7ff fa98 	bl	8000d84 <delaymilliseconds>
				ov[hs1a][f] =  HAL_GPIO_ReadPin(HS1A_F_OV_GPIO_Port, HS1A_F_OV_Pin);
 8001854:	2104      	movs	r1, #4
 8001856:	484e      	ldr	r0, [pc, #312]	; (8001990 <power_check+0xbdc>)
 8001858:	f004 f842 	bl	80058e0 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	4b49      	ldr	r3, [pc, #292]	; (8001988 <power_check+0xbd4>)
 8001862:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				uv[hs1a][f] = HAL_GPIO_ReadPin(HS1A_F_UV_GPIO_Port, HS1A_F_UV_Pin);
 8001866:	2108      	movs	r1, #8
 8001868:	4849      	ldr	r0, [pc, #292]	; (8001990 <power_check+0xbdc>)
 800186a:	f004 f839 	bl	80058e0 <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b46      	ldr	r3, [pc, #280]	; (800198c <power_check+0xbd8>)
 8001874:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				delaymilliseconds(100);
 8001878:	2064      	movs	r0, #100	; 0x64
 800187a:	f7ff fa83 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[hs1a][f] == 1 && uv[hs1a][f] == 1){
 800187e:	4b42      	ldr	r3, [pc, #264]	; (8001988 <power_check+0xbd4>)
 8001880:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001884:	2b01      	cmp	r3, #1
 8001886:	d109      	bne.n	800189c <power_check+0xae8>
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <power_check+0xbd8>)
 800188a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800188e:	2b01      	cmp	r3, #1
 8001890:	d104      	bne.n	800189c <power_check+0xae8>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	f000 bc2f 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][f] == 1 && uv[hs1a][f] == 0){
 800189c:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <power_check+0xbd4>)
 800189e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d109      	bne.n	80018ba <power_check+0xb06>
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <power_check+0xbd8>)
 80018a8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <power_check+0xb06>
					// response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 80018b0:	2302      	movs	r3, #2
 80018b2:	73fb      	strb	r3, [r7, #15]
					 return status;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	f000 bc20 	b.w	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][f] == 0 && uv[hs1a][f] == 0){
 80018ba:	4b33      	ldr	r3, [pc, #204]	; (8001988 <power_check+0xbd4>)
 80018bc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 8117 	bne.w	8001af4 <power_check+0xd40>
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <power_check+0xbd8>)
 80018c8:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 8111 	bne.w	8001af4 <power_check+0xd40>
					// response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 80018d2:	2303      	movs	r3, #3
 80018d4:	73fb      	strb	r3, [r7, #15]
					 return status;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	f000 bc0f 	b.w	80020fa <power_check+0x1346>
			case g:
				#ifdef UNIT_TEST
				 ov[hs1a][g] = 1;
				 uv[hs1a][g] = 1;
				#else
				ov[hs1a][g] =  HAL_GPIO_ReadPin(HS1A_G_OV_GPIO_Port, HS1A_G_OV_Pin);
 80018dc:	2110      	movs	r1, #16
 80018de:	482c      	ldr	r0, [pc, #176]	; (8001990 <power_check+0xbdc>)
 80018e0:	f003 fffe 	bl	80058e0 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <power_check+0xbd4>)
 80018ea:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				uv[hs1a][g] = HAL_GPIO_ReadPin(HS1A_G_UV_GPIO_Port, HS1A_G_UV_Pin);
 80018ee:	2120      	movs	r1, #32
 80018f0:	4827      	ldr	r0, [pc, #156]	; (8001990 <power_check+0xbdc>)
 80018f2:	f003 fff5 	bl	80058e0 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <power_check+0xbd8>)
 80018fc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				delaymilliseconds(100);
 8001900:	2064      	movs	r0, #100	; 0x64
 8001902:	f7ff fa3f 	bl	8000d84 <delaymilliseconds>
				ov[hs1a][g] =  HAL_GPIO_ReadPin(HS1A_G_OV_GPIO_Port, HS1A_G_OV_Pin);
 8001906:	2110      	movs	r1, #16
 8001908:	4821      	ldr	r0, [pc, #132]	; (8001990 <power_check+0xbdc>)
 800190a:	f003 ffe9 	bl	80058e0 <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <power_check+0xbd4>)
 8001914:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				uv[hs1a][g] = HAL_GPIO_ReadPin(HS1A_G_UV_GPIO_Port, HS1A_G_UV_Pin);
 8001918:	2120      	movs	r1, #32
 800191a:	481d      	ldr	r0, [pc, #116]	; (8001990 <power_check+0xbdc>)
 800191c:	f003 ffe0 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <power_check+0xbd8>)
 8001926:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				delaymilliseconds(100);
 800192a:	2064      	movs	r0, #100	; 0x64
 800192c:	f7ff fa2a 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[hs1a][g] == 1 && uv[hs1a][g] == 1){
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <power_check+0xbd4>)
 8001932:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <power_check+0xb98>
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <power_check+0xbd8>)
 800193c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001940:	2b01      	cmp	r3, #1
 8001942:	d103      	bne.n	800194c <power_check+0xb98>
					// response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001944:	2301      	movs	r3, #1
 8001946:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	e3d6      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][g] == 1 && uv[hs1a][g] == 0){
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <power_check+0xbd4>)
 800194e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <power_check+0xbb4>
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <power_check+0xbd8>)
 8001958:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <power_check+0xbb4>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8001960:	2302      	movs	r3, #2
 8001962:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	e3c8      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][g] == 0 && uv[hs1a][g] == 0){
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <power_check+0xbd4>)
 800196a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 80c2 	bne.w	8001af8 <power_check+0xd44>
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <power_check+0xbd8>)
 8001976:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 80bc 	bne.w	8001af8 <power_check+0xd44>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001980:	2303      	movs	r3, #3
 8001982:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	e3b8      	b.n	80020fa <power_check+0x1346>
 8001988:	200002f0 	.word	0x200002f0
 800198c:	200003d4 	.word	0x200003d4
 8001990:	40022000 	.word	0x40022000
			case h:
				#ifdef UNIT_TEST
				 ov[hs1a][h] = 1;
				 uv[hs1a][h] = 1;
				#else
				ov[hs1a][h] =  HAL_GPIO_ReadPin(HS1A_H_OV_GPIO_Port, HS1A_H_OV_Pin);
 8001994:	2140      	movs	r1, #64	; 0x40
 8001996:	48b2      	ldr	r0, [pc, #712]	; (8001c60 <power_check+0xeac>)
 8001998:	f003 ffa2 	bl	80058e0 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	4bb0      	ldr	r3, [pc, #704]	; (8001c64 <power_check+0xeb0>)
 80019a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
				uv[hs1a][h] = HAL_GPIO_ReadPin(HS1A_H_UV_GPIO_Port, HS1A_H_UV_Pin);
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	48ad      	ldr	r0, [pc, #692]	; (8001c60 <power_check+0xeac>)
 80019aa:	f003 ff99 	bl	80058e0 <HAL_GPIO_ReadPin>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4bad      	ldr	r3, [pc, #692]	; (8001c68 <power_check+0xeb4>)
 80019b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
				delaymilliseconds(100);
 80019b8:	2064      	movs	r0, #100	; 0x64
 80019ba:	f7ff f9e3 	bl	8000d84 <delaymilliseconds>
				ov[hs1a][h] =  HAL_GPIO_ReadPin(HS1A_H_OV_GPIO_Port, HS1A_H_OV_Pin);
 80019be:	2140      	movs	r1, #64	; 0x40
 80019c0:	48a7      	ldr	r0, [pc, #668]	; (8001c60 <power_check+0xeac>)
 80019c2:	f003 ff8d 	bl	80058e0 <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4ba6      	ldr	r3, [pc, #664]	; (8001c64 <power_check+0xeb0>)
 80019cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
				uv[hs1a][h] = HAL_GPIO_ReadPin(HS1A_H_UV_GPIO_Port, HS1A_H_UV_Pin);
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	48a3      	ldr	r0, [pc, #652]	; (8001c60 <power_check+0xeac>)
 80019d4:	f003 ff84 	bl	80058e0 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4ba2      	ldr	r3, [pc, #648]	; (8001c68 <power_check+0xeb4>)
 80019de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
				delaymilliseconds(100);
 80019e2:	2064      	movs	r0, #100	; 0x64
 80019e4:	f7ff f9ce 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[hs1a][h] == 1 && uv[hs1a][h] == 1){
 80019e8:	4b9e      	ldr	r3, [pc, #632]	; (8001c64 <power_check+0xeb0>)
 80019ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <power_check+0xc50>
 80019f2:	4b9d      	ldr	r3, [pc, #628]	; (8001c68 <power_check+0xeb4>)
 80019f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d103      	bne.n	8001a04 <power_check+0xc50>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	e37a      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][h] == 1 && uv[hs1a][h] == 0){
 8001a04:	4b97      	ldr	r3, [pc, #604]	; (8001c64 <power_check+0xeb0>)
 8001a06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <power_check+0xc6c>
 8001a0e:	4b96      	ldr	r3, [pc, #600]	; (8001c68 <power_check+0xeb4>)
 8001a10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <power_check+0xc6c>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	e36c      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][h] == 0 && uv[hs1a][h] == 0){
 8001a20:	4b90      	ldr	r3, [pc, #576]	; (8001c64 <power_check+0xeb0>)
 8001a22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d168      	bne.n	8001afc <power_check+0xd48>
 8001a2a:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <power_check+0xeb4>)
 8001a2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d163      	bne.n	8001afc <power_check+0xd48>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001a34:	2303      	movs	r3, #3
 8001a36:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	e35e      	b.n	80020fa <power_check+0x1346>
			case k:
				#ifdef UNIT_TEST
				 ov[hs1a][k] = 1;
				 uv[hs1a][k] = 1;
				#else
				ov[hs1a][k] =  HAL_GPIO_ReadPin(HS1A_K_OV_GPIO_Port, HS1A_K_OV_Pin);
 8001a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a40:	4887      	ldr	r0, [pc, #540]	; (8001c60 <power_check+0xeac>)
 8001a42:	f003 ff4d 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b86      	ldr	r3, [pc, #536]	; (8001c64 <power_check+0xeb0>)
 8001a4c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				uv[hs1a][k] = HAL_GPIO_ReadPin(HS1A_K_UV_GPIO_Port, HS1A_K_UV_Pin);
 8001a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a54:	4882      	ldr	r0, [pc, #520]	; (8001c60 <power_check+0xeac>)
 8001a56:	f003 ff43 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <power_check+0xeb4>)
 8001a60:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				delaymilliseconds(100);
 8001a64:	2064      	movs	r0, #100	; 0x64
 8001a66:	f7ff f98d 	bl	8000d84 <delaymilliseconds>
				ov[hs1a][k] =  HAL_GPIO_ReadPin(HS1A_K_OV_GPIO_Port, HS1A_K_OV_Pin);
 8001a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a6e:	487c      	ldr	r0, [pc, #496]	; (8001c60 <power_check+0xeac>)
 8001a70:	f003 ff36 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b7a      	ldr	r3, [pc, #488]	; (8001c64 <power_check+0xeb0>)
 8001a7a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				uv[hs1a][k] = HAL_GPIO_ReadPin(HS1A_K_UV_GPIO_Port, HS1A_K_UV_Pin);
 8001a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a82:	4877      	ldr	r0, [pc, #476]	; (8001c60 <power_check+0xeac>)
 8001a84:	f003 ff2c 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b76      	ldr	r3, [pc, #472]	; (8001c68 <power_check+0xeb4>)
 8001a8e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				delaymilliseconds(100);
 8001a92:	2064      	movs	r0, #100	; 0x64
 8001a94:	f7ff f976 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[hs1a][k] == 1 && uv[hs1a][k] == 1){
 8001a98:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <power_check+0xeb0>)
 8001a9a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <power_check+0xd00>
 8001aa2:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <power_check+0xeb4>)
 8001aa4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d103      	bne.n	8001ab4 <power_check+0xd00>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	e322      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][k] == 1 && uv[hs1a][k] == 0){
 8001ab4:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <power_check+0xeb0>)
 8001ab6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <power_check+0xd1c>
 8001abe:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <power_check+0xeb4>)
 8001ac0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <power_check+0xd1c>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	e314      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[hs1a][k] == 0 && uv[hs1a][k] == 0){
 8001ad0:	4b64      	ldr	r3, [pc, #400]	; (8001c64 <power_check+0xeb0>)
 8001ad2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d112      	bne.n	8001b00 <power_check+0xd4c>
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <power_check+0xeb4>)
 8001adc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10d      	bne.n	8001b00 <power_check+0xd4c>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	e306      	b.n	80020fa <power_check+0x1346>
				 }
				 break;
			default:
				break;
 8001aec:	bf00      	nop
 8001aee:	e304      	b.n	80020fa <power_check+0x1346>
				 break;
 8001af0:	bf00      	nop
 8001af2:	e302      	b.n	80020fa <power_check+0x1346>
				 break;
 8001af4:	bf00      	nop
 8001af6:	e300      	b.n	80020fa <power_check+0x1346>
				 break;
 8001af8:	bf00      	nop
 8001afa:	e2fe      	b.n	80020fa <power_check+0x1346>
				 break;
 8001afc:	bf00      	nop
 8001afe:	e2fc      	b.n	80020fa <power_check+0x1346>
				 break;
 8001b00:	bf00      	nop
			}
			break;
 8001b02:	e2fa      	b.n	80020fa <power_check+0x1346>
			case es15:
				switch (pin){
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d155      	bne.n	8001bb6 <power_check+0xe02>
				case a:
				#ifdef UNIT_TEST
				 ov[es15][a] = 1;
				 uv[es15][a] = 1;
				#else
					ov[es15][a] =  HAL_GPIO_ReadPin(ES15_A_OV_GPIO_Port, ES15_A_OV_Pin);
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4857      	ldr	r0, [pc, #348]	; (8001c6c <power_check+0xeb8>)
 8001b0e:	f003 fee7 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <power_check+0xeb0>)
 8001b18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					uv[es15][a] = HAL_GPIO_ReadPin(ES15_A_UV_GPIO_Port, ES15_A_UV_Pin);
 8001b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b20:	4852      	ldr	r0, [pc, #328]	; (8001c6c <power_check+0xeb8>)
 8001b22:	f003 fedd 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <power_check+0xeb4>)
 8001b2c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					delaymilliseconds(100);
 8001b30:	2064      	movs	r0, #100	; 0x64
 8001b32:	f7ff f927 	bl	8000d84 <delaymilliseconds>
					ov[es15][a] =  HAL_GPIO_ReadPin(ES15_A_OV_GPIO_Port, ES15_A_OV_Pin);
 8001b36:	2102      	movs	r1, #2
 8001b38:	484c      	ldr	r0, [pc, #304]	; (8001c6c <power_check+0xeb8>)
 8001b3a:	f003 fed1 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <power_check+0xeb0>)
 8001b44:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					uv[es15][a] = HAL_GPIO_ReadPin(ES15_A_UV_GPIO_Port, ES15_A_UV_Pin);
 8001b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4c:	4847      	ldr	r0, [pc, #284]	; (8001c6c <power_check+0xeb8>)
 8001b4e:	f003 fec7 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <power_check+0xeb4>)
 8001b58:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
					delaymilliseconds(100);
 8001b5c:	2064      	movs	r0, #100	; 0x64
 8001b5e:	f7ff f911 	bl	8000d84 <delaymilliseconds>
				#endif
					 if (ov[es15][a] == 1 && uv[es15][a] == 1){
 8001b62:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <power_check+0xeb0>)
 8001b64:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <power_check+0xdca>
 8001b6c:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <power_check+0xeb4>)
 8001b6e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d103      	bne.n	8001b7e <power_check+0xdca>
						// response_buffer[0] = 0x01;//under voltage <26
						 status = UNDER_VOLTAGE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
						 return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	e2bd      	b.n	80020fa <power_check+0x1346>
					 }
					 else if (ov[es15][a] == 1 && uv[es15][a] == 0){
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <power_check+0xeb0>)
 8001b80:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <power_check+0xde6>
 8001b88:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <power_check+0xeb4>)
 8001b8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <power_check+0xde6>
						 //response_buffer[0] = 0x02;//Proper voltage
						 status = NORMAL;
 8001b92:	2302      	movs	r3, #2
 8001b94:	73fb      	strb	r3, [r7, #15]
						 return status;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	e2af      	b.n	80020fa <power_check+0x1346>
					 }
					 else if (ov[es15][a] == 0 && uv[es15][a] == 0){
 8001b9a:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <power_check+0xeb0>)
 8001b9c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <power_check+0xe06>
 8001ba4:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <power_check+0xeb4>)
 8001ba6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <power_check+0xe06>
						 //response_buffer[0] = 0x03;//Over voltage > 33
						 status = OVER_VOLTAGE;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	73fb      	strb	r3, [r7, #15]
						 return status;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	e2a1      	b.n	80020fa <power_check+0x1346>
					 }
					 break;
				 default:
					 break;
 8001bb6:	bf00      	nop
 8001bb8:	e29f      	b.n	80020fa <power_check+0x1346>
					 break;
 8001bba:	bf00      	nop
				}
				break;
 8001bbc:	e29d      	b.n	80020fa <power_check+0x1346>
		case sqb1:
			switch(pin){
 8001bbe:	79bb      	ldrb	r3, [r7, #6]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d002      	beq.n	8001bca <power_check+0xe16>
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d063      	beq.n	8001c90 <power_check+0xedc>
					 status = OVER_VOLTAGE;
					 return status;
				 }
				 break;
			default:
				break;
 8001bc8:	e0bd      	b.n	8001d46 <power_check+0xf92>
				ov[sqb1][a] =  HAL_GPIO_ReadPin(SQB1_A_OV_GPIO_Port, SQB1_A_OV_Pin);
 8001bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bce:	4828      	ldr	r0, [pc, #160]	; (8001c70 <power_check+0xebc>)
 8001bd0:	f003 fe86 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <power_check+0xeb0>)
 8001bda:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				uv[sqb1][a] = HAL_GPIO_ReadPin(SQB1_A_UV_GPIO_Port, SQB1_A_UV_Pin);
 8001bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be2:	4823      	ldr	r0, [pc, #140]	; (8001c70 <power_check+0xebc>)
 8001be4:	f003 fe7c 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <power_check+0xeb4>)
 8001bee:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				delaymilliseconds(100);
 8001bf2:	2064      	movs	r0, #100	; 0x64
 8001bf4:	f7ff f8c6 	bl	8000d84 <delaymilliseconds>
				ov[sqb1][a] =  HAL_GPIO_ReadPin(SQB1_A_OV_GPIO_Port, SQB1_A_OV_Pin);
 8001bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfc:	481c      	ldr	r0, [pc, #112]	; (8001c70 <power_check+0xebc>)
 8001bfe:	f003 fe6f 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <power_check+0xeb0>)
 8001c08:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				uv[sqb1][a] = HAL_GPIO_ReadPin(SQB1_A_UV_GPIO_Port, SQB1_A_UV_Pin);
 8001c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c10:	4817      	ldr	r0, [pc, #92]	; (8001c70 <power_check+0xebc>)
 8001c12:	f003 fe65 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <power_check+0xeb4>)
 8001c1c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				delaymilliseconds(100);
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	f7ff f8af 	bl	8000d84 <delaymilliseconds>
				 if (ov[sqb1][a] == 1 && uv[sqb1][a] == 1){
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <power_check+0xeb0>)
 8001c28:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d108      	bne.n	8001c42 <power_check+0xe8e>
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <power_check+0xeb4>)
 8001c32:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d103      	bne.n	8001c42 <power_check+0xe8e>
					 status = UNDER_VOLTAGE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	e25b      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb1][a] == 1 && uv[sqb1][a] == 0){
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <power_check+0xeb0>)
 8001c44:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d113      	bne.n	8001c74 <power_check+0xec0>
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <power_check+0xeb4>)
 8001c4e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10e      	bne.n	8001c74 <power_check+0xec0>
					 status = NORMAL;
 8001c56:	2302      	movs	r3, #2
 8001c58:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	e24d      	b.n	80020fa <power_check+0x1346>
 8001c5e:	bf00      	nop
 8001c60:	40022000 	.word	0x40022000
 8001c64:	200002f0 	.word	0x200002f0
 8001c68:	200003d4 	.word	0x200003d4
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40021c00 	.word	0x40021c00
				 else if (ov[sqb1][a] == 0 && uv[sqb1][a] == 0){
 8001c74:	4bb6      	ldr	r3, [pc, #728]	; (8001f50 <power_check+0x119c>)
 8001c76:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d160      	bne.n	8001d40 <power_check+0xf8c>
 8001c7e:	4bb5      	ldr	r3, [pc, #724]	; (8001f54 <power_check+0x11a0>)
 8001c80:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d15b      	bne.n	8001d40 <power_check+0xf8c>
					 status = OVER_VOLTAGE;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	e234      	b.n	80020fa <power_check+0x1346>
				ov[sqb1][b] =  HAL_GPIO_ReadPin(SQB1_B_OV_GPIO_Port, SQB1_B_OV_Pin);
 8001c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c94:	48b0      	ldr	r0, [pc, #704]	; (8001f58 <power_check+0x11a4>)
 8001c96:	f003 fe23 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4bac      	ldr	r3, [pc, #688]	; (8001f50 <power_check+0x119c>)
 8001ca0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				uv[sqb1][b] = HAL_GPIO_ReadPin(SQB1_B_OV_GPIO_Port, SQB1_B_UV_Pin);
 8001ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca8:	48ab      	ldr	r0, [pc, #684]	; (8001f58 <power_check+0x11a4>)
 8001caa:	f003 fe19 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4ba8      	ldr	r3, [pc, #672]	; (8001f54 <power_check+0x11a0>)
 8001cb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				delaymilliseconds(100);
 8001cb8:	2064      	movs	r0, #100	; 0x64
 8001cba:	f7ff f863 	bl	8000d84 <delaymilliseconds>
				ov[sqb1][b] =  HAL_GPIO_ReadPin(SQB1_B_OV_GPIO_Port, SQB1_B_OV_Pin);
 8001cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc2:	48a5      	ldr	r0, [pc, #660]	; (8001f58 <power_check+0x11a4>)
 8001cc4:	f003 fe0c 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4ba0      	ldr	r3, [pc, #640]	; (8001f50 <power_check+0x119c>)
 8001cce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				uv[sqb1][b] = HAL_GPIO_ReadPin(SQB1_B_OV_GPIO_Port, SQB1_B_UV_Pin);
 8001cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd6:	48a0      	ldr	r0, [pc, #640]	; (8001f58 <power_check+0x11a4>)
 8001cd8:	f003 fe02 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b9c      	ldr	r3, [pc, #624]	; (8001f54 <power_check+0x11a0>)
 8001ce2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
				delaymilliseconds(100);
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f7ff f84c 	bl	8000d84 <delaymilliseconds>
				 if (ov[sqb1][b] == 1 && uv[sqb1][b] == 1){
 8001cec:	4b98      	ldr	r3, [pc, #608]	; (8001f50 <power_check+0x119c>)
 8001cee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <power_check+0xf54>
 8001cf6:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <power_check+0x11a0>)
 8001cf8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d103      	bne.n	8001d08 <power_check+0xf54>
					 status = UNDER_VOLTAGE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	e1f8      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb1][b] == 1 && uv[sqb1][b] == 0){
 8001d08:	4b91      	ldr	r3, [pc, #580]	; (8001f50 <power_check+0x119c>)
 8001d0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <power_check+0xf70>
 8001d12:	4b90      	ldr	r3, [pc, #576]	; (8001f54 <power_check+0x11a0>)
 8001d14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <power_check+0xf70>
					 status = NORMAL;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	e1ea      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb1][b] == 0 && uv[sqb1][b] == 0){
 8001d24:	4b8a      	ldr	r3, [pc, #552]	; (8001f50 <power_check+0x119c>)
 8001d26:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <power_check+0xf90>
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <power_check+0x11a0>)
 8001d30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <power_check+0xf90>
					 status = OVER_VOLTAGE;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	e1dc      	b.n	80020fa <power_check+0x1346>
				 break;
 8001d40:	bf00      	nop
 8001d42:	e1da      	b.n	80020fa <power_check+0x1346>
				 break;
 8001d44:	bf00      	nop
			}
			break;
 8001d46:	e1d8      	b.n	80020fa <power_check+0x1346>
		case sqb2:
			switch(pin){
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d002      	beq.n	8001d54 <power_check+0xfa0>
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d058      	beq.n	8001e04 <power_check+0x1050>
					 status = OVER_VOLTAGE;
					 return status;
				 }
				 break;
			default:
				break;
 8001d52:	e0b0      	b.n	8001eb6 <power_check+0x1102>
				ov[sqb2][a] =  HAL_GPIO_ReadPin(SQB2_A_OV_GPIO_Port, SQB2_A_OV_Pin);;
 8001d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d58:	4880      	ldr	r0, [pc, #512]	; (8001f5c <power_check+0x11a8>)
 8001d5a:	f003 fdc1 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <power_check+0x119c>)
 8001d64:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				uv[sqb2][a] = HAL_GPIO_ReadPin(SQB2_A_UV_GPIO_Port, SQB2_A_UV_Pin);
 8001d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6c:	487b      	ldr	r0, [pc, #492]	; (8001f5c <power_check+0x11a8>)
 8001d6e:	f003 fdb7 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <power_check+0x11a0>)
 8001d78:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				delaymilliseconds(100);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f7ff f801 	bl	8000d84 <delaymilliseconds>
				ov[sqb2][a] =  HAL_GPIO_ReadPin(SQB2_A_OV_GPIO_Port, SQB2_A_OV_Pin);
 8001d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d86:	4875      	ldr	r0, [pc, #468]	; (8001f5c <power_check+0x11a8>)
 8001d88:	f003 fdaa 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <power_check+0x119c>)
 8001d92:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				uv[sqb2][a] = HAL_GPIO_ReadPin(SQB2_A_UV_GPIO_Port, SQB2_A_UV_Pin);
 8001d96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d9a:	4870      	ldr	r0, [pc, #448]	; (8001f5c <power_check+0x11a8>)
 8001d9c:	f003 fda0 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <power_check+0x11a0>)
 8001da6:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
				delaymilliseconds(100);
 8001daa:	2064      	movs	r0, #100	; 0x64
 8001dac:	f7fe ffea 	bl	8000d84 <delaymilliseconds>
				 if (ov[sqb2][a] == 1 && uv[sqb2][a] == 1){
 8001db0:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <power_check+0x119c>)
 8001db2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <power_check+0x1018>
 8001dba:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <power_check+0x11a0>)
 8001dbc:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d103      	bne.n	8001dcc <power_check+0x1018>
					 status = UNDER_VOLTAGE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	e196      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb2][a] == 1 && uv[sqb2][a] == 0){
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <power_check+0x119c>)
 8001dce:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <power_check+0x1034>
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <power_check+0x11a0>)
 8001dd8:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <power_check+0x1034>
					 status = NORMAL;
 8001de0:	2302      	movs	r3, #2
 8001de2:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	e188      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb2][a] == 0 && uv[sqb2][a] == 0){
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <power_check+0x119c>)
 8001dea:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d15e      	bne.n	8001eb0 <power_check+0x10fc>
 8001df2:	4b58      	ldr	r3, [pc, #352]	; (8001f54 <power_check+0x11a0>)
 8001df4:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d159      	bne.n	8001eb0 <power_check+0x10fc>
					 status = OVER_VOLTAGE;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	e17a      	b.n	80020fa <power_check+0x1346>
				ov[sqb2][b] =  HAL_GPIO_ReadPin(SQB2_B_OV_GPIO_Port, SQB2_B_OV_Pin);
 8001e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e08:	4854      	ldr	r0, [pc, #336]	; (8001f5c <power_check+0x11a8>)
 8001e0a:	f003 fd69 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <power_check+0x119c>)
 8001e14:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				uv[sqb2][b] = HAL_GPIO_ReadPin(SQB2_B_OV_GPIO_Port, SQB2_B_UV_Pin);
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4850      	ldr	r0, [pc, #320]	; (8001f5c <power_check+0x11a8>)
 8001e1c:	f003 fd60 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <power_check+0x11a0>)
 8001e26:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				delaymilliseconds(100);
 8001e2a:	2064      	movs	r0, #100	; 0x64
 8001e2c:	f7fe ffaa 	bl	8000d84 <delaymilliseconds>
				ov[sqb2][b] =  HAL_GPIO_ReadPin(SQB2_B_OV_GPIO_Port, SQB2_B_OV_Pin);
 8001e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e34:	4849      	ldr	r0, [pc, #292]	; (8001f5c <power_check+0x11a8>)
 8001e36:	f003 fd53 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <power_check+0x119c>)
 8001e40:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				uv[sqb2][b] = HAL_GPIO_ReadPin(SQB2_B_OV_GPIO_Port, SQB2_B_UV_Pin);
 8001e44:	2104      	movs	r1, #4
 8001e46:	4845      	ldr	r0, [pc, #276]	; (8001f5c <power_check+0x11a8>)
 8001e48:	f003 fd4a 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <power_check+0x11a0>)
 8001e52:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				delaymilliseconds(100);
 8001e56:	2064      	movs	r0, #100	; 0x64
 8001e58:	f7fe ff94 	bl	8000d84 <delaymilliseconds>
				 if (ov[sqb2][b] == 1 && uv[sqb2][b] == 1){
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <power_check+0x119c>)
 8001e5e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <power_check+0x10c4>
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <power_check+0x11a0>)
 8001e68:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d103      	bne.n	8001e78 <power_check+0x10c4>
					 status = UNDER_VOLTAGE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	e140      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb2][b] == 1 && uv[sqb2][b] == 0){
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <power_check+0x119c>)
 8001e7a:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d108      	bne.n	8001e94 <power_check+0x10e0>
 8001e82:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <power_check+0x11a0>)
 8001e84:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d103      	bne.n	8001e94 <power_check+0x10e0>
					 status = NORMAL;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	e132      	b.n	80020fa <power_check+0x1346>
				 else if (ov[sqb2][b] == 0 && uv[sqb2][b] == 0){
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <power_check+0x119c>)
 8001e96:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <power_check+0x1100>
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <power_check+0x11a0>)
 8001ea0:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <power_check+0x1100>
					 status = OVER_VOLTAGE;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	e124      	b.n	80020fa <power_check+0x1346>
				 break;
 8001eb0:	bf00      	nop
 8001eb2:	e122      	b.n	80020fa <power_check+0x1346>
				 break;
 8001eb4:	bf00      	nop
			}
			break;
 8001eb6:	e120      	b.n	80020fa <power_check+0x1346>
		case sqb3:
			switch(pin){
 8001eb8:	79bb      	ldrb	r3, [r7, #6]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d160      	bne.n	8001f80 <power_check+0x11cc>
			case a:
				#ifdef UNIT_TEST
				 ov[sqb3][a] = 1;
				 uv[sqb3][a] = 1;
				#else
				ov[sqb3][a] =  HAL_GPIO_ReadPin(SQB3_A_OV_GPIO_Port, SQB3_A_OV_Pin);
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	4827      	ldr	r0, [pc, #156]	; (8001f60 <power_check+0x11ac>)
 8001ec2:	f003 fd0d 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <power_check+0x119c>)
 8001ecc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				uv[sqb3][a] = HAL_GPIO_ReadPin(SQB3_A_UV_GPIO_Port, SQB3_A_UV_Pin);
 8001ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed4:	4822      	ldr	r0, [pc, #136]	; (8001f60 <power_check+0x11ac>)
 8001ed6:	f003 fd03 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <power_check+0x11a0>)
 8001ee0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				delaymilliseconds(100);
 8001ee4:	2064      	movs	r0, #100	; 0x64
 8001ee6:	f7fe ff4d 	bl	8000d84 <delaymilliseconds>
				ov[sqb3][a] =  HAL_GPIO_ReadPin(SQB3_A_OV_GPIO_Port, SQB3_A_OV_Pin);
 8001eea:	2108      	movs	r1, #8
 8001eec:	481c      	ldr	r0, [pc, #112]	; (8001f60 <power_check+0x11ac>)
 8001eee:	f003 fcf7 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <power_check+0x119c>)
 8001ef8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				uv[sqb3][a] = HAL_GPIO_ReadPin(SQB3_A_UV_GPIO_Port, SQB3_A_UV_Pin);
 8001efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f00:	4817      	ldr	r0, [pc, #92]	; (8001f60 <power_check+0x11ac>)
 8001f02:	f003 fced 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <power_check+0x11a0>)
 8001f0c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
				delaymilliseconds(100);
 8001f10:	2064      	movs	r0, #100	; 0x64
 8001f12:	f7fe ff37 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[sqb3][a] == 1 && uv[sqb3][a] == 1){
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <power_check+0x119c>)
 8001f18:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <power_check+0x117e>
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <power_check+0x11a0>)
 8001f22:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d103      	bne.n	8001f32 <power_check+0x117e>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	e0e3      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[sqb3][a] == 1 && uv[sqb3][a] == 0){
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <power_check+0x119c>)
 8001f34:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d113      	bne.n	8001f64 <power_check+0x11b0>
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <power_check+0x11a0>)
 8001f3e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10e      	bne.n	8001f64 <power_check+0x11b0>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8001f46:	2302      	movs	r3, #2
 8001f48:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	e0d5      	b.n	80020fa <power_check+0x1346>
 8001f4e:	bf00      	nop
 8001f50:	200002f0 	.word	0x200002f0
 8001f54:	200003d4 	.word	0x200003d4
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
				 }
				 else if (ov[sqb3][a] == 0 && uv[sqb3][a] == 0){
 8001f64:	4b67      	ldr	r3, [pc, #412]	; (8002104 <power_check+0x1350>)
 8001f66:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10a      	bne.n	8001f84 <power_check+0x11d0>
 8001f6e:	4b66      	ldr	r3, [pc, #408]	; (8002108 <power_check+0x1354>)
 8001f70:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <power_check+0x11d0>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	e0bc      	b.n	80020fa <power_check+0x1346>
				 }
				 break;
			default:
				break;
 8001f80:	bf00      	nop
 8001f82:	e0ba      	b.n	80020fa <power_check+0x1346>
				 break;
 8001f84:	bf00      	nop
			}
			break;
 8001f86:	e0b8      	b.n	80020fa <power_check+0x1346>
		case lp26:
			switch(pin){
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d153      	bne.n	8002036 <power_check+0x1282>
			case a:
				#ifdef UNIT_TEST
				 ov[lp26][a] = 1;
				 uv[lp26][a] = 1;
				#else
				ov[lp26][a] =  HAL_GPIO_ReadPin(LP26_A_OV_GPIO_Port, LP26_A_OV_Pin);
 8001f8e:	2102      	movs	r1, #2
 8001f90:	485e      	ldr	r0, [pc, #376]	; (800210c <power_check+0x1358>)
 8001f92:	f003 fca5 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <power_check+0x1350>)
 8001f9c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
				uv[lp26][a] = HAL_GPIO_ReadPin(LP26_A_UV_GPIO_Port, LP26_A_UV_Pin);
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	485b      	ldr	r0, [pc, #364]	; (8002110 <power_check+0x135c>)
 8001fa4:	f003 fc9c 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <power_check+0x1354>)
 8001fae:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
				delaymilliseconds(100);
 8001fb2:	2064      	movs	r0, #100	; 0x64
 8001fb4:	f7fe fee6 	bl	8000d84 <delaymilliseconds>
				ov[lp26][a] =  HAL_GPIO_ReadPin(LP26_A_OV_GPIO_Port, LP26_A_OV_Pin);
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4854      	ldr	r0, [pc, #336]	; (800210c <power_check+0x1358>)
 8001fbc:	f003 fc90 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <power_check+0x1350>)
 8001fc6:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
				uv[lp26][a] = HAL_GPIO_ReadPin(LP26_A_UV_GPIO_Port, LP26_A_UV_Pin);
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	4850      	ldr	r0, [pc, #320]	; (8002110 <power_check+0x135c>)
 8001fce:	f003 fc87 	bl	80058e0 <HAL_GPIO_ReadPin>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <power_check+0x1354>)
 8001fd8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
				delaymilliseconds(100);
 8001fdc:	2064      	movs	r0, #100	; 0x64
 8001fde:	f7fe fed1 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[lp26][a] == 1 && uv[lp26][a] == 1){
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <power_check+0x1350>)
 8001fe4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d108      	bne.n	8001ffe <power_check+0x124a>
 8001fec:	4b46      	ldr	r3, [pc, #280]	; (8002108 <power_check+0x1354>)
 8001fee:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d103      	bne.n	8001ffe <power_check+0x124a>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
					 return status;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	e07d      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[lp26][a] == 1 && uv[lp26][a] == 0){
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <power_check+0x1350>)
 8002000:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002004:	2b01      	cmp	r3, #1
 8002006:	d108      	bne.n	800201a <power_check+0x1266>
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <power_check+0x1354>)
 800200a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <power_check+0x1266>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 8002012:	2302      	movs	r3, #2
 8002014:	73fb      	strb	r3, [r7, #15]
					 return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	e06f      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[lp26][a] == 0 && uv[lp26][a] == 0){
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <power_check+0x1350>)
 800201c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <power_check+0x1286>
 8002024:	4b38      	ldr	r3, [pc, #224]	; (8002108 <power_check+0x1354>)
 8002026:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <power_check+0x1286>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 800202e:	2303      	movs	r3, #3
 8002030:	73fb      	strb	r3, [r7, #15]
					 return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	e061      	b.n	80020fa <power_check+0x1346>
				 }
				 break;
			default:
				break;
 8002036:	bf00      	nop
 8002038:	e05f      	b.n	80020fa <power_check+0x1346>
				 break;
 800203a:	bf00      	nop
			}
			break;
 800203c:	e05d      	b.n	80020fa <power_check+0x1346>
		case ws1:
			switch(pin){
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d155      	bne.n	80020f0 <power_check+0x133c>
			case a:
				#ifdef UNIT_TEST
				 ov[ws1][a] = 1;
				 uv[ws1][a] = 1;
				#else
				ov[ws1][a] =  HAL_GPIO_ReadPin(WS1_A_OV_GPIO_Port, WS1_A_OV_Pin);
 8002044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002048:	4830      	ldr	r0, [pc, #192]	; (800210c <power_check+0x1358>)
 800204a:	f003 fc49 	bl	80058e0 <HAL_GPIO_ReadPin>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <power_check+0x1350>)
 8002054:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
				uv[ws1][a] = HAL_GPIO_ReadPin(WS1_A_UV_GPIO_Port, WS1_A_UV_Pin);
 8002058:	2101      	movs	r1, #1
 800205a:	482c      	ldr	r0, [pc, #176]	; (800210c <power_check+0x1358>)
 800205c:	f003 fc40 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b28      	ldr	r3, [pc, #160]	; (8002108 <power_check+0x1354>)
 8002066:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
				delaymilliseconds(100);
 800206a:	2064      	movs	r0, #100	; 0x64
 800206c:	f7fe fe8a 	bl	8000d84 <delaymilliseconds>
				ov[ws1][a] =  HAL_GPIO_ReadPin(WS1_A_OV_GPIO_Port, WS1_A_OV_Pin);
 8002070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002074:	4825      	ldr	r0, [pc, #148]	; (800210c <power_check+0x1358>)
 8002076:	f003 fc33 	bl	80058e0 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <power_check+0x1350>)
 8002080:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
				uv[ws1][a] = HAL_GPIO_ReadPin(WS1_A_UV_GPIO_Port, WS1_A_UV_Pin);
 8002084:	2101      	movs	r1, #1
 8002086:	4821      	ldr	r0, [pc, #132]	; (800210c <power_check+0x1358>)
 8002088:	f003 fc2a 	bl	80058e0 <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <power_check+0x1354>)
 8002092:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
				delaymilliseconds(100);
 8002096:	2064      	movs	r0, #100	; 0x64
 8002098:	f7fe fe74 	bl	8000d84 <delaymilliseconds>
				#endif
				 if (ov[ws1][a] == 1 && uv[ws1][a] == 1){
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <power_check+0x1350>)
 800209e:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d108      	bne.n	80020b8 <power_check+0x1304>
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <power_check+0x1354>)
 80020a8:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d103      	bne.n	80020b8 <power_check+0x1304>
					 //response_buffer[0] = 0x01;//under voltage <26
					 status = UNDER_VOLTAGE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
					 return status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	e020      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[ws1][a] == 1 && uv[ws1][a] == 0){
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <power_check+0x1350>)
 80020ba:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <power_check+0x1320>
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <power_check+0x1354>)
 80020c4:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <power_check+0x1320>
					 //response_buffer[0] = 0x02;//Proper voltage
					 status = NORMAL;
 80020cc:	2302      	movs	r3, #2
 80020ce:	73fb      	strb	r3, [r7, #15]
					 return status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	e012      	b.n	80020fa <power_check+0x1346>
				 }
				 else if (ov[ws1][a] == 0 && uv[ws1][a] == 0){
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <power_check+0x1350>)
 80020d6:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <power_check+0x1340>
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <power_check+0x1354>)
 80020e0:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <power_check+0x1340>
					 //response_buffer[0] = 0x03;//Over voltage > 33
					 status = OVER_VOLTAGE;
 80020e8:	2303      	movs	r3, #3
 80020ea:	73fb      	strb	r3, [r7, #15]
					 return status;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	e004      	b.n	80020fa <power_check+0x1346>
				 }
				 break;
			default:
				break;
 80020f0:	bf00      	nop
 80020f2:	e002      	b.n	80020fa <power_check+0x1346>
				 break;
 80020f4:	bf00      	nop
			}
			break;
 80020f6:	e000      	b.n	80020fa <power_check+0x1346>
			default:
				break;
 80020f8:	bf00      	nop
	 }
 }
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002f0 	.word	0x200002f0
 8002108:	200003d4 	.word	0x200003d4
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000

08002114 <power_supply_operation>:
//      fifo->tail = (fifo->tail + 1) % FIFO_SIZE;
//      fifo->count++;
//      return true;
//  }

 POWER_SUPPLY_STATUS power_supply_operation (power_supply_identifier power_supply_type, power_supply_cmd power_supply_command){
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	460a      	mov	r2, r1
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	4613      	mov	r3, r2
 8002122:	71bb      	strb	r3, [r7, #6]

	 POWER_SUPPLY_STATUS status;

	 switch(power_supply_type){
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	3b05      	subs	r3, #5
 8002128:	2b30      	cmp	r3, #48	; 0x30
 800212a:	f200 8328 	bhi.w	800277e <power_supply_operation+0x66a>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <power_supply_operation+0x20>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	080021f9 	.word	0x080021f9
 8002138:	0800277f 	.word	0x0800277f
 800213c:	0800277f 	.word	0x0800277f
 8002140:	0800277f 	.word	0x0800277f
 8002144:	0800277f 	.word	0x0800277f
 8002148:	0800277f 	.word	0x0800277f
 800214c:	0800277f 	.word	0x0800277f
 8002150:	0800277f 	.word	0x0800277f
 8002154:	0800277f 	.word	0x0800277f
 8002158:	0800277f 	.word	0x0800277f
 800215c:	0800277f 	.word	0x0800277f
 8002160:	080022c3 	.word	0x080022c3
 8002164:	0800277f 	.word	0x0800277f
 8002168:	0800277f 	.word	0x0800277f
 800216c:	0800277f 	.word	0x0800277f
 8002170:	0800277f 	.word	0x0800277f
 8002174:	0800238d 	.word	0x0800238d
 8002178:	0800277f 	.word	0x0800277f
 800217c:	0800277f 	.word	0x0800277f
 8002180:	0800277f 	.word	0x0800277f
 8002184:	0800277f 	.word	0x0800277f
 8002188:	0800277f 	.word	0x0800277f
 800218c:	0800277f 	.word	0x0800277f
 8002190:	0800277f 	.word	0x0800277f
 8002194:	0800277f 	.word	0x0800277f
 8002198:	0800277f 	.word	0x0800277f
 800219c:	0800277f 	.word	0x0800277f
 80021a0:	08002457 	.word	0x08002457
 80021a4:	0800277f 	.word	0x0800277f
 80021a8:	0800277f 	.word	0x0800277f
 80021ac:	0800277f 	.word	0x0800277f
 80021b0:	0800277f 	.word	0x0800277f
 80021b4:	08002521 	.word	0x08002521
 80021b8:	0800277f 	.word	0x0800277f
 80021bc:	0800277f 	.word	0x0800277f
 80021c0:	0800277f 	.word	0x0800277f
 80021c4:	0800277f 	.word	0x0800277f
 80021c8:	0800277f 	.word	0x0800277f
 80021cc:	0800277f 	.word	0x0800277f
 80021d0:	0800277f 	.word	0x0800277f
 80021d4:	0800277f 	.word	0x0800277f
 80021d8:	0800277f 	.word	0x0800277f
 80021dc:	0800277f 	.word	0x0800277f
 80021e0:	080025eb 	.word	0x080025eb
 80021e4:	0800277f 	.word	0x0800277f
 80021e8:	0800277f 	.word	0x0800277f
 80021ec:	0800277f 	.word	0x0800277f
 80021f0:	0800277f 	.word	0x0800277f
 80021f4:	080026b5 	.word	0x080026b5
	 case T_PS:

		 switch(power_supply_command){
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d030      	beq.n	8002260 <power_supply_operation+0x14c>
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d15d      	bne.n	80022be <power_supply_operation+0x1aa>
		 case PS_ON:
			 ps_relay_on(power_supply_type);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fbb3 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 800220a:	20c8      	movs	r0, #200	; 0xc8
 800220c:	f7fe fdba 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fcf4 	bl	8002c00 <ps_feedback>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10f      	bne.n	800223e <power_supply_operation+0x12a>
				 delaymilliseconds(50);      //debouncing
 800221e:	2032      	movs	r0, #50	; 0x32
 8002220:	f7fe fdb0 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fcea 	bl	8002c00 <ps_feedback>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <power_supply_operation+0x124>
					 status = POWER_SUPPLY_ON;
 8002232:	2302      	movs	r3, #2
 8002234:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002236:	e043      	b.n	80022c0 <power_supply_operation+0x1ac>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
			 break;
 800223c:	e040      	b.n	80022c0 <power_supply_operation+0x1ac>
				 delaymilliseconds(2000);
 800223e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002242:	f7fe fd9f 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fcd9 	bl	8002c00 <ps_feedback>
 800224e:	4603      	mov	r3, r0
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <power_supply_operation+0x146>
					 status = POWER_SUPPLY_ON;
 8002254:	2302      	movs	r3, #2
 8002256:	73fb      	strb	r3, [r7, #15]
			 break;
 8002258:	e032      	b.n	80022c0 <power_supply_operation+0x1ac>
					 status = POWER_SUPPLY_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
			 break;
 800225e:	e02f      	b.n	80022c0 <power_supply_operation+0x1ac>

		 case PS_OFF:
			 ps_relay_off(power_supply_type);
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fc28 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 8002268:	20c8      	movs	r0, #200	; 0xc8
 800226a:	f7fe fd8b 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fcc5 	bl	8002c00 <ps_feedback>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <power_supply_operation+0x188>
				 delaymilliseconds(50);      //debouncing
 800227c:	2032      	movs	r0, #50	; 0x32
 800227e:	f7fe fd81 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fcbb 	bl	8002c00 <ps_feedback>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <power_supply_operation+0x182>
					 status = POWER_SUPPLY_OFF;
 8002290:	2303      	movs	r3, #3
 8002292:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002294:	e014      	b.n	80022c0 <power_supply_operation+0x1ac>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
			 break;
 800229a:	e011      	b.n	80022c0 <power_supply_operation+0x1ac>
				 delaymilliseconds(2000);
 800229c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022a0:	f7fe fd70 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fcaa 	bl	8002c00 <ps_feedback>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <power_supply_operation+0x1a4>
					 status = POWER_SUPPLY_OFF;
 80022b2:	2303      	movs	r3, #3
 80022b4:	73fb      	strb	r3, [r7, #15]
			 break;
 80022b6:	e003      	b.n	80022c0 <power_supply_operation+0x1ac>
					 status = POWER_SUPPLY_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
			 break;
 80022bc:	e000      	b.n	80022c0 <power_supply_operation+0x1ac>

		 default:
			 //error input handling
			 break;
 80022be:	bf00      	nop
		 }
		 break;
 80022c0:	e260      	b.n	8002784 <power_supply_operation+0x670>

	 case AUX_PS:

		 switch(power_supply_command){
 80022c2:	79bb      	ldrb	r3, [r7, #6]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d030      	beq.n	800232a <power_supply_operation+0x216>
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d15d      	bne.n	8002388 <power_supply_operation+0x274>
		 case PS_ON:
			 ps_relay_on(power_supply_type);
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fb4e 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 80022d4:	20c8      	movs	r0, #200	; 0xc8
 80022d6:	f7fe fd55 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fc8f 	bl	8002c00 <ps_feedback>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d10f      	bne.n	8002308 <power_supply_operation+0x1f4>
				 delaymilliseconds(50);      //debouncing
 80022e8:	2032      	movs	r0, #50	; 0x32
 80022ea:	f7fe fd4b 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fc85 	bl	8002c00 <ps_feedback>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <power_supply_operation+0x1ee>
					 status = POWER_SUPPLY_ON;
 80022fc:	2302      	movs	r3, #2
 80022fe:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002300:	e043      	b.n	800238a <power_supply_operation+0x276>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
			 break;
 8002306:	e040      	b.n	800238a <power_supply_operation+0x276>
				 delaymilliseconds(2000);
 8002308:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800230c:	f7fe fd3a 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fc74 	bl	8002c00 <ps_feedback>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <power_supply_operation+0x210>
					 status = POWER_SUPPLY_ON;
 800231e:	2302      	movs	r3, #2
 8002320:	73fb      	strb	r3, [r7, #15]
			 break;
 8002322:	e032      	b.n	800238a <power_supply_operation+0x276>
					 status = POWER_SUPPLY_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
			 break;
 8002328:	e02f      	b.n	800238a <power_supply_operation+0x276>

		 case PS_OFF:
			 ps_relay_off(power_supply_type);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fbc3 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 8002332:	20c8      	movs	r0, #200	; 0xc8
 8002334:	f7fe fd26 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fc60 	bl	8002c00 <ps_feedback>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <power_supply_operation+0x252>
				 delaymilliseconds(50);      //debouncing
 8002346:	2032      	movs	r0, #50	; 0x32
 8002348:	f7fe fd1c 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fc56 	bl	8002c00 <ps_feedback>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <power_supply_operation+0x24c>
					 status = POWER_SUPPLY_OFF;
 800235a:	2303      	movs	r3, #3
 800235c:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 800235e:	e014      	b.n	800238a <power_supply_operation+0x276>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
			 break;
 8002364:	e011      	b.n	800238a <power_supply_operation+0x276>
				 delaymilliseconds(2000);
 8002366:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800236a:	f7fe fd0b 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fc45 	bl	8002c00 <ps_feedback>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <power_supply_operation+0x26e>
					 status = POWER_SUPPLY_OFF;
 800237c:	2303      	movs	r3, #3
 800237e:	73fb      	strb	r3, [r7, #15]
			 break;
 8002380:	e003      	b.n	800238a <power_supply_operation+0x276>
					 status = POWER_SUPPLY_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
			 break;
 8002386:	e000      	b.n	800238a <power_supply_operation+0x276>

		 default:
			 //error input handling
			 break;
 8002388:	bf00      	nop
		 }
		 break;
 800238a:	e1fb      	b.n	8002784 <power_supply_operation+0x670>

	 case HMG_PS:
		 switch(power_supply_command){
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d030      	beq.n	80023f4 <power_supply_operation+0x2e0>
 8002392:	2b02      	cmp	r3, #2
 8002394:	d15d      	bne.n	8002452 <power_supply_operation+0x33e>
		 case PS_ON:
			 ps_relay_on(power_supply_type);
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fae9 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 800239e:	20c8      	movs	r0, #200	; 0xc8
 80023a0:	f7fe fcf0 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 fc2a 	bl	8002c00 <ps_feedback>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d10f      	bne.n	80023d2 <power_supply_operation+0x2be>
				 delaymilliseconds(50);      //debouncing
 80023b2:	2032      	movs	r0, #50	; 0x32
 80023b4:	f7fe fce6 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fc20 	bl	8002c00 <ps_feedback>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <power_supply_operation+0x2b8>
					 status = POWER_SUPPLY_ON;
 80023c6:	2302      	movs	r3, #2
 80023c8:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 80023ca:	e043      	b.n	8002454 <power_supply_operation+0x340>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
			 break;
 80023d0:	e040      	b.n	8002454 <power_supply_operation+0x340>
				 delaymilliseconds(2000);
 80023d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023d6:	f7fe fcd5 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fc0f 	bl	8002c00 <ps_feedback>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <power_supply_operation+0x2da>
					 status = POWER_SUPPLY_ON;
 80023e8:	2302      	movs	r3, #2
 80023ea:	73fb      	strb	r3, [r7, #15]
			 break;
 80023ec:	e032      	b.n	8002454 <power_supply_operation+0x340>
					 status = POWER_SUPPLY_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
			 break;
 80023f2:	e02f      	b.n	8002454 <power_supply_operation+0x340>

		 case PS_OFF:
			 ps_relay_off(power_supply_type);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fb5e 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 80023fc:	20c8      	movs	r0, #200	; 0xc8
 80023fe:	f7fe fcc1 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fbfb 	bl	8002c00 <ps_feedback>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10f      	bne.n	8002430 <power_supply_operation+0x31c>
				 delaymilliseconds(50);      //debouncing
 8002410:	2032      	movs	r0, #50	; 0x32
 8002412:	f7fe fcb7 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fbf1 	bl	8002c00 <ps_feedback>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <power_supply_operation+0x316>
					 status = POWER_SUPPLY_OFF;
 8002424:	2303      	movs	r3, #3
 8002426:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002428:	e014      	b.n	8002454 <power_supply_operation+0x340>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
			 break;
 800242e:	e011      	b.n	8002454 <power_supply_operation+0x340>
				 delaymilliseconds(2000);
 8002430:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002434:	f7fe fca6 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fbe0 	bl	8002c00 <ps_feedback>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <power_supply_operation+0x338>
					 status = POWER_SUPPLY_OFF;
 8002446:	2303      	movs	r3, #3
 8002448:	73fb      	strb	r3, [r7, #15]
			 break;
 800244a:	e003      	b.n	8002454 <power_supply_operation+0x340>
					 status = POWER_SUPPLY_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
			 break;
 8002450:	e000      	b.n	8002454 <power_supply_operation+0x340>

		 default:
			 //error input handling
			 break;
 8002452:	bf00      	nop
		 }
		 break;
 8002454:	e196      	b.n	8002784 <power_supply_operation+0x670>

	 case PROP_BAT1_PS:
		 switch(power_supply_command){
 8002456:	79bb      	ldrb	r3, [r7, #6]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d030      	beq.n	80024be <power_supply_operation+0x3aa>
 800245c:	2b02      	cmp	r3, #2
 800245e:	d15d      	bne.n	800251c <power_supply_operation+0x408>
		 case PS_ON:
			 ps_relay_on(power_supply_type);
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fa84 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 8002468:	20c8      	movs	r0, #200	; 0xc8
 800246a:	f7fe fc8b 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fbc5 	bl	8002c00 <ps_feedback>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10f      	bne.n	800249c <power_supply_operation+0x388>
				 delaymilliseconds(50);      //debouncing
 800247c:	2032      	movs	r0, #50	; 0x32
 800247e:	f7fe fc81 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fbbb 	bl	8002c00 <ps_feedback>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <power_supply_operation+0x382>
					 status = POWER_SUPPLY_ON;
 8002490:	2302      	movs	r3, #2
 8002492:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002494:	e043      	b.n	800251e <power_supply_operation+0x40a>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
			 break;
 800249a:	e040      	b.n	800251e <power_supply_operation+0x40a>
				 delaymilliseconds(2000);
 800249c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024a0:	f7fe fc70 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fbaa 	bl	8002c00 <ps_feedback>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <power_supply_operation+0x3a4>
					 status = POWER_SUPPLY_ON;
 80024b2:	2302      	movs	r3, #2
 80024b4:	73fb      	strb	r3, [r7, #15]
			 break;
 80024b6:	e032      	b.n	800251e <power_supply_operation+0x40a>
					 status = POWER_SUPPLY_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
			 break;
 80024bc:	e02f      	b.n	800251e <power_supply_operation+0x40a>

		 case PS_OFF:
			 ps_relay_off(power_supply_type);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 faf9 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 80024c6:	20c8      	movs	r0, #200	; 0xc8
 80024c8:	f7fe fc5c 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb96 	bl	8002c00 <ps_feedback>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <power_supply_operation+0x3e6>
				 delaymilliseconds(50);      //debouncing
 80024da:	2032      	movs	r0, #50	; 0x32
 80024dc:	f7fe fc52 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fb8c 	bl	8002c00 <ps_feedback>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <power_supply_operation+0x3e0>
					 status = POWER_SUPPLY_OFF;
 80024ee:	2303      	movs	r3, #3
 80024f0:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 80024f2:	e014      	b.n	800251e <power_supply_operation+0x40a>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
			 break;
 80024f8:	e011      	b.n	800251e <power_supply_operation+0x40a>
				 delaymilliseconds(2000);
 80024fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024fe:	f7fe fc41 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fb7b 	bl	8002c00 <ps_feedback>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <power_supply_operation+0x402>
					 status = POWER_SUPPLY_OFF;
 8002510:	2303      	movs	r3, #3
 8002512:	73fb      	strb	r3, [r7, #15]
			 break;
 8002514:	e003      	b.n	800251e <power_supply_operation+0x40a>
					 status = POWER_SUPPLY_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
			 break;
 800251a:	e000      	b.n	800251e <power_supply_operation+0x40a>

		 default:
			 //error input handling
			 break;
 800251c:	bf00      	nop
		 }
		 break;
 800251e:	e131      	b.n	8002784 <power_supply_operation+0x670>

	 case PROP_BAT2_PS:
		 switch(power_supply_command){
 8002520:	79bb      	ldrb	r3, [r7, #6]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d030      	beq.n	8002588 <power_supply_operation+0x474>
 8002526:	2b02      	cmp	r3, #2
 8002528:	d15d      	bne.n	80025e6 <power_supply_operation+0x4d2>
		 case PS_ON:
			 ps_relay_on(power_supply_type);
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fa1f 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 8002532:	20c8      	movs	r0, #200	; 0xc8
 8002534:	f7fe fc26 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fb60 	bl	8002c00 <ps_feedback>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10f      	bne.n	8002566 <power_supply_operation+0x452>
				 delaymilliseconds(50);      //debouncing
 8002546:	2032      	movs	r0, #50	; 0x32
 8002548:	f7fe fc1c 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb56 	bl	8002c00 <ps_feedback>
 8002554:	4603      	mov	r3, r0
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <power_supply_operation+0x44c>
					 status = POWER_SUPPLY_ON;
 800255a:	2302      	movs	r3, #2
 800255c:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 800255e:	e043      	b.n	80025e8 <power_supply_operation+0x4d4>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
			 break;
 8002564:	e040      	b.n	80025e8 <power_supply_operation+0x4d4>
				 delaymilliseconds(2000);
 8002566:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800256a:	f7fe fc0b 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fb45 	bl	8002c00 <ps_feedback>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d102      	bne.n	8002582 <power_supply_operation+0x46e>
					 status = POWER_SUPPLY_ON;
 800257c:	2302      	movs	r3, #2
 800257e:	73fb      	strb	r3, [r7, #15]
			 break;
 8002580:	e032      	b.n	80025e8 <power_supply_operation+0x4d4>
					 status = POWER_SUPPLY_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
			 break;
 8002586:	e02f      	b.n	80025e8 <power_supply_operation+0x4d4>

		 case PS_OFF:
			 ps_relay_off(power_supply_type);
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa94 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 8002590:	20c8      	movs	r0, #200	; 0xc8
 8002592:	f7fe fbf7 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fb31 	bl	8002c00 <ps_feedback>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <power_supply_operation+0x4b0>
				 delaymilliseconds(50);      //debouncing
 80025a4:	2032      	movs	r0, #50	; 0x32
 80025a6:	f7fe fbed 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fb27 	bl	8002c00 <ps_feedback>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <power_supply_operation+0x4aa>
					 status = POWER_SUPPLY_OFF;
 80025b8:	2303      	movs	r3, #3
 80025ba:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 80025bc:	e014      	b.n	80025e8 <power_supply_operation+0x4d4>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
			 break;
 80025c2:	e011      	b.n	80025e8 <power_supply_operation+0x4d4>
				 delaymilliseconds(2000);
 80025c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025c8:	f7fe fbdc 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fb16 	bl	8002c00 <ps_feedback>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <power_supply_operation+0x4cc>
					 status = POWER_SUPPLY_OFF;
 80025da:	2303      	movs	r3, #3
 80025dc:	73fb      	strb	r3, [r7, #15]
			 break;
 80025de:	e003      	b.n	80025e8 <power_supply_operation+0x4d4>
					 status = POWER_SUPPLY_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
			 break;
 80025e4:	e000      	b.n	80025e8 <power_supply_operation+0x4d4>

		 default:
			 //error input handling
			 break;
 80025e6:	bf00      	nop
		 }
		 break;
 80025e8:	e0cc      	b.n	8002784 <power_supply_operation+0x670>

	 case C_PS:
		 switch(power_supply_command){
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d030      	beq.n	8002652 <power_supply_operation+0x53e>
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d15d      	bne.n	80026b0 <power_supply_operation+0x59c>
		 case PS_ON:
			 ps_relay_on(power_supply_type);
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f9ba 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 80025fc:	20c8      	movs	r0, #200	; 0xc8
 80025fe:	f7fe fbc1 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fafb 	bl	8002c00 <ps_feedback>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10f      	bne.n	8002630 <power_supply_operation+0x51c>
				 delaymilliseconds(50);      //debouncing
 8002610:	2032      	movs	r0, #50	; 0x32
 8002612:	f7fe fbb7 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 faf1 	bl	8002c00 <ps_feedback>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <power_supply_operation+0x516>
					 status = POWER_SUPPLY_ON;
 8002624:	2302      	movs	r3, #2
 8002626:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002628:	e043      	b.n	80026b2 <power_supply_operation+0x59e>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
			 break;
 800262e:	e040      	b.n	80026b2 <power_supply_operation+0x59e>
				 delaymilliseconds(2000);
 8002630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002634:	f7fe fba6 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fae0 	bl	8002c00 <ps_feedback>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <power_supply_operation+0x538>
					 status = POWER_SUPPLY_ON;
 8002646:	2302      	movs	r3, #2
 8002648:	73fb      	strb	r3, [r7, #15]
			 break;
 800264a:	e032      	b.n	80026b2 <power_supply_operation+0x59e>
					 status = POWER_SUPPLY_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
			 break;
 8002650:	e02f      	b.n	80026b2 <power_supply_operation+0x59e>

		 case PS_OFF:
			 ps_relay_off(power_supply_type);
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fa2f 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 800265a:	20c8      	movs	r0, #200	; 0xc8
 800265c:	f7fe fb92 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 facc 	bl	8002c00 <ps_feedback>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <power_supply_operation+0x57a>
				 delaymilliseconds(50);      //debouncing
 800266e:	2032      	movs	r0, #50	; 0x32
 8002670:	f7fe fb88 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fac2 	bl	8002c00 <ps_feedback>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <power_supply_operation+0x574>
					 status = POWER_SUPPLY_OFF;
 8002682:	2303      	movs	r3, #3
 8002684:	73fb      	strb	r3, [r7, #15]
				 }
				 else{
					 status = POWER_SUPPLY_ERROR;
				 }
			 }
			 break;
 8002686:	e014      	b.n	80026b2 <power_supply_operation+0x59e>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
			 break;
 800268c:	e011      	b.n	80026b2 <power_supply_operation+0x59e>
				 delaymilliseconds(2000);
 800268e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002692:	f7fe fb77 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fab1 	bl	8002c00 <ps_feedback>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <power_supply_operation+0x596>
					 status = POWER_SUPPLY_OFF;
 80026a4:	2303      	movs	r3, #3
 80026a6:	73fb      	strb	r3, [r7, #15]
			 break;
 80026a8:	e003      	b.n	80026b2 <power_supply_operation+0x59e>
					 status = POWER_SUPPLY_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
			 break;
 80026ae:	e000      	b.n	80026b2 <power_supply_operation+0x59e>

		 default:
			 //error input handling
			 break;
 80026b0:	bf00      	nop
		 }
		 break;
 80026b2:	e067      	b.n	8002784 <power_supply_operation+0x670>

	 case DS_PS:
		 switch(power_supply_command){
 80026b4:	79bb      	ldrb	r3, [r7, #6]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d002      	beq.n	80026c0 <power_supply_operation+0x5ac>
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d02f      	beq.n	800271e <power_supply_operation+0x60a>
			 }
			 break;

		 default:
			 //error input handling
			 break;
 80026be:	e05d      	b.n	800277c <power_supply_operation+0x668>
			 ps_relay_on(power_supply_type);
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 f954 	bl	8002970 <ps_relay_on>
			 delaymilliseconds(200);
 80026c8:	20c8      	movs	r0, #200	; 0xc8
 80026ca:	f7fe fb5b 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fa95 	bl	8002c00 <ps_feedback>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d10f      	bne.n	80026fc <power_supply_operation+0x5e8>
				 delaymilliseconds(50);      //debouncing
 80026dc:	2032      	movs	r0, #50	; 0x32
 80026de:	f7fe fb51 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fa8b 	bl	8002c00 <ps_feedback>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d102      	bne.n	80026f6 <power_supply_operation+0x5e2>
					 status = POWER_SUPPLY_ON;
 80026f0:	2302      	movs	r3, #2
 80026f2:	73fb      	strb	r3, [r7, #15]
			 break;
 80026f4:	e042      	b.n	800277c <power_supply_operation+0x668>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
			 break;
 80026fa:	e03f      	b.n	800277c <power_supply_operation+0x668>
				 delaymilliseconds(2000);
 80026fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002700:	f7fe fb40 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x01){           //PS - ON GREEN LED
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa7a 	bl	8002c00 <ps_feedback>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <power_supply_operation+0x604>
					 status = POWER_SUPPLY_ON;
 8002712:	2302      	movs	r3, #2
 8002714:	73fb      	strb	r3, [r7, #15]
			 break;
 8002716:	e031      	b.n	800277c <power_supply_operation+0x668>
					 status = POWER_SUPPLY_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
			 break;
 800271c:	e02e      	b.n	800277c <power_supply_operation+0x668>
			 ps_relay_off(power_supply_type);
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	4618      	mov	r0, r3
 8002722:	f000 f9c9 	bl	8002ab8 <ps_relay_off>
			 delaymilliseconds(200);
 8002726:	20c8      	movs	r0, #200	; 0xc8
 8002728:	f7fe fb2c 	bl	8000d84 <delaymilliseconds>
			 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fa66 	bl	8002c00 <ps_feedback>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <power_supply_operation+0x646>
				 delaymilliseconds(50);      //debouncing
 800273a:	2032      	movs	r0, #50	; 0x32
 800273c:	f7fe fb22 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fa5c 	bl	8002c00 <ps_feedback>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <power_supply_operation+0x640>
					 status = POWER_SUPPLY_OFF;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
			 break;
 8002752:	e012      	b.n	800277a <power_supply_operation+0x666>
					 status = POWER_SUPPLY_ERROR;                      //update functionality
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
			 break;
 8002758:	e00f      	b.n	800277a <power_supply_operation+0x666>
				 delaymilliseconds(2000);
 800275a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800275e:	f7fe fb11 	bl	8000d84 <delaymilliseconds>
				 if(ps_feedback(power_supply_type) == 0x00){           //PS - OFF LED-OFF
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa4b 	bl	8002c00 <ps_feedback>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <power_supply_operation+0x662>
					 status = POWER_SUPPLY_OFF;
 8002770:	2303      	movs	r3, #3
 8002772:	73fb      	strb	r3, [r7, #15]
			 break;
 8002774:	e001      	b.n	800277a <power_supply_operation+0x666>
					 status = POWER_SUPPLY_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
			 break;
 800277a:	bf00      	nop
		 }
		 break;
 800277c:	e002      	b.n	8002784 <power_supply_operation+0x670>

	 default:
		 //ERROR HANDLE
		 status = POWER_SUPPLY_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
		 break;
 8002782:	bf00      	nop

	 }
	 return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 }
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop

08002790 <mode_selection_operation>:

  uint8_t mode_selection_operation(MS_UNIT_IDENTIFIER ms_unit, MS_WORD mode_word){
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	460a      	mov	r2, r1
 800279a:	71fb      	strb	r3, [r7, #7]
 800279c:	4613      	mov	r3, r2
 800279e:	71bb      	strb	r3, [r7, #6]
	 uint8_t status = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
	 switch(ms_unit){
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b42      	cmp	r3, #66	; 0x42
 80027a8:	d076      	beq.n	8002898 <mode_selection_operation+0x108>
 80027aa:	2b42      	cmp	r3, #66	; 0x42
 80027ac:	f300 808d 	bgt.w	80028ca <mode_selection_operation+0x13a>
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d002      	beq.n	80027ba <mode_selection_operation+0x2a>
 80027b4:	2b41      	cmp	r3, #65	; 0x41
 80027b6:	d01a      	beq.n	80027ee <mode_selection_operation+0x5e>
			 status = 0;
			 break;
		 }
	 default:
		 //extra lines / errors
		 break;
 80027b8:	e087      	b.n	80028ca <mode_selection_operation+0x13a>
		 switch(mode_word){
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d002      	beq.n	80027c6 <mode_selection_operation+0x36>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d008      	beq.n	80027d6 <mode_selection_operation+0x46>
 80027c4:	e00f      	b.n	80027e6 <mode_selection_operation+0x56>
			 ms_relay_off(ms_unit,1);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2101      	movs	r1, #1
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 faf2 	bl	8002db4 <ms_relay_off>
			 status = 1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
			 break;
 80027d4:	e00a      	b.n	80027ec <mode_selection_operation+0x5c>
			 ms_relay_on(ms_unit,1);
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	2101      	movs	r1, #1
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fb46 	bl	8002e6c <ms_relay_on>
			 status = 1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
			 break;
 80027e4:	e002      	b.n	80027ec <mode_selection_operation+0x5c>
			 status = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
			 break;
 80027ea:	bf00      	nop
		 break;
 80027ec:	e06e      	b.n	80028cc <mode_selection_operation+0x13c>
		 switch(mode_word){
 80027ee:	79bb      	ldrb	r3, [r7, #6]
 80027f0:	3b04      	subs	r3, #4
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d84c      	bhi.n	8002890 <mode_selection_operation+0x100>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <mode_selection_operation+0x6c>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002841 	.word	0x08002841
 8002800:	08002891 	.word	0x08002891
 8002804:	08002891 	.word	0x08002891
 8002808:	08002891 	.word	0x08002891
 800280c:	08002851 	.word	0x08002851
 8002810:	08002891 	.word	0x08002891
 8002814:	08002891 	.word	0x08002891
 8002818:	08002891 	.word	0x08002891
 800281c:	08002861 	.word	0x08002861
 8002820:	08002891 	.word	0x08002891
 8002824:	08002891 	.word	0x08002891
 8002828:	08002891 	.word	0x08002891
 800282c:	08002871 	.word	0x08002871
 8002830:	08002891 	.word	0x08002891
 8002834:	08002891 	.word	0x08002891
 8002838:	08002891 	.word	0x08002891
 800283c:	08002881 	.word	0x08002881
			 ms_relay_off(ms_unit,1);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	2101      	movs	r1, #1
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fab5 	bl	8002db4 <ms_relay_off>
			 status = 1;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
			 break;
 800284e:	e022      	b.n	8002896 <mode_selection_operation+0x106>
			 ms_relay_on(ms_unit,1);
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fb09 	bl	8002e6c <ms_relay_on>
			 status = 1;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
			 break;
 800285e:	e01a      	b.n	8002896 <mode_selection_operation+0x106>
			 ms_relay_off(ms_unit,2);
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	2102      	movs	r1, #2
 8002864:	4618      	mov	r0, r3
 8002866:	f000 faa5 	bl	8002db4 <ms_relay_off>
			 status = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
			 break;
 800286e:	e012      	b.n	8002896 <mode_selection_operation+0x106>
			 ms_relay_on(ms_unit,2);
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 faf9 	bl	8002e6c <ms_relay_on>
			 status = 1;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
			 break;
 800287e:	e00a      	b.n	8002896 <mode_selection_operation+0x106>
			 ms_relay_on(ms_unit,3);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2103      	movs	r1, #3
 8002884:	4618      	mov	r0, r3
 8002886:	f000 faf1 	bl	8002e6c <ms_relay_on>
			 status = 1;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
			 break;
 800288e:	e002      	b.n	8002896 <mode_selection_operation+0x106>
			 status = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
			 break;
 8002894:	bf00      	nop
		 break;
 8002896:	e019      	b.n	80028cc <mode_selection_operation+0x13c>
		 switch(mode_word){
 8002898:	79bb      	ldrb	r3, [r7, #6]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d002      	beq.n	80028a4 <mode_selection_operation+0x114>
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d008      	beq.n	80028b4 <mode_selection_operation+0x124>
 80028a2:	e00f      	b.n	80028c4 <mode_selection_operation+0x134>
			 ms_relay_off(ms_unit,1);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fa83 	bl	8002db4 <ms_relay_off>
			 status = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
			 break;
 80028b2:	e00a      	b.n	80028ca <mode_selection_operation+0x13a>
			 ms_relay_on(ms_unit,1);
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fad7 	bl	8002e6c <ms_relay_on>
			 status = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
			 break;
 80028c2:	e002      	b.n	80028ca <mode_selection_operation+0x13a>
			 status = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
			 break;
 80028c8:	bf00      	nop
		 break;
 80028ca:	bf00      	nop
	 }
	 return status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 }
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop

080028d8 <HAL_UART_RxCpltCallback>:
	}
	else{
		//error
	}
}
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

	 if(huart == &huart1){
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_UART_RxCpltCallback+0x58>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d115      	bne.n	8002914 <HAL_UART_RxCpltCallback+0x3c>
		 for (int i = 0; i < 10; i++) {
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e00a      	b.n	8002904 <HAL_UART_RxCpltCallback+0x2c>
  		 	 fifo_push(&fi, uart_buff[i]);
 80028ee:	4a11      	ldr	r2, [pc, #68]	; (8002934 <HAL_UART_RxCpltCallback+0x5c>)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	480f      	ldr	r0, [pc, #60]	; (8002938 <HAL_UART_RxCpltCallback+0x60>)
 80028fa:	f7fd fe5a 	bl	80005b2 <fifo_push>
		 for (int i = 0; i < 10; i++) {
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b09      	cmp	r3, #9
 8002908:	ddf1      	ble.n	80028ee <HAL_UART_RxCpltCallback+0x16>
  	 	 }

  	 // Start receiving the next 10 bytes
  	 	 HAL_UART_Receive_IT(&huart1, uart_buff, 10);
 800290a:	220a      	movs	r2, #10
 800290c:	4909      	ldr	r1, [pc, #36]	; (8002934 <HAL_UART_RxCpltCallback+0x5c>)
 800290e:	4808      	ldr	r0, [pc, #32]	; (8002930 <HAL_UART_RxCpltCallback+0x58>)
 8002910:	f004 f971 	bl	8006bf6 <HAL_UART_Receive_IT>
	 }

	 if(huart == &huart3){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_UART_RxCpltCallback+0x64>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d104      	bne.n	8002926 <HAL_UART_RxCpltCallback+0x4e>

		 // write functionality



		  HAL_UART_Receive_IT(&huart3, ds_message_fb, 8);
 800291c:	2208      	movs	r2, #8
 800291e:	4908      	ldr	r1, [pc, #32]	; (8002940 <HAL_UART_RxCpltCallback+0x68>)
 8002920:	4806      	ldr	r0, [pc, #24]	; (800293c <HAL_UART_RxCpltCallback+0x64>)
 8002922:	f004 f968 	bl	8006bf6 <HAL_UART_Receive_IT>
	 }
 }
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000148 	.word	0x20000148
 8002934:	20000528 	.word	0x20000528
 8002938:	2000053c 	.word	0x2000053c
 800293c:	200001d8 	.word	0x200001d8
 8002940:	20000520 	.word	0x20000520

08002944 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	 if (huart == &huart3){
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a06      	ldr	r2, [pc, #24]	; (8002968 <HAL_UART_TxCpltCallback+0x24>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d105      	bne.n	8002960 <HAL_UART_TxCpltCallback+0x1c>
		 HAL_UART_Receive(&huart3, ds_message_fb, 8, 100);
 8002954:	2364      	movs	r3, #100	; 0x64
 8002956:	2208      	movs	r2, #8
 8002958:	4904      	ldr	r1, [pc, #16]	; (800296c <HAL_UART_TxCpltCallback+0x28>)
 800295a:	4803      	ldr	r0, [pc, #12]	; (8002968 <HAL_UART_TxCpltCallback+0x24>)
 800295c:	f004 f8b4 	bl	8006ac8 <HAL_UART_Receive>
	 }
 }
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200001d8 	.word	0x200001d8
 800296c:	20000520 	.word	0x20000520

08002970 <ps_relay_on>:

 void ps_relay_on(power_supply_identifier power_supply_type){                      //POWER SUPPLY RELAY CONTROL PINS ON
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	 switch(power_supply_type){
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	3b05      	subs	r3, #5
 800297e:	2b30      	cmp	r3, #48	; 0x30
 8002980:	f200 8091 	bhi.w	8002aa6 <ps_relay_on+0x136>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <ps_relay_on+0x1c>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	08002a51 	.word	0x08002a51
 8002990:	08002aa7 	.word	0x08002aa7
 8002994:	08002aa7 	.word	0x08002aa7
 8002998:	08002aa7 	.word	0x08002aa7
 800299c:	08002aa7 	.word	0x08002aa7
 80029a0:	08002aa7 	.word	0x08002aa7
 80029a4:	08002aa7 	.word	0x08002aa7
 80029a8:	08002aa7 	.word	0x08002aa7
 80029ac:	08002aa7 	.word	0x08002aa7
 80029b0:	08002aa7 	.word	0x08002aa7
 80029b4:	08002aa7 	.word	0x08002aa7
 80029b8:	08002a5d 	.word	0x08002a5d
 80029bc:	08002aa7 	.word	0x08002aa7
 80029c0:	08002aa7 	.word	0x08002aa7
 80029c4:	08002aa7 	.word	0x08002aa7
 80029c8:	08002aa7 	.word	0x08002aa7
 80029cc:	08002a69 	.word	0x08002a69
 80029d0:	08002aa7 	.word	0x08002aa7
 80029d4:	08002aa7 	.word	0x08002aa7
 80029d8:	08002aa7 	.word	0x08002aa7
 80029dc:	08002aa7 	.word	0x08002aa7
 80029e0:	08002aa7 	.word	0x08002aa7
 80029e4:	08002aa7 	.word	0x08002aa7
 80029e8:	08002aa7 	.word	0x08002aa7
 80029ec:	08002aa7 	.word	0x08002aa7
 80029f0:	08002aa7 	.word	0x08002aa7
 80029f4:	08002aa7 	.word	0x08002aa7
 80029f8:	08002a75 	.word	0x08002a75
 80029fc:	08002aa7 	.word	0x08002aa7
 8002a00:	08002aa7 	.word	0x08002aa7
 8002a04:	08002aa7 	.word	0x08002aa7
 8002a08:	08002aa7 	.word	0x08002aa7
 8002a0c:	08002a81 	.word	0x08002a81
 8002a10:	08002aa7 	.word	0x08002aa7
 8002a14:	08002aa7 	.word	0x08002aa7
 8002a18:	08002aa7 	.word	0x08002aa7
 8002a1c:	08002aa7 	.word	0x08002aa7
 8002a20:	08002aa7 	.word	0x08002aa7
 8002a24:	08002aa7 	.word	0x08002aa7
 8002a28:	08002aa7 	.word	0x08002aa7
 8002a2c:	08002aa7 	.word	0x08002aa7
 8002a30:	08002aa7 	.word	0x08002aa7
 8002a34:	08002aa7 	.word	0x08002aa7
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002aa7 	.word	0x08002aa7
 8002a40:	08002aa7 	.word	0x08002aa7
 8002a44:	08002aa7 	.word	0x08002aa7
 8002a48:	08002aa7 	.word	0x08002aa7
 8002a4c:	08002a99 	.word	0x08002a99
	 case T_PS:
		 HAL_GPIO_WritePin(PS1_TON_RLY_CNT_GPIO_Port, PS1_TON_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2108      	movs	r1, #8
 8002a54:	4816      	ldr	r0, [pc, #88]	; (8002ab0 <ps_relay_on+0x140>)
 8002a56:	f002 ff5b 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002a5a:	e025      	b.n	8002aa8 <ps_relay_on+0x138>
	 case AUX_PS:
		 HAL_GPIO_WritePin(PS2_AUX_RLY_CNT_GPIO_Port, PS2_AUX_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2120      	movs	r1, #32
 8002a60:	4813      	ldr	r0, [pc, #76]	; (8002ab0 <ps_relay_on+0x140>)
 8002a62:	f002 ff55 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002a66:	e01f      	b.n	8002aa8 <ps_relay_on+0x138>
	 case HMG_PS:
		 HAL_GPIO_WritePin(PS3_HMG_RLY_CNT_GPIO_Port, PS3_HMG_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2108      	movs	r1, #8
 8002a6c:	4811      	ldr	r0, [pc, #68]	; (8002ab4 <ps_relay_on+0x144>)
 8002a6e:	f002 ff4f 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002a72:	e019      	b.n	8002aa8 <ps_relay_on+0x138>
	 case PROP_BAT1_PS:
		 HAL_GPIO_WritePin(PS4_PROP1_RLY_CNT_GPIO_Port, PS4_PROP1_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2110      	movs	r1, #16
 8002a78:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <ps_relay_on+0x144>)
 8002a7a:	f002 ff49 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002a7e:	e013      	b.n	8002aa8 <ps_relay_on+0x138>
	 case PROP_BAT2_PS:
		 HAL_GPIO_WritePin(PS5_PROP2_RLY_CNT_GPIO_Port, PS5_PROP2_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2120      	movs	r1, #32
 8002a84:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <ps_relay_on+0x144>)
 8002a86:	f002 ff43 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002a8a:	e00d      	b.n	8002aa8 <ps_relay_on+0x138>
	 case C_PS:
		 HAL_GPIO_WritePin(PS1_CON_RLY_CNT_GPIO_Port, PS1_CON_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2110      	movs	r1, #16
 8002a90:	4807      	ldr	r0, [pc, #28]	; (8002ab0 <ps_relay_on+0x140>)
 8002a92:	f002 ff3d 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002a96:	e007      	b.n	8002aa8 <ps_relay_on+0x138>
	 case DS_PS:
		 HAL_GPIO_WritePin(DEPTH_SIM_RLY_CNT_GPIO_Port, DEPTH_SIM_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <ps_relay_on+0x144>)
 8002aa0:	f002 ff36 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002aa4:	e000      	b.n	8002aa8 <ps_relay_on+0x138>
	 default:
		 //error
		 break;
 8002aa6:	bf00      	nop
	 }
 }
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021800 	.word	0x40021800
 8002ab4:	40021000 	.word	0x40021000

08002ab8 <ps_relay_off>:

  void ps_relay_off(power_supply_identifier power_supply_type){							 //POWER SUPPLY RELAY CONTROL PINS OFF
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
	 switch(power_supply_type){
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	2b30      	cmp	r3, #48	; 0x30
 8002ac8:	f200 8091 	bhi.w	8002bee <ps_relay_off+0x136>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <ps_relay_off+0x1c>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002b99 	.word	0x08002b99
 8002ad8:	08002bef 	.word	0x08002bef
 8002adc:	08002bef 	.word	0x08002bef
 8002ae0:	08002bef 	.word	0x08002bef
 8002ae4:	08002bef 	.word	0x08002bef
 8002ae8:	08002bef 	.word	0x08002bef
 8002aec:	08002bef 	.word	0x08002bef
 8002af0:	08002bef 	.word	0x08002bef
 8002af4:	08002bef 	.word	0x08002bef
 8002af8:	08002bef 	.word	0x08002bef
 8002afc:	08002bef 	.word	0x08002bef
 8002b00:	08002ba5 	.word	0x08002ba5
 8002b04:	08002bef 	.word	0x08002bef
 8002b08:	08002bef 	.word	0x08002bef
 8002b0c:	08002bef 	.word	0x08002bef
 8002b10:	08002bef 	.word	0x08002bef
 8002b14:	08002bb1 	.word	0x08002bb1
 8002b18:	08002bef 	.word	0x08002bef
 8002b1c:	08002bef 	.word	0x08002bef
 8002b20:	08002bef 	.word	0x08002bef
 8002b24:	08002bef 	.word	0x08002bef
 8002b28:	08002bef 	.word	0x08002bef
 8002b2c:	08002bef 	.word	0x08002bef
 8002b30:	08002bef 	.word	0x08002bef
 8002b34:	08002bef 	.word	0x08002bef
 8002b38:	08002bef 	.word	0x08002bef
 8002b3c:	08002bef 	.word	0x08002bef
 8002b40:	08002bbd 	.word	0x08002bbd
 8002b44:	08002bef 	.word	0x08002bef
 8002b48:	08002bef 	.word	0x08002bef
 8002b4c:	08002bef 	.word	0x08002bef
 8002b50:	08002bef 	.word	0x08002bef
 8002b54:	08002bc9 	.word	0x08002bc9
 8002b58:	08002bef 	.word	0x08002bef
 8002b5c:	08002bef 	.word	0x08002bef
 8002b60:	08002bef 	.word	0x08002bef
 8002b64:	08002bef 	.word	0x08002bef
 8002b68:	08002bef 	.word	0x08002bef
 8002b6c:	08002bef 	.word	0x08002bef
 8002b70:	08002bef 	.word	0x08002bef
 8002b74:	08002bef 	.word	0x08002bef
 8002b78:	08002bef 	.word	0x08002bef
 8002b7c:	08002bef 	.word	0x08002bef
 8002b80:	08002bd5 	.word	0x08002bd5
 8002b84:	08002bef 	.word	0x08002bef
 8002b88:	08002bef 	.word	0x08002bef
 8002b8c:	08002bef 	.word	0x08002bef
 8002b90:	08002bef 	.word	0x08002bef
 8002b94:	08002be1 	.word	0x08002be1
	 case T_PS:
		 HAL_GPIO_WritePin(PS1_TON_RLY_CNT_GPIO_Port, PS1_TON_RLY_CNT_Pin, GPIO_PIN_SET);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	4816      	ldr	r0, [pc, #88]	; (8002bf8 <ps_relay_off+0x140>)
 8002b9e:	f002 feb7 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002ba2:	e025      	b.n	8002bf0 <ps_relay_off+0x138>
	 case AUX_PS:
		 HAL_GPIO_WritePin(PS2_AUX_RLY_CNT_GPIO_Port, PS2_AUX_RLY_CNT_Pin, GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	4813      	ldr	r0, [pc, #76]	; (8002bf8 <ps_relay_off+0x140>)
 8002baa:	f002 feb1 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002bae:	e01f      	b.n	8002bf0 <ps_relay_off+0x138>
	 case HMG_PS:
		 HAL_GPIO_WritePin(PS3_HMG_RLY_CNT_GPIO_Port, PS3_HMG_RLY_CNT_Pin, GPIO_PIN_SET);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2108      	movs	r1, #8
 8002bb4:	4811      	ldr	r0, [pc, #68]	; (8002bfc <ps_relay_off+0x144>)
 8002bb6:	f002 feab 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002bba:	e019      	b.n	8002bf0 <ps_relay_off+0x138>
	 case PROP_BAT1_PS:
		 HAL_GPIO_WritePin(PS4_PROP1_RLY_CNT_GPIO_Port, PS4_PROP1_RLY_CNT_Pin, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	480e      	ldr	r0, [pc, #56]	; (8002bfc <ps_relay_off+0x144>)
 8002bc2:	f002 fea5 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002bc6:	e013      	b.n	8002bf0 <ps_relay_off+0x138>
	 case PROP_BAT2_PS:
		 HAL_GPIO_WritePin(PS5_PROP2_RLY_CNT_GPIO_Port, PS5_PROP2_RLY_CNT_Pin, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2120      	movs	r1, #32
 8002bcc:	480b      	ldr	r0, [pc, #44]	; (8002bfc <ps_relay_off+0x144>)
 8002bce:	f002 fe9f 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002bd2:	e00d      	b.n	8002bf0 <ps_relay_off+0x138>
	 case C_PS:
		 HAL_GPIO_WritePin(PS1_CON_RLY_CNT_GPIO_Port, PS1_CON_RLY_CNT_Pin, GPIO_PIN_SET);
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	4807      	ldr	r0, [pc, #28]	; (8002bf8 <ps_relay_off+0x140>)
 8002bda:	f002 fe99 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002bde:	e007      	b.n	8002bf0 <ps_relay_off+0x138>
	 case DS_PS:
		 HAL_GPIO_WritePin(DEPTH_SIM_RLY_CNT_GPIO_Port, DEPTH_SIM_RLY_CNT_Pin, GPIO_PIN_SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be6:	4805      	ldr	r0, [pc, #20]	; (8002bfc <ps_relay_off+0x144>)
 8002be8:	f002 fe92 	bl	8005910 <HAL_GPIO_WritePin>
		 break;
 8002bec:	e000      	b.n	8002bf0 <ps_relay_off+0x138>
	 default:
		 //error
		 break;
 8002bee:	bf00      	nop
	 }
 }
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021000 	.word	0x40021000

08002c00 <ps_feedback>:

  uint8_t ps_feedback(power_supply_identifier power_supply_type){                     //POWER SUPPLY FEEDBACK PIN READING
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]

	 uint8_t status;
	 switch(power_supply_type){
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	3b05      	subs	r3, #5
 8002c0e:	2b30      	cmp	r3, #48	; 0x30
 8002c10:	f200 80c4 	bhi.w	8002d9c <ps_feedback+0x19c>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <ps_feedback+0x1c>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002ce1 	.word	0x08002ce1
 8002c20:	08002d9d 	.word	0x08002d9d
 8002c24:	08002d9d 	.word	0x08002d9d
 8002c28:	08002d9d 	.word	0x08002d9d
 8002c2c:	08002d9d 	.word	0x08002d9d
 8002c30:	08002d9d 	.word	0x08002d9d
 8002c34:	08002d9d 	.word	0x08002d9d
 8002c38:	08002d9d 	.word	0x08002d9d
 8002c3c:	08002d9d 	.word	0x08002d9d
 8002c40:	08002d9d 	.word	0x08002d9d
 8002c44:	08002d9d 	.word	0x08002d9d
 8002c48:	08002cfb 	.word	0x08002cfb
 8002c4c:	08002d9d 	.word	0x08002d9d
 8002c50:	08002d9d 	.word	0x08002d9d
 8002c54:	08002d9d 	.word	0x08002d9d
 8002c58:	08002d9d 	.word	0x08002d9d
 8002c5c:	08002d17 	.word	0x08002d17
 8002c60:	08002d9d 	.word	0x08002d9d
 8002c64:	08002d9d 	.word	0x08002d9d
 8002c68:	08002d9d 	.word	0x08002d9d
 8002c6c:	08002d9d 	.word	0x08002d9d
 8002c70:	08002d9d 	.word	0x08002d9d
 8002c74:	08002d9d 	.word	0x08002d9d
 8002c78:	08002d9d 	.word	0x08002d9d
 8002c7c:	08002d9d 	.word	0x08002d9d
 8002c80:	08002d9d 	.word	0x08002d9d
 8002c84:	08002d9d 	.word	0x08002d9d
 8002c88:	08002d33 	.word	0x08002d33
 8002c8c:	08002d9d 	.word	0x08002d9d
 8002c90:	08002d9d 	.word	0x08002d9d
 8002c94:	08002d9d 	.word	0x08002d9d
 8002c98:	08002d9d 	.word	0x08002d9d
 8002c9c:	08002d4d 	.word	0x08002d4d
 8002ca0:	08002d9d 	.word	0x08002d9d
 8002ca4:	08002d9d 	.word	0x08002d9d
 8002ca8:	08002d9d 	.word	0x08002d9d
 8002cac:	08002d9d 	.word	0x08002d9d
 8002cb0:	08002d9d 	.word	0x08002d9d
 8002cb4:	08002d9d 	.word	0x08002d9d
 8002cb8:	08002d9d 	.word	0x08002d9d
 8002cbc:	08002d9d 	.word	0x08002d9d
 8002cc0:	08002d9d 	.word	0x08002d9d
 8002cc4:	08002d9d 	.word	0x08002d9d
 8002cc8:	08002d69 	.word	0x08002d69
 8002ccc:	08002d9d 	.word	0x08002d9d
 8002cd0:	08002d9d 	.word	0x08002d9d
 8002cd4:	08002d9d 	.word	0x08002d9d
 8002cd8:	08002d9d 	.word	0x08002d9d
 8002cdc:	08002d83 	.word	0x08002d83
	 case T_PS:
		 if(HAL_GPIO_ReadPin(PS1_TON_GPIO_Port, PS1_TON_Pin) == GPIO_PIN_SET){
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	4831      	ldr	r0, [pc, #196]	; (8002da8 <ps_feedback+0x1a8>)
 8002ce4:	f002 fdfc 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <ps_feedback+0xf4>
			 status = 0x01;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002cf2:	e054      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
		 break;
 8002cf8:	e051      	b.n	8002d9e <ps_feedback+0x19e>
	 case AUX_PS:
		 if(HAL_GPIO_ReadPin(PS2_AUX_ON_GPIO_Port, PS2_AUX_ON_Pin) == GPIO_PIN_SET){
 8002cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cfe:	482b      	ldr	r0, [pc, #172]	; (8002dac <ps_feedback+0x1ac>)
 8002d00:	f002 fdee 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <ps_feedback+0x110>
			 status = 0x01;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002d0e:	e046      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]
		 break;
 8002d14:	e043      	b.n	8002d9e <ps_feedback+0x19e>
	 case HMG_PS:
		 if(HAL_GPIO_ReadPin(PS3_HMG_ON_GPIO_Port, PS3_HMG_ON_Pin) == GPIO_PIN_SET){
 8002d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d1a:	4824      	ldr	r0, [pc, #144]	; (8002dac <ps_feedback+0x1ac>)
 8002d1c:	f002 fde0 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d102      	bne.n	8002d2c <ps_feedback+0x12c>
			 status = 0x01;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002d2a:	e038      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
		 break;
 8002d30:	e035      	b.n	8002d9e <ps_feedback+0x19e>
	 case PROP_BAT1_PS:
		 if(HAL_GPIO_ReadPin(PS4_PROP1_ON_GPIO_Port, PS4_PROP1_ON_Pin) == GPIO_PIN_SET){
 8002d32:	2180      	movs	r1, #128	; 0x80
 8002d34:	481c      	ldr	r0, [pc, #112]	; (8002da8 <ps_feedback+0x1a8>)
 8002d36:	f002 fdd3 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <ps_feedback+0x146>
			 status = 0x01;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002d44:	e02b      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
		 break;
 8002d4a:	e028      	b.n	8002d9e <ps_feedback+0x19e>
	 case PROP_BAT2_PS:
		 if(HAL_GPIO_ReadPin(PS5_PROP2_ON_GPIO_Port, PS5_PROP2_ON_Pin) == GPIO_PIN_SET){
 8002d4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d50:	4816      	ldr	r0, [pc, #88]	; (8002dac <ps_feedback+0x1ac>)
 8002d52:	f002 fdc5 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d102      	bne.n	8002d62 <ps_feedback+0x162>
			 status = 0x01;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002d60:	e01d      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
		 break;
 8002d66:	e01a      	b.n	8002d9e <ps_feedback+0x19e>
	 case C_PS:
		 if(HAL_GPIO_ReadPin(PS1_CON_GPIO_Port, PS1_CON_Pin) == GPIO_PIN_SET){
 8002d68:	2120      	movs	r1, #32
 8002d6a:	480f      	ldr	r0, [pc, #60]	; (8002da8 <ps_feedback+0x1a8>)
 8002d6c:	f002 fdb8 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <ps_feedback+0x17c>
			 status = 0x01;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002d7a:	e010      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
		 break;
 8002d80:	e00d      	b.n	8002d9e <ps_feedback+0x19e>
	 case DS_PS:
		 if(HAL_GPIO_ReadPin(DEPTH_SIM_ON_GPIO_Port, DEPTH_SIM_ON_Pin) == GPIO_PIN_SET){
 8002d82:	2108      	movs	r1, #8
 8002d84:	480a      	ldr	r0, [pc, #40]	; (8002db0 <ps_feedback+0x1b0>)
 8002d86:	f002 fdab 	bl	80058e0 <HAL_GPIO_ReadPin>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <ps_feedback+0x196>
			 status = 0x01;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
		 }
		 else{
			 status = 0x00;
		 }
		 break;
 8002d94:	e003      	b.n	8002d9e <ps_feedback+0x19e>
			 status = 0x00;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
		 break;
 8002d9a:	e000      	b.n	8002d9e <ps_feedback+0x19e>
	 default:
		 //error
		 break;
 8002d9c:	bf00      	nop
	 }
	 return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 }
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40022800 	.word	0x40022800
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021400 	.word	0x40021400

08002db4 <ms_relay_off>:

  void ms_relay_off(MS_UNIT_IDENTIFIER ms_unit, uint8_t line){                        //MODE SELECTION RELAYS OFF
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	460a      	mov	r2, r1
 8002dbe:	71fb      	strb	r3, [r7, #7]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	71bb      	strb	r3, [r7, #6]
	  switch(ms_unit){
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	2b42      	cmp	r3, #66	; 0x42
 8002dc8:	d02c      	beq.n	8002e24 <ms_relay_off+0x70>
 8002dca:	2b42      	cmp	r3, #66	; 0x42
 8002dcc:	dc3e      	bgt.n	8002e4c <ms_relay_off+0x98>
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	d002      	beq.n	8002dd8 <ms_relay_off+0x24>
 8002dd2:	2b41      	cmp	r3, #65	; 0x41
 8002dd4:	d009      	beq.n	8002dea <ms_relay_off+0x36>
			  return;
		  }
		  break;
	  default:
		  //error handling
		  break;
 8002dd6:	e039      	b.n	8002e4c <ms_relay_off+0x98>
		  if(line == 1){
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d138      	bne.n	8002e50 <ms_relay_off+0x9c>
			  HAL_GPIO_WritePin(MDAC_MS_RLY_CNT_GPIO_Port, MDAC_MS_RLY_CNT_Pin, GPIO_PIN_SET);
 8002dde:	2201      	movs	r2, #1
 8002de0:	2101      	movs	r1, #1
 8002de2:	481f      	ldr	r0, [pc, #124]	; (8002e60 <ms_relay_off+0xac>)
 8002de4:	f002 fd94 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002de8:	e037      	b.n	8002e5a <ms_relay_off+0xa6>
		  if(line == 1){
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <ms_relay_off+0x48>
			  HAL_GPIO_WritePin(IIRS_MS_RLY_CNT_1_GPIO_Port, IIRS_MS_RLY_CNT_1_Pin, GPIO_PIN_SET);
 8002df0:	2201      	movs	r2, #1
 8002df2:	2110      	movs	r1, #16
 8002df4:	481b      	ldr	r0, [pc, #108]	; (8002e64 <ms_relay_off+0xb0>)
 8002df6:	f002 fd8b 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002dfa:	e02e      	b.n	8002e5a <ms_relay_off+0xa6>
		  else if(line == 2){
 8002dfc:	79bb      	ldrb	r3, [r7, #6]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d106      	bne.n	8002e10 <ms_relay_off+0x5c>
			  HAL_GPIO_WritePin(IIRS_MS_RLY_CNT_2_GPIO_Port, IIRS_MS_RLY_CNT_2_Pin, GPIO_PIN_SET);
 8002e02:	2201      	movs	r2, #1
 8002e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e08:	4816      	ldr	r0, [pc, #88]	; (8002e64 <ms_relay_off+0xb0>)
 8002e0a:	f002 fd81 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002e0e:	e024      	b.n	8002e5a <ms_relay_off+0xa6>
		  else if(line == 3){
 8002e10:	79bb      	ldrb	r3, [r7, #6]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d11e      	bne.n	8002e54 <ms_relay_off+0xa0>
			  HAL_GPIO_WritePin(IIRS_MS_RLY_CNT_3_GPIO_Port, IIRS_MS_RLY_CNT_3_Pin, GPIO_PIN_SET);
 8002e16:	2201      	movs	r2, #1
 8002e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e1c:	4811      	ldr	r0, [pc, #68]	; (8002e64 <ms_relay_off+0xb0>)
 8002e1e:	f002 fd77 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002e22:	e01a      	b.n	8002e5a <ms_relay_off+0xa6>
		  if(line == 1){
 8002e24:	79bb      	ldrb	r3, [r7, #6]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d106      	bne.n	8002e38 <ms_relay_off+0x84>
			  HAL_GPIO_WritePin(HMG_MS_RLY_CNT_1_GPIO_Port, HMG_MS_RLY_CNT_1_Pin, GPIO_PIN_SET);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <ms_relay_off+0xb0>)
 8002e32:	f002 fd6d 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002e36:	e010      	b.n	8002e5a <ms_relay_off+0xa6>
		  else if(line == 2){
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d10c      	bne.n	8002e58 <ms_relay_off+0xa4>
			  HAL_GPIO_WritePin(HMG_MS_RLY_CNT_2_GPIO_Port, HMG_MS_RLY_CNT_2_Pin, GPIO_PIN_SET);
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e44:	4808      	ldr	r0, [pc, #32]	; (8002e68 <ms_relay_off+0xb4>)
 8002e46:	f002 fd63 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002e4a:	e006      	b.n	8002e5a <ms_relay_off+0xa6>
		  break;
 8002e4c:	bf00      	nop
 8002e4e:	e004      	b.n	8002e5a <ms_relay_off+0xa6>
			  return;
 8002e50:	bf00      	nop
 8002e52:	e002      	b.n	8002e5a <ms_relay_off+0xa6>
			  return;
 8002e54:	bf00      	nop
 8002e56:	e000      	b.n	8002e5a <ms_relay_off+0xa6>
			  return;
 8002e58:	bf00      	nop
	  }
  }
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021800 	.word	0x40021800

08002e6c <ms_relay_on>:

    void ms_relay_on(MS_UNIT_IDENTIFIER ms_unit, uint8_t line){                        //MODE SELECTION RELAYS ON
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	460a      	mov	r2, r1
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71bb      	strb	r3, [r7, #6]
	  switch(ms_unit){
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	2b42      	cmp	r3, #66	; 0x42
 8002e80:	d02c      	beq.n	8002edc <ms_relay_on+0x70>
 8002e82:	2b42      	cmp	r3, #66	; 0x42
 8002e84:	dc3e      	bgt.n	8002f04 <ms_relay_on+0x98>
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d002      	beq.n	8002e90 <ms_relay_on+0x24>
 8002e8a:	2b41      	cmp	r3, #65	; 0x41
 8002e8c:	d009      	beq.n	8002ea2 <ms_relay_on+0x36>
			  return;
		  }
		  break;
	  default:
		  //error handling
		  break;
 8002e8e:	e039      	b.n	8002f04 <ms_relay_on+0x98>
		  if(line == 1){
 8002e90:	79bb      	ldrb	r3, [r7, #6]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d138      	bne.n	8002f08 <ms_relay_on+0x9c>
			  HAL_GPIO_WritePin(MDAC_MS_RLY_CNT_GPIO_Port, MDAC_MS_RLY_CNT_Pin, GPIO_PIN_RESET);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2101      	movs	r1, #1
 8002e9a:	481f      	ldr	r0, [pc, #124]	; (8002f18 <ms_relay_on+0xac>)
 8002e9c:	f002 fd38 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002ea0:	e037      	b.n	8002f12 <ms_relay_on+0xa6>
		  if(line == 1){
 8002ea2:	79bb      	ldrb	r3, [r7, #6]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <ms_relay_on+0x48>
			  HAL_GPIO_WritePin(IIRS_MS_RLY_CNT_1_GPIO_Port, IIRS_MS_RLY_CNT_1_Pin, GPIO_PIN_RESET);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2110      	movs	r1, #16
 8002eac:	481b      	ldr	r0, [pc, #108]	; (8002f1c <ms_relay_on+0xb0>)
 8002eae:	f002 fd2f 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002eb2:	e02e      	b.n	8002f12 <ms_relay_on+0xa6>
		  else if(line == 2){
 8002eb4:	79bb      	ldrb	r3, [r7, #6]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d106      	bne.n	8002ec8 <ms_relay_on+0x5c>
			  HAL_GPIO_WritePin(IIRS_MS_RLY_CNT_2_GPIO_Port, IIRS_MS_RLY_CNT_2_Pin, GPIO_PIN_RESET);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec0:	4816      	ldr	r0, [pc, #88]	; (8002f1c <ms_relay_on+0xb0>)
 8002ec2:	f002 fd25 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002ec6:	e024      	b.n	8002f12 <ms_relay_on+0xa6>
		  else if(line == 3){
 8002ec8:	79bb      	ldrb	r3, [r7, #6]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d11e      	bne.n	8002f0c <ms_relay_on+0xa0>
			  HAL_GPIO_WritePin(IIRS_MS_RLY_CNT_3_GPIO_Port, IIRS_MS_RLY_CNT_3_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ed4:	4811      	ldr	r0, [pc, #68]	; (8002f1c <ms_relay_on+0xb0>)
 8002ed6:	f002 fd1b 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002eda:	e01a      	b.n	8002f12 <ms_relay_on+0xa6>
		  if(line == 1){
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d106      	bne.n	8002ef0 <ms_relay_on+0x84>
			  HAL_GPIO_WritePin(HMG_MS_RLY_CNT_1_GPIO_Port, HMG_MS_RLY_CNT_1_Pin, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ee8:	480c      	ldr	r0, [pc, #48]	; (8002f1c <ms_relay_on+0xb0>)
 8002eea:	f002 fd11 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002eee:	e010      	b.n	8002f12 <ms_relay_on+0xa6>
		  else if(line == 2){
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d10c      	bne.n	8002f10 <ms_relay_on+0xa4>
			  HAL_GPIO_WritePin(HMG_MS_RLY_CNT_2_GPIO_Port, HMG_MS_RLY_CNT_2_Pin, GPIO_PIN_RESET);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <ms_relay_on+0xb4>)
 8002efe:	f002 fd07 	bl	8005910 <HAL_GPIO_WritePin>
		  break;
 8002f02:	e006      	b.n	8002f12 <ms_relay_on+0xa6>
		  break;
 8002f04:	bf00      	nop
 8002f06:	e004      	b.n	8002f12 <ms_relay_on+0xa6>
			  return;
 8002f08:	bf00      	nop
 8002f0a:	e002      	b.n	8002f12 <ms_relay_on+0xa6>
			  return;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <ms_relay_on+0xa6>
			  return;
 8002f10:	bf00      	nop
	  }
  }
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40020c00 	.word	0x40020c00
 8002f20:	40021800 	.word	0x40021800

08002f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f28:	b672      	cpsid	i
}
 8002f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <Error_Handler+0x8>
	...

08002f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <HAL_MspInit+0x4c>)
 8002f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f44:	6453      	str	r3, [r2, #68]	; 0x44
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_MspInit+0x4c>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_MspInit+0x4c>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <HAL_MspInit+0x4c>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	6413      	str	r3, [r2, #64]	; 0x40
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <HAL_MspInit+0x4c>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800

08002f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <HAL_SPI_MspInit+0x84>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12c      	bne.n	8002ffc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_SPI_MspInit+0x88>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SADC_SCK_Pin|SADC_MISO_Pin|SADC_MOSI_Pin;
 8002fda:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002fec:	2305      	movs	r3, #5
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4805      	ldr	r0, [pc, #20]	; (800300c <HAL_SPI_MspInit+0x8c>)
 8002ff8:	f002 fac6 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002ffc:	bf00      	nop
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40015000 	.word	0x40015000
 8003008:	40023800 	.word	0x40023800
 800300c:	40021400 	.word	0x40021400

08003010 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0b      	ldr	r2, [pc, #44]	; (800304c <HAL_TIM_Base_MspInit+0x3c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d10d      	bne.n	800303e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_TIM_Base_MspInit+0x40>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_TIM_Base_MspInit+0x40>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_TIM_Base_MspInit+0x40>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40010000 	.word	0x40010000
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_UART_MspInit+0x160>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d12d      	bne.n	80030d2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <HAL_UART_MspInit+0x164>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a47      	ldr	r2, [pc, #284]	; (80031b8 <HAL_UART_MspInit+0x164>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b45      	ldr	r3, [pc, #276]	; (80031b8 <HAL_UART_MspInit+0x164>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80030ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030bc:	2303      	movs	r3, #3
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030c0:	2307      	movs	r3, #7
 80030c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c8:	4619      	mov	r1, r3
 80030ca:	483c      	ldr	r0, [pc, #240]	; (80031bc <HAL_UART_MspInit+0x168>)
 80030cc:	f002 fa5c 	bl	8005588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030d0:	e06b      	b.n	80031aa <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3a      	ldr	r2, [pc, #232]	; (80031c0 <HAL_UART_MspInit+0x16c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d12c      	bne.n	8003136 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_UART_MspInit+0x164>)
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	4a34      	ldr	r2, [pc, #208]	; (80031b8 <HAL_UART_MspInit+0x164>)
 80030e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ea:	6413      	str	r3, [r2, #64]	; 0x40
 80030ec:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_UART_MspInit+0x164>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <HAL_UART_MspInit+0x164>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	4a2d      	ldr	r2, [pc, #180]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003102:	f043 0308 	orr.w	r3, r3, #8
 8003106:	6313      	str	r3, [r2, #48]	; 0x30
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_UART_MspInit+0x164>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003114:	2360      	movs	r3, #96	; 0x60
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003124:	2307      	movs	r3, #7
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312c:	4619      	mov	r1, r3
 800312e:	4825      	ldr	r0, [pc, #148]	; (80031c4 <HAL_UART_MspInit+0x170>)
 8003130:	f002 fa2a 	bl	8005588 <HAL_GPIO_Init>
}
 8003134:	e039      	b.n	80031aa <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_UART_MspInit+0x174>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d134      	bne.n	80031aa <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_UART_MspInit+0x164>)
 800314a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314e:	6413      	str	r3, [r2, #64]	; 0x40
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_UART_MspInit+0x164>)
 8003166:	f043 0308 	orr.w	r3, r3, #8
 800316a:	6313      	str	r3, [r2, #48]	; 0x30
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_UART_MspInit+0x164>)
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800318a:	2307      	movs	r3, #7
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800318e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003192:	4619      	mov	r1, r3
 8003194:	480b      	ldr	r0, [pc, #44]	; (80031c4 <HAL_UART_MspInit+0x170>)
 8003196:	f002 f9f7 	bl	8005588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2101      	movs	r1, #1
 800319e:	2027      	movs	r0, #39	; 0x27
 80031a0:	f001 f827 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031a4:	2027      	movs	r0, #39	; 0x27
 80031a6:	f001 f840 	bl	800422a <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3738      	adds	r7, #56	; 0x38
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020000 	.word	0x40020000
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40020c00 	.word	0x40020c00
 80031c8:	40004800 	.word	0x40004800

080031cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031d0:	e7fe      	b.n	80031d0 <NMI_Handler+0x4>

080031d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d6:	e7fe      	b.n	80031d6 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <MemManage_Handler+0x4>

080031de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <BusFault_Handler+0x4>

080031e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <UsageFault_Handler+0x4>

080031ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 fecc 	bl	8003fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <USART3_IRQHandler+0x10>)
 8003226:	f003 fd0b 	bl	8006c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200001d8 	.word	0x200001d8

08003234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return 1;
 8003238:	2301      	movs	r3, #1
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_kill>:

int _kill(int pid, int sig)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <_kill+0x20>)
 8003250:	2216      	movs	r2, #22
 8003252:	601a      	str	r2, [r3, #0]
  return -1;
 8003254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	2000abb0 	.word	0x2000abb0

08003268 <_exit>:

void _exit (int status)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ffe5 	bl	8003244 <_kill>
  while (1) {}    /* Make sure we hang here */
 800327a:	e7fe      	b.n	800327a <_exit+0x12>

0800327c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e00a      	b.n	80032a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800328e:	f3af 8000 	nop.w
 8003292:	4601      	mov	r1, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	60ba      	str	r2, [r7, #8]
 800329a:	b2ca      	uxtb	r2, r1
 800329c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dbf0      	blt.n	800328e <_read+0x12>
  }

  return len;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e009      	b.n	80032dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	60ba      	str	r2, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3301      	adds	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	dbf1      	blt.n	80032c8 <_write+0x12>
  }
  return len;
 80032e4:	687b      	ldr	r3, [r7, #4]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_close>:

int _close(int file)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003316:	605a      	str	r2, [r3, #4]
  return 0;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_isatty>:

int _isatty(int file)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <_sbrk+0x5c>)
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <_sbrk+0x60>)
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <_sbrk+0x64>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <_sbrk+0x64>)
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <_sbrk+0x68>)
 8003378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <_sbrk+0x64>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	429a      	cmp	r2, r3
 8003386:	d205      	bcs.n	8003394 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <_sbrk+0x6c>)
 800338a:	220c      	movs	r2, #12
 800338c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	e009      	b.n	80033a8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <_sbrk+0x64>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	4a06      	ldr	r2, [pc, #24]	; (80033bc <_sbrk+0x64>)
 80033a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20030000 	.word	0x20030000
 80033b8:	00000400 	.word	0x00000400
 80033bc:	200005b0 	.word	0x200005b0
 80033c0:	2000abc0 	.word	0x2000abc0
 80033c4:	2000abb0 	.word	0x2000abb0

080033c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <SystemInit+0x20>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <SystemInit+0x20>)
 80033d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <tcp_server_init>:
   2. Bind the Block to server address, and port.
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */
void tcp_server_init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 80033f2:	f008 fa19 	bl	800b828 <tcp_new>
 80033f6:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 0, 10);                               //IP ADDRESS
 80033f8:	4b10      	ldr	r3, [pc, #64]	; (800343c <tcp_server_init+0x50>)
 80033fa:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 8080);
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	f641 7290 	movw	r2, #8080	; 0x1f90
 8003402:	4619      	mov	r1, r3
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f007 f96b 	bl	800a6e0 <tcp_bind>
 800340a:	4603      	mov	r3, r0
 800340c:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 800340e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <tcp_server_init+0x3e>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8003416:	21ff      	movs	r1, #255	; 0xff
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f007 fa19 	bl	800a850 <tcp_listen_with_backlog>
 800341e:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <tcp_server_init+0x54>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f008 fa80 	bl	800b928 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8003428:	e003      	b.n	8003432 <tcp_server_init+0x46>
		memp_free(MEMP_TCP_PCB, tpcb);
 800342a:	68f9      	ldr	r1, [r7, #12]
 800342c:	2001      	movs	r0, #1
 800342e:	f005 fd3d 	bl	8008eac <memp_free>
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0a00a8c0 	.word	0x0a00a8c0
 8003440:	08003445 	.word	0x08003445

08003444 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8003452:	2101      	movs	r1, #1
 8003454:	68b8      	ldr	r0, [r7, #8]
 8003456:	f007 fff5 	bl	800b444 <tcp_setprio>

  tcp_nagle_disable(newpcb);               //added 21/2/24
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	8b5b      	ldrh	r3, [r3, #26]
 800345e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003462:	b29a      	uxth	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	835a      	strh	r2, [r3, #26]

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8003468:	200c      	movs	r0, #12
 800346a:	f005 fb1f 	bl	8008aac <mem_malloc>
 800346e:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01f      	beq.n	80034b6 <tcp_server_accept+0x72>
  {
    es->state = ES_ACCEPTED;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2200      	movs	r2, #0
 8003486:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 800348e:	6939      	ldr	r1, [r7, #16]
 8003490:	68b8      	ldr	r0, [r7, #8]
 8003492:	f008 f9d1 	bl	800b838 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8003496:	490e      	ldr	r1, [pc, #56]	; (80034d0 <tcp_server_accept+0x8c>)
 8003498:	68b8      	ldr	r0, [r7, #8]
 800349a:	f008 f9df 	bl	800b85c <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 800349e:	490d      	ldr	r1, [pc, #52]	; (80034d4 <tcp_server_accept+0x90>)
 80034a0:	68b8      	ldr	r0, [r7, #8]
 80034a2:	f008 fa1f 	bl	800b8e4 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	490b      	ldr	r1, [pc, #44]	; (80034d8 <tcp_server_accept+0x94>)
 80034aa:	68b8      	ldr	r0, [r7, #8]
 80034ac:	f008 fa54 	bl	800b958 <tcp_poll>



    ret_err = ERR_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
 80034b4:	e005      	b.n	80034c2 <tcp_server_accept+0x7e>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80034b6:	6939      	ldr	r1, [r7, #16]
 80034b8:	68b8      	ldr	r0, [r7, #8]
 80034ba:	f000 f96f 	bl	800379c <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80034be:	23ff      	movs	r3, #255	; 0xff
 80034c0:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80034c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	080034dd 	.word	0x080034dd
 80034d4:	0800361d 	.word	0x0800361d
 80034d8:	08003641 	.word	0x08003641

080034dc <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
 static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <tcp_server_recv+0x20>
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <tcp_server_recv+0x130>)
 80034f2:	22d3      	movs	r2, #211	; 0xd3
 80034f4:	4946      	ldr	r1, [pc, #280]	; (8003610 <tcp_server_recv+0x134>)
 80034f6:	4847      	ldr	r0, [pc, #284]	; (8003614 <tcp_server_recv+0x138>)
 80034f8:	f00f fd9a 	bl	8013030 <iprintf>

  es = (struct tcp_server_struct *)arg;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2203      	movs	r2, #3
 800350a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	68b8      	ldr	r0, [r7, #8]
 8003518:	f000 f940 	bl	800379c <tcp_server_connection_close>
 800351c:	e007      	b.n	800352e <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 800351e:	493e      	ldr	r1, [pc, #248]	; (8003618 <tcp_server_recv+0x13c>)
 8003520:	68b8      	ldr	r0, [r7, #8]
 8003522:	f008 f9bd 	bl	800b8a0 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f000 f8e1 	bl	80036f0 <tcp_server_send>
    }
    ret_err = ERR_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e065      	b.n	8003600 <tcp_server_recv+0x124>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8003534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f006 fb25 	bl	8009b98 <pbuf_free>
    }
    ret_err = err;
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e055      	b.n	8003600 <tcp_server_recv+0x124>
  }
  else if(es->state == ES_ACCEPTED)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d113      	bne.n	8003584 <tcp_server_recv+0xa8>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8003568:	492b      	ldr	r1, [pc, #172]	; (8003618 <tcp_server_recv+0x13c>)
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f008 f998 	bl	800b8a0 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es,p,ret_err);
 8003570:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	69b9      	ldr	r1, [r7, #24]
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f000 f937 	bl	80037ec <tcp_server_handle>


    ret_err = ERR_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e03d      	b.n	8003600 <tcp_server_recv+0x124>
  }
  else if (es->state == ES_RECEIVED)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b02      	cmp	r3, #2
 800358a:	d118      	bne.n	80035be <tcp_server_recv+0xe2>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <tcp_server_recv+0xce>
    {
      es->p = p;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es,p,ret_err);
 800359a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	68b8      	ldr	r0, [r7, #8]
 80035a4:	f000 f922 	bl	80037ec <tcp_server_handle>
 80035a8:	e006      	b.n	80035b8 <tcp_server_recv+0xdc>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6978      	ldr	r0, [r7, #20]
 80035b4:	f006 fc08 	bl	8009dc8 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e020      	b.n	8003600 <tcp_server_recv+0x124>
  }
  else if(es->state == ES_CLOSING)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d10e      	bne.n	80035e4 <tcp_server_recv+0x108>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	891b      	ldrh	r3, [r3, #8]
 80035ca:	4619      	mov	r1, r3
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f007 fa55 	bl	800aa7c <tcp_recved>
    es->p = NULL;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f006 fadd 	bl	8009b98 <pbuf_free>
    ret_err = ERR_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e00d      	b.n	8003600 <tcp_server_recv+0x124>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	891b      	ldrh	r3, [r3, #8]
 80035e8:	4619      	mov	r1, r3
 80035ea:	68b8      	ldr	r0, [r7, #8]
 80035ec:	f007 fa46 	bl	800aa7c <tcp_recved>
    es->p = NULL;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f006 face 	bl	8009b98 <pbuf_free>
    ret_err = ERR_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8003600:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	08013e6c 	.word	0x08013e6c
 8003610:	08013e88 	.word	0x08013e88
 8003614:	08013e94 	.word	0x08013e94
 8003618:	080036a1 	.word	0x080036a1

0800361c <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f005 f8d4 	bl	80087e0 <mem_free>
  }
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d017      	beq.n	8003684 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 800365c:	490f      	ldr	r1, [pc, #60]	; (800369c <tcp_server_poll+0x5c>)
 800365e:	6838      	ldr	r0, [r7, #0]
 8003660:	f008 f91e 	bl	800b8a0 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f000 f842 	bl	80036f0 <tcp_server_send>
 800366c:	e007      	b.n	800367e <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d103      	bne.n	800367e <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f000 f88f 	bl	800379c <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e004      	b.n	800368e <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f007 f81f 	bl	800a6c8 <tcp_abort>
    ret_err = ERR_ABRT;
 800368a:	23f3      	movs	r3, #243	; 0xf3
 800368c:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	080036a1 	.word	0x080036a1

080036a0 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80036c0:	490a      	ldr	r1, [pc, #40]	; (80036ec <tcp_server_sent+0x4c>)
 80036c2:	68b8      	ldr	r0, [r7, #8]
 80036c4:	f008 f8ec 	bl	800b8a0 <tcp_sent>
    tcp_server_send(tpcb, es);
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	68b8      	ldr	r0, [r7, #8]
 80036cc:	f000 f810 	bl	80036f0 <tcp_server_send>
 80036d0:	e007      	b.n	80036e2 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d103      	bne.n	80036e2 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 80036da:	6979      	ldr	r1, [r7, #20]
 80036dc:	68b8      	ldr	r0, [r7, #8]
 80036de:	f000 f85d 	bl	800379c <tcp_server_connection_close>
  }
  return ERR_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	080036a1 	.word	0x080036a1

080036f0 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
 void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]

 /* end of modification*/



  while ((wr_err == ERR_OK) &&
 80036fe:	e039      	b.n	8003774 <tcp_server_send+0x84>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	895a      	ldrh	r2, [r3, #10]
 800370e:	2301      	movs	r3, #1
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f00a ffd3 	bl	800e6bc <tcp_write>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]
    tcp_output(tpcb);                                                   //added
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f00b fdb8 	bl	800f290 <tcp_output>

    if (wr_err == ERR_OK)
 8003720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11d      	bne.n	8003764 <tcp_server_send+0x74>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	895b      	ldrh	r3, [r3, #10]
 800372c:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <tcp_server_send+0x58>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f006 fac8 	bl	8009cd8 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8003748:	6938      	ldr	r0, [r7, #16]
 800374a:	f006 fa25 	bl	8009b98 <pbuf_free>
 800374e:	4603      	mov	r3, r0
 8003750:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8003752:	7b7b      	ldrb	r3, [r7, #13]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f7      	beq.n	8003748 <tcp_server_send+0x58>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8003758:	89fb      	ldrh	r3, [r7, #14]
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f007 f98d 	bl	800aa7c <tcp_recved>
 8003762:	e007      	b.n	8003774 <tcp_server_send+0x84>
   }
   else if(wr_err == ERR_MEM)
 8003764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d102      	bne.n	8003774 <tcp_server_send+0x84>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 8003774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <tcp_server_send+0xa4>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <tcp_server_send+0xa4>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	895a      	ldrh	r2, [r3, #10]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8003790:	429a      	cmp	r2, r3
 8003792:	d9b5      	bls.n	8003700 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8003794:	bf00      	nop
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80037a6:	2100      	movs	r1, #0
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f008 f845 	bl	800b838 <tcp_arg>
  tcp_sent(tpcb, NULL);
 80037ae:	2100      	movs	r1, #0
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f008 f875 	bl	800b8a0 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80037b6:	2100      	movs	r1, #0
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f008 f84f 	bl	800b85c <tcp_recv>
  tcp_err(tpcb, NULL);
 80037be:	2100      	movs	r1, #0
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f008 f88f 	bl	800b8e4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f008 f8c4 	bl	800b958 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	f005 f802 	bl	80087e0 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f006 fe89 	bl	800a4f4 <tcp_close>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es,struct pbuf *p, err_t err)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	70fb      	strb	r3, [r7, #3]
	struct tcp_server_struct *esTx;
	uint16_t copied_ret;

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	613b      	str	r3, [r7, #16]
	uint16_t inPort = tpcb->remote_port;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8b1b      	ldrh	r3, [r3, #24]
 8003804:	83fb      	strh	r3, [r7, #30]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8003806:	f107 0310 	add.w	r3, r7, #16
 800380a:	4618      	mov	r0, r3
 800380c:	f00e fb6c 	bl	8011ee8 <ip4addr_ntoa>
 8003810:	61b8      	str	r0, [r7, #24]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

    if (es->p != NULL) {
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d026      	beq.n	8003868 <tcp_server_handle+0x7c>
    	if(es->p->tot_len <= MAX_BUF_SIZE){
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	891b      	ldrh	r3, [r3, #8]
 8003820:	2b64      	cmp	r3, #100	; 0x64
 8003822:	d806      	bhi.n	8003832 <tcp_server_handle+0x46>
    		receive_buffer_size = es->p->tot_len;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	891b      	ldrh	r3, [r3, #8]
 800382a:	461a      	mov	r2, r3
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <tcp_server_handle+0x84>)
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <tcp_server_handle+0x4c>
    	}
    	else{
    		receive_buffer_size = 100;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <tcp_server_handle+0x84>)
 8003834:	2264      	movs	r2, #100	; 0x64
 8003836:	601a      	str	r2, [r3, #0]
    	}
        if (receive_buffer != NULL) {
            // Copy the data from pbuf to the receive_buffer
            copied_ret = pbuf_copy_partial(es->p, receive_buffer, receive_buffer_size, 0);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6898      	ldr	r0, [r3, #8]
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <tcp_server_handle+0x84>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	b29a      	uxth	r2, r3
 8003842:	2300      	movs	r3, #0
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <tcp_server_handle+0x88>)
 8003846:	f006 fba1 	bl	8009f8c <pbuf_copy_partial>
 800384a:	4603      	mov	r3, r0
 800384c:	82fb      	strh	r3, [r7, #22]
            if(copied_ret > 0){
 800384e:	8afb      	ldrh	r3, [r7, #22]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <tcp_server_handle+0x7c>

            	// Process the received data (you need to define this function)
            	process_received_data(tpcb,receive_buffer,receive_buffer_size,es);
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <tcp_server_handle+0x84>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4906      	ldr	r1, [pc, #24]	; (8003874 <tcp_server_handle+0x88>)
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 f80b 	bl	8003878 <process_received_data>
            	// Free the received pbuf
            	pbuf_free(p);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f006 f998 	bl	8009b98 <pbuf_free>
//	tcp_server_send(tpcb, esTx);
//
//	pbuf_free(es->p);


}
 8003868:	bf00      	nop
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000284 	.word	0x20000284
 8003874:	20000220 	.word	0x20000220

08003878 <process_received_data>:
void process_received_data(struct tcp_pcb *tpcb,uint8_t* receive_buffer,uint32_t receive_buffer_size,struct tcp_server_struct *es){
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
	if(receive_buffer[0] == 0xFB && receive_buffer[1] == 0xFB){                       //TM_ITP MESSAGE (M10)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2bfb      	cmp	r3, #251	; 0xfb
 800388c:	f040 8091 	bne.w	80039b2 <process_received_data+0x13a>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	3301      	adds	r3, #1
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2bfb      	cmp	r3, #251	; 0xfb
 8003898:	f040 808b 	bne.w	80039b2 <process_received_data+0x13a>
		if(receive_buffer[10] == 0xBF && receive_buffer[11] == 0xBF){
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	330a      	adds	r3, #10
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2bbf      	cmp	r3, #191	; 0xbf
 80038a4:	f040 815c 	bne.w	8003b60 <process_received_data+0x2e8>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	330b      	adds	r3, #11
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2bbf      	cmp	r3, #191	; 0xbf
 80038b0:	f040 8156 	bne.w	8003b60 <process_received_data+0x2e8>

			memset(tm_response_buffer,0x00,sizeof(tm_response_buffer));
 80038b4:	2264      	movs	r2, #100	; 0x64
 80038b6:	2100      	movs	r1, #0
 80038b8:	48a0      	ldr	r0, [pc, #640]	; (8003b3c <process_received_data+0x2c4>)
 80038ba:	f00f fc1e 	bl	80130fa <memset>
			tm_response_buffer[0] = (uint8_t)(ITP_TM_HEADER) ;
 80038be:	4b9f      	ldr	r3, [pc, #636]	; (8003b3c <process_received_data+0x2c4>)
 80038c0:	22fa      	movs	r2, #250	; 0xfa
 80038c2:	701a      	strb	r2, [r3, #0]
			tm_response_buffer[1] = (uint8_t)(ITP_TM_HEADER);
 80038c4:	4b9d      	ldr	r3, [pc, #628]	; (8003b3c <process_received_data+0x2c4>)
 80038c6:	22fa      	movs	r2, #250	; 0xfa
 80038c8:	705a      	strb	r2, [r3, #1]

			tm_response_buffer[2] = 29;//(uint8_t)ITP_TM_PAYLOAD;
 80038ca:	4b9c      	ldr	r3, [pc, #624]	; (8003b3c <process_received_data+0x2c4>)
 80038cc:	221d      	movs	r2, #29
 80038ce:	709a      	strb	r2, [r3, #2]

			tm_response_buffer[27] = (uint8_t)(ITP_TM_FOOTER) ;
 80038d0:	4b9a      	ldr	r3, [pc, #616]	; (8003b3c <process_received_data+0x2c4>)
 80038d2:	22af      	movs	r2, #175	; 0xaf
 80038d4:	76da      	strb	r2, [r3, #27]
			tm_response_buffer[28] = (uint8_t)(ITP_TM_FOOTER);
 80038d6:	4b99      	ldr	r3, [pc, #612]	; (8003b3c <process_received_data+0x2c4>)
 80038d8:	22af      	movs	r2, #175	; 0xaf
 80038da:	771a      	strb	r2, [r3, #28]


			if(receive_buffer[4] == 0x01){            //power checks
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3304      	adds	r3, #4
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 813c 	bne.w	8003b60 <process_received_data+0x2e8>
				tm_response_buffer[3] = 0x01; 				 //UPDATE performing test number
 80038e8:	4b94      	ldr	r3, [pc, #592]	; (8003b3c <process_received_data+0x2c4>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	70da      	strb	r2, [r3, #3]
				connector = receive_buffer[6];
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	799a      	ldrb	r2, [r3, #6]
 80038f2:	4b93      	ldr	r3, [pc, #588]	; (8003b40 <process_received_data+0x2c8>)
 80038f4:	701a      	strb	r2, [r3, #0]
				pin_no = receive_buffer[7];
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	79da      	ldrb	r2, [r3, #7]
 80038fa:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <process_received_data+0x2cc>)
 80038fc:	701a      	strb	r2, [r3, #0]

				tm_response_buffer[8] = connector;          //UPDATE CONNECTOR AND PIN
 80038fe:	4b90      	ldr	r3, [pc, #576]	; (8003b40 <process_received_data+0x2c8>)
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	4b8e      	ldr	r3, [pc, #568]	; (8003b3c <process_received_data+0x2c4>)
 8003904:	721a      	strb	r2, [r3, #8]
				tm_response_buffer[9] = pin_no;
 8003906:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <process_received_data+0x2cc>)
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	4b8c      	ldr	r3, [pc, #560]	; (8003b3c <process_received_data+0x2c4>)
 800390c:	725a      	strb	r2, [r3, #9]
				tm_response_buffer[10]= 0x00;
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <process_received_data+0x2c4>)
 8003910:	2200      	movs	r2, #0
 8003912:	729a      	strb	r2, [r3, #10]

				//tcp_server_feedback(tpcb, tm_response_buffer, 29, es);

				delaymilliseconds(2000);
 8003914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003918:	f7fd fa34 	bl	8000d84 <delaymilliseconds>
				if(power_check (connector,pin_no) == NORMAL){
 800391c:	4b88      	ldr	r3, [pc, #544]	; (8003b40 <process_received_data+0x2c8>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4a88      	ldr	r2, [pc, #544]	; (8003b44 <process_received_data+0x2cc>)
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fa44 	bl	8000db4 <power_check>
 800392c:	4603      	mov	r3, r0
 800392e:	2b02      	cmp	r3, #2
 8003930:	d10b      	bne.n	800394a <process_received_data+0xd2>
					tm_response_buffer[8] = connector;          //UPDATE CONNECTOR AND PIN
 8003932:	4b83      	ldr	r3, [pc, #524]	; (8003b40 <process_received_data+0x2c8>)
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	4b81      	ldr	r3, [pc, #516]	; (8003b3c <process_received_data+0x2c4>)
 8003938:	721a      	strb	r2, [r3, #8]
					tm_response_buffer[9] = pin_no;
 800393a:	4b82      	ldr	r3, [pc, #520]	; (8003b44 <process_received_data+0x2cc>)
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	4b7f      	ldr	r3, [pc, #508]	; (8003b3c <process_received_data+0x2c4>)
 8003940:	725a      	strb	r2, [r3, #9]
					tm_response_buffer[10]= 0x02;
 8003942:	4b7e      	ldr	r3, [pc, #504]	; (8003b3c <process_received_data+0x2c4>)
 8003944:	2202      	movs	r2, #2
 8003946:	729a      	strb	r2, [r3, #10]
 8003948:	e02c      	b.n	80039a4 <process_received_data+0x12c>
				}
				else if(power_check (connector,pin_no) == UNDER_VOLTAGE){
 800394a:	4b7d      	ldr	r3, [pc, #500]	; (8003b40 <process_received_data+0x2c8>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <process_received_data+0x2cc>)
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fa2d 	bl	8000db4 <power_check>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10b      	bne.n	8003978 <process_received_data+0x100>
					tm_response_buffer[8] = connector;          //UPDATE CONNECTOR AND PIN
 8003960:	4b77      	ldr	r3, [pc, #476]	; (8003b40 <process_received_data+0x2c8>)
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	4b75      	ldr	r3, [pc, #468]	; (8003b3c <process_received_data+0x2c4>)
 8003966:	721a      	strb	r2, [r3, #8]
					tm_response_buffer[9] = pin_no;
 8003968:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <process_received_data+0x2cc>)
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	4b73      	ldr	r3, [pc, #460]	; (8003b3c <process_received_data+0x2c4>)
 800396e:	725a      	strb	r2, [r3, #9]
					tm_response_buffer[10]= 0x01;
 8003970:	4b72      	ldr	r3, [pc, #456]	; (8003b3c <process_received_data+0x2c4>)
 8003972:	2201      	movs	r2, #1
 8003974:	729a      	strb	r2, [r3, #10]
 8003976:	e015      	b.n	80039a4 <process_received_data+0x12c>
				}
				else if(power_check (connector,pin_no) == OVER_VOLTAGE){
 8003978:	4b71      	ldr	r3, [pc, #452]	; (8003b40 <process_received_data+0x2c8>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <process_received_data+0x2cc>)
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fa16 	bl	8000db4 <power_check>
 8003988:	4603      	mov	r3, r0
 800398a:	2b03      	cmp	r3, #3
 800398c:	d10a      	bne.n	80039a4 <process_received_data+0x12c>
					tm_response_buffer[8] = connector;          //UPDATE CONNECTOR AND PIN
 800398e:	4b6c      	ldr	r3, [pc, #432]	; (8003b40 <process_received_data+0x2c8>)
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <process_received_data+0x2c4>)
 8003994:	721a      	strb	r2, [r3, #8]
					tm_response_buffer[9] = pin_no;
 8003996:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <process_received_data+0x2cc>)
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <process_received_data+0x2c4>)
 800399c:	725a      	strb	r2, [r3, #9]
					tm_response_buffer[10]= 0x03;
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <process_received_data+0x2c4>)
 80039a0:	2203      	movs	r2, #3
 80039a2:	729a      	strb	r2, [r3, #10]
				}
				else{
					//implement time out
				}
				tcp_server_feedback(tpcb, tm_response_buffer, 29, es);               // UPDATE RESULT ITP-TM (M9.1)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	221d      	movs	r2, #29
 80039a8:	4964      	ldr	r1, [pc, #400]	; (8003b3c <process_received_data+0x2c4>)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f8de 	bl	8003b6c <tcp_server_feedback>
		if(receive_buffer[10] == 0xBF && receive_buffer[11] == 0xBF){
 80039b0:	e0d6      	b.n	8003b60 <process_received_data+0x2e8>





	else if(receive_buffer[0] == 0xAB && receive_buffer[1] == 0xAB){                       //CCU-ITP (M1)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2bab      	cmp	r3, #171	; 0xab
 80039b8:	f040 80d3 	bne.w	8003b62 <process_received_data+0x2ea>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3301      	adds	r3, #1
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2bab      	cmp	r3, #171	; 0xab
 80039c4:	f040 80cd 	bne.w	8003b62 <process_received_data+0x2ea>
		if (receive_buffer[26] == 0xBA && receive_buffer[27] == 0xBA){
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	331a      	adds	r3, #26
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2bba      	cmp	r3, #186	; 0xba
 80039d0:	f040 80c7 	bne.w	8003b62 <process_received_data+0x2ea>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	331b      	adds	r3, #27
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2bba      	cmp	r3, #186	; 0xba
 80039dc:	f040 80c1 	bne.w	8003b62 <process_received_data+0x2ea>

			memset(ccu_response_buffer,0x00,sizeof(ccu_response_buffer));
 80039e0:	2264      	movs	r2, #100	; 0x64
 80039e2:	2100      	movs	r1, #0
 80039e4:	4858      	ldr	r0, [pc, #352]	; (8003b48 <process_received_data+0x2d0>)
 80039e6:	f00f fb88 	bl	80130fa <memset>

			ccu_response_buffer[0] = (uint8_t)(ITP_CCU_HEADER >> 8);
 80039ea:	4b57      	ldr	r3, [pc, #348]	; (8003b48 <process_received_data+0x2d0>)
 80039ec:	22ab      	movs	r2, #171	; 0xab
 80039ee:	701a      	strb	r2, [r3, #0]
			ccu_response_buffer[1] = (uint8_t)(ITP_CCU_HEADER);
 80039f0:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <process_received_data+0x2d0>)
 80039f2:	220b      	movs	r2, #11
 80039f4:	705a      	strb	r2, [r3, #1]

			ccu_response_buffer[2] = 12;//(uint8_t) (ITP_CCU_PAYLOAD);
 80039f6:	4b54      	ldr	r3, [pc, #336]	; (8003b48 <process_received_data+0x2d0>)
 80039f8:	220c      	movs	r2, #12
 80039fa:	709a      	strb	r2, [r3, #2]

			ccu_response_buffer[10] = (uint8_t)(ITP_CCU_FOOTER >> 8);
 80039fc:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <process_received_data+0x2d0>)
 80039fe:	22ba      	movs	r2, #186	; 0xba
 8003a00:	729a      	strb	r2, [r3, #10]
			ccu_response_buffer[11] = (uint8_t)(ITP_CCU_FOOTER);
 8003a02:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <process_received_data+0x2d0>)
 8003a04:	220a      	movs	r2, #10
 8003a06:	72da      	strb	r2, [r3, #11]

			if (receive_buffer[3] == 0x01){  									 //Power supply command
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	3303      	adds	r3, #3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d149      	bne.n	8003aa6 <process_received_data+0x22e>
				ccu_response_buffer[3] = 0x01;   //update power supply feedback
 8003a12:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <process_received_data+0x2d0>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	70da      	strb	r2, [r3, #3]
				power_supply_type = receive_buffer[4];
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	791a      	ldrb	r2, [r3, #4]
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <process_received_data+0x2d4>)
 8003a1e:	701a      	strb	r2, [r3, #0]
				power_supply_command = receive_buffer[5];
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	795a      	ldrb	r2, [r3, #5]
 8003a24:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <process_received_data+0x2d8>)
 8003a26:	701a      	strb	r2, [r3, #0]

				if(power_supply_operation(power_supply_type, power_supply_command) == POWER_SUPPLY_ON){
 8003a28:	4b48      	ldr	r3, [pc, #288]	; (8003b4c <process_received_data+0x2d4>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	4a48      	ldr	r2, [pc, #288]	; (8003b50 <process_received_data+0x2d8>)
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fb6e 	bl	8002114 <power_supply_operation>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d107      	bne.n	8003a4e <process_received_data+0x1d6>

					ccu_response_buffer[4] = power_supply_type;
 8003a3e:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <process_received_data+0x2d4>)
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	4b41      	ldr	r3, [pc, #260]	; (8003b48 <process_received_data+0x2d0>)
 8003a44:	711a      	strb	r2, [r3, #4]
					ccu_response_buffer[5] = 0x02;  //POWER SUPPLY ON
 8003a46:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <process_received_data+0x2d0>)
 8003a48:	2202      	movs	r2, #2
 8003a4a:	715a      	strb	r2, [r3, #5]
 8003a4c:	e024      	b.n	8003a98 <process_received_data+0x220>
				}
				else if(power_supply_operation(power_supply_type, power_supply_command) == POWER_SUPPLY_OFF){
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <process_received_data+0x2d4>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	4a3f      	ldr	r2, [pc, #252]	; (8003b50 <process_received_data+0x2d8>)
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fb5b 	bl	8002114 <power_supply_operation>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d107      	bne.n	8003a74 <process_received_data+0x1fc>
					ccu_response_buffer[4] = power_supply_type;
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <process_received_data+0x2d4>)
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <process_received_data+0x2d0>)
 8003a6a:	711a      	strb	r2, [r3, #4]
					ccu_response_buffer[5] = 0x06;  //POWER SUPPLY OFF
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <process_received_data+0x2d0>)
 8003a6e:	2206      	movs	r2, #6
 8003a70:	715a      	strb	r2, [r3, #5]
 8003a72:	e011      	b.n	8003a98 <process_received_data+0x220>
				}
				else if(power_supply_operation(power_supply_type, power_supply_command) == POWER_SUPPLY_ERROR){
 8003a74:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <process_received_data+0x2d4>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	4a35      	ldr	r2, [pc, #212]	; (8003b50 <process_received_data+0x2d8>)
 8003a7a:	7812      	ldrb	r2, [r2, #0]
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fb48 	bl	8002114 <power_supply_operation>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d106      	bne.n	8003a98 <process_received_data+0x220>
					ccu_response_buffer[4] = power_supply_type;
 8003a8a:	4b30      	ldr	r3, [pc, #192]	; (8003b4c <process_received_data+0x2d4>)
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <process_received_data+0x2d0>)
 8003a90:	711a      	strb	r2, [r3, #4]
					ccu_response_buffer[5] = 0x01;  //POWER SUPPLY ERROR
 8003a92:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <process_received_data+0x2d0>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	715a      	strb	r2, [r3, #5]
				}
				else{

				}
				tcp_server_feedback(tpcb, ccu_response_buffer, 12, es);               // UPDATE RESULT ITP-CCU (M2)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	492a      	ldr	r1, [pc, #168]	; (8003b48 <process_received_data+0x2d0>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f864 	bl	8003b6c <tcp_server_feedback>





}
 8003aa4:	e05d      	b.n	8003b62 <process_received_data+0x2ea>
			else if(receive_buffer[3] == 0x02){										//Depth simulator command
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3303      	adds	r3, #3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d116      	bne.n	8003ade <process_received_data+0x266>
				ccu_response_buffer[3] = 0x02;   //update DS feedback
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <process_received_data+0x2d0>)
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	70da      	strb	r2, [r3, #3]
				if(receive_buffer[4] == 0x36){       //DS_INPUT_ES & DS_INPUT_EX
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b36      	cmp	r3, #54	; 0x36
 8003abe:	d150      	bne.n	8003b62 <process_received_data+0x2ea>
					cmd_mtr = (uint16_t)((receive_buffer[8] << 8 ) | receive_buffer[9]);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	b21a      	sxth	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3309      	adds	r3, #9
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <process_received_data+0x2dc>)
 8003ada:	801a      	strh	r2, [r3, #0]
}
 8003adc:	e041      	b.n	8003b62 <process_received_data+0x2ea>
			else if(receive_buffer[3] == 0x03){										//Mode selection command
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3303      	adds	r3, #3
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d120      	bne.n	8003b2a <process_received_data+0x2b2>
				mode_selection_unit = receive_buffer[4];
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	791a      	ldrb	r2, [r3, #4]
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <process_received_data+0x2e0>)
 8003aee:	701a      	strb	r2, [r3, #0]
				mode_selection_word = receive_buffer[6];
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	799a      	ldrb	r2, [r3, #6]
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <process_received_data+0x2e4>)
 8003af6:	701a      	strb	r2, [r3, #0]
				if(mode_selection_operation(mode_selection_unit, mode_selection_word) != 0x00){
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <process_received_data+0x2e0>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <process_received_data+0x2e4>)
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fe44 	bl	8002790 <mode_selection_operation>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <process_received_data+0x29e>
					ccu_response_buffer[3] = 0x03;   //update MS feedback
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <process_received_data+0x2d0>)
 8003b10:	2203      	movs	r2, #3
 8003b12:	70da      	strb	r2, [r3, #3]
 8003b14:	e002      	b.n	8003b1c <process_received_data+0x2a4>
					ccu_response_buffer[3] = 0x00;   //update MS feedback
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <process_received_data+0x2d0>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	70da      	strb	r2, [r3, #3]
				tcp_server_feedback(tpcb, ccu_response_buffer, 12, es);               // UPDATE RESULT ITP-CCU (M2)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	220c      	movs	r2, #12
 8003b20:	4909      	ldr	r1, [pc, #36]	; (8003b48 <process_received_data+0x2d0>)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f822 	bl	8003b6c <tcp_server_feedback>
}
 8003b28:	e01b      	b.n	8003b62 <process_received_data+0x2ea>
			else if(receive_buffer[3] == 0x04){										//Target simulator command
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3303      	adds	r3, #3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d116      	bne.n	8003b62 <process_received_data+0x2ea>
				ccu_response_buffer[3] = 0x04;   //update TS feedback
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <process_received_data+0x2d0>)
 8003b36:	2204      	movs	r2, #4
 8003b38:	70da      	strb	r2, [r3, #3]
}
 8003b3a:	e012      	b.n	8003b62 <process_received_data+0x2ea>
 8003b3c:	20000288 	.word	0x20000288
 8003b40:	200002ec 	.word	0x200002ec
 8003b44:	200002ed 	.word	0x200002ed
 8003b48:	200004b8 	.word	0x200004b8
 8003b4c:	2000051c 	.word	0x2000051c
 8003b50:	2000051d 	.word	0x2000051d
 8003b54:	20000000 	.word	0x20000000
 8003b58:	2000051e 	.word	0x2000051e
 8003b5c:	2000051f 	.word	0x2000051f
		if(receive_buffer[10] == 0xBF && receive_buffer[11] == 0xBF){
 8003b60:	bf00      	nop
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop

08003b6c <tcp_server_feedback>:
void tcp_server_feedback(struct tcp_pcb *tpcb, uint8_t* response_buffer ,uint32_t response_buffer_size , struct tcp_server_struct *es){
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
	//  Allocate memory for a new pbuf
			//struct tcp_server_struct *esTx = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
			//response_buffer[0] = 0x41;
			struct tcp_server_struct *esTx;
			// Allocate memory for esTx
		    esTx = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8003b7a:	200c      	movs	r0, #12
 8003b7c:	f004 ff96 	bl	8008aac <mem_malloc>
 8003b80:	6178      	str	r0, [r7, #20]
				if (response_buffer != NULL && response_buffer_size > 0) {
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d035      	beq.n	8003bf4 <tcp_server_feedback+0x88>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d032      	beq.n	8003bf4 <tcp_server_feedback+0x88>


				    if (esTx != NULL) {
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d02f      	beq.n	8003bf4 <tcp_server_feedback+0x88>
				        // Copy values from es to esTx
				        esTx->state = es->state;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	701a      	strb	r2, [r3, #0]
				        esTx->pcb = es->pcb;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	605a      	str	r2, [r3, #4]
				        esTx->p = es->p;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	609a      	str	r2, [r3, #8]

				        // Update payload and length in esTx
				        esTx->p->payload = (void *)response_buffer;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	605a      	str	r2, [r3, #4]
				        esTx->p->tot_len = (es->p->tot_len - es->p->len) + response_buffer_size;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	891a      	ldrh	r2, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	895b      	ldrh	r3, [r3, #10]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	b299      	uxth	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	440a      	add	r2, r1
 8003bce:	b292      	uxth	r2, r2
 8003bd0:	811a      	strh	r2, [r3, #8]
				        esTx->p->len = response_buffer_size;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	b292      	uxth	r2, r2
 8003bda:	815a      	strh	r2, [r3, #10]

				        // Send data using tcp_server_send
				        tcp_server_send(tpcb, esTx);
 8003bdc:	6979      	ldr	r1, [r7, #20]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff fd86 	bl	80036f0 <tcp_server_send>

				        // Free es->p (if needed)
				        pbuf_free(es->p);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f005 ffd5 	bl	8009b98 <pbuf_free>

				        // Free esTx (if needed)
				        mem_free(esTx);
 8003bee:	6978      	ldr	r0, [r7, #20]
 8003bf0:	f004 fdf6 	bl	80087e0 <mem_free>
				    }
				}
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c00:	f7ff fbe2 	bl	80033c8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c04:	480c      	ldr	r0, [pc, #48]	; (8003c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c06:	490d      	ldr	r1, [pc, #52]	; (8003c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c08:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c0c:	e002      	b.n	8003c14 <LoopCopyDataInit>

08003c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c12:	3304      	adds	r3, #4

08003c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c18:	d3f9      	bcc.n	8003c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c1c:	4c0a      	ldr	r4, [pc, #40]	; (8003c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c20:	e001      	b.n	8003c26 <LoopFillZerobss>

08003c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c24:	3204      	adds	r2, #4

08003c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c28:	d3fb      	bcc.n	8003c22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c2a:	f00f fab5 	bl	8013198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c2e:	f7fc fceb 	bl	8000608 <main>
  bx  lr    
 8003c32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003c34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c3c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003c40:	08016a90 	.word	0x08016a90
  ldr r2, =_sbss
 8003c44:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003c48:	2000abc0 	.word	0x2000abc0

08003c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c4c:	e7fe      	b.n	8003c4c <ADC_IRQHandler>

08003c4e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <DP83848_RegisterBusIO+0x28>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <DP83848_RegisterBusIO+0x28>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <DP83848_RegisterBusIO+0x28>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	e014      	b.n	8003ca6 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d17c      	bne.n	8003dcc <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	e01c      	b.n	8003d26 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f107 0208 	add.w	r2, r7, #8
 8003cf4:	2119      	movs	r1, #25
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	4798      	blx	r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	da03      	bge.n	8003d08 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8003d00:	f06f 0304 	mvn.w	r3, #4
 8003d04:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003d06:	e00b      	b.n	8003d20 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d105      	bne.n	8003d20 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
         break;
 8003d1e:	e005      	b.n	8003d2c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3301      	adds	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b1f      	cmp	r3, #31
 8003d2a:	d9df      	bls.n	8003cec <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b1f      	cmp	r3, #31
 8003d32:	d902      	bls.n	8003d3a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8003d34:	f06f 0302 	mvn.w	r3, #2
 8003d38:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d145      	bne.n	8003dcc <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6810      	ldr	r0, [r2, #0]
 8003d48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4798      	blx	r3
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db37      	blt.n	8003dc6 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6810      	ldr	r0, [r2, #0]
 8003d5e:	f107 0208 	add.w	r2, r7, #8
 8003d62:	2100      	movs	r1, #0
 8003d64:	4798      	blx	r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	db28      	blt.n	8003dbe <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4798      	blx	r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8003d76:	e01c      	b.n	8003db2 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	4798      	blx	r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d8a:	d80e      	bhi.n	8003daa <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6810      	ldr	r0, [r2, #0]
 8003d94:	f107 0208 	add.w	r2, r7, #8
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4798      	blx	r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	da07      	bge.n	8003db2 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8003da2:	f06f 0304 	mvn.w	r3, #4
 8003da6:	613b      	str	r3, [r7, #16]
                 break;
 8003da8:	e010      	b.n	8003dcc <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8003daa:	f06f 0301 	mvn.w	r3, #1
 8003dae:	613b      	str	r3, [r7, #16]
               break;
 8003db0:	e00c      	b.n	8003dcc <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1dd      	bne.n	8003d78 <DP83848_Init+0xc6>
 8003dbc:	e006      	b.n	8003dcc <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8003dbe:	f06f 0304 	mvn.w	r3, #4
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e002      	b.n	8003dcc <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8003dc6:	f06f 0303 	mvn.w	r3, #3
 8003dca:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d112      	bne.n	8003df8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	4798      	blx	r3
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8003ddc:	bf00      	nop
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4798      	blx	r3
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003df0:	d9f5      	bls.n	8003dde <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	605a      	str	r2, [r3, #4]
   }

   return status;
 8003df8:	693b      	ldr	r3, [r7, #16]
 }
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6810      	ldr	r0, [r2, #0]
 8003e16:	f107 020c 	add.w	r2, r7, #12
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4798      	blx	r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	da02      	bge.n	8003e2a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8003e24:	f06f 0304 	mvn.w	r3, #4
 8003e28:	e06e      	b.n	8003f08 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6810      	ldr	r0, [r2, #0]
 8003e32:	f107 020c 	add.w	r2, r7, #12
 8003e36:	2101      	movs	r1, #1
 8003e38:	4798      	blx	r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da02      	bge.n	8003e46 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8003e40:	f06f 0304 	mvn.w	r3, #4
 8003e44:	e060      	b.n	8003f08 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e059      	b.n	8003f08 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6810      	ldr	r0, [r2, #0]
 8003e5c:	f107 020c 	add.w	r2, r7, #12
 8003e60:	2100      	movs	r1, #0
 8003e62:	4798      	blx	r3
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da02      	bge.n	8003e70 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8003e6a:	f06f 0304 	mvn.w	r3, #4
 8003e6e:	e04b      	b.n	8003f08 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11b      	bne.n	8003eb2 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <DP83848_GetLinkState+0x90>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e03a      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e033      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8003eaa:	2304      	movs	r3, #4
 8003eac:	e02c      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8003eae:	2305      	movs	r3, #5
 8003eb0:	e02a      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6810      	ldr	r0, [r2, #0]
 8003eba:	f107 020c 	add.w	r2, r7, #12
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	4798      	blx	r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da02      	bge.n	8003ece <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8003ec8:	f06f 0304 	mvn.w	r3, #4
 8003ecc:	e01c      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8003ed8:	2306      	movs	r3, #6
 8003eda:	e015      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d101      	bne.n	8003eea <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e00e      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0306 	and.w	r3, r3, #6
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e007      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d101      	bne.n	8003f06 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8003f02:	2304      	movs	r3, #4
 8003f04:	e000      	b.n	8003f08 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8003f06:	2305      	movs	r3, #5
    }
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_Init+0x40>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <HAL_Init+0x40>)
 8003f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_Init+0x40>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <HAL_Init+0x40>)
 8003f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f2c:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_Init+0x40>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <HAL_Init+0x40>)
 8003f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f38:	2003      	movs	r0, #3
 8003f3a:	f000 f94f 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f3e:	200f      	movs	r0, #15
 8003f40:	f000 f808 	bl	8003f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f44:	f7fe fff4 	bl	8002f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00

08003f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f5c:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_InitTick+0x54>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <HAL_InitTick+0x58>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f967 	bl	8004246 <HAL_SYSTICK_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00e      	b.n	8003fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b0f      	cmp	r3, #15
 8003f86:	d80a      	bhi.n	8003f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	f000 f92f 	bl	80041f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f94:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <HAL_InitTick+0x5c>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000004 	.word	0x20000004
 8003fac:	2000000c 	.word	0x2000000c
 8003fb0:	20000008 	.word	0x20000008

08003fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_IncTick+0x20>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_IncTick+0x24>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_IncTick+0x24>)
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c
 8003fd8:	200005b4 	.word	0x200005b4

08003fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_GetTick+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	200005b4 	.word	0x200005b4

08003ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff ffee 	bl	8003fdc <HAL_GetTick>
 8004000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d005      	beq.n	800401a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_Delay+0x44>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800401a:	bf00      	nop
 800401c:	f7ff ffde 	bl	8003fdc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	d8f7      	bhi.n	800401c <HAL_Delay+0x28>
  {
  }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	2000000c 	.word	0x2000000c

0800403c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <__NVIC_GetPriorityGrouping+0x18>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0307 	and.w	r3, r3, #7
}
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <__NVIC_EnableIRQ+0x38>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	; (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a8:	d301      	bcc.n	80041ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00f      	b.n	80041ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <SysTick_Config+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b6:	210f      	movs	r1, #15
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295
 80041bc:	f7ff ff8e 	bl	80040dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <SysTick_Config+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SysTick_Config+0x40>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff29 	bl	800403c <__NVIC_SetPriorityGrouping>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004204:	f7ff ff3e 	bl	8004084 <__NVIC_GetPriorityGrouping>
 8004208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff8e 	bl	8004130 <NVIC_EncodePriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff5d 	bl	80040dc <__NVIC_SetPriority>
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff31 	bl	80040a0 <__NVIC_EnableIRQ>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffa2 	bl	8004198 <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7ff feb6 	bl	8003fdc <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d008      	beq.n	8004290 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e052      	b.n	8004336 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0216 	bic.w	r2, r2, #22
 800429e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <HAL_DMA_Abort+0x62>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0208 	bic.w	r2, r2, #8
 80042ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e0:	e013      	b.n	800430a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042e2:	f7ff fe7b 	bl	8003fdc <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d90c      	bls.n	800430a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2203      	movs	r2, #3
 80042fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e015      	b.n	8004336 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e4      	bne.n	80042e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431c:	223f      	movs	r2, #63	; 0x3f
 800431e:	409a      	lsls	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d004      	beq.n	800435c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2280      	movs	r2, #128	; 0x80
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e00c      	b.n	8004376 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2205      	movs	r2, #5
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e06c      	b.n	8004470 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2223      	movs	r2, #35	; 0x23
 80043a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f003 fe67 	bl	800807c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_ETH_Init+0xf4>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	4a30      	ldr	r2, [pc, #192]	; (8004478 <HAL_ETH_Init+0xf4>)
 80043b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043bc:	6453      	str	r3, [r2, #68]	; 0x44
 80043be:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <HAL_ETH_Init+0xf4>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c6:	60bb      	str	r3, [r7, #8]
 80043c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_ETH_Init+0xf8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_ETH_Init+0xf8>)
 80043d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80043d6:	4b29      	ldr	r3, [pc, #164]	; (800447c <HAL_ETH_Init+0xf8>)
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	4927      	ldr	r1, [pc, #156]	; (800447c <HAL_ETH_Init+0xf8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_ETH_Init+0xf8>)
 80043e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004400:	f7ff fdec 	bl	8003fdc <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004406:	e011      	b.n	800442c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004408:	f7ff fde8 	bl	8003fdc <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004416:	d909      	bls.n	800442c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2204      	movs	r2, #4
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	22e0      	movs	r2, #224	; 0xe0
 8004424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e021      	b.n	8004470 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e4      	bne.n	8004408 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fdfc 	bl	800503c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fea3 	bl	8005190 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fef9 	bl	8005242 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	461a      	mov	r2, r3
 8004456:	2100      	movs	r1, #0
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fe61 	bl	8005120 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2210      	movs	r2, #16
 800446a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	40013800 	.word	0x40013800

08004480 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448e:	2b10      	cmp	r3, #16
 8004490:	d150      	bne.n	8004534 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2223      	movs	r2, #35	; 0x23
 8004496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2204      	movs	r2, #4
 800449e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9fd 	bl	80048a0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0208 	orr.w	r2, r2, #8
 80044b4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044be:	2001      	movs	r0, #1
 80044c0:	f7ff fd98 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0204 	orr.w	r2, r2, #4
 80044da:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7ff fd85 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fc42 	bl	8004d7c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800450a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800450e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004526:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2223      	movs	r2, #35	; 0x23
 800452c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	2b23      	cmp	r3, #35	; 0x23
 800454e:	d14a      	bne.n	80045e6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2223      	movs	r2, #35	; 0x23
 8004554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800456e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	f023 0302 	bic.w	r3, r3, #2
 8004582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004586:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045a0:	2001      	movs	r0, #1
 80045a2:	f7ff fd27 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fbe4 	bl	8004d7c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0208 	bic.w	r2, r2, #8
 80045c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045cc:	2001      	movs	r0, #1
 80045ce:	f7ff fd11 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2210      	movs	r2, #16
 80045de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e000      	b.n	80045e8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07c      	b.n	8004710 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461c:	2b23      	cmp	r3, #35	; 0x23
 800461e:	d176      	bne.n	800470e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004620:	2200      	movs	r2, #0
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fe79 	bl	800531c <ETH_Prepare_Tx_Descriptors>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e065      	b.n	8004710 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004644:	f3bf 8f4f 	dsb	sy
}
 8004648:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3206      	adds	r2, #6
 8004652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004656:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	2b03      	cmp	r3, #3
 8004668:	d904      	bls.n	8004674 <HAL_ETH_Transmit+0x84>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	1f1a      	subs	r2, r3, #4
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3106      	adds	r1, #6
 8004680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004688:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800468a:	f7ff fca7 	bl	8003fdc <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004690:	e037      	b.n	8004702 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f043 0208 	orr.w	r2, r3, #8
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e023      	b.n	8004710 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d018      	beq.n	8004702 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046d0:	f7ff fc84 	bl	8003fdc <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d302      	bcc.n	80046e6 <HAL_ETH_Transmit+0xf6>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10d      	bne.n	8004702 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80046fc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e006      	b.n	8004710 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	dbc3      	blt.n	8004692 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f043 0201 	orr.w	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0a8      	b.n	8004896 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474a:	2b23      	cmp	r3, #35	; 0x23
 800474c:	d001      	beq.n	8004752 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e0a1      	b.n	8004896 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004756:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	3212      	adds	r2, #18
 800475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004762:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004768:	f1c3 0304 	rsb	r3, r3, #4
 800476c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800476e:	e06a      	b.n	8004846 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	699a      	ldr	r2, [r3, #24]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <HAL_ETH_ReadData+0x88>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d040      	beq.n	8004822 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80047d4:	3b04      	subs	r3, #4
 80047d6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80047fc:	461a      	mov	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f003 fe2b 	bl	800845c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	441a      	add	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3301      	adds	r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d902      	bls.n	8004834 <HAL_ETH_ReadData+0x11c>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3b04      	subs	r3, #4
 8004832:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	3212      	adds	r2, #18
 800483a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800484a:	2b00      	cmp	r3, #0
 800484c:	db06      	blt.n	800485c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d202      	bcs.n	800485c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d089      	beq.n	8004770 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f815 	bl	80048a0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d108      	bne.n	8004894 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80048ac:	2301      	movs	r3, #1
 80048ae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	3212      	adds	r2, #18
 80048bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80048c8:	e03d      	b.n	8004946 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d112      	bne.n	80048f8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	4618      	mov	r0, r3
 80048d8:	f003 fd90 	bl	80083fc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	74fb      	strb	r3, [r7, #19]
 80048e6:	e007      	b.n	80048f8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	461a      	mov	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	461a      	mov	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d023      	beq.n	8004946 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	4a24      	ldr	r2, [pc, #144]	; (800499c <ETH_UpdateDescriptor+0xfc>)
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	e003      	b.n	8004916 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004914:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d902      	bls.n	8004934 <ETH_UpdateDescriptor+0x94>
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3b04      	subs	r3, #4
 8004932:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	3212      	adds	r2, #18
 800493a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493e:	617b      	str	r3, [r7, #20]
      desccount--;
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	3b01      	subs	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <ETH_UpdateDescriptor+0xb2>
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1bb      	bne.n	80048ca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	429a      	cmp	r2, r3
 800495a:	d01a      	beq.n	8004992 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	3301      	adds	r3, #1
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004966:	f3bf 8f5f 	dmb	sy
}
 800496a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6919      	ldr	r1, [r3, #16]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	18ca      	adds	r2, r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004984:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004992:	bf00      	nop
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	80004600 	.word	0x80004600

080049a0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f003 031c 	and.w	r3, r3, #28
 80049bc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	02db      	lsls	r3, r3, #11
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	019b      	lsls	r3, r3, #6
 80049ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0302 	bic.w	r3, r3, #2
 80049de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80049f0:	f7ff faf4 	bl	8003fdc <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80049f6:	e00d      	b.n	8004a14 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80049f8:	f7ff faf0 	bl	8003fdc <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d301      	bcc.n	8004a0c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e010      	b.n	8004a2e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1ec      	bne.n	80049f8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	f003 031c 	and.w	r3, r3, #28
 8004a52:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	02db      	lsls	r3, r3, #11
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	019b      	lsls	r3, r3, #6
 8004a64:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a90:	f7ff faa4 	bl	8003fdc <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004a96:	e00d      	b.n	8004ab4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004a98:	f7ff faa0 	bl	8003fdc <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa6:	d301      	bcc.n	8004aac <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e009      	b.n	8004ac0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1ec      	bne.n	8004a98 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0d9      	b.n	8004c90 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bf0c      	ite	eq
 8004b9a:	2301      	moveq	r3, #1
 8004b9c:	2300      	movne	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	0c1b      	lsrs	r3, r3, #16
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e00b      	b.n	8004cc8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d105      	bne.n	8004cc6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f883 	bl	8004dc8 <ETH_SetMACConfig>

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 031c 	bic.w	r3, r3, #28
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004ce8:	f001 faa0 	bl	800622c <HAL_RCC_GetHCLKFreq>
 8004cec:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d908      	bls.n	8004d08 <HAL_ETH_SetMDIOClockRange+0x38>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d804      	bhi.n	8004d08 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f043 0308 	orr.w	r3, r3, #8
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e027      	b.n	8004d58 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d908      	bls.n	8004d22 <HAL_ETH_SetMDIOClockRange+0x52>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d204      	bcs.n	8004d22 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f043 030c 	orr.w	r3, r3, #12
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	e01a      	b.n	8004d58 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d303      	bcc.n	8004d32 <HAL_ETH_SetMDIOClockRange+0x62>
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d911      	bls.n	8004d56 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d908      	bls.n	8004d4c <HAL_ETH_SetMDIOClockRange+0x7c>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d804      	bhi.n	8004d4c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e005      	b.n	8004d58 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f043 0310 	orr.w	r3, r3, #16
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e000      	b.n	8004d58 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004d56:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	611a      	str	r2, [r3, #16]
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	01312cff 	.word	0x01312cff
 8004d6c:	02160ebf 	.word	0x02160ebf
 8004d70:	03938700 	.word	0x03938700
 8004d74:	05f5e0ff 	.word	0x05f5e0ff
 8004d78:	08f0d17f 	.word	0x08f0d17f

08004d7c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d9e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004dac:	2001      	movs	r0, #1
 8004dae:	f7ff f921 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dbc:	6193      	str	r3, [r2, #24]
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4b51      	ldr	r3, [pc, #324]	; (8004f24 <ETH_SetMACConfig+0x15c>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	7c1b      	ldrb	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <ETH_SetMACConfig+0x28>
 8004dea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004dee:	e000      	b.n	8004df2 <ETH_SetMACConfig+0x2a>
 8004df0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	7c5b      	ldrb	r3, [r3, #17]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <ETH_SetMACConfig+0x38>
 8004dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004dfe:	e000      	b.n	8004e02 <ETH_SetMACConfig+0x3a>
 8004e00:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e02:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004e08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	7fdb      	ldrb	r3, [r3, #31]
 8004e0e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004e10:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004e16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	7f92      	ldrb	r2, [r2, #30]
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d102      	bne.n	8004e26 <ETH_SetMACConfig+0x5e>
 8004e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e24:	e000      	b.n	8004e28 <ETH_SetMACConfig+0x60>
 8004e26:	2200      	movs	r2, #0
                        macconf->Speed |
 8004e28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	7f1b      	ldrb	r3, [r3, #28]
 8004e2e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004e30:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004e36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	791b      	ldrb	r3, [r3, #4]
 8004e3c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004e3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	d102      	bne.n	8004e50 <ETH_SetMACConfig+0x88>
 8004e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4e:	e000      	b.n	8004e52 <ETH_SetMACConfig+0x8a>
 8004e50:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004e52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	7bdb      	ldrb	r3, [r3, #15]
 8004e58:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004e5a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004e60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e68:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7ff f8b6 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ea6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	d101      	bne.n	8004eb6 <ETH_SetMACConfig+0xee>
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	e000      	b.n	8004eb8 <ETH_SetMACConfig+0xf0>
 8004eb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004eb8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004ec6:	2a01      	cmp	r2, #1
 8004ec8:	d101      	bne.n	8004ece <ETH_SetMACConfig+0x106>
 8004eca:	2208      	movs	r2, #8
 8004ecc:	e000      	b.n	8004ed0 <ETH_SetMACConfig+0x108>
 8004ece:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004ed0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004ed8:	2a01      	cmp	r2, #1
 8004eda:	d101      	bne.n	8004ee0 <ETH_SetMACConfig+0x118>
 8004edc:	2204      	movs	r2, #4
 8004ede:	e000      	b.n	8004ee2 <ETH_SetMACConfig+0x11a>
 8004ee0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ee2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	d101      	bne.n	8004ef2 <ETH_SetMACConfig+0x12a>
 8004eee:	2202      	movs	r2, #2
 8004ef0:	e000      	b.n	8004ef4 <ETH_SetMACConfig+0x12c>
 8004ef2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7ff f871 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	619a      	str	r2, [r3, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	ff20810f 	.word	0xff20810f

08004f28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4b3d      	ldr	r3, [pc, #244]	; (8005038 <ETH_SetDMAConfig+0x110>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	7b1b      	ldrb	r3, [r3, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <ETH_SetDMAConfig+0x2c>
 8004f4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f52:	e000      	b.n	8004f56 <ETH_SetDMAConfig+0x2e>
 8004f54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	7b5b      	ldrb	r3, [r3, #13]
 8004f5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004f5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	7f52      	ldrb	r2, [r2, #29]
 8004f62:	2a00      	cmp	r2, #0
 8004f64:	d102      	bne.n	8004f6c <ETH_SetDMAConfig+0x44>
 8004f66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f6a:	e000      	b.n	8004f6e <ETH_SetDMAConfig+0x46>
 8004f6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004f6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	7b9b      	ldrb	r3, [r3, #14]
 8004f74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004f76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004f7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	7f1b      	ldrb	r3, [r3, #28]
 8004f82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004f84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	7f9b      	ldrb	r3, [r3, #30]
 8004f8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004f8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004f92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fbe:	2001      	movs	r0, #1
 8004fc0:	f7ff f818 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fcc:	461a      	mov	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	791b      	ldrb	r3, [r3, #4]
 8004fd6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004fdc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004fe2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004fe8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ff0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004ff2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ffa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005000:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800500a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800500e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800501c:	2001      	movs	r0, #1
 800501e:	f7fe ffe9 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502a:	461a      	mov	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6013      	str	r3, [r2, #0]
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	f8de3f23 	.word	0xf8de3f23

0800503c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b0a6      	sub	sp, #152	; 0x98
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005054:	2300      	movs	r3, #0
 8005056:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005060:	2300      	movs	r3, #0
 8005062:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005072:	2300      	movs	r3, #0
 8005074:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005078:	2300      	movs	r3, #0
 800507a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800507c:	2300      	movs	r3, #0
 800507e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005082:	2300      	movs	r3, #0
 8005084:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800508c:	2300      	movs	r3, #0
 800508e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005092:	2300      	movs	r3, #0
 8005094:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800509e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80050b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff fe86 	bl	8004dc8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80050bc:	2301      	movs	r3, #1
 80050be:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80050de:	2300      	movs	r3, #0
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80050e8:	2301      	movs	r3, #1
 80050ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80050ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050f0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80050f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050f6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80050f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005104:	2300      	movs	r3, #0
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff ff08 	bl	8004f28 <ETH_SetDMAConfig>
}
 8005118:	bf00      	nop
 800511a:	3798      	adds	r7, #152	; 0x98
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3305      	adds	r3, #5
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	3204      	adds	r2, #4
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <ETH_MACAddressConfig+0x68>)
 8005142:	4413      	add	r3, r2
 8005144:	461a      	mov	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3303      	adds	r3, #3
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	061a      	lsls	r2, r3, #24
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3302      	adds	r3, #2
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3301      	adds	r3, #1
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	4313      	orrs	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	7812      	ldrb	r2, [r2, #0]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <ETH_MACAddressConfig+0x6c>)
 8005172:	4413      	add	r3, r2
 8005174:	461a      	mov	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	6013      	str	r3, [r2, #0]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40028040 	.word	0x40028040
 800518c:	40028044 	.word	0x40028044

08005190 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e03e      	b.n	800521c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68d9      	ldr	r1, [r3, #12]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	440b      	add	r3, r1
 80051ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80051c8:	68b9      	ldr	r1, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	3206      	adds	r2, #6
 80051d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d80c      	bhi.n	8005200 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68d9      	ldr	r1, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	440b      	add	r3, r1
 80051f8:	461a      	mov	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	60da      	str	r2, [r3, #12]
 80051fe:	e004      	b.n	800520a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d9bd      	bls.n	800519e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005234:	611a      	str	r2, [r3, #16]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e046      	b.n	80052de <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6919      	ldr	r1, [r3, #16]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2200      	movs	r2, #0
 800526c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2200      	movs	r2, #0
 8005272:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800528c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005294:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	3212      	adds	r2, #18
 80052aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d80c      	bhi.n	80052ce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6919      	ldr	r1, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	440b      	add	r3, r1
 80052c6:	461a      	mov	r2, r3
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	60da      	str	r2, [r3, #12]
 80052cc:	e004      	b.n	80052d8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d9b5      	bls.n	8005250 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800531c:	b480      	push	{r7}
 800531e:	b08d      	sub	sp, #52	; 0x34
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3318      	adds	r3, #24
 800532c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005346:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535e:	d007      	beq.n	8005370 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	3304      	adds	r3, #4
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005370:	2302      	movs	r3, #2
 8005372:	e103      	b.n	800557c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	3301      	adds	r3, #1
 8005378:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800538c:	f023 031f 	bic.w	r3, r3, #31
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	6852      	ldr	r2, [r2, #4]
 8005394:	431a      	orrs	r2, r3
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d008      	beq.n	80053b8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80053fa:	f3bf 8f5f 	dmb	sy
}
 80053fe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800540c:	e084      	b.n	8005518 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e005      	b.n	800543a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	3301      	adds	r3, #1
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b03      	cmp	r3, #3
 8005444:	d902      	bls.n	800544c <ETH_Prepare_Tx_Descriptors+0x130>
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	3b04      	subs	r3, #4
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005454:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546e:	d007      	beq.n	8005480 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	3304      	adds	r3, #4
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d029      	beq.n	80054d4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800548e:	2300      	movs	r3, #0
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
 8005492:	e019      	b.n	80054c8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8005494:	f3bf 8f5f 	dmb	sy
}
 8005498:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80054a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a8:	3301      	adds	r3, #1
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d902      	bls.n	80054b8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	3b04      	subs	r3, #4
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	3301      	adds	r3, #1
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3e1      	bcc.n	8005494 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80054d0:	2302      	movs	r3, #2
 80054d2:	e053      	b.n	800557c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	3301      	adds	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80054f2:	f023 031f 	bic.w	r3, r3, #31
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	6852      	ldr	r2, [r2, #4]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	3301      	adds	r3, #1
 8005504:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005506:	f3bf 8f5f 	dmb	sy
}
 800550a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f47f af76 	bne.w	800540e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e005      	b.n	8005542 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005552:	6979      	ldr	r1, [r7, #20]
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	3304      	adds	r3, #4
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005562:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005564:	b672      	cpsid	i
}
 8005566:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	4413      	add	r3, r2
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005576:	b662      	cpsie	i
}
 8005578:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3734      	adds	r7, #52	; 0x34
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e177      	b.n	8005894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055a4:	2201      	movs	r2, #1
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4013      	ands	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	429a      	cmp	r2, r3
 80055be:	f040 8166 	bne.w	800588e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d005      	beq.n	80055da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d130      	bne.n	800563c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	2203      	movs	r2, #3
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4013      	ands	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005610:	2201      	movs	r2, #1
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 0201 	and.w	r2, r3, #1
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b03      	cmp	r3, #3
 8005646:	d017      	beq.n	8005678 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	2203      	movs	r2, #3
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d123      	bne.n	80056cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	08da      	lsrs	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3208      	adds	r2, #8
 800568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	220f      	movs	r2, #15
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	08da      	lsrs	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3208      	adds	r2, #8
 80056c6:	69b9      	ldr	r1, [r7, #24]
 80056c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	2203      	movs	r2, #3
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	43db      	mvns	r3, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0203 	and.w	r2, r3, #3
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80c0 	beq.w	800588e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	4b66      	ldr	r3, [pc, #408]	; (80058ac <HAL_GPIO_Init+0x324>)
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	4a65      	ldr	r2, [pc, #404]	; (80058ac <HAL_GPIO_Init+0x324>)
 8005718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800571c:	6453      	str	r3, [r2, #68]	; 0x44
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_GPIO_Init+0x324>)
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800572a:	4a61      	ldr	r2, [pc, #388]	; (80058b0 <HAL_GPIO_Init+0x328>)
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	3302      	adds	r3, #2
 8005732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	220f      	movs	r2, #15
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4013      	ands	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a58      	ldr	r2, [pc, #352]	; (80058b4 <HAL_GPIO_Init+0x32c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d037      	beq.n	80057c6 <HAL_GPIO_Init+0x23e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a57      	ldr	r2, [pc, #348]	; (80058b8 <HAL_GPIO_Init+0x330>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d031      	beq.n	80057c2 <HAL_GPIO_Init+0x23a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a56      	ldr	r2, [pc, #344]	; (80058bc <HAL_GPIO_Init+0x334>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d02b      	beq.n	80057be <HAL_GPIO_Init+0x236>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a55      	ldr	r2, [pc, #340]	; (80058c0 <HAL_GPIO_Init+0x338>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d025      	beq.n	80057ba <HAL_GPIO_Init+0x232>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a54      	ldr	r2, [pc, #336]	; (80058c4 <HAL_GPIO_Init+0x33c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01f      	beq.n	80057b6 <HAL_GPIO_Init+0x22e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a53      	ldr	r2, [pc, #332]	; (80058c8 <HAL_GPIO_Init+0x340>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d019      	beq.n	80057b2 <HAL_GPIO_Init+0x22a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a52      	ldr	r2, [pc, #328]	; (80058cc <HAL_GPIO_Init+0x344>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_GPIO_Init+0x226>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a51      	ldr	r2, [pc, #324]	; (80058d0 <HAL_GPIO_Init+0x348>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00d      	beq.n	80057aa <HAL_GPIO_Init+0x222>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a50      	ldr	r2, [pc, #320]	; (80058d4 <HAL_GPIO_Init+0x34c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <HAL_GPIO_Init+0x21e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a4f      	ldr	r2, [pc, #316]	; (80058d8 <HAL_GPIO_Init+0x350>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <HAL_GPIO_Init+0x21a>
 800579e:	2309      	movs	r3, #9
 80057a0:	e012      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057a2:	230a      	movs	r3, #10
 80057a4:	e010      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057a6:	2308      	movs	r3, #8
 80057a8:	e00e      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057aa:	2307      	movs	r3, #7
 80057ac:	e00c      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057ae:	2306      	movs	r3, #6
 80057b0:	e00a      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057b2:	2305      	movs	r3, #5
 80057b4:	e008      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057b6:	2304      	movs	r3, #4
 80057b8:	e006      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057ba:	2303      	movs	r3, #3
 80057bc:	e004      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057be:	2302      	movs	r3, #2
 80057c0:	e002      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_GPIO_Init+0x240>
 80057c6:	2300      	movs	r3, #0
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	f002 0203 	and.w	r2, r2, #3
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	4093      	lsls	r3, r2
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057d8:	4935      	ldr	r1, [pc, #212]	; (80058b0 <HAL_GPIO_Init+0x328>)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	3302      	adds	r3, #2
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057e6:	4b3d      	ldr	r3, [pc, #244]	; (80058dc <HAL_GPIO_Init+0x354>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800580a:	4a34      	ldr	r2, [pc, #208]	; (80058dc <HAL_GPIO_Init+0x354>)
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005810:	4b32      	ldr	r3, [pc, #200]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800583a:	4b28      	ldr	r3, [pc, #160]	; (80058dc <HAL_GPIO_Init+0x354>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800585e:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005864:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <HAL_GPIO_Init+0x354>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <HAL_GPIO_Init+0x354>)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3301      	adds	r3, #1
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	f67f ae84 	bls.w	80055a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40013800 	.word	0x40013800
 80058b4:	40020000 	.word	0x40020000
 80058b8:	40020400 	.word	0x40020400
 80058bc:	40020800 	.word	0x40020800
 80058c0:	40020c00 	.word	0x40020c00
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40021400 	.word	0x40021400
 80058cc:	40021800 	.word	0x40021800
 80058d0:	40021c00 	.word	0x40021c00
 80058d4:	40022000 	.word	0x40022000
 80058d8:	40022400 	.word	0x40022400
 80058dc:	40013c00 	.word	0x40013c00

080058e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	887b      	ldrh	r3, [r7, #2]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e001      	b.n	8005902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	807b      	strh	r3, [r7, #2]
 800591c:	4613      	mov	r3, r2
 800591e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005920:	787b      	ldrb	r3, [r7, #1]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800592c:	e003      	b.n	8005936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	041a      	lsls	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	619a      	str	r2, [r3, #24]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4b20      	ldr	r3, [pc, #128]	; (80059d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595c:	6413      	str	r3, [r2, #64]	; 0x40
 800595e:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800596a:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800596c:	2201      	movs	r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005970:	f7fe fb34 	bl	8003fdc <HAL_GetTick>
 8005974:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005976:	e009      	b.n	800598c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005978:	f7fe fb30 	bl	8003fdc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005986:	d901      	bls.n	800598c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e01f      	b.n	80059cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <HAL_PWREx_EnableOverDrive+0x98>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005998:	d1ee      	bne.n	8005978 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800599a:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059a0:	f7fe fb1c 	bl	8003fdc <HAL_GetTick>
 80059a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059a6:	e009      	b.n	80059bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059a8:	f7fe fb18 	bl	8003fdc <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059b6:	d901      	bls.n	80059bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e007      	b.n	80059cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059bc:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_PWREx_EnableOverDrive+0x98>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059c8:	d1ee      	bne.n	80059a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40023800 	.word	0x40023800
 80059d8:	420e0040 	.word	0x420e0040
 80059dc:	40007000 	.word	0x40007000
 80059e0:	420e0044 	.word	0x420e0044

080059e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e267      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d075      	beq.n	8005aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a02:	4b88      	ldr	r3, [pc, #544]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d00c      	beq.n	8005a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a0e:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d112      	bne.n	8005a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a1a:	4b82      	ldr	r3, [pc, #520]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a26:	d10b      	bne.n	8005a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	4b7e      	ldr	r3, [pc, #504]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d05b      	beq.n	8005aec <HAL_RCC_OscConfig+0x108>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d157      	bne.n	8005aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e242      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a48:	d106      	bne.n	8005a58 <HAL_RCC_OscConfig+0x74>
 8005a4a:	4b76      	ldr	r3, [pc, #472]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a75      	ldr	r2, [pc, #468]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e01d      	b.n	8005a94 <HAL_RCC_OscConfig+0xb0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCC_OscConfig+0x98>
 8005a62:	4b70      	ldr	r3, [pc, #448]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6f      	ldr	r2, [pc, #444]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	4b6d      	ldr	r3, [pc, #436]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6c      	ldr	r2, [pc, #432]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e00b      	b.n	8005a94 <HAL_RCC_OscConfig+0xb0>
 8005a7c:	4b69      	ldr	r3, [pc, #420]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a68      	ldr	r2, [pc, #416]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a65      	ldr	r2, [pc, #404]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9c:	f7fe fa9e 	bl	8003fdc <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa4:	f7fe fa9a 	bl	8003fdc <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	; 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e207      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab6:	4b5b      	ldr	r3, [pc, #364]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0xc0>
 8005ac2:	e014      	b.n	8005aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7fe fa8a 	bl	8003fdc <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005acc:	f7fe fa86 	bl	8003fdc <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e1f3      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ade:	4b51      	ldr	r3, [pc, #324]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0xe8>
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d063      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005afa:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b06:	4b47      	ldr	r3, [pc, #284]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d11c      	bne.n	8005b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b12:	4b44      	ldr	r3, [pc, #272]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b1e:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_RCC_OscConfig+0x152>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d001      	beq.n	8005b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e1c7      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4937      	ldr	r1, [pc, #220]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4a:	e03a      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b54:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <HAL_RCC_OscConfig+0x244>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5a:	f7fe fa3f 	bl	8003fdc <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b62:	f7fe fa3b 	bl	8003fdc <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e1a8      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b80:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4925      	ldr	r1, [pc, #148]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]
 8005b94:	e015      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b96:	4b24      	ldr	r3, [pc, #144]	; (8005c28 <HAL_RCC_OscConfig+0x244>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9c:	f7fe fa1e 	bl	8003fdc <HAL_GetTick>
 8005ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ba4:	f7fe fa1a 	bl	8003fdc <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e187      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f0      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d036      	beq.n	8005c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_RCC_OscConfig+0x248>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bdc:	f7fe f9fe 	bl	8003fdc <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005be4:	f7fe f9fa 	bl	8003fdc <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e167      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	; (8005c24 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0x200>
 8005c02:	e01b      	b.n	8005c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c04:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <HAL_RCC_OscConfig+0x248>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c0a:	f7fe f9e7 	bl	8003fdc <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	e00e      	b.n	8005c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c12:	f7fe f9e3 	bl	8003fdc <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d907      	bls.n	8005c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e150      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
 8005c24:	40023800 	.word	0x40023800
 8005c28:	42470000 	.word	0x42470000
 8005c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c30:	4b88      	ldr	r3, [pc, #544]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ea      	bne.n	8005c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 8097 	beq.w	8005d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c4e:	4b81      	ldr	r3, [pc, #516]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	4b7d      	ldr	r3, [pc, #500]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	4a7c      	ldr	r2, [pc, #496]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6413      	str	r3, [r2, #64]	; 0x40
 8005c6a:	4b7a      	ldr	r3, [pc, #488]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7a:	4b77      	ldr	r3, [pc, #476]	; (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d118      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c86:	4b74      	ldr	r3, [pc, #464]	; (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a73      	ldr	r2, [pc, #460]	; (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c92:	f7fe f9a3 	bl	8003fdc <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9a:	f7fe f99f 	bl	8003fdc <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e10c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <HAL_RCC_OscConfig+0x474>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d106      	bne.n	8005cce <HAL_RCC_OscConfig+0x2ea>
 8005cc0:	4b64      	ldr	r3, [pc, #400]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	4a63      	ldr	r2, [pc, #396]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ccc:	e01c      	b.n	8005d08 <HAL_RCC_OscConfig+0x324>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x30c>
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	4a5e      	ldr	r2, [pc, #376]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	f043 0304 	orr.w	r3, r3, #4
 8005ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce2:	4b5c      	ldr	r3, [pc, #368]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	4a5b      	ldr	r2, [pc, #364]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	; 0x70
 8005cee:	e00b      	b.n	8005d08 <HAL_RCC_OscConfig+0x324>
 8005cf0:	4b58      	ldr	r3, [pc, #352]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a57      	ldr	r2, [pc, #348]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfc:	4b55      	ldr	r3, [pc, #340]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	4a54      	ldr	r2, [pc, #336]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d02:	f023 0304 	bic.w	r3, r3, #4
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d10:	f7fe f964 	bl	8003fdc <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d16:	e00a      	b.n	8005d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fe f960 	bl	8003fdc <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e0cb      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2e:	4b49      	ldr	r3, [pc, #292]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0ee      	beq.n	8005d18 <HAL_RCC_OscConfig+0x334>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d3c:	f7fe f94e 	bl	8003fdc <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fe f94a 	bl	8003fdc <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e0b5      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ee      	bne.n	8005d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d105      	bne.n	8005d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d6c:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	4a38      	ldr	r2, [pc, #224]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 80a1 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b08      	cmp	r3, #8
 8005d8c:	d05c      	beq.n	8005e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d141      	bne.n	8005e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d96:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <HAL_RCC_OscConfig+0x478>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9c:	f7fe f91e 	bl	8003fdc <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da4:	f7fe f91a 	bl	8003fdc <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e087      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	491b      	ldr	r1, [pc, #108]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dec:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <HAL_RCC_OscConfig+0x478>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df2:	f7fe f8f3 	bl	8003fdc <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dfa:	f7fe f8ef 	bl	8003fdc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e05c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0c:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0f0      	beq.n	8005dfa <HAL_RCC_OscConfig+0x416>
 8005e18:	e054      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1a:	4b10      	ldr	r3, [pc, #64]	; (8005e5c <HAL_RCC_OscConfig+0x478>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fe f8dc 	bl	8003fdc <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fe f8d8 	bl	8003fdc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e045      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x444>
 8005e46:	e03d      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d107      	bne.n	8005e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e038      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40007000 	.word	0x40007000
 8005e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_OscConfig+0x4ec>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d028      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d121      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d11a      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e90:	4013      	ands	r3, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d111      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	085b      	lsrs	r3, r3, #1
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40023800 	.word	0x40023800

08005ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0cc      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b68      	ldr	r3, [pc, #416]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d90c      	bls.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b65      	ldr	r3, [pc, #404]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b63      	ldr	r3, [pc, #396]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0b8      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d020      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f28:	4b59      	ldr	r3, [pc, #356]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a58      	ldr	r2, [pc, #352]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d005      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f40:	4b53      	ldr	r3, [pc, #332]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a52      	ldr	r2, [pc, #328]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f4c:	4b50      	ldr	r3, [pc, #320]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	494d      	ldr	r1, [pc, #308]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d044      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	4b47      	ldr	r3, [pc, #284]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d119      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e07f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d003      	beq.n	8005f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f92:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e06f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa2:	4b3b      	ldr	r3, [pc, #236]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e067      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fb2:	4b37      	ldr	r3, [pc, #220]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0203 	bic.w	r2, r3, #3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4934      	ldr	r1, [pc, #208]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fc4:	f7fe f80a 	bl	8003fdc <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fcc:	f7fe f806 	bl	8003fdc <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e04f      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe2:	4b2b      	ldr	r3, [pc, #172]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 020c 	and.w	r2, r3, #12
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1eb      	bne.n	8005fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff4:	4b25      	ldr	r3, [pc, #148]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d20c      	bcs.n	800601c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006002:	4b22      	ldr	r3, [pc, #136]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e032      	b.n	8006082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006028:	4b19      	ldr	r3, [pc, #100]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4916      	ldr	r1, [pc, #88]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d009      	beq.n	800605a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006046:	4b12      	ldr	r3, [pc, #72]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	490e      	ldr	r1, [pc, #56]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800605a:	f000 f821 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 800605e:	4602      	mov	r2, r0
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	490a      	ldr	r1, [pc, #40]	; (8006094 <HAL_RCC_ClockConfig+0x1c0>)
 800606c:	5ccb      	ldrb	r3, [r1, r3]
 800606e:	fa22 f303 	lsr.w	r3, r2, r3
 8006072:	4a09      	ldr	r2, [pc, #36]	; (8006098 <HAL_RCC_ClockConfig+0x1c4>)
 8006074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006076:	4b09      	ldr	r3, [pc, #36]	; (800609c <HAL_RCC_ClockConfig+0x1c8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fd ff6a 	bl	8003f54 <HAL_InitTick>

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40023c00 	.word	0x40023c00
 8006090:	40023800 	.word	0x40023800
 8006094:	0801689c 	.word	0x0801689c
 8006098:	20000004 	.word	0x20000004
 800609c:	20000008 	.word	0x20000008

080060a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a4:	b090      	sub	sp, #64	; 0x40
 80060a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
 80060ac:	2300      	movs	r3, #0
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060b0:	2300      	movs	r3, #0
 80060b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b8:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 030c 	and.w	r3, r3, #12
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d00d      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x40>
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	f200 80a1 	bhi.w	800620c <HAL_RCC_GetSysClockFreq+0x16c>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d003      	beq.n	80060da <HAL_RCC_GetSysClockFreq+0x3a>
 80060d2:	e09b      	b.n	800620c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060d4:	4b53      	ldr	r3, [pc, #332]	; (8006224 <HAL_RCC_GetSysClockFreq+0x184>)
 80060d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80060d8:	e09b      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060da:	4b53      	ldr	r3, [pc, #332]	; (8006228 <HAL_RCC_GetSysClockFreq+0x188>)
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80060de:	e098      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e0:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ea:	4b4d      	ldr	r3, [pc, #308]	; (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d028      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f6:	4b4a      	ldr	r3, [pc, #296]	; (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	099b      	lsrs	r3, r3, #6
 80060fc:	2200      	movs	r2, #0
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	627a      	str	r2, [r7, #36]	; 0x24
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006108:	2100      	movs	r1, #0
 800610a:	4b47      	ldr	r3, [pc, #284]	; (8006228 <HAL_RCC_GetSysClockFreq+0x188>)
 800610c:	fb03 f201 	mul.w	r2, r3, r1
 8006110:	2300      	movs	r3, #0
 8006112:	fb00 f303 	mul.w	r3, r0, r3
 8006116:	4413      	add	r3, r2
 8006118:	4a43      	ldr	r2, [pc, #268]	; (8006228 <HAL_RCC_GetSysClockFreq+0x188>)
 800611a:	fba0 1202 	umull	r1, r2, r0, r2
 800611e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006120:	460a      	mov	r2, r1
 8006122:	62ba      	str	r2, [r7, #40]	; 0x28
 8006124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006126:	4413      	add	r3, r2
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	2200      	movs	r2, #0
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800613a:	f7fa f8a9 	bl	8000290 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4613      	mov	r3, r2
 8006144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006146:	e053      	b.n	80061f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006148:	4b35      	ldr	r3, [pc, #212]	; (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	099b      	lsrs	r3, r3, #6
 800614e:	2200      	movs	r2, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	617a      	str	r2, [r7, #20]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800615a:	f04f 0b00 	mov.w	fp, #0
 800615e:	4652      	mov	r2, sl
 8006160:	465b      	mov	r3, fp
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	0159      	lsls	r1, r3, #5
 800616c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006170:	0150      	lsls	r0, r2, #5
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	ebb2 080a 	subs.w	r8, r2, sl
 800617a:	eb63 090b 	sbc.w	r9, r3, fp
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800618a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800618e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006192:	ebb2 0408 	subs.w	r4, r2, r8
 8006196:	eb63 0509 	sbc.w	r5, r3, r9
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	00eb      	lsls	r3, r5, #3
 80061a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061a8:	00e2      	lsls	r2, r4, #3
 80061aa:	4614      	mov	r4, r2
 80061ac:	461d      	mov	r5, r3
 80061ae:	eb14 030a 	adds.w	r3, r4, sl
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	eb45 030b 	adc.w	r3, r5, fp
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061c6:	4629      	mov	r1, r5
 80061c8:	028b      	lsls	r3, r1, #10
 80061ca:	4621      	mov	r1, r4
 80061cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061d0:	4621      	mov	r1, r4
 80061d2:	028a      	lsls	r2, r1, #10
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061da:	2200      	movs	r2, #0
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	60fa      	str	r2, [r7, #12]
 80061e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061e4:	f7fa f854 	bl	8000290 <__aeabi_uldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4613      	mov	r3, r2
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_RCC_GetSysClockFreq+0x180>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	3301      	adds	r3, #1
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800620a:	e002      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <HAL_RCC_GetSysClockFreq+0x184>)
 800620e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006214:	4618      	mov	r0, r3
 8006216:	3740      	adds	r7, #64	; 0x40
 8006218:	46bd      	mov	sp, r7
 800621a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800621e:	bf00      	nop
 8006220:	40023800 	.word	0x40023800
 8006224:	00f42400 	.word	0x00f42400
 8006228:	017d7840 	.word	0x017d7840

0800622c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <HAL_RCC_GetHCLKFreq+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000004 	.word	0x20000004

08006244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006248:	f7ff fff0 	bl	800622c <HAL_RCC_GetHCLKFreq>
 800624c:	4602      	mov	r2, r0
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	0a9b      	lsrs	r3, r3, #10
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	4903      	ldr	r1, [pc, #12]	; (8006268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800625a:	5ccb      	ldrb	r3, [r1, r3]
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40023800 	.word	0x40023800
 8006268:	080168ac 	.word	0x080168ac

0800626c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006270:	f7ff ffdc 	bl	800622c <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0b5b      	lsrs	r3, r3, #13
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4903      	ldr	r1, [pc, #12]	; (8006290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	080168ac 	.word	0x080168ac

08006294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07b      	b.n	800639e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b6:	d009      	beq.n	80062cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
 80062be:	e005      	b.n	80062cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fc fe4a 	bl	8002f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	ea42 0103 	orr.w	r1, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	f003 0104 	and.w	r1, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	f003 0210 	and.w	r2, r3, #16
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e041      	b.n	800643c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d106      	bne.n	80063d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fc fe1f 	bl	8003010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f000 f95d 	bl	80066a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	d001      	beq.n	800645c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e046      	b.n	80064ea <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a23      	ldr	r2, [pc, #140]	; (80064f8 <HAL_TIM_Base_Start+0xb4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d022      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006476:	d01d      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1f      	ldr	r2, [pc, #124]	; (80064fc <HAL_TIM_Base_Start+0xb8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d018      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1e      	ldr	r2, [pc, #120]	; (8006500 <HAL_TIM_Base_Start+0xbc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <HAL_TIM_Base_Start+0xc0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00e      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1b      	ldr	r2, [pc, #108]	; (8006508 <HAL_TIM_Base_Start+0xc4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a19      	ldr	r2, [pc, #100]	; (800650c <HAL_TIM_Base_Start+0xc8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_TIM_Base_Start+0x70>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a18      	ldr	r2, [pc, #96]	; (8006510 <HAL_TIM_Base_Start+0xcc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d111      	bne.n	80064d8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b06      	cmp	r3, #6
 80064c4:	d010      	beq.n	80064e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d6:	e007      	b.n	80064e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40010400 	.word	0x40010400
 800650c:	40014000 	.word	0x40014000
 8006510:	40001800 	.word	0x40001800

08006514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIM_ConfigClockSource+0x1c>
 800652c:	2302      	movs	r3, #2
 800652e:	e0b4      	b.n	800669a <HAL_TIM_ConfigClockSource+0x186>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006568:	d03e      	beq.n	80065e8 <HAL_TIM_ConfigClockSource+0xd4>
 800656a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656e:	f200 8087 	bhi.w	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006576:	f000 8086 	beq.w	8006686 <HAL_TIM_ConfigClockSource+0x172>
 800657a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657e:	d87f      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b70      	cmp	r3, #112	; 0x70
 8006582:	d01a      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0xa6>
 8006584:	2b70      	cmp	r3, #112	; 0x70
 8006586:	d87b      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d050      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x11a>
 800658c:	2b60      	cmp	r3, #96	; 0x60
 800658e:	d877      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b50      	cmp	r3, #80	; 0x50
 8006592:	d03c      	beq.n	800660e <HAL_TIM_ConfigClockSource+0xfa>
 8006594:	2b50      	cmp	r3, #80	; 0x50
 8006596:	d873      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d058      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x13a>
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d86f      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d064      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065a4:	2b30      	cmp	r3, #48	; 0x30
 80065a6:	d86b      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d060      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065ac:	2b20      	cmp	r3, #32
 80065ae:	d867      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d05c      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065b4:	2b10      	cmp	r3, #16
 80065b6:	d05a      	beq.n	800666e <HAL_TIM_ConfigClockSource+0x15a>
 80065b8:	e062      	b.n	8006680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065ca:	f000 f991 	bl	80068f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	609a      	str	r2, [r3, #8]
      break;
 80065e6:	e04f      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065f8:	f000 f97a 	bl	80068f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660a:	609a      	str	r2, [r3, #8]
      break;
 800660c:	e03c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	461a      	mov	r2, r3
 800661c:	f000 f8ee 	bl	80067fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2150      	movs	r1, #80	; 0x50
 8006626:	4618      	mov	r0, r3
 8006628:	f000 f947 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800662c:	e02c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800663a:	461a      	mov	r2, r3
 800663c:	f000 f90d 	bl	800685a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2160      	movs	r1, #96	; 0x60
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f937 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800664c:	e01c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	461a      	mov	r2, r3
 800665c:	f000 f8ce 	bl	80067fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2140      	movs	r1, #64	; 0x40
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f927 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800666c:	e00c      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 f91e 	bl	80068ba <TIM_ITRx_SetConfig>
      break;
 800667e:	e003      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	73fb      	strb	r3, [r7, #15]
      break;
 8006684:	e000      	b.n	8006688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a46      	ldr	r2, [pc, #280]	; (80067d0 <TIM_Base_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c2:	d00f      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a43      	ldr	r2, [pc, #268]	; (80067d4 <TIM_Base_SetConfig+0x130>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a42      	ldr	r2, [pc, #264]	; (80067d8 <TIM_Base_SetConfig+0x134>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a41      	ldr	r2, [pc, #260]	; (80067dc <TIM_Base_SetConfig+0x138>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a40      	ldr	r2, [pc, #256]	; (80067e0 <TIM_Base_SetConfig+0x13c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d108      	bne.n	80066f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a35      	ldr	r2, [pc, #212]	; (80067d0 <TIM_Base_SetConfig+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d02b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006704:	d027      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a32      	ldr	r2, [pc, #200]	; (80067d4 <TIM_Base_SetConfig+0x130>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d023      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a31      	ldr	r2, [pc, #196]	; (80067d8 <TIM_Base_SetConfig+0x134>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a30      	ldr	r2, [pc, #192]	; (80067dc <TIM_Base_SetConfig+0x138>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2f      	ldr	r2, [pc, #188]	; (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d017      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2e      	ldr	r2, [pc, #184]	; (80067e4 <TIM_Base_SetConfig+0x140>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2d      	ldr	r2, [pc, #180]	; (80067e8 <TIM_Base_SetConfig+0x144>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <TIM_Base_SetConfig+0x148>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a2b      	ldr	r2, [pc, #172]	; (80067f0 <TIM_Base_SetConfig+0x14c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <TIM_Base_SetConfig+0x150>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a29      	ldr	r2, [pc, #164]	; (80067f8 <TIM_Base_SetConfig+0x154>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <TIM_Base_SetConfig+0x12c>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0xf8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d103      	bne.n	80067a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d105      	bne.n	80067c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]
  }
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40010400 	.word	0x40010400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800
 80067f0:	40001800 	.word	0x40001800
 80067f4:	40001c00 	.word	0x40001c00
 80067f8:	40002000 	.word	0x40002000

080067fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f023 0201 	bic.w	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	011b      	lsls	r3, r3, #4
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f023 030a 	bic.w	r3, r3, #10
 8006838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800685a:	b480      	push	{r7}
 800685c:	b087      	sub	sp, #28
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f023 0210 	bic.w	r2, r3, #16
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	031b      	lsls	r3, r3, #12
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006896:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f043 0307 	orr.w	r3, r3, #7
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	609a      	str	r2, [r3, #8]
}
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	431a      	orrs	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4313      	orrs	r3, r2
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	609a      	str	r2, [r3, #8]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006944:	2302      	movs	r3, #2
 8006946:	e05a      	b.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d022      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006994:	d01d      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d018      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a18      	ldr	r2, [pc, #96]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a17      	ldr	r2, [pc, #92]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10c      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40000400 	.word	0x40000400
 8006a14:	40000800 	.word	0x40000800
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	40010400 	.word	0x40010400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40001800 	.word	0x40001800

08006a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e042      	b.n	8006ac0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fc fb00 	bl	8003054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2224      	movs	r2, #36	; 0x24
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fdbf 	bl	80075f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08a      	sub	sp, #40	; 0x28
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	f040 8081 	bne.w	8006bec <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <HAL_UART_Receive+0x2e>
 8006af0:	88fb      	ldrh	r3, [r7, #6]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e079      	b.n	8006bee <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2222      	movs	r2, #34	; 0x22
 8006b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b0e:	f7fd fa65 	bl	8003fdc <HAL_GetTick>
 8006b12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b28:	d108      	bne.n	8006b3c <HAL_UART_Receive+0x74>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	e003      	b.n	8006b44 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006b44:	e047      	b.n	8006bd6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2120      	movs	r1, #32
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fb1d 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e042      	b.n	8006bee <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	3302      	adds	r3, #2
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e01f      	b.n	8006bc8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b90:	d007      	beq.n	8006ba2 <HAL_UART_Receive+0xda>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <HAL_UART_Receive+0xe8>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e008      	b.n	8006bc2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1b2      	bne.n	8006b46 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e000      	b.n	8006bee <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	4613      	mov	r3, r2
 8006c02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d112      	bne.n	8006c36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_UART_Receive_IT+0x26>
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e00b      	b.n	8006c38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fb08 	bl	8007242 <UART_Start_Receive_IT>
 8006c32:	4603      	mov	r3, r0
 8006c34:	e000      	b.n	8006c38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b0ba      	sub	sp, #232	; 0xe8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10f      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x66>
 8006c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fbe8 	bl	8007474 <UART_Receive_IT>
      return;
 8006ca4:	e25b      	b.n	800715e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80de 	beq.w	8006e6c <HAL_UART_IRQHandler+0x22c>
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 80d1 	beq.w	8006e6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <HAL_UART_IRQHandler+0xae>
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d005      	beq.n	8006cee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00b      	beq.n	8006d12 <HAL_UART_IRQHandler+0xd2>
 8006cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	f043 0202 	orr.w	r2, r3, #2
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <HAL_UART_IRQHandler+0xf6>
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2e:	f043 0204 	orr.w	r2, r3, #4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d011      	beq.n	8006d66 <HAL_UART_IRQHandler+0x126>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d005      	beq.n	8006d66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	f043 0208 	orr.w	r2, r3, #8
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 81f2 	beq.w	8007154 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_UART_IRQHandler+0x14e>
 8006d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fb73 	bl	8007474 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	bf0c      	ite	eq
 8006d9c:	2301      	moveq	r3, #1
 8006d9e:	2300      	movne	r3, #0
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <HAL_UART_IRQHandler+0x17a>
 8006db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d04f      	beq.n	8006e5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa7b 	bl	80072b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d141      	bne.n	8006e52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3314      	adds	r3, #20
 8006df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1d9      	bne.n	8006dce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d013      	beq.n	8006e4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	4a7e      	ldr	r2, [pc, #504]	; (8007020 <HAL_UART_IRQHandler+0x3e0>)
 8006e28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fd fa85 	bl	800433e <HAL_DMA_Abort_IT>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d016      	beq.n	8006e68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e44:	4610      	mov	r0, r2
 8006e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e48:	e00e      	b.n	8006e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f98a 	bl	8007164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e50:	e00a      	b.n	8006e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f986 	bl	8007164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	e006      	b.n	8006e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f982 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006e66:	e175      	b.n	8007154 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	bf00      	nop
    return;
 8006e6a:	e173      	b.n	8007154 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	f040 814f 	bne.w	8007114 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7a:	f003 0310 	and.w	r3, r3, #16
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8148 	beq.w	8007114 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8141 	beq.w	8007114 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	f040 80b6 	bne.w	8007024 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 8145 	beq.w	8007158 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	f080 813e 	bcs.w	8007158 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eee:	f000 8088 	beq.w	8007002 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1d9      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e1      	bne.n	8006f3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3314      	adds	r3, #20
 8006f80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3314      	adds	r3, #20
 8006f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e3      	bne.n	8006f7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd2:	f023 0310 	bic.w	r3, r3, #16
 8006fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006fe4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fe6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e3      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd f92e 	bl	800425e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2202      	movs	r2, #2
 8007006:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007010:	b29b      	uxth	r3, r3
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	b29b      	uxth	r3, r3
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8ad 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800701e:	e09b      	b.n	8007158 <HAL_UART_IRQHandler+0x518>
 8007020:	0800737d 	.word	0x0800737d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702c:	b29b      	uxth	r3, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 808e 	beq.w	800715c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8089 	beq.w	800715c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	330c      	adds	r3, #12
 8007050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800706e:	647a      	str	r2, [r7, #68]	; 0x44
 8007070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800707c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e3      	bne.n	800704a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	623b      	str	r3, [r7, #32]
   return(result);
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3314      	adds	r3, #20
 80070a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070a6:	633a      	str	r2, [r7, #48]	; 0x30
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e3      	bne.n	8007082 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	330c      	adds	r3, #12
 80070ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80070ec:	61fa      	str	r2, [r7, #28]
 80070ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69b9      	ldr	r1, [r7, #24]
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	617b      	str	r3, [r7, #20]
   return(result);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e3      	bne.n	80070c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f833 	bl	8007178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007112:	e023      	b.n	800715c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <HAL_UART_IRQHandler+0x4f4>
 8007120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f939 	bl	80073a4 <UART_Transmit_IT>
    return;
 8007132:	e014      	b.n	800715e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <HAL_UART_IRQHandler+0x51e>
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f979 	bl	8007444 <UART_EndTransmit_IT>
    return;
 8007152:	e004      	b.n	800715e <HAL_UART_IRQHandler+0x51e>
    return;
 8007154:	bf00      	nop
 8007156:	e002      	b.n	800715e <HAL_UART_IRQHandler+0x51e>
      return;
 8007158:	bf00      	nop
 800715a:	e000      	b.n	800715e <HAL_UART_IRQHandler+0x51e>
      return;
 800715c:	bf00      	nop
  }
}
 800715e:	37e8      	adds	r7, #232	; 0xe8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a0:	e03b      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d037      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fc ff17 	bl	8003fdc <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	6a3a      	ldr	r2, [r7, #32]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e03a      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d023      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x8a>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b80      	cmp	r3, #128	; 0x80
 80071d6:	d020      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x8a>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d01d      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d116      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f857 	bl	80072b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2208      	movs	r2, #8
 800720c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e00f      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	429a      	cmp	r2, r3
 8007228:	bf0c      	ite	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	2300      	movne	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	429a      	cmp	r2, r3
 8007236:	d0b4      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	4613      	mov	r3, r2
 800724e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	88fa      	ldrh	r2, [r7, #6]
 800725a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2222      	movs	r2, #34	; 0x22
 800726c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007286:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695a      	ldr	r2, [r3, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0220 	orr.w	r2, r2, #32
 80072a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b095      	sub	sp, #84	; 0x54
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	330c      	adds	r3, #12
 80072dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072de:	643a      	str	r2, [r7, #64]	; 0x40
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e5      	bne.n	80072be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3314      	adds	r3, #20
 80072f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	61fb      	str	r3, [r7, #28]
   return(result);
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	64bb      	str	r3, [r7, #72]	; 0x48
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e5      	bne.n	80072f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	2b01      	cmp	r3, #1
 800732c:	d119      	bne.n	8007362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	60bb      	str	r3, [r7, #8]
   return(result);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f023 0310 	bic.w	r3, r3, #16
 8007344:	647b      	str	r3, [r7, #68]	; 0x44
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800734e:	61ba      	str	r2, [r7, #24]
 8007350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007370:	bf00      	nop
 8007372:	3754      	adds	r7, #84	; 0x54
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fee4 	bl	8007164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800739c:	bf00      	nop
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b21      	cmp	r3, #33	; 0x21
 80073b6:	d13e      	bne.n	8007436 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073c0:	d114      	bne.n	80073ec <UART_Transmit_IT+0x48>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d110      	bne.n	80073ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	1c9a      	adds	r2, r3, #2
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	621a      	str	r2, [r3, #32]
 80073ea:	e008      	b.n	80073fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	1c59      	adds	r1, r3, #1
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	6211      	str	r1, [r2, #32]
 80073f6:	781a      	ldrb	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	b29b      	uxth	r3, r3
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4619      	mov	r1, r3
 800740c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10f      	bne.n	8007432 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007420:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007430:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	e000      	b.n	8007438 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007436:	2302      	movs	r3, #2
  }
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800745a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7fb fa6d 	bl	8002944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08c      	sub	sp, #48	; 0x30
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b22      	cmp	r3, #34	; 0x22
 8007486:	f040 80ae 	bne.w	80075e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007492:	d117      	bne.n	80074c4 <UART_Receive_IT+0x50>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d113      	bne.n	80074c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28
 80074c2:	e026      	b.n	8007512 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d6:	d007      	beq.n	80074e8 <UART_Receive_IT+0x74>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <UART_Receive_IT+0x82>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	e008      	b.n	8007508 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007502:	b2da      	uxtb	r2, r3
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29b      	uxth	r3, r3
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	4619      	mov	r1, r3
 8007520:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007522:	2b00      	cmp	r3, #0
 8007524:	d15d      	bne.n	80075e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0220 	bic.w	r2, r2, #32
 8007534:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007544:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695a      	ldr	r2, [r3, #20]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	2b01      	cmp	r3, #1
 800756a:	d135      	bne.n	80075d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	613b      	str	r3, [r7, #16]
   return(result);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f023 0310 	bic.w	r3, r3, #16
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007592:	623a      	str	r2, [r7, #32]
 8007594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	69f9      	ldr	r1, [r7, #28]
 8007598:	6a3a      	ldr	r2, [r7, #32]
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	61bb      	str	r3, [r7, #24]
   return(result);
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e5      	bne.n	8007572 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b10      	cmp	r3, #16
 80075b2:	d10a      	bne.n	80075ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff fdd1 	bl	8007178 <HAL_UARTEx_RxEventCallback>
 80075d6:	e002      	b.n	80075de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fb f97d 	bl	80028d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	e002      	b.n	80075e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	e000      	b.n	80075e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075e6:	2302      	movs	r3, #2
  }
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3730      	adds	r7, #48	; 0x30
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075f4:	b0c0      	sub	sp, #256	; 0x100
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	68d9      	ldr	r1, [r3, #12]
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	ea40 0301 	orr.w	r3, r0, r1
 8007618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	431a      	orrs	r2, r3
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	431a      	orrs	r2, r3
 8007630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007648:	f021 010c 	bic.w	r1, r1, #12
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007656:	430b      	orrs	r3, r1
 8007658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766a:	6999      	ldr	r1, [r3, #24]
 800766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	ea40 0301 	orr.w	r3, r0, r1
 8007676:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b8f      	ldr	r3, [pc, #572]	; (80078bc <UART_SetConfig+0x2cc>)
 8007680:	429a      	cmp	r2, r3
 8007682:	d005      	beq.n	8007690 <UART_SetConfig+0xa0>
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4b8d      	ldr	r3, [pc, #564]	; (80078c0 <UART_SetConfig+0x2d0>)
 800768c:	429a      	cmp	r2, r3
 800768e:	d104      	bne.n	800769a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007690:	f7fe fdec 	bl	800626c <HAL_RCC_GetPCLK2Freq>
 8007694:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007698:	e003      	b.n	80076a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800769a:	f7fe fdd3 	bl	8006244 <HAL_RCC_GetPCLK1Freq>
 800769e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ac:	f040 810c 	bne.w	80078c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b4:	2200      	movs	r2, #0
 80076b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076c2:	4622      	mov	r2, r4
 80076c4:	462b      	mov	r3, r5
 80076c6:	1891      	adds	r1, r2, r2
 80076c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80076ca:	415b      	adcs	r3, r3
 80076cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076d2:	4621      	mov	r1, r4
 80076d4:	eb12 0801 	adds.w	r8, r2, r1
 80076d8:	4629      	mov	r1, r5
 80076da:	eb43 0901 	adc.w	r9, r3, r1
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076f2:	4690      	mov	r8, r2
 80076f4:	4699      	mov	r9, r3
 80076f6:	4623      	mov	r3, r4
 80076f8:	eb18 0303 	adds.w	r3, r8, r3
 80076fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007700:	462b      	mov	r3, r5
 8007702:	eb49 0303 	adc.w	r3, r9, r3
 8007706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007716:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800771a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800771e:	460b      	mov	r3, r1
 8007720:	18db      	adds	r3, r3, r3
 8007722:	653b      	str	r3, [r7, #80]	; 0x50
 8007724:	4613      	mov	r3, r2
 8007726:	eb42 0303 	adc.w	r3, r2, r3
 800772a:	657b      	str	r3, [r7, #84]	; 0x54
 800772c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007730:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007734:	f7f8 fdac 	bl	8000290 <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <UART_SetConfig+0x2d4>)
 800773e:	fba3 2302 	umull	r2, r3, r3, r2
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	011c      	lsls	r4, r3, #4
 8007746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007750:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007754:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	1891      	adds	r1, r2, r2
 800775e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007760:	415b      	adcs	r3, r3
 8007762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007768:	4641      	mov	r1, r8
 800776a:	eb12 0a01 	adds.w	sl, r2, r1
 800776e:	4649      	mov	r1, r9
 8007770:	eb43 0b01 	adc.w	fp, r3, r1
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007780:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007788:	4692      	mov	sl, r2
 800778a:	469b      	mov	fp, r3
 800778c:	4643      	mov	r3, r8
 800778e:	eb1a 0303 	adds.w	r3, sl, r3
 8007792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007796:	464b      	mov	r3, r9
 8007798:	eb4b 0303 	adc.w	r3, fp, r3
 800779c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077b4:	460b      	mov	r3, r1
 80077b6:	18db      	adds	r3, r3, r3
 80077b8:	643b      	str	r3, [r7, #64]	; 0x40
 80077ba:	4613      	mov	r3, r2
 80077bc:	eb42 0303 	adc.w	r3, r2, r3
 80077c0:	647b      	str	r3, [r7, #68]	; 0x44
 80077c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077ca:	f7f8 fd61 	bl	8000290 <__aeabi_uldivmod>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	4b3b      	ldr	r3, [pc, #236]	; (80078c4 <UART_SetConfig+0x2d4>)
 80077d6:	fba3 2301 	umull	r2, r3, r3, r1
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	2264      	movs	r2, #100	; 0x64
 80077de:	fb02 f303 	mul.w	r3, r2, r3
 80077e2:	1acb      	subs	r3, r1, r3
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077ea:	4b36      	ldr	r3, [pc, #216]	; (80078c4 <UART_SetConfig+0x2d4>)
 80077ec:	fba3 2302 	umull	r2, r3, r3, r2
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077f8:	441c      	add	r4, r3
 80077fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007804:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007808:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800780c:	4642      	mov	r2, r8
 800780e:	464b      	mov	r3, r9
 8007810:	1891      	adds	r1, r2, r2
 8007812:	63b9      	str	r1, [r7, #56]	; 0x38
 8007814:	415b      	adcs	r3, r3
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800781c:	4641      	mov	r1, r8
 800781e:	1851      	adds	r1, r2, r1
 8007820:	6339      	str	r1, [r7, #48]	; 0x30
 8007822:	4649      	mov	r1, r9
 8007824:	414b      	adcs	r3, r1
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007834:	4659      	mov	r1, fp
 8007836:	00cb      	lsls	r3, r1, #3
 8007838:	4651      	mov	r1, sl
 800783a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783e:	4651      	mov	r1, sl
 8007840:	00ca      	lsls	r2, r1, #3
 8007842:	4610      	mov	r0, r2
 8007844:	4619      	mov	r1, r3
 8007846:	4603      	mov	r3, r0
 8007848:	4642      	mov	r2, r8
 800784a:	189b      	adds	r3, r3, r2
 800784c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007850:	464b      	mov	r3, r9
 8007852:	460a      	mov	r2, r1
 8007854:	eb42 0303 	adc.w	r3, r2, r3
 8007858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007868:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800786c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007870:	460b      	mov	r3, r1
 8007872:	18db      	adds	r3, r3, r3
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
 8007876:	4613      	mov	r3, r2
 8007878:	eb42 0303 	adc.w	r3, r2, r3
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007882:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007886:	f7f8 fd03 	bl	8000290 <__aeabi_uldivmod>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <UART_SetConfig+0x2d4>)
 8007890:	fba3 1302 	umull	r1, r3, r3, r2
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	2164      	movs	r1, #100	; 0x64
 8007898:	fb01 f303 	mul.w	r3, r1, r3
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	3332      	adds	r3, #50	; 0x32
 80078a2:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <UART_SetConfig+0x2d4>)
 80078a4:	fba2 2303 	umull	r2, r3, r2, r3
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	f003 0207 	and.w	r2, r3, #7
 80078ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4422      	add	r2, r4
 80078b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078b8:	e106      	b.n	8007ac8 <UART_SetConfig+0x4d8>
 80078ba:	bf00      	nop
 80078bc:	40011000 	.word	0x40011000
 80078c0:	40011400 	.word	0x40011400
 80078c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078da:	4642      	mov	r2, r8
 80078dc:	464b      	mov	r3, r9
 80078de:	1891      	adds	r1, r2, r2
 80078e0:	6239      	str	r1, [r7, #32]
 80078e2:	415b      	adcs	r3, r3
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
 80078e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078ea:	4641      	mov	r1, r8
 80078ec:	1854      	adds	r4, r2, r1
 80078ee:	4649      	mov	r1, r9
 80078f0:	eb43 0501 	adc.w	r5, r3, r1
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	00eb      	lsls	r3, r5, #3
 80078fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007902:	00e2      	lsls	r2, r4, #3
 8007904:	4614      	mov	r4, r2
 8007906:	461d      	mov	r5, r3
 8007908:	4643      	mov	r3, r8
 800790a:	18e3      	adds	r3, r4, r3
 800790c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007910:	464b      	mov	r3, r9
 8007912:	eb45 0303 	adc.w	r3, r5, r3
 8007916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007936:	4629      	mov	r1, r5
 8007938:	008b      	lsls	r3, r1, #2
 800793a:	4621      	mov	r1, r4
 800793c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007940:	4621      	mov	r1, r4
 8007942:	008a      	lsls	r2, r1, #2
 8007944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007948:	f7f8 fca2 	bl	8000290 <__aeabi_uldivmod>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4b60      	ldr	r3, [pc, #384]	; (8007ad4 <UART_SetConfig+0x4e4>)
 8007952:	fba3 2302 	umull	r2, r3, r3, r2
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	011c      	lsls	r4, r3, #4
 800795a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800795e:	2200      	movs	r2, #0
 8007960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007964:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007968:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800796c:	4642      	mov	r2, r8
 800796e:	464b      	mov	r3, r9
 8007970:	1891      	adds	r1, r2, r2
 8007972:	61b9      	str	r1, [r7, #24]
 8007974:	415b      	adcs	r3, r3
 8007976:	61fb      	str	r3, [r7, #28]
 8007978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800797c:	4641      	mov	r1, r8
 800797e:	1851      	adds	r1, r2, r1
 8007980:	6139      	str	r1, [r7, #16]
 8007982:	4649      	mov	r1, r9
 8007984:	414b      	adcs	r3, r1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007994:	4659      	mov	r1, fp
 8007996:	00cb      	lsls	r3, r1, #3
 8007998:	4651      	mov	r1, sl
 800799a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800799e:	4651      	mov	r1, sl
 80079a0:	00ca      	lsls	r2, r1, #3
 80079a2:	4610      	mov	r0, r2
 80079a4:	4619      	mov	r1, r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	4642      	mov	r2, r8
 80079aa:	189b      	adds	r3, r3, r2
 80079ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079b0:	464b      	mov	r3, r9
 80079b2:	460a      	mov	r2, r1
 80079b4:	eb42 0303 	adc.w	r3, r2, r3
 80079b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80079c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079d4:	4649      	mov	r1, r9
 80079d6:	008b      	lsls	r3, r1, #2
 80079d8:	4641      	mov	r1, r8
 80079da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079de:	4641      	mov	r1, r8
 80079e0:	008a      	lsls	r2, r1, #2
 80079e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079e6:	f7f8 fc53 	bl	8000290 <__aeabi_uldivmod>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4611      	mov	r1, r2
 80079f0:	4b38      	ldr	r3, [pc, #224]	; (8007ad4 <UART_SetConfig+0x4e4>)
 80079f2:	fba3 2301 	umull	r2, r3, r3, r1
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	2264      	movs	r2, #100	; 0x64
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	1acb      	subs	r3, r1, r3
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	3332      	adds	r3, #50	; 0x32
 8007a04:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <UART_SetConfig+0x4e4>)
 8007a06:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0a:	095b      	lsrs	r3, r3, #5
 8007a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a10:	441c      	add	r4, r3
 8007a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a16:	2200      	movs	r2, #0
 8007a18:	673b      	str	r3, [r7, #112]	; 0x70
 8007a1a:	677a      	str	r2, [r7, #116]	; 0x74
 8007a1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a20:	4642      	mov	r2, r8
 8007a22:	464b      	mov	r3, r9
 8007a24:	1891      	adds	r1, r2, r2
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	415b      	adcs	r3, r3
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a30:	4641      	mov	r1, r8
 8007a32:	1851      	adds	r1, r2, r1
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	4649      	mov	r1, r9
 8007a38:	414b      	adcs	r3, r1
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a48:	4659      	mov	r1, fp
 8007a4a:	00cb      	lsls	r3, r1, #3
 8007a4c:	4651      	mov	r1, sl
 8007a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a52:	4651      	mov	r1, sl
 8007a54:	00ca      	lsls	r2, r1, #3
 8007a56:	4610      	mov	r0, r2
 8007a58:	4619      	mov	r1, r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	189b      	adds	r3, r3, r2
 8007a60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a62:	464b      	mov	r3, r9
 8007a64:	460a      	mov	r2, r1
 8007a66:	eb42 0303 	adc.w	r3, r2, r3
 8007a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	663b      	str	r3, [r7, #96]	; 0x60
 8007a76:	667a      	str	r2, [r7, #100]	; 0x64
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a84:	4649      	mov	r1, r9
 8007a86:	008b      	lsls	r3, r1, #2
 8007a88:	4641      	mov	r1, r8
 8007a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a8e:	4641      	mov	r1, r8
 8007a90:	008a      	lsls	r2, r1, #2
 8007a92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a96:	f7f8 fbfb 	bl	8000290 <__aeabi_uldivmod>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <UART_SetConfig+0x4e4>)
 8007aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	2164      	movs	r1, #100	; 0x64
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	3332      	adds	r3, #50	; 0x32
 8007ab2:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <UART_SetConfig+0x4e4>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	f003 020f 	and.w	r2, r3, #15
 8007abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4422      	add	r2, r4
 8007ac6:	609a      	str	r2, [r3, #8]
}
 8007ac8:	bf00      	nop
 8007aca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad4:	51eb851f 	.word	0x51eb851f

08007ad8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007ade:	4b87      	ldr	r3, [pc, #540]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007ae0:	22c0      	movs	r2, #192	; 0xc0
 8007ae2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007ae4:	4b85      	ldr	r3, [pc, #532]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007ae6:	22a8      	movs	r2, #168	; 0xa8
 8007ae8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007aea:	4b84      	ldr	r3, [pc, #528]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8007af0:	4b82      	ldr	r3, [pc, #520]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007af2:	220a      	movs	r2, #10
 8007af4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007af6:	4b82      	ldr	r3, [pc, #520]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007af8:	22ff      	movs	r2, #255	; 0xff
 8007afa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007afc:	4b80      	ldr	r3, [pc, #512]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007afe:	22ff      	movs	r2, #255	; 0xff
 8007b00:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007b02:	4b7f      	ldr	r3, [pc, #508]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007b08:	4b7d      	ldr	r3, [pc, #500]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007b0e:	4b7d      	ldr	r3, [pc, #500]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007b10:	22c0      	movs	r2, #192	; 0xc0
 8007b12:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007b14:	4b7b      	ldr	r3, [pc, #492]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007b16:	22a8      	movs	r2, #168	; 0xa8
 8007b18:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007b1a:	4b7a      	ldr	r3, [pc, #488]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007b20:	4b78      	ldr	r3, [pc, #480]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007b26:	f000 fd07 	bl	8008538 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007b2a:	4b74      	ldr	r3, [pc, #464]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	061a      	lsls	r2, r3, #24
 8007b30:	4b72      	ldr	r3, [pc, #456]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	041b      	lsls	r3, r3, #16
 8007b36:	431a      	orrs	r2, r3
 8007b38:	4b70      	ldr	r3, [pc, #448]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b3a:	789b      	ldrb	r3, [r3, #2]
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	4a6e      	ldr	r2, [pc, #440]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b42:	78d2      	ldrb	r2, [r2, #3]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	061a      	lsls	r2, r3, #24
 8007b48:	4b6c      	ldr	r3, [pc, #432]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	0619      	lsls	r1, r3, #24
 8007b4e:	4b6b      	ldr	r3, [pc, #428]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	041b      	lsls	r3, r3, #16
 8007b54:	4319      	orrs	r1, r3
 8007b56:	4b69      	ldr	r3, [pc, #420]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b58:	789b      	ldrb	r3, [r3, #2]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	4967      	ldr	r1, [pc, #412]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b60:	78c9      	ldrb	r1, [r1, #3]
 8007b62:	430b      	orrs	r3, r1
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	4b63      	ldr	r3, [pc, #396]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	0619      	lsls	r1, r3, #24
 8007b72:	4b62      	ldr	r3, [pc, #392]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b74:	785b      	ldrb	r3, [r3, #1]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	4319      	orrs	r1, r3
 8007b7a:	4b60      	ldr	r3, [pc, #384]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b7c:	789b      	ldrb	r3, [r3, #2]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	430b      	orrs	r3, r1
 8007b82:	495e      	ldr	r1, [pc, #376]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b84:	78c9      	ldrb	r1, [r1, #3]
 8007b86:	430b      	orrs	r3, r1
 8007b88:	0a1b      	lsrs	r3, r3, #8
 8007b8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	4b5a      	ldr	r3, [pc, #360]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	0619      	lsls	r1, r3, #24
 8007b96:	4b59      	ldr	r3, [pc, #356]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	4319      	orrs	r1, r3
 8007b9e:	4b57      	ldr	r3, [pc, #348]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007ba0:	789b      	ldrb	r3, [r3, #2]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	4955      	ldr	r1, [pc, #340]	; (8007cfc <MX_LWIP_Init+0x224>)
 8007ba8:	78c9      	ldrb	r1, [r1, #3]
 8007baa:	430b      	orrs	r3, r1
 8007bac:	0e1b      	lsrs	r3, r3, #24
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	4a55      	ldr	r2, [pc, #340]	; (8007d08 <MX_LWIP_Init+0x230>)
 8007bb2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007bb4:	4b52      	ldr	r3, [pc, #328]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	061a      	lsls	r2, r3, #24
 8007bba:	4b51      	ldr	r3, [pc, #324]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bbc:	785b      	ldrb	r3, [r3, #1]
 8007bbe:	041b      	lsls	r3, r3, #16
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	4b4f      	ldr	r3, [pc, #316]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bc4:	789b      	ldrb	r3, [r3, #2]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	4a4d      	ldr	r2, [pc, #308]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bcc:	78d2      	ldrb	r2, [r2, #3]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	061a      	lsls	r2, r3, #24
 8007bd2:	4b4b      	ldr	r3, [pc, #300]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	0619      	lsls	r1, r3, #24
 8007bd8:	4b49      	ldr	r3, [pc, #292]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	041b      	lsls	r3, r3, #16
 8007bde:	4319      	orrs	r1, r3
 8007be0:	4b47      	ldr	r3, [pc, #284]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007be2:	789b      	ldrb	r3, [r3, #2]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	430b      	orrs	r3, r1
 8007be8:	4945      	ldr	r1, [pc, #276]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bea:	78c9      	ldrb	r1, [r1, #3]
 8007bec:	430b      	orrs	r3, r1
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	4b42      	ldr	r3, [pc, #264]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	0619      	lsls	r1, r3, #24
 8007bfc:	4b40      	ldr	r3, [pc, #256]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	4319      	orrs	r1, r3
 8007c04:	4b3e      	ldr	r3, [pc, #248]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007c06:	789b      	ldrb	r3, [r3, #2]
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	493c      	ldr	r1, [pc, #240]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007c0e:	78c9      	ldrb	r1, [r1, #3]
 8007c10:	430b      	orrs	r3, r1
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	4b39      	ldr	r3, [pc, #228]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	0619      	lsls	r1, r3, #24
 8007c20:	4b37      	ldr	r3, [pc, #220]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	4319      	orrs	r1, r3
 8007c28:	4b35      	ldr	r3, [pc, #212]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007c2a:	789b      	ldrb	r3, [r3, #2]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	4933      	ldr	r1, [pc, #204]	; (8007d00 <MX_LWIP_Init+0x228>)
 8007c32:	78c9      	ldrb	r1, [r1, #3]
 8007c34:	430b      	orrs	r3, r1
 8007c36:	0e1b      	lsrs	r3, r3, #24
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	4a34      	ldr	r2, [pc, #208]	; (8007d0c <MX_LWIP_Init+0x234>)
 8007c3c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	061a      	lsls	r2, r3, #24
 8007c44:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c46:	785b      	ldrb	r3, [r3, #1]
 8007c48:	041b      	lsls	r3, r3, #16
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	4b2d      	ldr	r3, [pc, #180]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c4e:	789b      	ldrb	r3, [r3, #2]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	4313      	orrs	r3, r2
 8007c54:	4a2b      	ldr	r2, [pc, #172]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c56:	78d2      	ldrb	r2, [r2, #3]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	061a      	lsls	r2, r3, #24
 8007c5c:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	0619      	lsls	r1, r3, #24
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	4319      	orrs	r1, r3
 8007c6a:	4b26      	ldr	r3, [pc, #152]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c6c:	789b      	ldrb	r3, [r3, #2]
 8007c6e:	021b      	lsls	r3, r3, #8
 8007c70:	430b      	orrs	r3, r1
 8007c72:	4924      	ldr	r1, [pc, #144]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c74:	78c9      	ldrb	r1, [r1, #3]
 8007c76:	430b      	orrs	r3, r1
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	4b20      	ldr	r3, [pc, #128]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	0619      	lsls	r1, r3, #24
 8007c86:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	4319      	orrs	r1, r3
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c90:	789b      	ldrb	r3, [r3, #2]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	430b      	orrs	r3, r1
 8007c96:	491b      	ldr	r1, [pc, #108]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007c98:	78c9      	ldrb	r1, [r1, #3]
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	4b17      	ldr	r3, [pc, #92]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	0619      	lsls	r1, r3, #24
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	041b      	lsls	r3, r3, #16
 8007cb0:	4319      	orrs	r1, r3
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007cb4:	789b      	ldrb	r3, [r3, #2]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	430b      	orrs	r3, r1
 8007cba:	4912      	ldr	r1, [pc, #72]	; (8007d04 <MX_LWIP_Init+0x22c>)
 8007cbc:	78c9      	ldrb	r1, [r1, #3]
 8007cbe:	430b      	orrs	r3, r1
 8007cc0:	0e1b      	lsrs	r3, r3, #24
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	4a12      	ldr	r2, [pc, #72]	; (8007d10 <MX_LWIP_Init+0x238>)
 8007cc6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <MX_LWIP_Init+0x23c>)
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <MX_LWIP_Init+0x240>)
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <MX_LWIP_Init+0x238>)
 8007cd6:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <MX_LWIP_Init+0x234>)
 8007cd8:	490b      	ldr	r1, [pc, #44]	; (8007d08 <MX_LWIP_Init+0x230>)
 8007cda:	4810      	ldr	r0, [pc, #64]	; (8007d1c <MX_LWIP_Init+0x244>)
 8007cdc:	f001 f918 	bl	8008f10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007ce0:	480e      	ldr	r0, [pc, #56]	; (8007d1c <MX_LWIP_Init+0x244>)
 8007ce2:	f001 fac7 	bl	8009274 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007ce6:	480d      	ldr	r0, [pc, #52]	; (8007d1c <MX_LWIP_Init+0x244>)
 8007ce8:	f001 fad4 	bl	8009294 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007cec:	490c      	ldr	r1, [pc, #48]	; (8007d20 <MX_LWIP_Init+0x248>)
 8007cee:	480b      	ldr	r0, [pc, #44]	; (8007d1c <MX_LWIP_Init+0x244>)
 8007cf0:	f001 fbd2 	bl	8009498 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	200005f8 	.word	0x200005f8
 8007d00:	200005fc 	.word	0x200005fc
 8007d04:	20000600 	.word	0x20000600
 8007d08:	200005ec 	.word	0x200005ec
 8007d0c:	200005f0 	.word	0x200005f0
 8007d10:	200005f4 	.word	0x200005f4
 8007d14:	08012c85 	.word	0x08012c85
 8007d18:	08007fdd 	.word	0x08007fdd
 8007d1c:	200005b8 	.word	0x200005b8
 8007d20:	08007d25 	.word	0x08007d25

08007d24 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007d44:	4b3f      	ldr	r3, [pc, #252]	; (8007e44 <low_level_init+0x10c>)
 8007d46:	4a40      	ldr	r2, [pc, #256]	; (8007e48 <low_level_init+0x110>)
 8007d48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007d4e:	2380      	movs	r3, #128	; 0x80
 8007d50:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007d52:	23e1      	movs	r3, #225	; 0xe1
 8007d54:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007d56:	2300      	movs	r3, #0
 8007d58:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007d62:	4a38      	ldr	r2, [pc, #224]	; (8007e44 <low_level_init+0x10c>)
 8007d64:	f107 0308 	add.w	r3, r7, #8
 8007d68:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8007d6a:	4b36      	ldr	r3, [pc, #216]	; (8007e44 <low_level_init+0x10c>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007d70:	4b34      	ldr	r3, [pc, #208]	; (8007e44 <low_level_init+0x10c>)
 8007d72:	4a36      	ldr	r2, [pc, #216]	; (8007e4c <low_level_init+0x114>)
 8007d74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007d76:	4b33      	ldr	r3, [pc, #204]	; (8007e44 <low_level_init+0x10c>)
 8007d78:	4a35      	ldr	r2, [pc, #212]	; (8007e50 <low_level_init+0x118>)
 8007d7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007d7c:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <low_level_init+0x10c>)
 8007d7e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007d82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007d84:	482f      	ldr	r0, [pc, #188]	; (8007e44 <low_level_init+0x10c>)
 8007d86:	f7fc fafd 	bl	8004384 <HAL_ETH_Init>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007d8e:	2238      	movs	r2, #56	; 0x38
 8007d90:	2100      	movs	r1, #0
 8007d92:	4830      	ldr	r0, [pc, #192]	; (8007e54 <low_level_init+0x11c>)
 8007d94:	f00b f9b1 	bl	80130fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007d98:	4b2e      	ldr	r3, [pc, #184]	; (8007e54 <low_level_init+0x11c>)
 8007d9a:	2221      	movs	r2, #33	; 0x21
 8007d9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007d9e:	4b2d      	ldr	r3, [pc, #180]	; (8007e54 <low_level_init+0x11c>)
 8007da0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007da4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007da6:	4b2b      	ldr	r3, [pc, #172]	; (8007e54 <low_level_init+0x11c>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007dac:	482a      	ldr	r0, [pc, #168]	; (8007e58 <low_level_init+0x120>)
 8007dae:	f000 ff77 	bl	8008ca0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2206      	movs	r2, #6
 8007db6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <low_level_init+0x10c>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007dc6:	4b1f      	ldr	r3, [pc, #124]	; (8007e44 <low_level_init+0x10c>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	785a      	ldrb	r2, [r3, #1]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <low_level_init+0x10c>)
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	789a      	ldrb	r2, [r3, #2]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007dde:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <low_level_init+0x10c>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	78da      	ldrb	r2, [r3, #3]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007dea:	4b16      	ldr	r3, [pc, #88]	; (8007e44 <low_level_init+0x10c>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	791a      	ldrb	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <low_level_init+0x10c>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	795a      	ldrb	r2, [r3, #5]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007e08:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007e10:	f043 030a 	orr.w	r3, r3, #10
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8007e1c:	490f      	ldr	r1, [pc, #60]	; (8007e5c <low_level_init+0x124>)
 8007e1e:	4810      	ldr	r0, [pc, #64]	; (8007e60 <low_level_init+0x128>)
 8007e20:	f7fb ff15 	bl	8003c4e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8007e24:	480e      	ldr	r0, [pc, #56]	; (8007e60 <low_level_init+0x128>)
 8007e26:	f7fb ff44 	bl	8003cb2 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa57 	bl	80082e4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007e36:	e001      	b.n	8007e3c <low_level_init+0x104>
    Error_Handler();
 8007e38:	f7fb f874 	bl	8002f24 <Error_Handler>
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	200050d0 	.word	0x200050d0
 8007e48:	40028000 	.word	0x40028000
 8007e4c:	20005030 	.word	0x20005030
 8007e50:	20004f90 	.word	0x20004f90
 8007e54:	20005180 	.word	0x20005180
 8007e58:	080168b4 	.word	0x080168b4
 8007e5c:	20000010 	.word	0x20000010
 8007e60:	200051b8 	.word	0x200051b8

08007e64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b092      	sub	sp, #72	; 0x48
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007e7c:	f107 030c 	add.w	r3, r7, #12
 8007e80:	2230      	movs	r2, #48	; 0x30
 8007e82:	2100      	movs	r1, #0
 8007e84:	4618      	mov	r0, r3
 8007e86:	f00b f938 	bl	80130fa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8007e8a:	f107 030c 	add.w	r3, r7, #12
 8007e8e:	2230      	movs	r2, #48	; 0x30
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f00b f931 	bl	80130fa <memset>

  for(q = p; q != NULL; q = q->next)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007e9c:	e045      	b.n	8007f2a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d902      	bls.n	8007eaa <low_level_output+0x46>
      return ERR_IF;
 8007ea4:	f06f 030b 	mvn.w	r3, #11
 8007ea8:	e055      	b.n	8007f56 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8007eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eac:	6859      	ldr	r1, [r3, #4]
 8007eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	3348      	adds	r3, #72	; 0x48
 8007eba:	443b      	add	r3, r7
 8007ebc:	3b3c      	subs	r3, #60	; 0x3c
 8007ebe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	3348      	adds	r3, #72	; 0x48
 8007ed2:	443b      	add	r3, r7
 8007ed4:	3b38      	subs	r3, #56	; 0x38
 8007ed6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d011      	beq.n	8007f02 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee0:	1e5a      	subs	r2, r3, #1
 8007ee2:	f107 000c 	add.w	r0, r7, #12
 8007ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ee8:	460b      	mov	r3, r1
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	440b      	add	r3, r1
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	18c1      	adds	r1, r0, r3
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	3348      	adds	r3, #72	; 0x48
 8007efc:	443b      	add	r3, r7
 8007efe:	3b34      	subs	r3, #52	; 0x34
 8007f00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d109      	bne.n	8007f1e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	4413      	add	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	3348      	adds	r3, #72	; 0x48
 8007f16:	443b      	add	r3, r7
 8007f18:	3b34      	subs	r3, #52	; 0x34
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f20:	3301      	adds	r3, #1
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1b6      	bne.n	8007e9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	891b      	ldrh	r3, [r3, #8]
 8007f34:	461a      	mov	r2, r3
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <low_level_output+0xfc>)
 8007f38:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8007f3a:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <low_level_output+0xfc>)
 8007f3c:	f107 030c 	add.w	r3, r7, #12
 8007f40:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007f42:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <low_level_output+0xfc>)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007f48:	2214      	movs	r2, #20
 8007f4a:	4905      	ldr	r1, [pc, #20]	; (8007f60 <low_level_output+0xfc>)
 8007f4c:	4805      	ldr	r0, [pc, #20]	; (8007f64 <low_level_output+0x100>)
 8007f4e:	f7fc fb4f 	bl	80045f0 <HAL_ETH_Transmit>

  return errval;
 8007f52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3748      	adds	r7, #72	; 0x48
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20005180 	.word	0x20005180
 8007f64:	200050d0 	.word	0x200050d0

08007f68 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <low_level_input+0x2c>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d105      	bne.n	8007f88 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007f7c:	f107 030c 	add.w	r3, r7, #12
 8007f80:	4619      	mov	r1, r3
 8007f82:	4805      	ldr	r0, [pc, #20]	; (8007f98 <low_level_input+0x30>)
 8007f84:	f7fc fbc8 	bl	8004718 <HAL_ETH_ReadData>
  }

  return p;
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20004f8c 	.word	0x20004f8c
 8007f98:	200050d0 	.word	0x200050d0

08007f9c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ffdd 	bl	8007f68 <low_level_input>
 8007fae:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	4798      	blx	r3
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f001 fde6 	bl	8009b98 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1ea      	bne.n	8007fa8 <ethernetif_input+0xc>
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <ethernetif_init+0x1c>
 8007fea:	4b0e      	ldr	r3, [pc, #56]	; (8008024 <ethernetif_init+0x48>)
 8007fec:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007ff0:	490d      	ldr	r1, [pc, #52]	; (8008028 <ethernetif_init+0x4c>)
 8007ff2:	480e      	ldr	r0, [pc, #56]	; (800802c <ethernetif_init+0x50>)
 8007ff4:	f00b f81c 	bl	8013030 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2273      	movs	r2, #115	; 0x73
 8007ffc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2274      	movs	r2, #116	; 0x74
 8008004:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <ethernetif_init+0x54>)
 800800c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a08      	ldr	r2, [pc, #32]	; (8008034 <ethernetif_init+0x58>)
 8008012:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff fe8f 	bl	8007d38 <low_level_init>

  return ERR_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	08013ebc 	.word	0x08013ebc
 8008028:	08013ed8 	.word	0x08013ed8
 800802c:	08013ee8 	.word	0x08013ee8
 8008030:	0801101d 	.word	0x0801101d
 8008034:	08007e65 	.word	0x08007e65

08008038 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008044:	68f9      	ldr	r1, [r7, #12]
 8008046:	4807      	ldr	r0, [pc, #28]	; (8008064 <pbuf_free_custom+0x2c>)
 8008048:	f000 ff0c 	bl	8008e64 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <pbuf_free_custom+0x30>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d102      	bne.n	800805a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <pbuf_free_custom+0x30>)
 8008056:	2200      	movs	r2, #0
 8008058:	701a      	strb	r2, [r3, #0]
  }
}
 800805a:	bf00      	nop
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	080168b4 	.word	0x080168b4
 8008068:	20004f8c 	.word	0x20004f8c

0800806c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008070:	f7fb ffb4 	bl	8003fdc <HAL_GetTick>
 8008074:	4603      	mov	r3, r0
}
 8008076:	4618      	mov	r0, r3
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b090      	sub	sp, #64	; 0x40
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	60da      	str	r2, [r3, #12]
 8008092:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a64      	ldr	r2, [pc, #400]	; (800822c <HAL_ETH_MspInit+0x1b0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	f040 80c2 	bne.w	8008224 <HAL_ETH_MspInit+0x1a8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80080a0:	2300      	movs	r3, #0
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080a4:	4b62      	ldr	r3, [pc, #392]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a8:	4a61      	ldr	r2, [pc, #388]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080ae:	6313      	str	r3, [r2, #48]	; 0x30
 80080b0:	4b5f      	ldr	r3, [pc, #380]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	2300      	movs	r3, #0
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
 80080c0:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	4a5a      	ldr	r2, [pc, #360]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080ca:	6313      	str	r3, [r2, #48]	; 0x30
 80080cc:	4b58      	ldr	r3, [pc, #352]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	2300      	movs	r3, #0
 80080da:	623b      	str	r3, [r7, #32]
 80080dc:	4b54      	ldr	r3, [pc, #336]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e0:	4a53      	ldr	r2, [pc, #332]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080e6:	6313      	str	r3, [r2, #48]	; 0x30
 80080e8:	4b51      	ldr	r3, [pc, #324]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f0:	623b      	str	r3, [r7, #32]
 80080f2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080f4:	2300      	movs	r3, #0
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	4b4d      	ldr	r3, [pc, #308]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	4a4c      	ldr	r2, [pc, #304]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 80080fe:	f043 0304 	orr.w	r3, r3, #4
 8008102:	6313      	str	r3, [r2, #48]	; 0x30
 8008104:	4b4a      	ldr	r3, [pc, #296]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	61fb      	str	r3, [r7, #28]
 800810e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008110:	2300      	movs	r3, #0
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	4b46      	ldr	r3, [pc, #280]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	4a45      	ldr	r2, [pc, #276]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 800811a:	f043 0301 	orr.w	r3, r3, #1
 800811e:	6313      	str	r3, [r2, #48]	; 0x30
 8008120:	4b43      	ldr	r3, [pc, #268]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	61bb      	str	r3, [r7, #24]
 800812a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	4a3e      	ldr	r2, [pc, #248]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813a:	6313      	str	r3, [r2, #48]	; 0x30
 800813c:	4b3c      	ldr	r3, [pc, #240]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008148:	2300      	movs	r3, #0
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	4b38      	ldr	r3, [pc, #224]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	4a37      	ldr	r2, [pc, #220]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008156:	6313      	str	r3, [r2, #48]	; 0x30
 8008158:	4b35      	ldr	r3, [pc, #212]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 800815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008160:	613b      	str	r3, [r7, #16]
 8008162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	4b31      	ldr	r3, [pc, #196]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	4a30      	ldr	r2, [pc, #192]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 800816e:	f043 0302 	orr.w	r3, r3, #2
 8008172:	6313      	str	r3, [r2, #48]	; 0x30
 8008174:	4b2e      	ldr	r3, [pc, #184]	; (8008230 <HAL_ETH_MspInit+0x1b4>)
 8008176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PB8     ------> ETH_TXD3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8008180:	233e      	movs	r3, #62	; 0x3e
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008184:	2302      	movs	r3, #2
 8008186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008188:	2300      	movs	r3, #0
 800818a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800818c:	2303      	movs	r3, #3
 800818e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008190:	230b      	movs	r3, #11
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008198:	4619      	mov	r1, r3
 800819a:	4826      	ldr	r0, [pc, #152]	; (8008234 <HAL_ETH_MspInit+0x1b8>)
 800819c:	f7fd f9f4 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80081a0:	2386      	movs	r3, #134	; 0x86
 80081a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081a4:	2302      	movs	r3, #2
 80081a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a8:	2300      	movs	r3, #0
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ac:	2303      	movs	r3, #3
 80081ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80081b0:	230b      	movs	r3, #11
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081b8:	4619      	mov	r1, r3
 80081ba:	481f      	ldr	r0, [pc, #124]	; (8008238 <HAL_ETH_MspInit+0x1bc>)
 80081bc:	f7fd f9e4 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
 80081c0:	23cc      	movs	r3, #204	; 0xcc
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c4:	2302      	movs	r3, #2
 80081c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081cc:	2303      	movs	r3, #3
 80081ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80081d0:	230b      	movs	r3, #11
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80081d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081d8:	4619      	mov	r1, r3
 80081da:	4818      	ldr	r0, [pc, #96]	; (800823c <HAL_ETH_MspInit+0x1c0>)
 80081dc:	f7fd f9d4 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80081e0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e6:	2302      	movs	r3, #2
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ee:	2303      	movs	r3, #3
 80081f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80081f2:	230b      	movs	r3, #11
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80081f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081fa:	4619      	mov	r1, r3
 80081fc:	4810      	ldr	r0, [pc, #64]	; (8008240 <HAL_ETH_MspInit+0x1c4>)
 80081fe:	f7fd f9c3 	bl	8005588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008208:	2302      	movs	r3, #2
 800820a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800820c:	2300      	movs	r3, #0
 800820e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008210:	2303      	movs	r3, #3
 8008212:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008214:	230b      	movs	r3, #11
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800821c:	4619      	mov	r1, r3
 800821e:	4809      	ldr	r0, [pc, #36]	; (8008244 <HAL_ETH_MspInit+0x1c8>)
 8008220:	f7fd f9b2 	bl	8005588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008224:	bf00      	nop
 8008226:	3740      	adds	r7, #64	; 0x40
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40028000 	.word	0x40028000
 8008230:	40023800 	.word	0x40023800
 8008234:	40020800 	.word	0x40020800
 8008238:	40020000 	.word	0x40020000
 800823c:	40021c00 	.word	0x40021c00
 8008240:	40021800 	.word	0x40021800
 8008244:	40020400 	.word	0x40020400

08008248 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800824c:	4802      	ldr	r0, [pc, #8]	; (8008258 <ETH_PHY_IO_Init+0x10>)
 800824e:	f7fc fd3f 	bl	8004cd0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}
 8008258:	200050d0 	.word	0x200050d0

0800825c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
  return 0;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	68f9      	ldr	r1, [r7, #12]
 800827e:	4807      	ldr	r0, [pc, #28]	; (800829c <ETH_PHY_IO_ReadReg+0x30>)
 8008280:	f7fc fb8e 	bl	80049a0 <HAL_ETH_ReadPHYRegister>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800828a:	f04f 33ff 	mov.w	r3, #4294967295
 800828e:	e000      	b.n	8008292 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	200050d0 	.word	0x200050d0

080082a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	68f9      	ldr	r1, [r7, #12]
 80082b2:	4807      	ldr	r0, [pc, #28]	; (80082d0 <ETH_PHY_IO_WriteReg+0x30>)
 80082b4:	f7fc fbbf 	bl	8004a36 <HAL_ETH_WritePHYRegister>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80082be:	f04f 33ff 	mov.w	r3, #4294967295
 80082c2:	e000      	b.n	80082c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200050d0 	.word	0x200050d0

080082d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80082d8:	f7fb fe80 	bl	8003fdc <HAL_GetTick>
 80082dc:	4603      	mov	r3, r0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b0a0      	sub	sp, #128	; 0x80
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	2264      	movs	r2, #100	; 0x64
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f00a ff00 	bl	80130fa <memset>
  int32_t PHYLinkState = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008302:	2300      	movs	r3, #0
 8008304:	67bb      	str	r3, [r7, #120]	; 0x78
 8008306:	2300      	movs	r3, #0
 8008308:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800830a:	483a      	ldr	r0, [pc, #232]	; (80083f4 <ethernet_link_check_state+0x110>)
 800830c:	f7fb fd79 	bl	8003e02 <DP83848_GetLinkState>
 8008310:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008318:	089b      	lsrs	r3, r3, #2
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <ethernet_link_check_state+0x5a>
 8008324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008326:	2b01      	cmp	r3, #1
 8008328:	dc09      	bgt.n	800833e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800832a:	4833      	ldr	r0, [pc, #204]	; (80083f8 <ethernet_link_check_state+0x114>)
 800832c:	f7fc f907 	bl	800453e <HAL_ETH_Stop>
    netif_set_down(netif);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f81b 	bl	800936c <netif_set_down>
    netif_set_link_down(netif);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 f87e 	bl	8009438 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800833c:	e055      	b.n	80083ea <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d14e      	bne.n	80083ea <ethernet_link_check_state+0x106>
 800834c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800834e:	2b01      	cmp	r3, #1
 8008350:	dd4b      	ble.n	80083ea <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8008352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008354:	3b02      	subs	r3, #2
 8008356:	2b03      	cmp	r3, #3
 8008358:	d82a      	bhi.n	80083b0 <ethernet_link_check_state+0xcc>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <ethernet_link_check_state+0x7c>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	08008371 	.word	0x08008371
 8008364:	08008383 	.word	0x08008383
 8008368:	08008393 	.word	0x08008393
 800836c:	080083a3 	.word	0x080083a3
      duplex = ETH_FULLDUPLEX_MODE;
 8008370:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008374:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800837a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800837c:	2301      	movs	r3, #1
 800837e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008380:	e017      	b.n	80083b2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8008382:	2300      	movs	r3, #0
 8008384:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008386:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800838a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800838c:	2301      	movs	r3, #1
 800838e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008390:	e00f      	b.n	80083b2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8008392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008396:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008398:	2300      	movs	r3, #0
 800839a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800839c:	2301      	movs	r3, #1
 800839e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80083a0:	e007      	b.n	80083b2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80083a2:	2300      	movs	r3, #0
 80083a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80083a6:	2300      	movs	r3, #0
 80083a8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80083aa:	2301      	movs	r3, #1
 80083ac:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80083ae:	e000      	b.n	80083b2 <ethernet_link_check_state+0xce>
      break;
 80083b0:	bf00      	nop
    if(linkchanged)
 80083b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d018      	beq.n	80083ea <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80083b8:	f107 030c 	add.w	r3, r7, #12
 80083bc:	4619      	mov	r1, r3
 80083be:	480e      	ldr	r0, [pc, #56]	; (80083f8 <ethernet_link_check_state+0x114>)
 80083c0:	f7fc fb82 	bl	8004ac8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80083c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80083c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ca:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80083cc:	f107 030c 	add.w	r3, r7, #12
 80083d0:	4619      	mov	r1, r3
 80083d2:	4809      	ldr	r0, [pc, #36]	; (80083f8 <ethernet_link_check_state+0x114>)
 80083d4:	f7fc fc62 	bl	8004c9c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80083d8:	4807      	ldr	r0, [pc, #28]	; (80083f8 <ethernet_link_check_state+0x114>)
 80083da:	f7fc f851 	bl	8004480 <HAL_ETH_Start>
      netif_set_up(netif);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 ff58 	bl	8009294 <netif_set_up>
      netif_set_link_up(netif);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fff3 	bl	80093d0 <netif_set_link_up>
}
 80083ea:	bf00      	nop
 80083ec:	3780      	adds	r7, #128	; 0x80
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200051b8 	.word	0x200051b8
 80083f8:	200050d0 	.word	0x200050d0

080083fc <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af02      	add	r7, sp, #8
 8008402:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008404:	4812      	ldr	r0, [pc, #72]	; (8008450 <HAL_ETH_RxAllocateCallback+0x54>)
 8008406:	f000 fcbf 	bl	8008d88 <memp_malloc_pool>
 800840a:	60f8      	str	r0, [r7, #12]
  if (p)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d014      	beq.n	800843c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f103 0220 	add.w	r2, r3, #32
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a0d      	ldr	r2, [pc, #52]	; (8008454 <HAL_ETH_RxAllocateCallback+0x58>)
 8008420:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800842a:	9201      	str	r2, [sp, #4]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2241      	movs	r2, #65	; 0x41
 8008432:	2100      	movs	r1, #0
 8008434:	2000      	movs	r0, #0
 8008436:	f001 f9f5 	bl	8009824 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800843a:	e005      	b.n	8008448 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <HAL_ETH_RxAllocateCallback+0x5c>)
 800843e:	2201      	movs	r2, #1
 8008440:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	080168b4 	.word	0x080168b4
 8008454:	08008039 	.word	0x08008039
 8008458:	20004f8c 	.word	0x20004f8c

0800845c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	; 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3b20      	subs	r3, #32
 800847a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	2200      	movs	r2, #0
 8008486:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	887a      	ldrh	r2, [r7, #2]
 800848c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d103      	bne.n	800849e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e003      	b.n	80084a6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	69fa      	ldr	r2, [r7, #28]
 80084aa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	61fb      	str	r3, [r7, #28]
 80084b2:	e009      	b.n	80084c8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	891a      	ldrh	r2, [r3, #8]
 80084b8:	887b      	ldrh	r3, [r7, #2]
 80084ba:	4413      	add	r3, r2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1f2      	bne.n	80084b4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	3724      	adds	r7, #36	; 0x24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	b21a      	sxth	r2, r3
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	0a1b      	lsrs	r3, r3, #8
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	b21b      	sxth	r3, r3
 80084f4:	4313      	orrs	r3, r2
 80084f6:	b21b      	sxth	r3, r3
 80084f8:	b29b      	uxth	r3, r3
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	061a      	lsls	r2, r3, #24
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0a1b      	lsrs	r3, r3, #8
 8008520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	0e1b      	lsrs	r3, r3, #24
 800852a:	4313      	orrs	r3, r2
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008542:	f000 f8d5 	bl	80086f0 <mem_init>
  memp_init();
 8008546:	f000 fbdb 	bl	8008d00 <memp_init>
  pbuf_init();
  netif_init();
 800854a:	f000 fcd9 	bl	8008f00 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800854e:	f007 ff5f 	bl	8010410 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008552:	f001 fdbf 	bl	800a0d4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008556:	f007 fed1 	bl	80102fc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <ptr_to_mem+0x20>)
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	88fb      	ldrh	r3, [r7, #6]
 8008574:	4413      	add	r3, r2
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20007a04 	.word	0x20007a04

08008588 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <mem_to_ptr+0x20>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	b29b      	uxth	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20007a04 	.word	0x20007a04

080085ac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80085ac:	b590      	push	{r4, r7, lr}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80085b4:	4b45      	ldr	r3, [pc, #276]	; (80086cc <plug_holes+0x120>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d206      	bcs.n	80085cc <plug_holes+0x20>
 80085be:	4b44      	ldr	r3, [pc, #272]	; (80086d0 <plug_holes+0x124>)
 80085c0:	f240 12df 	movw	r2, #479	; 0x1df
 80085c4:	4943      	ldr	r1, [pc, #268]	; (80086d4 <plug_holes+0x128>)
 80085c6:	4844      	ldr	r0, [pc, #272]	; (80086d8 <plug_holes+0x12c>)
 80085c8:	f00a fd32 	bl	8013030 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80085cc:	4b43      	ldr	r3, [pc, #268]	; (80086dc <plug_holes+0x130>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d306      	bcc.n	80085e4 <plug_holes+0x38>
 80085d6:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <plug_holes+0x124>)
 80085d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80085dc:	4940      	ldr	r1, [pc, #256]	; (80086e0 <plug_holes+0x134>)
 80085de:	483e      	ldr	r0, [pc, #248]	; (80086d8 <plug_holes+0x12c>)
 80085e0:	f00a fd26 	bl	8013030 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	791b      	ldrb	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <plug_holes+0x4e>
 80085ec:	4b38      	ldr	r3, [pc, #224]	; (80086d0 <plug_holes+0x124>)
 80085ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 80085f2:	493c      	ldr	r1, [pc, #240]	; (80086e4 <plug_holes+0x138>)
 80085f4:	4838      	ldr	r0, [pc, #224]	; (80086d8 <plug_holes+0x12c>)
 80085f6:	f00a fd1b 	bl	8013030 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008602:	d906      	bls.n	8008612 <plug_holes+0x66>
 8008604:	4b32      	ldr	r3, [pc, #200]	; (80086d0 <plug_holes+0x124>)
 8008606:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800860a:	4937      	ldr	r1, [pc, #220]	; (80086e8 <plug_holes+0x13c>)
 800860c:	4832      	ldr	r0, [pc, #200]	; (80086d8 <plug_holes+0x12c>)
 800860e:	f00a fd0f 	bl	8013030 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	881b      	ldrh	r3, [r3, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff ffa4 	bl	8008564 <ptr_to_mem>
 800861c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	429a      	cmp	r2, r3
 8008624:	d024      	beq.n	8008670 <plug_holes+0xc4>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	791b      	ldrb	r3, [r3, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d120      	bne.n	8008670 <plug_holes+0xc4>
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <plug_holes+0x130>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	429a      	cmp	r2, r3
 8008636:	d01b      	beq.n	8008670 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008638:	4b2c      	ldr	r3, [pc, #176]	; (80086ec <plug_holes+0x140>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	429a      	cmp	r2, r3
 8008640:	d102      	bne.n	8008648 <plug_holes+0x9c>
      lfree = mem;
 8008642:	4a2a      	ldr	r2, [pc, #168]	; (80086ec <plug_holes+0x140>)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	881a      	ldrh	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008658:	d00a      	beq.n	8008670 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff ff80 	bl	8008564 <ptr_to_mem>
 8008664:	4604      	mov	r4, r0
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff ff8e 	bl	8008588 <mem_to_ptr>
 800866c:	4603      	mov	r3, r0
 800866e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff ff75 	bl	8008564 <ptr_to_mem>
 800867a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d01f      	beq.n	80086c4 <plug_holes+0x118>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	791b      	ldrb	r3, [r3, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d11b      	bne.n	80086c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800868c:	4b17      	ldr	r3, [pc, #92]	; (80086ec <plug_holes+0x140>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d102      	bne.n	800869c <plug_holes+0xf0>
      lfree = pmem;
 8008696:	4a15      	ldr	r2, [pc, #84]	; (80086ec <plug_holes+0x140>)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	881a      	ldrh	r2, [r3, #0]
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80086ac:	d00a      	beq.n	80086c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7ff ff56 	bl	8008564 <ptr_to_mem>
 80086b8:	4604      	mov	r4, r0
 80086ba:	68b8      	ldr	r0, [r7, #8]
 80086bc:	f7ff ff64 	bl	8008588 <mem_to_ptr>
 80086c0:	4603      	mov	r3, r0
 80086c2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd90      	pop	{r4, r7, pc}
 80086cc:	20007a04 	.word	0x20007a04
 80086d0:	08013f10 	.word	0x08013f10
 80086d4:	08013f40 	.word	0x08013f40
 80086d8:	08013f58 	.word	0x08013f58
 80086dc:	20007a08 	.word	0x20007a08
 80086e0:	08013f80 	.word	0x08013f80
 80086e4:	08013f9c 	.word	0x08013f9c
 80086e8:	08013fb8 	.word	0x08013fb8
 80086ec:	20007a0c 	.word	0x20007a0c

080086f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80086f6:	4b18      	ldr	r3, [pc, #96]	; (8008758 <mem_init+0x68>)
 80086f8:	3303      	adds	r3, #3
 80086fa:	f023 0303 	bic.w	r3, r3, #3
 80086fe:	461a      	mov	r2, r3
 8008700:	4b16      	ldr	r3, [pc, #88]	; (800875c <mem_init+0x6c>)
 8008702:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008704:	4b15      	ldr	r3, [pc, #84]	; (800875c <mem_init+0x6c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008710:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800871e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8008722:	f7ff ff1f 	bl	8008564 <ptr_to_mem>
 8008726:	4603      	mov	r3, r0
 8008728:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <mem_init+0x70>)
 800872a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <mem_init+0x70>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2201      	movs	r2, #1
 8008732:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008734:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <mem_init+0x70>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800873c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <mem_init+0x70>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008746:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <mem_init+0x6c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a05      	ldr	r2, [pc, #20]	; (8008764 <mem_init+0x74>)
 800874e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	200051f0 	.word	0x200051f0
 800875c:	20007a04 	.word	0x20007a04
 8008760:	20007a08 	.word	0x20007a08
 8008764:	20007a0c 	.word	0x20007a0c

08008768 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ff09 	bl	8008588 <mem_to_ptr>
 8008776:	4603      	mov	r3, r0
 8008778:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fef0 	bl	8008564 <ptr_to_mem>
 8008784:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	885b      	ldrh	r3, [r3, #2]
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff feea 	bl	8008564 <ptr_to_mem>
 8008790:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800879a:	d818      	bhi.n	80087ce <mem_link_valid+0x66>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	885b      	ldrh	r3, [r3, #2]
 80087a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80087a4:	d813      	bhi.n	80087ce <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087aa:	8afa      	ldrh	r2, [r7, #22]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d004      	beq.n	80087ba <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	8afa      	ldrh	r2, [r7, #22]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d109      	bne.n	80087ce <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80087ba:	4b08      	ldr	r3, [pc, #32]	; (80087dc <mem_link_valid+0x74>)
 80087bc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d006      	beq.n	80087d2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	885b      	ldrh	r3, [r3, #2]
 80087c8:	8afa      	ldrh	r2, [r7, #22]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d001      	beq.n	80087d2 <mem_link_valid+0x6a>
    return 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e000      	b.n	80087d4 <mem_link_valid+0x6c>
  }
  return 1;
 80087d2:	2301      	movs	r3, #1
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	20007a08 	.word	0x20007a08

080087e0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d04c      	beq.n	8008888 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d007      	beq.n	8008808 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <mem_free+0xb0>)
 80087fa:	f240 2273 	movw	r2, #627	; 0x273
 80087fe:	4925      	ldr	r1, [pc, #148]	; (8008894 <mem_free+0xb4>)
 8008800:	4825      	ldr	r0, [pc, #148]	; (8008898 <mem_free+0xb8>)
 8008802:	f00a fc15 	bl	8013030 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008806:	e040      	b.n	800888a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3b08      	subs	r3, #8
 800880c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800880e:	4b23      	ldr	r3, [pc, #140]	; (800889c <mem_free+0xbc>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	429a      	cmp	r2, r3
 8008816:	d306      	bcc.n	8008826 <mem_free+0x46>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f103 020c 	add.w	r2, r3, #12
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <mem_free+0xc0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d907      	bls.n	8008836 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <mem_free+0xb0>)
 8008828:	f240 227f 	movw	r2, #639	; 0x27f
 800882c:	491d      	ldr	r1, [pc, #116]	; (80088a4 <mem_free+0xc4>)
 800882e:	481a      	ldr	r0, [pc, #104]	; (8008898 <mem_free+0xb8>)
 8008830:	f00a fbfe 	bl	8013030 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008834:	e029      	b.n	800888a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	791b      	ldrb	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800883e:	4b14      	ldr	r3, [pc, #80]	; (8008890 <mem_free+0xb0>)
 8008840:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008844:	4918      	ldr	r1, [pc, #96]	; (80088a8 <mem_free+0xc8>)
 8008846:	4814      	ldr	r0, [pc, #80]	; (8008898 <mem_free+0xb8>)
 8008848:	f00a fbf2 	bl	8013030 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800884c:	e01d      	b.n	800888a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff ff8a 	bl	8008768 <mem_link_valid>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d107      	bne.n	800886a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800885a:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <mem_free+0xb0>)
 800885c:	f240 2295 	movw	r2, #661	; 0x295
 8008860:	4912      	ldr	r1, [pc, #72]	; (80088ac <mem_free+0xcc>)
 8008862:	480d      	ldr	r0, [pc, #52]	; (8008898 <mem_free+0xb8>)
 8008864:	f00a fbe4 	bl	8013030 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008868:	e00f      	b.n	800888a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008870:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <mem_free+0xd0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	429a      	cmp	r2, r3
 8008878:	d202      	bcs.n	8008880 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800887a:	4a0d      	ldr	r2, [pc, #52]	; (80088b0 <mem_free+0xd0>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7ff fe93 	bl	80085ac <plug_holes>
 8008886:	e000      	b.n	800888a <mem_free+0xaa>
    return;
 8008888:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	08013f10 	.word	0x08013f10
 8008894:	08013fe4 	.word	0x08013fe4
 8008898:	08013f58 	.word	0x08013f58
 800889c:	20007a04 	.word	0x20007a04
 80088a0:	20007a08 	.word	0x20007a08
 80088a4:	08014008 	.word	0x08014008
 80088a8:	08014024 	.word	0x08014024
 80088ac:	0801404c 	.word	0x0801404c
 80088b0:	20007a0c 	.word	0x20007a0c

080088b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80088c0:	887b      	ldrh	r3, [r7, #2]
 80088c2:	3303      	adds	r3, #3
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80088cc:	8bfb      	ldrh	r3, [r7, #30]
 80088ce:	2b0b      	cmp	r3, #11
 80088d0:	d801      	bhi.n	80088d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80088d2:	230c      	movs	r3, #12
 80088d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80088d6:	8bfb      	ldrh	r3, [r7, #30]
 80088d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80088dc:	d803      	bhi.n	80088e6 <mem_trim+0x32>
 80088de:	8bfa      	ldrh	r2, [r7, #30]
 80088e0:	887b      	ldrh	r3, [r7, #2]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d201      	bcs.n	80088ea <mem_trim+0x36>
    return NULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e0cc      	b.n	8008a84 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80088ea:	4b68      	ldr	r3, [pc, #416]	; (8008a8c <mem_trim+0x1d8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d304      	bcc.n	80088fe <mem_trim+0x4a>
 80088f4:	4b66      	ldr	r3, [pc, #408]	; (8008a90 <mem_trim+0x1dc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d306      	bcc.n	800890c <mem_trim+0x58>
 80088fe:	4b65      	ldr	r3, [pc, #404]	; (8008a94 <mem_trim+0x1e0>)
 8008900:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008904:	4964      	ldr	r1, [pc, #400]	; (8008a98 <mem_trim+0x1e4>)
 8008906:	4865      	ldr	r0, [pc, #404]	; (8008a9c <mem_trim+0x1e8>)
 8008908:	f00a fb92 	bl	8013030 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800890c:	4b5f      	ldr	r3, [pc, #380]	; (8008a8c <mem_trim+0x1d8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	429a      	cmp	r2, r3
 8008914:	d304      	bcc.n	8008920 <mem_trim+0x6c>
 8008916:	4b5e      	ldr	r3, [pc, #376]	; (8008a90 <mem_trim+0x1dc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d301      	bcc.n	8008924 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	e0af      	b.n	8008a84 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3b08      	subs	r3, #8
 8008928:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800892a:	69b8      	ldr	r0, [r7, #24]
 800892c:	f7ff fe2c 	bl	8008588 <mem_to_ptr>
 8008930:	4603      	mov	r3, r0
 8008932:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	881a      	ldrh	r2, [r3, #0]
 8008938:	8afb      	ldrh	r3, [r7, #22]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b08      	subs	r3, #8
 8008940:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008942:	8bfa      	ldrh	r2, [r7, #30]
 8008944:	8abb      	ldrh	r3, [r7, #20]
 8008946:	429a      	cmp	r2, r3
 8008948:	d906      	bls.n	8008958 <mem_trim+0xa4>
 800894a:	4b52      	ldr	r3, [pc, #328]	; (8008a94 <mem_trim+0x1e0>)
 800894c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008950:	4953      	ldr	r1, [pc, #332]	; (8008aa0 <mem_trim+0x1ec>)
 8008952:	4852      	ldr	r0, [pc, #328]	; (8008a9c <mem_trim+0x1e8>)
 8008954:	f00a fb6c 	bl	8013030 <iprintf>
  if (newsize > size) {
 8008958:	8bfa      	ldrh	r2, [r7, #30]
 800895a:	8abb      	ldrh	r3, [r7, #20]
 800895c:	429a      	cmp	r2, r3
 800895e:	d901      	bls.n	8008964 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	e08f      	b.n	8008a84 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008964:	8bfa      	ldrh	r2, [r7, #30]
 8008966:	8abb      	ldrh	r3, [r7, #20]
 8008968:	429a      	cmp	r2, r3
 800896a:	d101      	bne.n	8008970 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	e089      	b.n	8008a84 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fdf5 	bl	8008564 <ptr_to_mem>
 800897a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	791b      	ldrb	r3, [r3, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d13f      	bne.n	8008a04 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800898c:	d106      	bne.n	800899c <mem_trim+0xe8>
 800898e:	4b41      	ldr	r3, [pc, #260]	; (8008a94 <mem_trim+0x1e0>)
 8008990:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008994:	4943      	ldr	r1, [pc, #268]	; (8008aa4 <mem_trim+0x1f0>)
 8008996:	4841      	ldr	r0, [pc, #260]	; (8008a9c <mem_trim+0x1e8>)
 8008998:	f00a fb4a 	bl	8013030 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80089a2:	8afa      	ldrh	r2, [r7, #22]
 80089a4:	8bfb      	ldrh	r3, [r7, #30]
 80089a6:	4413      	add	r3, r2
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3308      	adds	r3, #8
 80089ac:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80089ae:	4b3e      	ldr	r3, [pc, #248]	; (8008aa8 <mem_trim+0x1f4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d106      	bne.n	80089c6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80089b8:	89fb      	ldrh	r3, [r7, #14]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fdd2 	bl	8008564 <ptr_to_mem>
 80089c0:	4603      	mov	r3, r0
 80089c2:	4a39      	ldr	r2, [pc, #228]	; (8008aa8 <mem_trim+0x1f4>)
 80089c4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80089c6:	89fb      	ldrh	r3, [r7, #14]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff fdcb 	bl	8008564 <ptr_to_mem>
 80089ce:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	2200      	movs	r2, #0
 80089d4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	89ba      	ldrh	r2, [r7, #12]
 80089da:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	8afa      	ldrh	r2, [r7, #22]
 80089e0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	89fa      	ldrh	r2, [r7, #14]
 80089e6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80089f0:	d047      	beq.n	8008a82 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff fdb4 	bl	8008564 <ptr_to_mem>
 80089fc:	4602      	mov	r2, r0
 80089fe:	89fb      	ldrh	r3, [r7, #14]
 8008a00:	8053      	strh	r3, [r2, #2]
 8008a02:	e03e      	b.n	8008a82 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008a04:	8bfb      	ldrh	r3, [r7, #30]
 8008a06:	f103 0214 	add.w	r2, r3, #20
 8008a0a:	8abb      	ldrh	r3, [r7, #20]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d838      	bhi.n	8008a82 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a10:	8afa      	ldrh	r2, [r7, #22]
 8008a12:	8bfb      	ldrh	r3, [r7, #30]
 8008a14:	4413      	add	r3, r2
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3308      	adds	r3, #8
 8008a1a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008a24:	d106      	bne.n	8008a34 <mem_trim+0x180>
 8008a26:	4b1b      	ldr	r3, [pc, #108]	; (8008a94 <mem_trim+0x1e0>)
 8008a28:	f240 3216 	movw	r2, #790	; 0x316
 8008a2c:	491d      	ldr	r1, [pc, #116]	; (8008aa4 <mem_trim+0x1f0>)
 8008a2e:	481b      	ldr	r0, [pc, #108]	; (8008a9c <mem_trim+0x1e8>)
 8008a30:	f00a fafe 	bl	8013030 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008a34:	89fb      	ldrh	r3, [r7, #14]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fd94 	bl	8008564 <ptr_to_mem>
 8008a3c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <mem_trim+0x1f4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d202      	bcs.n	8008a4e <mem_trim+0x19a>
      lfree = mem2;
 8008a48:	4a17      	ldr	r2, [pc, #92]	; (8008aa8 <mem_trim+0x1f4>)
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2200      	movs	r2, #0
 8008a52:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	881a      	ldrh	r2, [r3, #0]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	8afa      	ldrh	r2, [r7, #22]
 8008a60:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	89fa      	ldrh	r2, [r7, #14]
 8008a66:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	881b      	ldrh	r3, [r3, #0]
 8008a6c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008a70:	d007      	beq.n	8008a82 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff fd74 	bl	8008564 <ptr_to_mem>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	89fb      	ldrh	r3, [r7, #14]
 8008a80:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008a82:	687b      	ldr	r3, [r7, #4]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3720      	adds	r7, #32
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20007a04 	.word	0x20007a04
 8008a90:	20007a08 	.word	0x20007a08
 8008a94:	08013f10 	.word	0x08013f10
 8008a98:	08014080 	.word	0x08014080
 8008a9c:	08013f58 	.word	0x08013f58
 8008aa0:	08014098 	.word	0x08014098
 8008aa4:	080140b8 	.word	0x080140b8
 8008aa8:	20007a0c 	.word	0x20007a0c

08008aac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <mem_malloc+0x14>
    return NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e0d9      	b.n	8008c74 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	3303      	adds	r3, #3
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008acc:	8bbb      	ldrh	r3, [r7, #28]
 8008ace:	2b0b      	cmp	r3, #11
 8008ad0:	d801      	bhi.n	8008ad6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008ad2:	230c      	movs	r3, #12
 8008ad4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008ad6:	8bbb      	ldrh	r3, [r7, #28]
 8008ad8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008adc:	d803      	bhi.n	8008ae6 <mem_malloc+0x3a>
 8008ade:	8bba      	ldrh	r2, [r7, #28]
 8008ae0:	88fb      	ldrh	r3, [r7, #6]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d201      	bcs.n	8008aea <mem_malloc+0x3e>
    return NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e0c4      	b.n	8008c74 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008aea:	4b64      	ldr	r3, [pc, #400]	; (8008c7c <mem_malloc+0x1d0>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fd4a 	bl	8008588 <mem_to_ptr>
 8008af4:	4603      	mov	r3, r0
 8008af6:	83fb      	strh	r3, [r7, #30]
 8008af8:	e0b4      	b.n	8008c64 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008afa:	8bfb      	ldrh	r3, [r7, #30]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fd31 	bl	8008564 <ptr_to_mem>
 8008b02:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f040 80a4 	bne.w	8008c56 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	8bfb      	ldrh	r3, [r7, #30]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	f1a3 0208 	sub.w	r2, r3, #8
 8008b1c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	f0c0 8099 	bcc.w	8008c56 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	8bfb      	ldrh	r3, [r7, #30]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	f1a3 0208 	sub.w	r2, r3, #8
 8008b32:	8bbb      	ldrh	r3, [r7, #28]
 8008b34:	3314      	adds	r3, #20
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d333      	bcc.n	8008ba2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008b3a:	8bfa      	ldrh	r2, [r7, #30]
 8008b3c:	8bbb      	ldrh	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	3308      	adds	r3, #8
 8008b44:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008b46:	8a7b      	ldrh	r3, [r7, #18]
 8008b48:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008b4c:	d106      	bne.n	8008b5c <mem_malloc+0xb0>
 8008b4e:	4b4c      	ldr	r3, [pc, #304]	; (8008c80 <mem_malloc+0x1d4>)
 8008b50:	f240 3287 	movw	r2, #903	; 0x387
 8008b54:	494b      	ldr	r1, [pc, #300]	; (8008c84 <mem_malloc+0x1d8>)
 8008b56:	484c      	ldr	r0, [pc, #304]	; (8008c88 <mem_malloc+0x1dc>)
 8008b58:	f00a fa6a 	bl	8013030 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008b5c:	8a7b      	ldrh	r3, [r7, #18]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff fd00 	bl	8008564 <ptr_to_mem>
 8008b64:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	881a      	ldrh	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8bfa      	ldrh	r2, [r7, #30]
 8008b78:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	8a7a      	ldrh	r2, [r7, #18]
 8008b7e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	2201      	movs	r2, #1
 8008b84:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008b8e:	d00b      	beq.n	8008ba8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fce5 	bl	8008564 <ptr_to_mem>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	8a7b      	ldrh	r3, [r7, #18]
 8008b9e:	8053      	strh	r3, [r2, #2]
 8008ba0:	e002      	b.n	8008ba8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008ba8:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <mem_malloc+0x1d0>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d127      	bne.n	8008c02 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008bb2:	4b32      	ldr	r3, [pc, #200]	; (8008c7c <mem_malloc+0x1d0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008bb8:	e005      	b.n	8008bc6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fcd0 	bl	8008564 <ptr_to_mem>
 8008bc4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <mem_malloc+0x12c>
 8008bce:	4b2f      	ldr	r3, [pc, #188]	; (8008c8c <mem_malloc+0x1e0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69ba      	ldr	r2, [r7, #24]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d1f0      	bne.n	8008bba <mem_malloc+0x10e>
          }
          lfree = cur;
 8008bd8:	4a28      	ldr	r2, [pc, #160]	; (8008c7c <mem_malloc+0x1d0>)
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008bde:	4b27      	ldr	r3, [pc, #156]	; (8008c7c <mem_malloc+0x1d0>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	4b2a      	ldr	r3, [pc, #168]	; (8008c8c <mem_malloc+0x1e0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d00b      	beq.n	8008c02 <mem_malloc+0x156>
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <mem_malloc+0x1d0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	791b      	ldrb	r3, [r3, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d006      	beq.n	8008c02 <mem_malloc+0x156>
 8008bf4:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <mem_malloc+0x1d4>)
 8008bf6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008bfa:	4925      	ldr	r1, [pc, #148]	; (8008c90 <mem_malloc+0x1e4>)
 8008bfc:	4822      	ldr	r0, [pc, #136]	; (8008c88 <mem_malloc+0x1dc>)
 8008bfe:	f00a fa17 	bl	8013030 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008c02:	8bba      	ldrh	r2, [r7, #28]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	4413      	add	r3, r2
 8008c08:	3308      	adds	r3, #8
 8008c0a:	4a20      	ldr	r2, [pc, #128]	; (8008c8c <mem_malloc+0x1e0>)
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d906      	bls.n	8008c20 <mem_malloc+0x174>
 8008c12:	4b1b      	ldr	r3, [pc, #108]	; (8008c80 <mem_malloc+0x1d4>)
 8008c14:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008c18:	491e      	ldr	r1, [pc, #120]	; (8008c94 <mem_malloc+0x1e8>)
 8008c1a:	481b      	ldr	r0, [pc, #108]	; (8008c88 <mem_malloc+0x1dc>)
 8008c1c:	f00a fa08 	bl	8013030 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d006      	beq.n	8008c38 <mem_malloc+0x18c>
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <mem_malloc+0x1d4>)
 8008c2c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008c30:	4919      	ldr	r1, [pc, #100]	; (8008c98 <mem_malloc+0x1ec>)
 8008c32:	4815      	ldr	r0, [pc, #84]	; (8008c88 <mem_malloc+0x1dc>)
 8008c34:	f00a f9fc 	bl	8013030 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <mem_malloc+0x1a4>
 8008c42:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <mem_malloc+0x1d4>)
 8008c44:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008c48:	4914      	ldr	r1, [pc, #80]	; (8008c9c <mem_malloc+0x1f0>)
 8008c4a:	480f      	ldr	r0, [pc, #60]	; (8008c88 <mem_malloc+0x1dc>)
 8008c4c:	f00a f9f0 	bl	8013030 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	3308      	adds	r3, #8
 8008c54:	e00e      	b.n	8008c74 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008c56:	8bfb      	ldrh	r3, [r7, #30]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fc83 	bl	8008564 <ptr_to_mem>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008c64:	8bfa      	ldrh	r2, [r7, #30]
 8008c66:	8bbb      	ldrh	r3, [r7, #28]
 8008c68:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	f4ff af44 	bcc.w	8008afa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20007a0c 	.word	0x20007a0c
 8008c80:	08013f10 	.word	0x08013f10
 8008c84:	080140b8 	.word	0x080140b8
 8008c88:	08013f58 	.word	0x08013f58
 8008c8c:	20007a08 	.word	0x20007a08
 8008c90:	080140cc 	.word	0x080140cc
 8008c94:	080140e8 	.word	0x080140e8
 8008c98:	08014118 	.word	0x08014118
 8008c9c:	08014148 	.word	0x08014148

08008ca0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	3303      	adds	r3, #3
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e011      	b.n	8008ce6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60fb      	str	r3, [r7, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	461a      	mov	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	dbe7      	blt.n	8008cc2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008cf2:	bf00      	nop
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008d06:	2300      	movs	r3, #0
 8008d08:	80fb      	strh	r3, [r7, #6]
 8008d0a:	e009      	b.n	8008d20 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <memp_init+0x30>)
 8008d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff ffc3 	bl	8008ca0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	80fb      	strh	r3, [r7, #6]
 8008d20:	88fb      	ldrh	r3, [r7, #6]
 8008d22:	2b08      	cmp	r3, #8
 8008d24:	d9f2      	bls.n	8008d0c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	0801692c 	.word	0x0801692c

08008d34 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d012      	beq.n	8008d70 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <do_memp_malloc_pool+0x38>
 8008d5e:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <do_memp_malloc_pool+0x48>)
 8008d60:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008d64:	4906      	ldr	r1, [pc, #24]	; (8008d80 <do_memp_malloc_pool+0x4c>)
 8008d66:	4807      	ldr	r0, [pc, #28]	; (8008d84 <do_memp_malloc_pool+0x50>)
 8008d68:	f00a f962 	bl	8013030 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	e000      	b.n	8008d72 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	0801416c 	.word	0x0801416c
 8008d80:	0801419c 	.word	0x0801419c
 8008d84:	080141c0 	.word	0x080141c0

08008d88 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <memp_malloc_pool+0x1c>
 8008d96:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <memp_malloc_pool+0x38>)
 8008d98:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008d9c:	4909      	ldr	r1, [pc, #36]	; (8008dc4 <memp_malloc_pool+0x3c>)
 8008d9e:	480a      	ldr	r0, [pc, #40]	; (8008dc8 <memp_malloc_pool+0x40>)
 8008da0:	f00a f946 	bl	8013030 <iprintf>
  if (desc == NULL) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <memp_malloc_pool+0x26>
    return NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e003      	b.n	8008db6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff ffc0 	bl	8008d34 <do_memp_malloc_pool>
 8008db4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	0801416c 	.word	0x0801416c
 8008dc4:	080141e8 	.word	0x080141e8
 8008dc8:	080141c0 	.word	0x080141c0

08008dcc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d908      	bls.n	8008dee <memp_malloc+0x22>
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <memp_malloc+0x3c>)
 8008dde:	f240 1257 	movw	r2, #343	; 0x157
 8008de2:	490a      	ldr	r1, [pc, #40]	; (8008e0c <memp_malloc+0x40>)
 8008de4:	480a      	ldr	r0, [pc, #40]	; (8008e10 <memp_malloc+0x44>)
 8008de6:	f00a f923 	bl	8013030 <iprintf>
 8008dea:	2300      	movs	r3, #0
 8008dec:	e008      	b.n	8008e00 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	4a08      	ldr	r2, [pc, #32]	; (8008e14 <memp_malloc+0x48>)
 8008df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff ff9c 	bl	8008d34 <do_memp_malloc_pool>
 8008dfc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	0801416c 	.word	0x0801416c
 8008e0c:	080141fc 	.word	0x080141fc
 8008e10:	080141c0 	.word	0x080141c0
 8008e14:	0801692c 	.word	0x0801692c

08008e18 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	f003 0303 	and.w	r3, r3, #3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d006      	beq.n	8008e3a <do_memp_free_pool+0x22>
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <do_memp_free_pool+0x40>)
 8008e2e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008e32:	490a      	ldr	r1, [pc, #40]	; (8008e5c <do_memp_free_pool+0x44>)
 8008e34:	480a      	ldr	r0, [pc, #40]	; (8008e60 <do_memp_free_pool+0x48>)
 8008e36:	f00a f8fb 	bl	8013030 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0801416c 	.word	0x0801416c
 8008e5c:	0801421c 	.word	0x0801421c
 8008e60:	080141c0 	.word	0x080141c0

08008e64 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d106      	bne.n	8008e82 <memp_free_pool+0x1e>
 8008e74:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <memp_free_pool+0x3c>)
 8008e76:	f240 1295 	movw	r2, #405	; 0x195
 8008e7a:	490a      	ldr	r1, [pc, #40]	; (8008ea4 <memp_free_pool+0x40>)
 8008e7c:	480a      	ldr	r0, [pc, #40]	; (8008ea8 <memp_free_pool+0x44>)
 8008e7e:	f00a f8d7 	bl	8013030 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <memp_free_pool+0x34>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff ffc1 	bl	8008e18 <do_memp_free_pool>
 8008e96:	e000      	b.n	8008e9a <memp_free_pool+0x36>
    return;
 8008e98:	bf00      	nop
}
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	0801416c 	.word	0x0801416c
 8008ea4:	080141e8 	.word	0x080141e8
 8008ea8:	080141c0 	.word	0x080141c0

08008eac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	6039      	str	r1, [r7, #0]
 8008eb6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d907      	bls.n	8008ece <memp_free+0x22>
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <memp_free+0x44>)
 8008ec0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008ec4:	490b      	ldr	r1, [pc, #44]	; (8008ef4 <memp_free+0x48>)
 8008ec6:	480c      	ldr	r0, [pc, #48]	; (8008ef8 <memp_free+0x4c>)
 8008ec8:	f00a f8b2 	bl	8013030 <iprintf>
 8008ecc:	e00c      	b.n	8008ee8 <memp_free+0x3c>

  if (mem == NULL) {
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d008      	beq.n	8008ee6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	4a09      	ldr	r2, [pc, #36]	; (8008efc <memp_free+0x50>)
 8008ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff ff9a 	bl	8008e18 <do_memp_free_pool>
 8008ee4:	e000      	b.n	8008ee8 <memp_free+0x3c>
    return;
 8008ee6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	0801416c 	.word	0x0801416c
 8008ef4:	0801423c 	.word	0x0801423c
 8008ef8:	080141c0 	.word	0x080141c0
 8008efc:	0801692c 	.word	0x0801692c

08008f00 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008f04:	bf00      	nop
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
	...

08008f10 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d108      	bne.n	8008f36 <netif_add+0x26>
 8008f24:	4b57      	ldr	r3, [pc, #348]	; (8009084 <netif_add+0x174>)
 8008f26:	f240 1227 	movw	r2, #295	; 0x127
 8008f2a:	4957      	ldr	r1, [pc, #348]	; (8009088 <netif_add+0x178>)
 8008f2c:	4857      	ldr	r0, [pc, #348]	; (800908c <netif_add+0x17c>)
 8008f2e:	f00a f87f 	bl	8013030 <iprintf>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e0a2      	b.n	800907c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d108      	bne.n	8008f4e <netif_add+0x3e>
 8008f3c:	4b51      	ldr	r3, [pc, #324]	; (8009084 <netif_add+0x174>)
 8008f3e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008f42:	4953      	ldr	r1, [pc, #332]	; (8009090 <netif_add+0x180>)
 8008f44:	4851      	ldr	r0, [pc, #324]	; (800908c <netif_add+0x17c>)
 8008f46:	f00a f873 	bl	8013030 <iprintf>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e096      	b.n	800907c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008f54:	4b4f      	ldr	r3, [pc, #316]	; (8009094 <netif_add+0x184>)
 8008f56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008f5e:	4b4d      	ldr	r3, [pc, #308]	; (8009094 <netif_add+0x184>)
 8008f60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008f68:	4b4a      	ldr	r3, [pc, #296]	; (8009094 <netif_add+0x184>)
 8008f6a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	4a45      	ldr	r2, [pc, #276]	; (8009098 <netif_add+0x188>)
 8008f82:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008f9e:	4b3f      	ldr	r3, [pc, #252]	; (800909c <netif_add+0x18c>)
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f913 	bl	80091e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	4798      	blx	r3
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <netif_add+0xba>
    return NULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e058      	b.n	800907c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fd0:	2bff      	cmp	r3, #255	; 0xff
 8008fd2:	d103      	bne.n	8008fdc <netif_add+0xcc>
        netif->num = 0;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008fe0:	4b2f      	ldr	r3, [pc, #188]	; (80090a0 <netif_add+0x190>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	e02b      	b.n	8009040 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d106      	bne.n	8008ffe <netif_add+0xee>
 8008ff0:	4b24      	ldr	r3, [pc, #144]	; (8009084 <netif_add+0x174>)
 8008ff2:	f240 128b 	movw	r2, #395	; 0x18b
 8008ff6:	492b      	ldr	r1, [pc, #172]	; (80090a4 <netif_add+0x194>)
 8008ff8:	4824      	ldr	r0, [pc, #144]	; (800908c <netif_add+0x17c>)
 8008ffa:	f00a f819 	bl	8013030 <iprintf>
        num_netifs++;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	3301      	adds	r3, #1
 8009002:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2bff      	cmp	r3, #255	; 0xff
 8009008:	dd06      	ble.n	8009018 <netif_add+0x108>
 800900a:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <netif_add+0x174>)
 800900c:	f240 128d 	movw	r2, #397	; 0x18d
 8009010:	4925      	ldr	r1, [pc, #148]	; (80090a8 <netif_add+0x198>)
 8009012:	481e      	ldr	r0, [pc, #120]	; (800908c <netif_add+0x17c>)
 8009014:	f00a f80c 	bl	8013030 <iprintf>
        if (netif2->num == netif->num) {
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009024:	429a      	cmp	r2, r3
 8009026:	d108      	bne.n	800903a <netif_add+0x12a>
          netif->num++;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800902e:	3301      	adds	r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009038:	e005      	b.n	8009046 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1d0      	bne.n	8008fe8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1be      	bne.n	8008fca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009052:	2bfe      	cmp	r3, #254	; 0xfe
 8009054:	d103      	bne.n	800905e <netif_add+0x14e>
    netif_num = 0;
 8009056:	4b11      	ldr	r3, [pc, #68]	; (800909c <netif_add+0x18c>)
 8009058:	2200      	movs	r2, #0
 800905a:	701a      	strb	r2, [r3, #0]
 800905c:	e006      	b.n	800906c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009064:	3301      	adds	r3, #1
 8009066:	b2da      	uxtb	r2, r3
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <netif_add+0x18c>)
 800906a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800906c:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <netif_add+0x190>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009074:	4a0a      	ldr	r2, [pc, #40]	; (80090a0 <netif_add+0x190>)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800907a:	68fb      	ldr	r3, [r7, #12]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	08014258 	.word	0x08014258
 8009088:	080142ec 	.word	0x080142ec
 800908c:	080142a8 	.word	0x080142a8
 8009090:	08014308 	.word	0x08014308
 8009094:	08016990 	.word	0x08016990
 8009098:	080094bb 	.word	0x080094bb
 800909c:	2000a904 	.word	0x2000a904
 80090a0:	2000a8fc 	.word	0x2000a8fc
 80090a4:	0801432c 	.word	0x0801432c
 80090a8:	08014340 	.word	0x08014340

080090ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 fdf3 	bl	800bca4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f007 fb2f 	bl	8010724 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <netif_do_set_ipaddr+0x20>
 80090e2:	4b1d      	ldr	r3, [pc, #116]	; (8009158 <netif_do_set_ipaddr+0x88>)
 80090e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80090e8:	491c      	ldr	r1, [pc, #112]	; (800915c <netif_do_set_ipaddr+0x8c>)
 80090ea:	481d      	ldr	r0, [pc, #116]	; (8009160 <netif_do_set_ipaddr+0x90>)
 80090ec:	f009 ffa0 	bl	8013030 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <netif_do_set_ipaddr+0x34>
 80090f6:	4b18      	ldr	r3, [pc, #96]	; (8009158 <netif_do_set_ipaddr+0x88>)
 80090f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80090fc:	4917      	ldr	r1, [pc, #92]	; (800915c <netif_do_set_ipaddr+0x8c>)
 80090fe:	4818      	ldr	r0, [pc, #96]	; (8009160 <netif_do_set_ipaddr+0x90>)
 8009100:	f009 ff96 	bl	8013030 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	3304      	adds	r3, #4
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d01c      	beq.n	800914c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3304      	adds	r3, #4
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009122:	f107 0314 	add.w	r3, r7, #20
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff ffbf 	bl	80090ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <netif_do_set_ipaddr+0x6a>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	e000      	b.n	800913c <netif_do_set_ipaddr+0x6c>
 800913a:	2300      	movs	r3, #0
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009140:	2101      	movs	r1, #1
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f8d2 	bl	80092ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	08014258 	.word	0x08014258
 800915c:	08014370 	.word	0x08014370
 8009160:	080142a8 	.word	0x080142a8

08009164 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3308      	adds	r3, #8
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d00a      	beq.n	8009194 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <netif_do_set_netmask+0x26>
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	e000      	b.n	800918c <netif_do_set_netmask+0x28>
 800918a:	2300      	movs	r3, #0
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009190:	2301      	movs	r3, #1
 8009192:	e000      	b.n	8009196 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	330c      	adds	r3, #12
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d00a      	beq.n	80091d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <netif_do_set_gw+0x26>
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	e000      	b.n	80091ca <netif_do_set_gw+0x28>
 80091c8:	2300      	movs	r3, #0
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80091fc:	4b1c      	ldr	r3, [pc, #112]	; (8009270 <netif_set_addr+0x90>)
 80091fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009206:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <netif_set_addr+0x90>)
 8009208:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009210:	4b17      	ldr	r3, [pc, #92]	; (8009270 <netif_set_addr+0x90>)
 8009212:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <netif_set_addr+0x42>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <netif_set_addr+0x46>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <netif_set_addr+0x48>
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
  if (remove) {
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d006      	beq.n	800923e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009230:	f107 0310 	add.w	r3, r7, #16
 8009234:	461a      	mov	r2, r3
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f7ff ff49 	bl	80090d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff ff8e 	bl	8009164 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7ff ffa8 	bl	80091a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009258:	f107 0310 	add.w	r3, r7, #16
 800925c:	461a      	mov	r2, r3
 800925e:	68b9      	ldr	r1, [r7, #8]
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7ff ff35 	bl	80090d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009266:	bf00      	nop
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	08016990 	.word	0x08016990

08009274 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800927c:	4a04      	ldr	r2, [pc, #16]	; (8009290 <netif_set_default+0x1c>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	2000a900 	.word	0x2000a900

08009294 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d107      	bne.n	80092b2 <netif_set_up+0x1e>
 80092a2:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <netif_set_up+0x4c>)
 80092a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80092a8:	490e      	ldr	r1, [pc, #56]	; (80092e4 <netif_set_up+0x50>)
 80092aa:	480f      	ldr	r0, [pc, #60]	; (80092e8 <netif_set_up+0x54>)
 80092ac:	f009 fec0 	bl	8013030 <iprintf>
 80092b0:	e013      	b.n	80092da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10c      	bne.n	80092da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092c6:	f043 0301 	orr.w	r3, r3, #1
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80092d2:	2103      	movs	r1, #3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f809 	bl	80092ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	08014258 	.word	0x08014258
 80092e4:	080143e0 	.word	0x080143e0
 80092e8:	080142a8 	.word	0x080142a8

080092ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <netif_issue_reports+0x20>
 80092fe:	4b18      	ldr	r3, [pc, #96]	; (8009360 <netif_issue_reports+0x74>)
 8009300:	f240 326d 	movw	r2, #877	; 0x36d
 8009304:	4917      	ldr	r1, [pc, #92]	; (8009364 <netif_issue_reports+0x78>)
 8009306:	4818      	ldr	r0, [pc, #96]	; (8009368 <netif_issue_reports+0x7c>)
 8009308:	f009 fe92 	bl	8013030 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	d01e      	beq.n	8009358 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009320:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009324:	2b00      	cmp	r3, #0
 8009326:	d017      	beq.n	8009358 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d013      	beq.n	800935a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3304      	adds	r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00e      	beq.n	800935a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009342:	f003 0308 	and.w	r3, r3, #8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d007      	beq.n	800935a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3304      	adds	r3, #4
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f008 f951 	bl	80115f8 <etharp_request>
 8009356:	e000      	b.n	800935a <netif_issue_reports+0x6e>
    return;
 8009358:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	08014258 	.word	0x08014258
 8009364:	080143fc 	.word	0x080143fc
 8009368:	080142a8 	.word	0x080142a8

0800936c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d107      	bne.n	800938a <netif_set_down+0x1e>
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <netif_set_down+0x58>)
 800937c:	f240 329b 	movw	r2, #923	; 0x39b
 8009380:	4911      	ldr	r1, [pc, #68]	; (80093c8 <netif_set_down+0x5c>)
 8009382:	4812      	ldr	r0, [pc, #72]	; (80093cc <netif_set_down+0x60>)
 8009384:	f009 fe54 	bl	8013030 <iprintf>
 8009388:	e019      	b.n	80093be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d012      	beq.n	80093be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800939e:	f023 0301 	bic.w	r3, r3, #1
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f007 fcdb 	bl	8010d74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	08014258 	.word	0x08014258
 80093c8:	08014420 	.word	0x08014420
 80093cc:	080142a8 	.word	0x080142a8

080093d0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d107      	bne.n	80093ee <netif_set_link_up+0x1e>
 80093de:	4b13      	ldr	r3, [pc, #76]	; (800942c <netif_set_link_up+0x5c>)
 80093e0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80093e4:	4912      	ldr	r1, [pc, #72]	; (8009430 <netif_set_link_up+0x60>)
 80093e6:	4813      	ldr	r0, [pc, #76]	; (8009434 <netif_set_link_up+0x64>)
 80093e8:	f009 fe22 	bl	8013030 <iprintf>
 80093ec:	e01b      	b.n	8009426 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d114      	bne.n	8009426 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009402:	f043 0304 	orr.w	r3, r3, #4
 8009406:	b2da      	uxtb	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800940e:	2103      	movs	r1, #3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff ff6b 	bl	80092ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <netif_set_link_up+0x56>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	08014258 	.word	0x08014258
 8009430:	08014440 	.word	0x08014440
 8009434:	080142a8 	.word	0x080142a8

08009438 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d107      	bne.n	8009456 <netif_set_link_down+0x1e>
 8009446:	4b11      	ldr	r3, [pc, #68]	; (800948c <netif_set_link_down+0x54>)
 8009448:	f240 4206 	movw	r2, #1030	; 0x406
 800944c:	4910      	ldr	r1, [pc, #64]	; (8009490 <netif_set_link_down+0x58>)
 800944e:	4811      	ldr	r0, [pc, #68]	; (8009494 <netif_set_link_down+0x5c>)
 8009450:	f009 fdee 	bl	8013030 <iprintf>
 8009454:	e017      	b.n	8009486 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d010      	beq.n	8009486 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800946a:	f023 0304 	bic.w	r3, r3, #4
 800946e:	b2da      	uxtb	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <netif_set_link_down+0x4e>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	08014258 	.word	0x08014258
 8009490:	08014464 	.word	0x08014464
 8009494:	080142a8 	.word	0x080142a8

08009498 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	61da      	str	r2, [r3, #28]
  }
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	60b9      	str	r1, [r7, #8]
 80094c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80094c6:	f06f 030b 	mvn.w	r3, #11
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
	...

080094d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d013      	beq.n	8009510 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80094e8:	4b0d      	ldr	r3, [pc, #52]	; (8009520 <netif_get_by_index+0x48>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	e00c      	b.n	800950a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094f6:	3301      	adds	r3, #1
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	79fa      	ldrb	r2, [r7, #7]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d101      	bne.n	8009504 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	e006      	b.n	8009512 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1ef      	bne.n	80094f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	2000a8fc 	.word	0x2000a8fc

08009524 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <pbuf_free_ooseq+0x38>)
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009530:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <pbuf_free_ooseq+0x3c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	e00a      	b.n	800954e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f002 fbed 	bl	800bd20 <tcp_free_ooseq>
      return;
 8009546:	e005      	b.n	8009554 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	607b      	str	r3, [r7, #4]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1f1      	bne.n	8009538 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	2000a905 	.word	0x2000a905
 8009560:	2000a914 	.word	0x2000a914

08009564 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009568:	4b03      	ldr	r3, [pc, #12]	; (8009578 <pbuf_pool_is_empty+0x14>)
 800956a:	2201      	movs	r2, #1
 800956c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800956e:	bf00      	nop
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	2000a905 	.word	0x2000a905

0800957c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4611      	mov	r1, r2
 8009588:	461a      	mov	r2, r3
 800958a:	460b      	mov	r3, r1
 800958c:	80fb      	strh	r3, [r7, #6]
 800958e:	4613      	mov	r3, r2
 8009590:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	88fa      	ldrh	r2, [r7, #6]
 80095a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	88ba      	ldrh	r2, [r7, #4]
 80095a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80095aa:	8b3b      	ldrh	r3, [r7, #24]
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	7f3a      	ldrb	r2, [r7, #28]
 80095b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	73da      	strb	r2, [r3, #15]
}
 80095c4:	bf00      	nop
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08c      	sub	sp, #48	; 0x30
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
 80095da:	460b      	mov	r3, r1
 80095dc:	80bb      	strh	r3, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80095e6:	887b      	ldrh	r3, [r7, #2]
 80095e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80095ec:	d07f      	beq.n	80096ee <pbuf_alloc+0x11e>
 80095ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80095f2:	f300 80c8 	bgt.w	8009786 <pbuf_alloc+0x1b6>
 80095f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80095fa:	d010      	beq.n	800961e <pbuf_alloc+0x4e>
 80095fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009600:	f300 80c1 	bgt.w	8009786 <pbuf_alloc+0x1b6>
 8009604:	2b01      	cmp	r3, #1
 8009606:	d002      	beq.n	800960e <pbuf_alloc+0x3e>
 8009608:	2b41      	cmp	r3, #65	; 0x41
 800960a:	f040 80bc 	bne.w	8009786 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800960e:	887a      	ldrh	r2, [r7, #2]
 8009610:	88bb      	ldrh	r3, [r7, #4]
 8009612:	4619      	mov	r1, r3
 8009614:	2000      	movs	r0, #0
 8009616:	f000 f8d1 	bl	80097bc <pbuf_alloc_reference>
 800961a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800961c:	e0bd      	b.n	800979a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009622:	2300      	movs	r3, #0
 8009624:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009626:	88bb      	ldrh	r3, [r7, #4]
 8009628:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800962a:	2008      	movs	r0, #8
 800962c:	f7ff fbce 	bl	8008dcc <memp_malloc>
 8009630:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d109      	bne.n	800964c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009638:	f7ff ff94 	bl	8009564 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009642:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009644:	f000 faa8 	bl	8009b98 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	e0a7      	b.n	800979c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800964c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800964e:	3303      	adds	r3, #3
 8009650:	b29b      	uxth	r3, r3
 8009652:	f023 0303 	bic.w	r3, r3, #3
 8009656:	b29b      	uxth	r3, r3
 8009658:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800965c:	b29b      	uxth	r3, r3
 800965e:	8b7a      	ldrh	r2, [r7, #26]
 8009660:	4293      	cmp	r3, r2
 8009662:	bf28      	it	cs
 8009664:	4613      	movcs	r3, r2
 8009666:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800966a:	3310      	adds	r3, #16
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4413      	add	r3, r2
 8009670:	3303      	adds	r3, #3
 8009672:	f023 0303 	bic.w	r3, r3, #3
 8009676:	4618      	mov	r0, r3
 8009678:	89f9      	ldrh	r1, [r7, #14]
 800967a:	8b7a      	ldrh	r2, [r7, #26]
 800967c:	2300      	movs	r3, #0
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	887b      	ldrh	r3, [r7, #2]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	460b      	mov	r3, r1
 8009686:	4601      	mov	r1, r0
 8009688:	6938      	ldr	r0, [r7, #16]
 800968a:	f7ff ff77 	bl	800957c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d006      	beq.n	80096a8 <pbuf_alloc+0xd8>
 800969a:	4b42      	ldr	r3, [pc, #264]	; (80097a4 <pbuf_alloc+0x1d4>)
 800969c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096a0:	4941      	ldr	r1, [pc, #260]	; (80097a8 <pbuf_alloc+0x1d8>)
 80096a2:	4842      	ldr	r0, [pc, #264]	; (80097ac <pbuf_alloc+0x1dc>)
 80096a4:	f009 fcc4 	bl	8013030 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80096a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096aa:	3303      	adds	r3, #3
 80096ac:	f023 0303 	bic.w	r3, r3, #3
 80096b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80096b4:	d106      	bne.n	80096c4 <pbuf_alloc+0xf4>
 80096b6:	4b3b      	ldr	r3, [pc, #236]	; (80097a4 <pbuf_alloc+0x1d4>)
 80096b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80096bc:	493c      	ldr	r1, [pc, #240]	; (80097b0 <pbuf_alloc+0x1e0>)
 80096be:	483b      	ldr	r0, [pc, #236]	; (80097ac <pbuf_alloc+0x1dc>)
 80096c0:	f009 fcb6 	bl	8013030 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
 80096ce:	e002      	b.n	80096d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80096da:	8b7a      	ldrh	r2, [r7, #26]
 80096dc:	89fb      	ldrh	r3, [r7, #14]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80096e6:	8b7b      	ldrh	r3, [r7, #26]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d19e      	bne.n	800962a <pbuf_alloc+0x5a>
      break;
 80096ec:	e055      	b.n	800979a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80096ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096f0:	3303      	adds	r3, #3
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	88bb      	ldrh	r3, [r7, #4]
 80096fc:	3303      	adds	r3, #3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	f023 0303 	bic.w	r3, r3, #3
 8009704:	b29b      	uxth	r3, r3
 8009706:	4413      	add	r3, r2
 8009708:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800970a:	8b3b      	ldrh	r3, [r7, #24]
 800970c:	3310      	adds	r3, #16
 800970e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009710:	8b3a      	ldrh	r2, [r7, #24]
 8009712:	88bb      	ldrh	r3, [r7, #4]
 8009714:	3303      	adds	r3, #3
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	429a      	cmp	r2, r3
 800971c:	d306      	bcc.n	800972c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800971e:	8afa      	ldrh	r2, [r7, #22]
 8009720:	88bb      	ldrh	r3, [r7, #4]
 8009722:	3303      	adds	r3, #3
 8009724:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009728:	429a      	cmp	r2, r3
 800972a:	d201      	bcs.n	8009730 <pbuf_alloc+0x160>
        return NULL;
 800972c:	2300      	movs	r3, #0
 800972e:	e035      	b.n	800979c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009730:	8afb      	ldrh	r3, [r7, #22]
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff f9ba 	bl	8008aac <mem_malloc>
 8009738:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <pbuf_alloc+0x174>
        return NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	e02b      	b.n	800979c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009746:	3310      	adds	r3, #16
 8009748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800974a:	4413      	add	r3, r2
 800974c:	3303      	adds	r3, #3
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	4618      	mov	r0, r3
 8009754:	88b9      	ldrh	r1, [r7, #4]
 8009756:	88ba      	ldrh	r2, [r7, #4]
 8009758:	2300      	movs	r3, #0
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	887b      	ldrh	r3, [r7, #2]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	460b      	mov	r3, r1
 8009762:	4601      	mov	r1, r0
 8009764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009766:	f7ff ff09 	bl	800957c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d010      	beq.n	8009798 <pbuf_alloc+0x1c8>
 8009776:	4b0b      	ldr	r3, [pc, #44]	; (80097a4 <pbuf_alloc+0x1d4>)
 8009778:	f44f 7291 	mov.w	r2, #290	; 0x122
 800977c:	490d      	ldr	r1, [pc, #52]	; (80097b4 <pbuf_alloc+0x1e4>)
 800977e:	480b      	ldr	r0, [pc, #44]	; (80097ac <pbuf_alloc+0x1dc>)
 8009780:	f009 fc56 	bl	8013030 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009784:	e008      	b.n	8009798 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009786:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <pbuf_alloc+0x1d4>)
 8009788:	f240 1227 	movw	r2, #295	; 0x127
 800978c:	490a      	ldr	r1, [pc, #40]	; (80097b8 <pbuf_alloc+0x1e8>)
 800978e:	4807      	ldr	r0, [pc, #28]	; (80097ac <pbuf_alloc+0x1dc>)
 8009790:	f009 fc4e 	bl	8013030 <iprintf>
      return NULL;
 8009794:	2300      	movs	r3, #0
 8009796:	e001      	b.n	800979c <pbuf_alloc+0x1cc>
      break;
 8009798:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800979c:	4618      	mov	r0, r3
 800979e:	3728      	adds	r7, #40	; 0x28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	08014488 	.word	0x08014488
 80097a8:	080144b8 	.word	0x080144b8
 80097ac:	080144e8 	.word	0x080144e8
 80097b0:	08014510 	.word	0x08014510
 80097b4:	08014544 	.word	0x08014544
 80097b8:	08014570 	.word	0x08014570

080097bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af02      	add	r7, sp, #8
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	807b      	strh	r3, [r7, #2]
 80097c8:	4613      	mov	r3, r2
 80097ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80097cc:	883b      	ldrh	r3, [r7, #0]
 80097ce:	2b41      	cmp	r3, #65	; 0x41
 80097d0:	d009      	beq.n	80097e6 <pbuf_alloc_reference+0x2a>
 80097d2:	883b      	ldrh	r3, [r7, #0]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d006      	beq.n	80097e6 <pbuf_alloc_reference+0x2a>
 80097d8:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <pbuf_alloc_reference+0x5c>)
 80097da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80097de:	490f      	ldr	r1, [pc, #60]	; (800981c <pbuf_alloc_reference+0x60>)
 80097e0:	480f      	ldr	r0, [pc, #60]	; (8009820 <pbuf_alloc_reference+0x64>)
 80097e2:	f009 fc25 	bl	8013030 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80097e6:	2007      	movs	r0, #7
 80097e8:	f7ff faf0 	bl	8008dcc <memp_malloc>
 80097ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e00b      	b.n	8009810 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80097f8:	8879      	ldrh	r1, [r7, #2]
 80097fa:	887a      	ldrh	r2, [r7, #2]
 80097fc:	2300      	movs	r3, #0
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	883b      	ldrh	r3, [r7, #0]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	460b      	mov	r3, r1
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7ff feb7 	bl	800957c <pbuf_init_alloced_pbuf>
  return p;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	08014488 	.word	0x08014488
 800981c:	0801458c 	.word	0x0801458c
 8009820:	080144e8 	.word	0x080144e8

08009824 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af02      	add	r7, sp, #8
 800982a:	607b      	str	r3, [r7, #4]
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
 8009830:	460b      	mov	r3, r1
 8009832:	81bb      	strh	r3, [r7, #12]
 8009834:	4613      	mov	r3, r2
 8009836:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800983c:	8a7b      	ldrh	r3, [r7, #18]
 800983e:	3303      	adds	r3, #3
 8009840:	f023 0203 	bic.w	r2, r3, #3
 8009844:	89bb      	ldrh	r3, [r7, #12]
 8009846:	441a      	add	r2, r3
 8009848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800984a:	429a      	cmp	r2, r3
 800984c:	d901      	bls.n	8009852 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	e018      	b.n	8009884 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d007      	beq.n	8009868 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009858:	8a7b      	ldrh	r3, [r7, #18]
 800985a:	3303      	adds	r3, #3
 800985c:	f023 0303 	bic.w	r3, r3, #3
 8009860:	6a3a      	ldr	r2, [r7, #32]
 8009862:	4413      	add	r3, r2
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	e001      	b.n	800986c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009868:	2300      	movs	r3, #0
 800986a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	89b9      	ldrh	r1, [r7, #12]
 8009870:	89ba      	ldrh	r2, [r7, #12]
 8009872:	2302      	movs	r3, #2
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	897b      	ldrh	r3, [r7, #10]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	460b      	mov	r3, r1
 800987c:	6979      	ldr	r1, [r7, #20]
 800987e:	f7ff fe7d 	bl	800957c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009882:	687b      	ldr	r3, [r7, #4]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d106      	bne.n	80098ac <pbuf_realloc+0x20>
 800989e:	4b3a      	ldr	r3, [pc, #232]	; (8009988 <pbuf_realloc+0xfc>)
 80098a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80098a4:	4939      	ldr	r1, [pc, #228]	; (800998c <pbuf_realloc+0x100>)
 80098a6:	483a      	ldr	r0, [pc, #232]	; (8009990 <pbuf_realloc+0x104>)
 80098a8:	f009 fbc2 	bl	8013030 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	891b      	ldrh	r3, [r3, #8]
 80098b0:	887a      	ldrh	r2, [r7, #2]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d263      	bcs.n	800997e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	891a      	ldrh	r2, [r3, #8]
 80098ba:	887b      	ldrh	r3, [r7, #2]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80098c0:	887b      	ldrh	r3, [r7, #2]
 80098c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80098c8:	e018      	b.n	80098fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	895b      	ldrh	r3, [r3, #10]
 80098ce:	897a      	ldrh	r2, [r7, #10]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	891a      	ldrh	r2, [r3, #8]
 80098d8:	893b      	ldrh	r3, [r7, #8]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	b29a      	uxth	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <pbuf_realloc+0x70>
 80098ee:	4b26      	ldr	r3, [pc, #152]	; (8009988 <pbuf_realloc+0xfc>)
 80098f0:	f240 12af 	movw	r2, #431	; 0x1af
 80098f4:	4927      	ldr	r1, [pc, #156]	; (8009994 <pbuf_realloc+0x108>)
 80098f6:	4826      	ldr	r0, [pc, #152]	; (8009990 <pbuf_realloc+0x104>)
 80098f8:	f009 fb9a 	bl	8013030 <iprintf>
  while (rem_len > q->len) {
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	895b      	ldrh	r3, [r3, #10]
 8009900:	897a      	ldrh	r2, [r7, #10]
 8009902:	429a      	cmp	r2, r3
 8009904:	d8e1      	bhi.n	80098ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	7b1b      	ldrb	r3, [r3, #12]
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	2b00      	cmp	r3, #0
 8009910:	d121      	bne.n	8009956 <pbuf_realloc+0xca>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	895b      	ldrh	r3, [r3, #10]
 8009916:	897a      	ldrh	r2, [r7, #10]
 8009918:	429a      	cmp	r2, r3
 800991a:	d01c      	beq.n	8009956 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	7b5b      	ldrb	r3, [r3, #13]
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d116      	bne.n	8009956 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	b29a      	uxth	r2, r3
 8009932:	897b      	ldrh	r3, [r7, #10]
 8009934:	4413      	add	r3, r2
 8009936:	b29b      	uxth	r3, r3
 8009938:	4619      	mov	r1, r3
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7fe ffba 	bl	80088b4 <mem_trim>
 8009940:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d106      	bne.n	8009956 <pbuf_realloc+0xca>
 8009948:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <pbuf_realloc+0xfc>)
 800994a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800994e:	4912      	ldr	r1, [pc, #72]	; (8009998 <pbuf_realloc+0x10c>)
 8009950:	480f      	ldr	r0, [pc, #60]	; (8009990 <pbuf_realloc+0x104>)
 8009952:	f009 fb6d 	bl	8013030 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	897a      	ldrh	r2, [r7, #10]
 800995a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	895a      	ldrh	r2, [r3, #10]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f911 	bl	8009b98 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e000      	b.n	8009980 <pbuf_realloc+0xf4>
    return;
 800997e:	bf00      	nop

}
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	08014488 	.word	0x08014488
 800998c:	080145a0 	.word	0x080145a0
 8009990:	080144e8 	.word	0x080144e8
 8009994:	080145b8 	.word	0x080145b8
 8009998:	080145d0 	.word	0x080145d0

0800999c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <pbuf_add_header_impl+0x22>
 80099b0:	4b2b      	ldr	r3, [pc, #172]	; (8009a60 <pbuf_add_header_impl+0xc4>)
 80099b2:	f240 12df 	movw	r2, #479	; 0x1df
 80099b6:	492b      	ldr	r1, [pc, #172]	; (8009a64 <pbuf_add_header_impl+0xc8>)
 80099b8:	482b      	ldr	r0, [pc, #172]	; (8009a68 <pbuf_add_header_impl+0xcc>)
 80099ba:	f009 fb39 	bl	8013030 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <pbuf_add_header_impl+0x30>
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ca:	d301      	bcc.n	80099d0 <pbuf_add_header_impl+0x34>
    return 1;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e043      	b.n	8009a58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <pbuf_add_header_impl+0x3e>
    return 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	e03e      	b.n	8009a58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	891a      	ldrh	r2, [r3, #8]
 80099e2:	8a7b      	ldrh	r3, [r7, #18]
 80099e4:	4413      	add	r3, r2
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8a7a      	ldrh	r2, [r7, #18]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d901      	bls.n	80099f2 <pbuf_add_header_impl+0x56>
    return 1;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e032      	b.n	8009a58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	7b1b      	ldrb	r3, [r3, #12]
 80099f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80099f8:	8a3b      	ldrh	r3, [r7, #16]
 80099fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00c      	beq.n	8009a1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	425b      	negs	r3, r3
 8009a0a:	4413      	add	r3, r2
 8009a0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3310      	adds	r3, #16
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d20d      	bcs.n	8009a34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e01d      	b.n	8009a58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	425b      	negs	r3, r3
 8009a2a:	4413      	add	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	e001      	b.n	8009a34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e011      	b.n	8009a58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	895a      	ldrh	r2, [r3, #10]
 8009a3e:	8a7b      	ldrh	r3, [r7, #18]
 8009a40:	4413      	add	r3, r2
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	891a      	ldrh	r2, [r3, #8]
 8009a4c:	8a7b      	ldrh	r3, [r7, #18]
 8009a4e:	4413      	add	r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	811a      	strh	r2, [r3, #8]


  return 0;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	08014488 	.word	0x08014488
 8009a64:	080145ec 	.word	0x080145ec
 8009a68:	080144e8 	.word	0x080144e8

08009a6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009a76:	2200      	movs	r2, #0
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff ff8e 	bl	800999c <pbuf_add_header_impl>
 8009a80:	4603      	mov	r3, r0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d106      	bne.n	8009aaa <pbuf_remove_header+0x1e>
 8009a9c:	4b20      	ldr	r3, [pc, #128]	; (8009b20 <pbuf_remove_header+0x94>)
 8009a9e:	f240 224b 	movw	r2, #587	; 0x24b
 8009aa2:	4920      	ldr	r1, [pc, #128]	; (8009b24 <pbuf_remove_header+0x98>)
 8009aa4:	4820      	ldr	r0, [pc, #128]	; (8009b28 <pbuf_remove_header+0x9c>)
 8009aa6:	f009 fac3 	bl	8013030 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <pbuf_remove_header+0x2c>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab6:	d301      	bcc.n	8009abc <pbuf_remove_header+0x30>
    return 1;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e02c      	b.n	8009b16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <pbuf_remove_header+0x3a>
    return 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	e027      	b.n	8009b16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	895b      	ldrh	r3, [r3, #10]
 8009ace:	89fa      	ldrh	r2, [r7, #14]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d908      	bls.n	8009ae6 <pbuf_remove_header+0x5a>
 8009ad4:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <pbuf_remove_header+0x94>)
 8009ad6:	f240 2255 	movw	r2, #597	; 0x255
 8009ada:	4914      	ldr	r1, [pc, #80]	; (8009b2c <pbuf_remove_header+0xa0>)
 8009adc:	4812      	ldr	r0, [pc, #72]	; (8009b28 <pbuf_remove_header+0x9c>)
 8009ade:	f009 faa7 	bl	8013030 <iprintf>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e017      	b.n	8009b16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	441a      	add	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	895a      	ldrh	r2, [r3, #10]
 8009afc:	89fb      	ldrh	r3, [r7, #14]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	891a      	ldrh	r2, [r3, #8]
 8009b0a:	89fb      	ldrh	r3, [r7, #14]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	08014488 	.word	0x08014488
 8009b24:	080145ec 	.word	0x080145ec
 8009b28:	080144e8 	.word	0x080144e8
 8009b2c:	080145f8 	.word	0x080145f8

08009b30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	807b      	strh	r3, [r7, #2]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da08      	bge.n	8009b5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009b48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff ff9b 	bl	8009a8c <pbuf_remove_header>
 8009b56:	4603      	mov	r3, r0
 8009b58:	e007      	b.n	8009b6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009b5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b5e:	787a      	ldrb	r2, [r7, #1]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ff1a 	bl	800999c <pbuf_add_header_impl>
 8009b68:	4603      	mov	r3, r0
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009b7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b82:	2201      	movs	r2, #1
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ffd2 	bl	8009b30 <pbuf_header_impl>
 8009b8c:	4603      	mov	r3, r0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10b      	bne.n	8009bbe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <pbuf_free+0x22>
 8009bac:	4b38      	ldr	r3, [pc, #224]	; (8009c90 <pbuf_free+0xf8>)
 8009bae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009bb2:	4938      	ldr	r1, [pc, #224]	; (8009c94 <pbuf_free+0xfc>)
 8009bb4:	4838      	ldr	r0, [pc, #224]	; (8009c98 <pbuf_free+0x100>)
 8009bb6:	f009 fa3b 	bl	8013030 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e063      	b.n	8009c86 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009bc2:	e05c      	b.n	8009c7e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7b9b      	ldrb	r3, [r3, #14]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <pbuf_free+0x42>
 8009bcc:	4b30      	ldr	r3, [pc, #192]	; (8009c90 <pbuf_free+0xf8>)
 8009bce:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009bd2:	4932      	ldr	r1, [pc, #200]	; (8009c9c <pbuf_free+0x104>)
 8009bd4:	4830      	ldr	r0, [pc, #192]	; (8009c98 <pbuf_free+0x100>)
 8009bd6:	f009 fa2b 	bl	8013030 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	7b9b      	ldrb	r3, [r3, #14]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b2da      	uxtb	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	739a      	strb	r2, [r3, #14]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	7b9b      	ldrb	r3, [r3, #14]
 8009bea:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009bec:	7dbb      	ldrb	r3, [r7, #22]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d143      	bne.n	8009c7a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7b1b      	ldrb	r3, [r3, #12]
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7b5b      	ldrb	r3, [r3, #13]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d011      	beq.n	8009c32 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <pbuf_free+0x90>
 8009c1a:	4b1d      	ldr	r3, [pc, #116]	; (8009c90 <pbuf_free+0xf8>)
 8009c1c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009c20:	491f      	ldr	r1, [pc, #124]	; (8009ca0 <pbuf_free+0x108>)
 8009c22:	481d      	ldr	r0, [pc, #116]	; (8009c98 <pbuf_free+0x100>)
 8009c24:	f009 fa04 	bl	8013030 <iprintf>
        pc->custom_free_function(p);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	4798      	blx	r3
 8009c30:	e01d      	b.n	8009c6e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d104      	bne.n	8009c42 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	2008      	movs	r0, #8
 8009c3c:	f7ff f936 	bl	8008eac <memp_free>
 8009c40:	e015      	b.n	8009c6e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009c42:	7bfb      	ldrb	r3, [r7, #15]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d104      	bne.n	8009c52 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009c48:	6879      	ldr	r1, [r7, #4]
 8009c4a:	2007      	movs	r0, #7
 8009c4c:	f7ff f92e 	bl	8008eac <memp_free>
 8009c50:	e00d      	b.n	8009c6e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d103      	bne.n	8009c60 <pbuf_free+0xc8>
          mem_free(p);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7fe fdc1 	bl	80087e0 <mem_free>
 8009c5e:	e006      	b.n	8009c6e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <pbuf_free+0xf8>)
 8009c62:	f240 320f 	movw	r2, #783	; 0x30f
 8009c66:	490f      	ldr	r1, [pc, #60]	; (8009ca4 <pbuf_free+0x10c>)
 8009c68:	480b      	ldr	r0, [pc, #44]	; (8009c98 <pbuf_free+0x100>)
 8009c6a:	f009 f9e1 	bl	8013030 <iprintf>
        }
      }
      count++;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	3301      	adds	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	607b      	str	r3, [r7, #4]
 8009c78:	e001      	b.n	8009c7e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d19f      	bne.n	8009bc4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	08014488 	.word	0x08014488
 8009c94:	080145ec 	.word	0x080145ec
 8009c98:	080144e8 	.word	0x080144e8
 8009c9c:	08014618 	.word	0x08014618
 8009ca0:	08014630 	.word	0x08014630
 8009ca4:	08014654 	.word	0x08014654

08009ca8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009cb4:	e005      	b.n	8009cc2 <pbuf_clen+0x1a>
    ++len;
 8009cb6:	89fb      	ldrh	r3, [r7, #14]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1f6      	bne.n	8009cb6 <pbuf_clen+0xe>
  }
  return len;
 8009cc8:	89fb      	ldrh	r3, [r7, #14]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
	...

08009cd8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d010      	beq.n	8009d08 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7b9b      	ldrb	r3, [r3, #14]
 8009cea:	3301      	adds	r3, #1
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7b9b      	ldrb	r3, [r3, #14]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <pbuf_ref+0x30>
 8009cfa:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <pbuf_ref+0x38>)
 8009cfc:	f240 3242 	movw	r2, #834	; 0x342
 8009d00:	4904      	ldr	r1, [pc, #16]	; (8009d14 <pbuf_ref+0x3c>)
 8009d02:	4805      	ldr	r0, [pc, #20]	; (8009d18 <pbuf_ref+0x40>)
 8009d04:	f009 f994 	bl	8013030 <iprintf>
  }
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	08014488 	.word	0x08014488
 8009d14:	08014668 	.word	0x08014668
 8009d18:	080144e8 	.word	0x080144e8

08009d1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <pbuf_cat+0x16>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d107      	bne.n	8009d42 <pbuf_cat+0x26>
 8009d32:	4b20      	ldr	r3, [pc, #128]	; (8009db4 <pbuf_cat+0x98>)
 8009d34:	f240 3259 	movw	r2, #857	; 0x359
 8009d38:	491f      	ldr	r1, [pc, #124]	; (8009db8 <pbuf_cat+0x9c>)
 8009d3a:	4820      	ldr	r0, [pc, #128]	; (8009dbc <pbuf_cat+0xa0>)
 8009d3c:	f009 f978 	bl	8013030 <iprintf>
 8009d40:	e034      	b.n	8009dac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e00a      	b.n	8009d5e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	891a      	ldrh	r2, [r3, #8]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	891b      	ldrh	r3, [r3, #8]
 8009d50:	4413      	add	r3, r2
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1f0      	bne.n	8009d48 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	891a      	ldrh	r2, [r3, #8]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	895b      	ldrh	r3, [r3, #10]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d006      	beq.n	8009d80 <pbuf_cat+0x64>
 8009d72:	4b10      	ldr	r3, [pc, #64]	; (8009db4 <pbuf_cat+0x98>)
 8009d74:	f240 3262 	movw	r2, #866	; 0x362
 8009d78:	4911      	ldr	r1, [pc, #68]	; (8009dc0 <pbuf_cat+0xa4>)
 8009d7a:	4810      	ldr	r0, [pc, #64]	; (8009dbc <pbuf_cat+0xa0>)
 8009d7c:	f009 f958 	bl	8013030 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <pbuf_cat+0x7a>
 8009d88:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <pbuf_cat+0x98>)
 8009d8a:	f240 3263 	movw	r2, #867	; 0x363
 8009d8e:	490d      	ldr	r1, [pc, #52]	; (8009dc4 <pbuf_cat+0xa8>)
 8009d90:	480a      	ldr	r0, [pc, #40]	; (8009dbc <pbuf_cat+0xa0>)
 8009d92:	f009 f94d 	bl	8013030 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	891a      	ldrh	r2, [r3, #8]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	891b      	ldrh	r3, [r3, #8]
 8009d9e:	4413      	add	r3, r2
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	08014488 	.word	0x08014488
 8009db8:	0801467c 	.word	0x0801467c
 8009dbc:	080144e8 	.word	0x080144e8
 8009dc0:	080146b4 	.word	0x080146b4
 8009dc4:	080146e4 	.word	0x080146e4

08009dc8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ffa1 	bl	8009d1c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009dda:	6838      	ldr	r0, [r7, #0]
 8009ddc:	f7ff ff7c 	bl	8009cd8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009df2:	2300      	movs	r3, #0
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	2300      	movs	r3, #0
 8009df8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <pbuf_copy+0x2a>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d005      	beq.n	8009e12 <pbuf_copy+0x2a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	891a      	ldrh	r2, [r3, #8]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	891b      	ldrh	r3, [r3, #8]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d209      	bcs.n	8009e26 <pbuf_copy+0x3e>
 8009e12:	4b57      	ldr	r3, [pc, #348]	; (8009f70 <pbuf_copy+0x188>)
 8009e14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009e18:	4956      	ldr	r1, [pc, #344]	; (8009f74 <pbuf_copy+0x18c>)
 8009e1a:	4857      	ldr	r0, [pc, #348]	; (8009f78 <pbuf_copy+0x190>)
 8009e1c:	f009 f908 	bl	8013030 <iprintf>
 8009e20:	f06f 030f 	mvn.w	r3, #15
 8009e24:	e09f      	b.n	8009f66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	895b      	ldrh	r3, [r3, #10]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	1ad2      	subs	r2, r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	895b      	ldrh	r3, [r3, #10]
 8009e34:	4619      	mov	r1, r3
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	1acb      	subs	r3, r1, r3
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d306      	bcc.n	8009e4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	895b      	ldrh	r3, [r3, #10]
 8009e42:	461a      	mov	r2, r3
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	e005      	b.n	8009e58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	895b      	ldrh	r3, [r3, #10]
 8009e50:	461a      	mov	r2, r3
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	18d0      	adds	r0, r2, r3
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	4413      	add	r3, r2
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f009 f9bb 	bl	80131e6 <memcpy>
    offset_to += len;
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4413      	add	r3, r2
 8009e76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	895b      	ldrh	r3, [r3, #10]
 8009e84:	461a      	mov	r2, r3
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d906      	bls.n	8009e9a <pbuf_copy+0xb2>
 8009e8c:	4b38      	ldr	r3, [pc, #224]	; (8009f70 <pbuf_copy+0x188>)
 8009e8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009e92:	493a      	ldr	r1, [pc, #232]	; (8009f7c <pbuf_copy+0x194>)
 8009e94:	4838      	ldr	r0, [pc, #224]	; (8009f78 <pbuf_copy+0x190>)
 8009e96:	f009 f8cb 	bl	8013030 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	895b      	ldrh	r3, [r3, #10]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d906      	bls.n	8009eb4 <pbuf_copy+0xcc>
 8009ea6:	4b32      	ldr	r3, [pc, #200]	; (8009f70 <pbuf_copy+0x188>)
 8009ea8:	f240 32da 	movw	r2, #986	; 0x3da
 8009eac:	4934      	ldr	r1, [pc, #208]	; (8009f80 <pbuf_copy+0x198>)
 8009eae:	4832      	ldr	r0, [pc, #200]	; (8009f78 <pbuf_copy+0x190>)
 8009eb0:	f009 f8be 	bl	8013030 <iprintf>
    if (offset_from >= p_from->len) {
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	895b      	ldrh	r3, [r3, #10]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d304      	bcc.n	8009eca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	895b      	ldrh	r3, [r3, #10]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d114      	bne.n	8009f00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10c      	bne.n	8009f00 <pbuf_copy+0x118>
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d009      	beq.n	8009f00 <pbuf_copy+0x118>
 8009eec:	4b20      	ldr	r3, [pc, #128]	; (8009f70 <pbuf_copy+0x188>)
 8009eee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009ef2:	4924      	ldr	r1, [pc, #144]	; (8009f84 <pbuf_copy+0x19c>)
 8009ef4:	4820      	ldr	r0, [pc, #128]	; (8009f78 <pbuf_copy+0x190>)
 8009ef6:	f009 f89b 	bl	8013030 <iprintf>
 8009efa:	f06f 030f 	mvn.w	r3, #15
 8009efe:	e032      	b.n	8009f66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d013      	beq.n	8009f2e <pbuf_copy+0x146>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	895a      	ldrh	r2, [r3, #10]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	891b      	ldrh	r3, [r3, #8]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d10d      	bne.n	8009f2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d009      	beq.n	8009f2e <pbuf_copy+0x146>
 8009f1a:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <pbuf_copy+0x188>)
 8009f1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009f20:	4919      	ldr	r1, [pc, #100]	; (8009f88 <pbuf_copy+0x1a0>)
 8009f22:	4815      	ldr	r0, [pc, #84]	; (8009f78 <pbuf_copy+0x190>)
 8009f24:	f009 f884 	bl	8013030 <iprintf>
 8009f28:	f06f 0305 	mvn.w	r3, #5
 8009f2c:	e01b      	b.n	8009f66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d013      	beq.n	8009f5c <pbuf_copy+0x174>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	895a      	ldrh	r2, [r3, #10]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	891b      	ldrh	r3, [r3, #8]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d10d      	bne.n	8009f5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d009      	beq.n	8009f5c <pbuf_copy+0x174>
 8009f48:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <pbuf_copy+0x188>)
 8009f4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009f4e:	490e      	ldr	r1, [pc, #56]	; (8009f88 <pbuf_copy+0x1a0>)
 8009f50:	4809      	ldr	r0, [pc, #36]	; (8009f78 <pbuf_copy+0x190>)
 8009f52:	f009 f86d 	bl	8013030 <iprintf>
 8009f56:	f06f 0305 	mvn.w	r3, #5
 8009f5a:	e004      	b.n	8009f66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f47f af61 	bne.w	8009e26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	08014488 	.word	0x08014488
 8009f74:	08014730 	.word	0x08014730
 8009f78:	080144e8 	.word	0x080144e8
 8009f7c:	08014760 	.word	0x08014760
 8009f80:	08014778 	.word	0x08014778
 8009f84:	08014794 	.word	0x08014794
 8009f88:	080147a4 	.word	0x080147a4

08009f8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	80fb      	strh	r3, [r7, #6]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d108      	bne.n	8009fc2 <pbuf_copy_partial+0x36>
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	; (800a060 <pbuf_copy_partial+0xd4>)
 8009fb2:	f240 420a 	movw	r2, #1034	; 0x40a
 8009fb6:	492b      	ldr	r1, [pc, #172]	; (800a064 <pbuf_copy_partial+0xd8>)
 8009fb8:	482b      	ldr	r0, [pc, #172]	; (800a068 <pbuf_copy_partial+0xdc>)
 8009fba:	f009 f839 	bl	8013030 <iprintf>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e04a      	b.n	800a058 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d108      	bne.n	8009fda <pbuf_copy_partial+0x4e>
 8009fc8:	4b25      	ldr	r3, [pc, #148]	; (800a060 <pbuf_copy_partial+0xd4>)
 8009fca:	f240 420b 	movw	r2, #1035	; 0x40b
 8009fce:	4927      	ldr	r1, [pc, #156]	; (800a06c <pbuf_copy_partial+0xe0>)
 8009fd0:	4825      	ldr	r0, [pc, #148]	; (800a068 <pbuf_copy_partial+0xdc>)
 8009fd2:	f009 f82d 	bl	8013030 <iprintf>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e03e      	b.n	800a058 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	e034      	b.n	800a04a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009fe0:	88bb      	ldrh	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <pbuf_copy_partial+0x70>
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	895b      	ldrh	r3, [r3, #10]
 8009fea:	88ba      	ldrh	r2, [r7, #4]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d305      	bcc.n	8009ffc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	895b      	ldrh	r3, [r3, #10]
 8009ff4:	88ba      	ldrh	r2, [r7, #4]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	80bb      	strh	r3, [r7, #4]
 8009ffa:	e023      	b.n	800a044 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	895a      	ldrh	r2, [r3, #10]
 800a000:	88bb      	ldrh	r3, [r7, #4]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a006:	8b3a      	ldrh	r2, [r7, #24]
 800a008:	88fb      	ldrh	r3, [r7, #6]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d901      	bls.n	800a012 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a00e:	88fb      	ldrh	r3, [r7, #6]
 800a010:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a012:	8b7b      	ldrh	r3, [r7, #26]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	18d0      	adds	r0, r2, r3
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	88bb      	ldrh	r3, [r7, #4]
 800a01e:	4413      	add	r3, r2
 800a020:	8b3a      	ldrh	r2, [r7, #24]
 800a022:	4619      	mov	r1, r3
 800a024:	f009 f8df 	bl	80131e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a028:	8afa      	ldrh	r2, [r7, #22]
 800a02a:	8b3b      	ldrh	r3, [r7, #24]
 800a02c:	4413      	add	r3, r2
 800a02e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a030:	8b7a      	ldrh	r2, [r7, #26]
 800a032:	8b3b      	ldrh	r3, [r7, #24]
 800a034:	4413      	add	r3, r2
 800a036:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a038:	88fa      	ldrh	r2, [r7, #6]
 800a03a:	8b3b      	ldrh	r3, [r7, #24]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <pbuf_copy_partial+0xca>
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1c4      	bne.n	8009fe0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a056:	8afb      	ldrh	r3, [r7, #22]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	08014488 	.word	0x08014488
 800a064:	080147d0 	.word	0x080147d0
 800a068:	080144e8 	.word	0x080144e8
 800a06c:	080147f0 	.word	0x080147f0

0800a070 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	603a      	str	r2, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
 800a07c:	460b      	mov	r3, r1
 800a07e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	8919      	ldrh	r1, [r3, #8]
 800a084:	88ba      	ldrh	r2, [r7, #4]
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff faa1 	bl	80095d0 <pbuf_alloc>
 800a08e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <pbuf_clone+0x2a>
    return NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	e011      	b.n	800a0be <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7ff fea3 	bl	8009de8 <pbuf_copy>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a0a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d006      	beq.n	800a0bc <pbuf_clone+0x4c>
 800a0ae:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <pbuf_clone+0x58>)
 800a0b0:	f240 5224 	movw	r2, #1316	; 0x524
 800a0b4:	4905      	ldr	r1, [pc, #20]	; (800a0cc <pbuf_clone+0x5c>)
 800a0b6:	4806      	ldr	r0, [pc, #24]	; (800a0d0 <pbuf_clone+0x60>)
 800a0b8:	f008 ffba 	bl	8013030 <iprintf>
  return q;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	08014488 	.word	0x08014488
 800a0cc:	080148fc 	.word	0x080148fc
 800a0d0:	080144e8 	.word	0x080144e8

0800a0d4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a0d8:	f008 feaa 	bl	8012e30 <rand>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	4b01      	ldr	r3, [pc, #4]	; (800a0f4 <tcp_init+0x20>)
 800a0ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a0f0:	bf00      	nop
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20000024 	.word	0x20000024

0800a0f8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	7d1b      	ldrb	r3, [r3, #20]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d105      	bne.n	800a114 <tcp_free+0x1c>
 800a108:	4b06      	ldr	r3, [pc, #24]	; (800a124 <tcp_free+0x2c>)
 800a10a:	22d4      	movs	r2, #212	; 0xd4
 800a10c:	4906      	ldr	r1, [pc, #24]	; (800a128 <tcp_free+0x30>)
 800a10e:	4807      	ldr	r0, [pc, #28]	; (800a12c <tcp_free+0x34>)
 800a110:	f008 ff8e 	bl	8013030 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	2001      	movs	r0, #1
 800a118:	f7fe fec8 	bl	8008eac <memp_free>
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	08014988 	.word	0x08014988
 800a128:	080149b8 	.word	0x080149b8
 800a12c:	080149cc 	.word	0x080149cc

0800a130 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7d1b      	ldrb	r3, [r3, #20]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d105      	bne.n	800a14c <tcp_free_listen+0x1c>
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <tcp_free_listen+0x2c>)
 800a142:	22df      	movs	r2, #223	; 0xdf
 800a144:	4906      	ldr	r1, [pc, #24]	; (800a160 <tcp_free_listen+0x30>)
 800a146:	4807      	ldr	r0, [pc, #28]	; (800a164 <tcp_free_listen+0x34>)
 800a148:	f008 ff72 	bl	8013030 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	2002      	movs	r0, #2
 800a150:	f7fe feac 	bl	8008eac <memp_free>
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08014988 	.word	0x08014988
 800a160:	080149f4 	.word	0x080149f4
 800a164:	080149cc 	.word	0x080149cc

0800a168 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a16c:	f001 f85c 	bl	800b228 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a170:	4b07      	ldr	r3, [pc, #28]	; (800a190 <tcp_tmr+0x28>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	3301      	adds	r3, #1
 800a176:	b2da      	uxtb	r2, r3
 800a178:	4b05      	ldr	r3, [pc, #20]	; (800a190 <tcp_tmr+0x28>)
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	4b04      	ldr	r3, [pc, #16]	; (800a190 <tcp_tmr+0x28>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a188:	f000 fd0e 	bl	800aba8 <tcp_slowtmr>
  }
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	2000a91d 	.word	0x2000a91d

0800a194 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d105      	bne.n	800a1b0 <tcp_remove_listener+0x1c>
 800a1a4:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <tcp_remove_listener+0x48>)
 800a1a6:	22ff      	movs	r2, #255	; 0xff
 800a1a8:	490d      	ldr	r1, [pc, #52]	; (800a1e0 <tcp_remove_listener+0x4c>)
 800a1aa:	480e      	ldr	r0, [pc, #56]	; (800a1e4 <tcp_remove_listener+0x50>)
 800a1ac:	f008 ff40 	bl	8013030 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	e00a      	b.n	800a1cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d102      	bne.n	800a1c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1f1      	bne.n	800a1b6 <tcp_remove_listener+0x22>
    }
  }
}
 800a1d2:	bf00      	nop
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	08014988 	.word	0x08014988
 800a1e0:	08014a10 	.word	0x08014a10
 800a1e4:	080149cc 	.word	0x080149cc

0800a1e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <tcp_listen_closed+0x1c>
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <tcp_listen_closed+0x60>)
 800a1f8:	f240 1211 	movw	r2, #273	; 0x111
 800a1fc:	4913      	ldr	r1, [pc, #76]	; (800a24c <tcp_listen_closed+0x64>)
 800a1fe:	4814      	ldr	r0, [pc, #80]	; (800a250 <tcp_listen_closed+0x68>)
 800a200:	f008 ff16 	bl	8013030 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	7d1b      	ldrb	r3, [r3, #20]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d006      	beq.n	800a21a <tcp_listen_closed+0x32>
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <tcp_listen_closed+0x60>)
 800a20e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a212:	4910      	ldr	r1, [pc, #64]	; (800a254 <tcp_listen_closed+0x6c>)
 800a214:	480e      	ldr	r0, [pc, #56]	; (800a250 <tcp_listen_closed+0x68>)
 800a216:	f008 ff0b 	bl	8013030 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a21a:	2301      	movs	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
 800a21e:	e00b      	b.n	800a238 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a220:	4a0d      	ldr	r2, [pc, #52]	; (800a258 <tcp_listen_closed+0x70>)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7ff ffb1 	bl	800a194 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	3301      	adds	r3, #1
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d9f0      	bls.n	800a220 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a23e:	bf00      	nop
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	08014988 	.word	0x08014988
 800a24c:	08014a38 	.word	0x08014a38
 800a250:	080149cc 	.word	0x080149cc
 800a254:	08014a44 	.word	0x08014a44
 800a258:	08016968 	.word	0x08016968

0800a25c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a25c:	b5b0      	push	{r4, r5, r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af04      	add	r7, sp, #16
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <tcp_close_shutdown+0x20>
 800a26e:	4b63      	ldr	r3, [pc, #396]	; (800a3fc <tcp_close_shutdown+0x1a0>)
 800a270:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a274:	4962      	ldr	r1, [pc, #392]	; (800a400 <tcp_close_shutdown+0x1a4>)
 800a276:	4863      	ldr	r0, [pc, #396]	; (800a404 <tcp_close_shutdown+0x1a8>)
 800a278:	f008 feda 	bl	8013030 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d066      	beq.n	800a350 <tcp_close_shutdown+0xf4>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7d1b      	ldrb	r3, [r3, #20]
 800a286:	2b04      	cmp	r3, #4
 800a288:	d003      	beq.n	800a292 <tcp_close_shutdown+0x36>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7d1b      	ldrb	r3, [r3, #20]
 800a28e:	2b07      	cmp	r3, #7
 800a290:	d15e      	bne.n	800a350 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a296:	2b00      	cmp	r3, #0
 800a298:	d104      	bne.n	800a2a4 <tcp_close_shutdown+0x48>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a2a2:	d055      	beq.n	800a350 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	8b5b      	ldrh	r3, [r3, #26]
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <tcp_close_shutdown+0x62>
 800a2b0:	4b52      	ldr	r3, [pc, #328]	; (800a3fc <tcp_close_shutdown+0x1a0>)
 800a2b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a2b6:	4954      	ldr	r1, [pc, #336]	; (800a408 <tcp_close_shutdown+0x1ac>)
 800a2b8:	4852      	ldr	r0, [pc, #328]	; (800a404 <tcp_close_shutdown+0x1a8>)
 800a2ba:	f008 feb9 	bl	8013030 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a2c6:	687d      	ldr	r5, [r7, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	8ad2      	ldrh	r2, [r2, #22]
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	8b09      	ldrh	r1, [r1, #24]
 800a2d4:	9102      	str	r1, [sp, #8]
 800a2d6:	9201      	str	r2, [sp, #4]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	462b      	mov	r3, r5
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f005 fd89 	bl	800fdf8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f001 fb66 	bl	800b9b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a2ec:	4b47      	ldr	r3, [pc, #284]	; (800a40c <tcp_close_shutdown+0x1b0>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d105      	bne.n	800a302 <tcp_close_shutdown+0xa6>
 800a2f6:	4b45      	ldr	r3, [pc, #276]	; (800a40c <tcp_close_shutdown+0x1b0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	4a43      	ldr	r2, [pc, #268]	; (800a40c <tcp_close_shutdown+0x1b0>)
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	e013      	b.n	800a32a <tcp_close_shutdown+0xce>
 800a302:	4b42      	ldr	r3, [pc, #264]	; (800a40c <tcp_close_shutdown+0x1b0>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	e00c      	b.n	800a324 <tcp_close_shutdown+0xc8>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d104      	bne.n	800a31e <tcp_close_shutdown+0xc2>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	60da      	str	r2, [r3, #12]
 800a31c:	e005      	b.n	800a32a <tcp_close_shutdown+0xce>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1ef      	bne.n	800a30a <tcp_close_shutdown+0xae>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	60da      	str	r2, [r3, #12]
 800a330:	4b37      	ldr	r3, [pc, #220]	; (800a410 <tcp_close_shutdown+0x1b4>)
 800a332:	2201      	movs	r2, #1
 800a334:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a336:	4b37      	ldr	r3, [pc, #220]	; (800a414 <tcp_close_shutdown+0x1b8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d102      	bne.n	800a346 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a340:	f003 fffe 	bl	800e340 <tcp_trigger_input_pcb_close>
 800a344:	e002      	b.n	800a34c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff fed6 	bl	800a0f8 <tcp_free>
      }
      return ERR_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	e050      	b.n	800a3f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7d1b      	ldrb	r3, [r3, #20]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d03b      	beq.n	800a3d0 <tcp_close_shutdown+0x174>
 800a358:	2b02      	cmp	r3, #2
 800a35a:	dc44      	bgt.n	800a3e6 <tcp_close_shutdown+0x18a>
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <tcp_close_shutdown+0x10a>
 800a360:	2b01      	cmp	r3, #1
 800a362:	d02a      	beq.n	800a3ba <tcp_close_shutdown+0x15e>
 800a364:	e03f      	b.n	800a3e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	8adb      	ldrh	r3, [r3, #22]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d021      	beq.n	800a3b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a36e:	4b2a      	ldr	r3, [pc, #168]	; (800a418 <tcp_close_shutdown+0x1bc>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	429a      	cmp	r2, r3
 800a376:	d105      	bne.n	800a384 <tcp_close_shutdown+0x128>
 800a378:	4b27      	ldr	r3, [pc, #156]	; (800a418 <tcp_close_shutdown+0x1bc>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	4a26      	ldr	r2, [pc, #152]	; (800a418 <tcp_close_shutdown+0x1bc>)
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	e013      	b.n	800a3ac <tcp_close_shutdown+0x150>
 800a384:	4b24      	ldr	r3, [pc, #144]	; (800a418 <tcp_close_shutdown+0x1bc>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	e00c      	b.n	800a3a6 <tcp_close_shutdown+0x14a>
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	429a      	cmp	r2, r3
 800a394:	d104      	bne.n	800a3a0 <tcp_close_shutdown+0x144>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	60da      	str	r2, [r3, #12]
 800a39e:	e005      	b.n	800a3ac <tcp_close_shutdown+0x150>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1ef      	bne.n	800a38c <tcp_close_shutdown+0x130>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fea0 	bl	800a0f8 <tcp_free>
      break;
 800a3b8:	e01a      	b.n	800a3f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff ff14 	bl	800a1e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	4816      	ldr	r0, [pc, #88]	; (800a41c <tcp_close_shutdown+0x1c0>)
 800a3c4:	f001 fb48 	bl	800ba58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff feb1 	bl	800a130 <tcp_free_listen>
      break;
 800a3ce:	e00f      	b.n	800a3f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	480e      	ldr	r0, [pc, #56]	; (800a40c <tcp_close_shutdown+0x1b0>)
 800a3d4:	f001 fb40 	bl	800ba58 <tcp_pcb_remove>
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <tcp_close_shutdown+0x1b4>)
 800a3da:	2201      	movs	r2, #1
 800a3dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff fe8a 	bl	800a0f8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a3e4:	e004      	b.n	800a3f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f81a 	bl	800a420 <tcp_close_shutdown_fin>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	e000      	b.n	800a3f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	08014988 	.word	0x08014988
 800a400:	08014a5c 	.word	0x08014a5c
 800a404:	080149cc 	.word	0x080149cc
 800a408:	08014a7c 	.word	0x08014a7c
 800a40c:	2000a914 	.word	0x2000a914
 800a410:	2000a91c 	.word	0x2000a91c
 800a414:	2000a954 	.word	0x2000a954
 800a418:	2000a90c 	.word	0x2000a90c
 800a41c:	2000a910 	.word	0x2000a910

0800a420 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <tcp_close_shutdown_fin+0x1c>
 800a42e:	4b2e      	ldr	r3, [pc, #184]	; (800a4e8 <tcp_close_shutdown_fin+0xc8>)
 800a430:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a434:	492d      	ldr	r1, [pc, #180]	; (800a4ec <tcp_close_shutdown_fin+0xcc>)
 800a436:	482e      	ldr	r0, [pc, #184]	; (800a4f0 <tcp_close_shutdown_fin+0xd0>)
 800a438:	f008 fdfa 	bl	8013030 <iprintf>

  switch (pcb->state) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	7d1b      	ldrb	r3, [r3, #20]
 800a440:	2b07      	cmp	r3, #7
 800a442:	d020      	beq.n	800a486 <tcp_close_shutdown_fin+0x66>
 800a444:	2b07      	cmp	r3, #7
 800a446:	dc2b      	bgt.n	800a4a0 <tcp_close_shutdown_fin+0x80>
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d002      	beq.n	800a452 <tcp_close_shutdown_fin+0x32>
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d00d      	beq.n	800a46c <tcp_close_shutdown_fin+0x4c>
 800a450:	e026      	b.n	800a4a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f004 fdde 	bl	800f014 <tcp_send_fin>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d11f      	bne.n	800a4a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2205      	movs	r2, #5
 800a468:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a46a:	e01b      	b.n	800a4a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f004 fdd1 	bl	800f014 <tcp_send_fin>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d114      	bne.n	800a4a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2205      	movs	r2, #5
 800a482:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a484:	e010      	b.n	800a4a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f004 fdc4 	bl	800f014 <tcp_send_fin>
 800a48c:	4603      	mov	r3, r0
 800a48e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d109      	bne.n	800a4ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2209      	movs	r2, #9
 800a49c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a49e:	e005      	b.n	800a4ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	e01c      	b.n	800a4de <tcp_close_shutdown_fin+0xbe>
      break;
 800a4a4:	bf00      	nop
 800a4a6:	e002      	b.n	800a4ae <tcp_close_shutdown_fin+0x8e>
      break;
 800a4a8:	bf00      	nop
 800a4aa:	e000      	b.n	800a4ae <tcp_close_shutdown_fin+0x8e>
      break;
 800a4ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d103      	bne.n	800a4be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f004 feea 	bl	800f290 <tcp_output>
 800a4bc:	e00d      	b.n	800a4da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a4be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c6:	d108      	bne.n	800a4da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	8b5b      	ldrh	r3, [r3, #26]
 800a4cc:	f043 0308 	orr.w	r3, r3, #8
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	e001      	b.n	800a4de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a4da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	08014988 	.word	0x08014988
 800a4ec:	08014a38 	.word	0x08014a38
 800a4f0:	080149cc 	.word	0x080149cc

0800a4f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <tcp_close+0x22>
 800a502:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <tcp_close+0x4c>)
 800a504:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a508:	490e      	ldr	r1, [pc, #56]	; (800a544 <tcp_close+0x50>)
 800a50a:	480f      	ldr	r0, [pc, #60]	; (800a548 <tcp_close+0x54>)
 800a50c:	f008 fd90 	bl	8013030 <iprintf>
 800a510:	f06f 030f 	mvn.w	r3, #15
 800a514:	e00f      	b.n	800a536 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	7d1b      	ldrb	r3, [r3, #20]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d006      	beq.n	800a52c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	8b5b      	ldrh	r3, [r3, #26]
 800a522:	f043 0310 	orr.w	r3, r3, #16
 800a526:	b29a      	uxth	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a52c:	2101      	movs	r1, #1
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff fe94 	bl	800a25c <tcp_close_shutdown>
 800a534:	4603      	mov	r3, r0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	08014988 	.word	0x08014988
 800a544:	08014a98 	.word	0x08014a98
 800a548:	080149cc 	.word	0x080149cc

0800a54c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	; 0x38
 800a550:	af04      	add	r7, sp, #16
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d107      	bne.n	800a56c <tcp_abandon+0x20>
 800a55c:	4b52      	ldr	r3, [pc, #328]	; (800a6a8 <tcp_abandon+0x15c>)
 800a55e:	f240 223d 	movw	r2, #573	; 0x23d
 800a562:	4952      	ldr	r1, [pc, #328]	; (800a6ac <tcp_abandon+0x160>)
 800a564:	4852      	ldr	r0, [pc, #328]	; (800a6b0 <tcp_abandon+0x164>)
 800a566:	f008 fd63 	bl	8013030 <iprintf>
 800a56a:	e099      	b.n	800a6a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	7d1b      	ldrb	r3, [r3, #20]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d106      	bne.n	800a582 <tcp_abandon+0x36>
 800a574:	4b4c      	ldr	r3, [pc, #304]	; (800a6a8 <tcp_abandon+0x15c>)
 800a576:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a57a:	494e      	ldr	r1, [pc, #312]	; (800a6b4 <tcp_abandon+0x168>)
 800a57c:	484c      	ldr	r0, [pc, #304]	; (800a6b0 <tcp_abandon+0x164>)
 800a57e:	f008 fd57 	bl	8013030 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	7d1b      	ldrb	r3, [r3, #20]
 800a586:	2b0a      	cmp	r3, #10
 800a588:	d107      	bne.n	800a59a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	484a      	ldr	r0, [pc, #296]	; (800a6b8 <tcp_abandon+0x16c>)
 800a58e:	f001 fa63 	bl	800ba58 <tcp_pcb_remove>
    tcp_free(pcb);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fdb0 	bl	800a0f8 <tcp_free>
 800a598:	e082      	b.n	800a6a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	7d1b      	ldrb	r3, [r3, #20]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d126      	bne.n	800a612 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	8adb      	ldrh	r3, [r3, #22]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d02e      	beq.n	800a62a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a5cc:	4b3b      	ldr	r3, [pc, #236]	; (800a6bc <tcp_abandon+0x170>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d105      	bne.n	800a5e2 <tcp_abandon+0x96>
 800a5d6:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <tcp_abandon+0x170>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	4a37      	ldr	r2, [pc, #220]	; (800a6bc <tcp_abandon+0x170>)
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	e013      	b.n	800a60a <tcp_abandon+0xbe>
 800a5e2:	4b36      	ldr	r3, [pc, #216]	; (800a6bc <tcp_abandon+0x170>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	61fb      	str	r3, [r7, #28]
 800a5e8:	e00c      	b.n	800a604 <tcp_abandon+0xb8>
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d104      	bne.n	800a5fe <tcp_abandon+0xb2>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	60da      	str	r2, [r3, #12]
 800a5fc:	e005      	b.n	800a60a <tcp_abandon+0xbe>
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	61fb      	str	r3, [r7, #28]
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1ef      	bne.n	800a5ea <tcp_abandon+0x9e>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	60da      	str	r2, [r3, #12]
 800a610:	e00b      	b.n	800a62a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8adb      	ldrh	r3, [r3, #22]
 800a61a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4828      	ldr	r0, [pc, #160]	; (800a6c0 <tcp_abandon+0x174>)
 800a620:	f001 fa1a 	bl	800ba58 <tcp_pcb_remove>
 800a624:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <tcp_abandon+0x178>)
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a636:	4618      	mov	r0, r3
 800a638:	f000 fed6 	bl	800b3e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fecd 	bl	800b3e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a652:	2b00      	cmp	r3, #0
 800a654:	d004      	beq.n	800a660 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 fec4 	bl	800b3e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00e      	beq.n	800a684 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3304      	adds	r3, #4
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	8b12      	ldrh	r2, [r2, #24]
 800a670:	9202      	str	r2, [sp, #8]
 800a672:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a674:	9201      	str	r2, [sp, #4]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	460b      	mov	r3, r1
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	69b9      	ldr	r1, [r7, #24]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f005 fbba 	bl	800fdf8 <tcp_rst>
    }
    last_state = pcb->state;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7d1b      	ldrb	r3, [r3, #20]
 800a688:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff fd34 	bl	800a0f8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <tcp_abandon+0x154>
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f06f 010c 	mvn.w	r1, #12
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	4798      	blx	r3
  }
}
 800a6a0:	3728      	adds	r7, #40	; 0x28
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	08014988 	.word	0x08014988
 800a6ac:	08014acc 	.word	0x08014acc
 800a6b0:	080149cc 	.word	0x080149cc
 800a6b4:	08014ae8 	.word	0x08014ae8
 800a6b8:	2000a918 	.word	0x2000a918
 800a6bc:	2000a90c 	.word	0x2000a90c
 800a6c0:	2000a914 	.word	0x2000a914
 800a6c4:	2000a91c 	.word	0x2000a91c

0800a6c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ff3a 	bl	800a54c <tcp_abandon>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a6f8:	4b3e      	ldr	r3, [pc, #248]	; (800a7f4 <tcp_bind+0x114>)
 800a6fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <tcp_bind+0x36>
 800a702:	4b3d      	ldr	r3, [pc, #244]	; (800a7f8 <tcp_bind+0x118>)
 800a704:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a708:	493c      	ldr	r1, [pc, #240]	; (800a7fc <tcp_bind+0x11c>)
 800a70a:	483d      	ldr	r0, [pc, #244]	; (800a800 <tcp_bind+0x120>)
 800a70c:	f008 fc90 	bl	8013030 <iprintf>
 800a710:	f06f 030f 	mvn.w	r3, #15
 800a714:	e06a      	b.n	800a7ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	7d1b      	ldrb	r3, [r3, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d009      	beq.n	800a732 <tcp_bind+0x52>
 800a71e:	4b36      	ldr	r3, [pc, #216]	; (800a7f8 <tcp_bind+0x118>)
 800a720:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a724:	4937      	ldr	r1, [pc, #220]	; (800a804 <tcp_bind+0x124>)
 800a726:	4836      	ldr	r0, [pc, #216]	; (800a800 <tcp_bind+0x120>)
 800a728:	f008 fc82 	bl	8013030 <iprintf>
 800a72c:	f06f 0305 	mvn.w	r3, #5
 800a730:	e05c      	b.n	800a7ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d109      	bne.n	800a74c <tcp_bind+0x6c>
    port = tcp_new_port();
 800a738:	f000 f9f0 	bl	800ab1c <tcp_new_port>
 800a73c:	4603      	mov	r3, r0
 800a73e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d135      	bne.n	800a7b2 <tcp_bind+0xd2>
      return ERR_BUF;
 800a746:	f06f 0301 	mvn.w	r3, #1
 800a74a:	e04f      	b.n	800a7ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
 800a750:	e02b      	b.n	800a7aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a752:	4a2d      	ldr	r2, [pc, #180]	; (800a808 <tcp_bind+0x128>)
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	e01e      	b.n	800a79e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	8adb      	ldrh	r3, [r3, #22]
 800a764:	88fa      	ldrh	r2, [r7, #6]
 800a766:	429a      	cmp	r2, r3
 800a768:	d116      	bne.n	800a798 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a76a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d010      	beq.n	800a792 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00c      	beq.n	800a792 <tcp_bind+0xb2>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d009      	beq.n	800a792 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d005      	beq.n	800a792 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a78e:	429a      	cmp	r2, r3
 800a790:	d102      	bne.n	800a798 <tcp_bind+0xb8>
              return ERR_USE;
 800a792:	f06f 0307 	mvn.w	r3, #7
 800a796:	e029      	b.n	800a7ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	61bb      	str	r3, [r7, #24]
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1dd      	bne.n	800a760 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	61fb      	str	r3, [r7, #28]
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	dbcf      	blt.n	800a752 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00c      	beq.n	800a7d2 <tcp_bind+0xf2>
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d008      	beq.n	800a7d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <tcp_bind+0xec>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	e000      	b.n	800a7ce <tcp_bind+0xee>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	88fa      	ldrh	r2, [r7, #6]
 800a7d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <tcp_bind+0x12c>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	60da      	str	r2, [r3, #12]
 800a7e0:	4a0a      	ldr	r2, [pc, #40]	; (800a80c <tcp_bind+0x12c>)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	f005 fcc9 	bl	801017c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3720      	adds	r7, #32
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	08016990 	.word	0x08016990
 800a7f8:	08014988 	.word	0x08014988
 800a7fc:	08014b1c 	.word	0x08014b1c
 800a800:	080149cc 	.word	0x080149cc
 800a804:	08014b34 	.word	0x08014b34
 800a808:	08016968 	.word	0x08016968
 800a80c:	2000a90c 	.word	0x2000a90c

0800a810 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d106      	bne.n	800a832 <tcp_accept_null+0x22>
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <tcp_accept_null+0x34>)
 800a826:	f240 320f 	movw	r2, #783	; 0x30f
 800a82a:	4907      	ldr	r1, [pc, #28]	; (800a848 <tcp_accept_null+0x38>)
 800a82c:	4807      	ldr	r0, [pc, #28]	; (800a84c <tcp_accept_null+0x3c>)
 800a82e:	f008 fbff 	bl	8013030 <iprintf>

  tcp_abort(pcb);
 800a832:	68b8      	ldr	r0, [r7, #8]
 800a834:	f7ff ff48 	bl	800a6c8 <tcp_abort>

  return ERR_ABRT;
 800a838:	f06f 030c 	mvn.w	r3, #12
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	08014988 	.word	0x08014988
 800a848:	08014b5c 	.word	0x08014b5c
 800a84c:	080149cc 	.word	0x080149cc

0800a850 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	2200      	movs	r2, #0
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f806 	bl	800a874 <tcp_listen_with_backlog_and_err>
 800a868:	4603      	mov	r3, r0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	460b      	mov	r3, r1
 800a87e:	607a      	str	r2, [r7, #4]
 800a880:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d109      	bne.n	800a8a0 <tcp_listen_with_backlog_and_err+0x2c>
 800a88c:	4b47      	ldr	r3, [pc, #284]	; (800a9ac <tcp_listen_with_backlog_and_err+0x138>)
 800a88e:	f240 3259 	movw	r2, #857	; 0x359
 800a892:	4947      	ldr	r1, [pc, #284]	; (800a9b0 <tcp_listen_with_backlog_and_err+0x13c>)
 800a894:	4847      	ldr	r0, [pc, #284]	; (800a9b4 <tcp_listen_with_backlog_and_err+0x140>)
 800a896:	f008 fbcb 	bl	8013030 <iprintf>
 800a89a:	23f0      	movs	r3, #240	; 0xf0
 800a89c:	76fb      	strb	r3, [r7, #27]
 800a89e:	e079      	b.n	800a994 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	7d1b      	ldrb	r3, [r3, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <tcp_listen_with_backlog_and_err+0x48>
 800a8a8:	4b40      	ldr	r3, [pc, #256]	; (800a9ac <tcp_listen_with_backlog_and_err+0x138>)
 800a8aa:	f240 325a 	movw	r2, #858	; 0x35a
 800a8ae:	4942      	ldr	r1, [pc, #264]	; (800a9b8 <tcp_listen_with_backlog_and_err+0x144>)
 800a8b0:	4840      	ldr	r0, [pc, #256]	; (800a9b4 <tcp_listen_with_backlog_and_err+0x140>)
 800a8b2:	f008 fbbd 	bl	8013030 <iprintf>
 800a8b6:	23f1      	movs	r3, #241	; 0xf1
 800a8b8:	76fb      	strb	r3, [r7, #27]
 800a8ba:	e06b      	b.n	800a994 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	7d1b      	ldrb	r3, [r3, #20]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d104      	bne.n	800a8ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a8c8:	23f7      	movs	r3, #247	; 0xf7
 800a8ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a8cc:	e062      	b.n	800a994 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a8ce:	2002      	movs	r0, #2
 800a8d0:	f7fe fa7c 	bl	8008dcc <memp_malloc>
 800a8d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a8dc:	23ff      	movs	r3, #255	; 0xff
 800a8de:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a8e0:	e058      	b.n	800a994 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8ada      	ldrh	r2, [r3, #22]
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	7d5a      	ldrb	r2, [r3, #21]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	7a5a      	ldrb	r2, [r3, #9]
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	2200      	movs	r2, #0
 800a90c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	7ada      	ldrb	r2, [r3, #11]
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	7a9a      	ldrb	r2, [r3, #10]
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8adb      	ldrh	r3, [r3, #22]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d021      	beq.n	800a972 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a92e:	4b23      	ldr	r3, [pc, #140]	; (800a9bc <tcp_listen_with_backlog_and_err+0x148>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	429a      	cmp	r2, r3
 800a936:	d105      	bne.n	800a944 <tcp_listen_with_backlog_and_err+0xd0>
 800a938:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <tcp_listen_with_backlog_and_err+0x148>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	4a1f      	ldr	r2, [pc, #124]	; (800a9bc <tcp_listen_with_backlog_and_err+0x148>)
 800a940:	6013      	str	r3, [r2, #0]
 800a942:	e013      	b.n	800a96c <tcp_listen_with_backlog_and_err+0xf8>
 800a944:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <tcp_listen_with_backlog_and_err+0x148>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	e00c      	b.n	800a966 <tcp_listen_with_backlog_and_err+0xf2>
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	429a      	cmp	r2, r3
 800a954:	d104      	bne.n	800a960 <tcp_listen_with_backlog_and_err+0xec>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	60da      	str	r2, [r3, #12]
 800a95e:	e005      	b.n	800a96c <tcp_listen_with_backlog_and_err+0xf8>
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1ef      	bne.n	800a94c <tcp_listen_with_backlog_and_err+0xd8>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7ff fbc0 	bl	800a0f8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	4a11      	ldr	r2, [pc, #68]	; (800a9c0 <tcp_listen_with_backlog_and_err+0x14c>)
 800a97c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a97e:	4b11      	ldr	r3, [pc, #68]	; (800a9c4 <tcp_listen_with_backlog_and_err+0x150>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	60da      	str	r2, [r3, #12]
 800a986:	4a0f      	ldr	r2, [pc, #60]	; (800a9c4 <tcp_listen_with_backlog_and_err+0x150>)
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	f005 fbf6 	bl	801017c <tcp_timer_needed>
  res = ERR_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	7efa      	ldrb	r2, [r7, #27]
 800a99e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3720      	adds	r7, #32
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	08014988 	.word	0x08014988
 800a9b0:	08014b7c 	.word	0x08014b7c
 800a9b4:	080149cc 	.word	0x080149cc
 800a9b8:	08014bac 	.word	0x08014bac
 800a9bc:	2000a90c 	.word	0x2000a90c
 800a9c0:	0800a811 	.word	0x0800a811
 800a9c4:	2000a910 	.word	0x2000a910

0800a9c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d106      	bne.n	800a9e4 <tcp_update_rcv_ann_wnd+0x1c>
 800a9d6:	4b25      	ldr	r3, [pc, #148]	; (800aa6c <tcp_update_rcv_ann_wnd+0xa4>)
 800a9d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a9dc:	4924      	ldr	r1, [pc, #144]	; (800aa70 <tcp_update_rcv_ann_wnd+0xa8>)
 800a9de:	4825      	ldr	r0, [pc, #148]	; (800aa74 <tcp_update_rcv_ann_wnd+0xac>)
 800a9e0:	f008 fb26 	bl	8013030 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a9ec:	4413      	add	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a9f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a9fc:	bf28      	it	cs
 800a9fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800aa02:	b292      	uxth	r2, r2
 800aa04:	4413      	add	r3, r2
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	db08      	blt.n	800aa20 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	e020      	b.n	800aa62 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dd03      	ble.n	800aa36 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa34:	e014      	b.n	800aa60 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	1ad3      	subs	r3, r2, r3
 800aa40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa48:	d306      	bcc.n	800aa58 <tcp_update_rcv_ann_wnd+0x90>
 800aa4a:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <tcp_update_rcv_ann_wnd+0xa4>)
 800aa4c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800aa50:	4909      	ldr	r1, [pc, #36]	; (800aa78 <tcp_update_rcv_ann_wnd+0xb0>)
 800aa52:	4808      	ldr	r0, [pc, #32]	; (800aa74 <tcp_update_rcv_ann_wnd+0xac>)
 800aa54:	f008 faec 	bl	8013030 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800aa60:	2300      	movs	r3, #0
  }
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	08014988 	.word	0x08014988
 800aa70:	08014be4 	.word	0x08014be4
 800aa74:	080149cc 	.word	0x080149cc
 800aa78:	08014c08 	.word	0x08014c08

0800aa7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d107      	bne.n	800aa9e <tcp_recved+0x22>
 800aa8e:	4b1f      	ldr	r3, [pc, #124]	; (800ab0c <tcp_recved+0x90>)
 800aa90:	f240 32cf 	movw	r2, #975	; 0x3cf
 800aa94:	491e      	ldr	r1, [pc, #120]	; (800ab10 <tcp_recved+0x94>)
 800aa96:	481f      	ldr	r0, [pc, #124]	; (800ab14 <tcp_recved+0x98>)
 800aa98:	f008 faca 	bl	8013030 <iprintf>
 800aa9c:	e032      	b.n	800ab04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	7d1b      	ldrb	r3, [r3, #20]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d106      	bne.n	800aab4 <tcp_recved+0x38>
 800aaa6:	4b19      	ldr	r3, [pc, #100]	; (800ab0c <tcp_recved+0x90>)
 800aaa8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800aaac:	491a      	ldr	r1, [pc, #104]	; (800ab18 <tcp_recved+0x9c>)
 800aaae:	4819      	ldr	r0, [pc, #100]	; (800ab14 <tcp_recved+0x98>)
 800aab0:	f008 fabe 	bl	8013030 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aab8:	887b      	ldrh	r3, [r7, #2]
 800aaba:	4413      	add	r3, r2
 800aabc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aabe:	89fb      	ldrh	r3, [r7, #14]
 800aac0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aac4:	d804      	bhi.n	800aad0 <tcp_recved+0x54>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaca:	89fa      	ldrh	r2, [r7, #14]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d204      	bcs.n	800aada <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aad6:	851a      	strh	r2, [r3, #40]	; 0x28
 800aad8:	e002      	b.n	800aae0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	89fa      	ldrh	r2, [r7, #14]
 800aade:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff ff71 	bl	800a9c8 <tcp_update_rcv_ann_wnd>
 800aae6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aaee:	d309      	bcc.n	800ab04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	8b5b      	ldrh	r3, [r3, #26]
 800aaf4:	f043 0302 	orr.w	r3, r3, #2
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f004 fbc6 	bl	800f290 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	08014988 	.word	0x08014988
 800ab10:	08014c24 	.word	0x08014c24
 800ab14:	080149cc 	.word	0x080149cc
 800ab18:	08014c3c 	.word	0x08014c3c

0800ab1c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b083      	sub	sp, #12
 800ab20:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ab26:	4b1e      	ldr	r3, [pc, #120]	; (800aba0 <tcp_new_port+0x84>)
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <tcp_new_port+0x84>)
 800ab30:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ab32:	4b1b      	ldr	r3, [pc, #108]	; (800aba0 <tcp_new_port+0x84>)
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d103      	bne.n	800ab46 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ab3e:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <tcp_new_port+0x84>)
 800ab40:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ab44:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ab46:	2300      	movs	r3, #0
 800ab48:	71fb      	strb	r3, [r7, #7]
 800ab4a:	e01e      	b.n	800ab8a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	4a15      	ldr	r2, [pc, #84]	; (800aba4 <tcp_new_port+0x88>)
 800ab50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	e011      	b.n	800ab7e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	8ada      	ldrh	r2, [r3, #22]
 800ab5e:	4b10      	ldr	r3, [pc, #64]	; (800aba0 <tcp_new_port+0x84>)
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d108      	bne.n	800ab78 <tcp_new_port+0x5c>
        n++;
 800ab66:	88bb      	ldrh	r3, [r7, #4]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ab6c:	88bb      	ldrh	r3, [r7, #4]
 800ab6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab72:	d3d8      	bcc.n	800ab26 <tcp_new_port+0xa>
          return 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	e00d      	b.n	800ab94 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1ea      	bne.n	800ab5a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	3301      	adds	r3, #1
 800ab88:	71fb      	strb	r3, [r7, #7]
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d9dd      	bls.n	800ab4c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ab90:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <tcp_new_port+0x84>)
 800ab92:	881b      	ldrh	r3, [r3, #0]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	20000024 	.word	0x20000024
 800aba4:	08016968 	.word	0x08016968

0800aba8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800aba8:	b5b0      	push	{r4, r5, r7, lr}
 800abaa:	b090      	sub	sp, #64	; 0x40
 800abac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800abb4:	4b94      	ldr	r3, [pc, #592]	; (800ae08 <tcp_slowtmr+0x260>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3301      	adds	r3, #1
 800abba:	4a93      	ldr	r2, [pc, #588]	; (800ae08 <tcp_slowtmr+0x260>)
 800abbc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800abbe:	4b93      	ldr	r3, [pc, #588]	; (800ae0c <tcp_slowtmr+0x264>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	3301      	adds	r3, #1
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	4b91      	ldr	r3, [pc, #580]	; (800ae0c <tcp_slowtmr+0x264>)
 800abc8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800abce:	4b90      	ldr	r3, [pc, #576]	; (800ae10 <tcp_slowtmr+0x268>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800abd4:	e29f      	b.n	800b116 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	7d1b      	ldrb	r3, [r3, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d106      	bne.n	800abec <tcp_slowtmr+0x44>
 800abde:	4b8d      	ldr	r3, [pc, #564]	; (800ae14 <tcp_slowtmr+0x26c>)
 800abe0:	f240 42be 	movw	r2, #1214	; 0x4be
 800abe4:	498c      	ldr	r1, [pc, #560]	; (800ae18 <tcp_slowtmr+0x270>)
 800abe6:	488d      	ldr	r0, [pc, #564]	; (800ae1c <tcp_slowtmr+0x274>)
 800abe8:	f008 fa22 	bl	8013030 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	7d1b      	ldrb	r3, [r3, #20]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d106      	bne.n	800ac02 <tcp_slowtmr+0x5a>
 800abf4:	4b87      	ldr	r3, [pc, #540]	; (800ae14 <tcp_slowtmr+0x26c>)
 800abf6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800abfa:	4989      	ldr	r1, [pc, #548]	; (800ae20 <tcp_slowtmr+0x278>)
 800abfc:	4887      	ldr	r0, [pc, #540]	; (800ae1c <tcp_slowtmr+0x274>)
 800abfe:	f008 fa17 	bl	8013030 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	7d1b      	ldrb	r3, [r3, #20]
 800ac06:	2b0a      	cmp	r3, #10
 800ac08:	d106      	bne.n	800ac18 <tcp_slowtmr+0x70>
 800ac0a:	4b82      	ldr	r3, [pc, #520]	; (800ae14 <tcp_slowtmr+0x26c>)
 800ac0c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ac10:	4984      	ldr	r1, [pc, #528]	; (800ae24 <tcp_slowtmr+0x27c>)
 800ac12:	4882      	ldr	r0, [pc, #520]	; (800ae1c <tcp_slowtmr+0x274>)
 800ac14:	f008 fa0c 	bl	8013030 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	7f9a      	ldrb	r2, [r3, #30]
 800ac1c:	4b7b      	ldr	r3, [pc, #492]	; (800ae0c <tcp_slowtmr+0x264>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d105      	bne.n	800ac30 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ac2e:	e272      	b.n	800b116 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ac30:	4b76      	ldr	r3, [pc, #472]	; (800ae0c <tcp_slowtmr+0x264>)
 800ac32:	781a      	ldrb	r2, [r3, #0]
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac46:	7d1b      	ldrb	r3, [r3, #20]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d10a      	bne.n	800ac62 <tcp_slowtmr+0xba>
 800ac4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	d905      	bls.n	800ac62 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ac56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac60:	e11e      	b.n	800aea0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac68:	2b0b      	cmp	r3, #11
 800ac6a:	d905      	bls.n	800ac78 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ac6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac70:	3301      	adds	r3, #1
 800ac72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac76:	e113      	b.n	800aea0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d075      	beq.n	800ad6e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d006      	beq.n	800ac98 <tcp_slowtmr+0xf0>
 800ac8a:	4b62      	ldr	r3, [pc, #392]	; (800ae14 <tcp_slowtmr+0x26c>)
 800ac8c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ac90:	4965      	ldr	r1, [pc, #404]	; (800ae28 <tcp_slowtmr+0x280>)
 800ac92:	4862      	ldr	r0, [pc, #392]	; (800ae1c <tcp_slowtmr+0x274>)
 800ac94:	f008 f9cc 	bl	8013030 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d106      	bne.n	800acae <tcp_slowtmr+0x106>
 800aca0:	4b5c      	ldr	r3, [pc, #368]	; (800ae14 <tcp_slowtmr+0x26c>)
 800aca2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800aca6:	4961      	ldr	r1, [pc, #388]	; (800ae2c <tcp_slowtmr+0x284>)
 800aca8:	485c      	ldr	r0, [pc, #368]	; (800ae1c <tcp_slowtmr+0x274>)
 800acaa:	f008 f9c1 	bl	8013030 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800acb4:	2b0b      	cmp	r3, #11
 800acb6:	d905      	bls.n	800acc4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800acb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acbc:	3301      	adds	r3, #1
 800acbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acc2:	e0ed      	b.n	800aea0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800acca:	3b01      	subs	r3, #1
 800accc:	4a58      	ldr	r2, [pc, #352]	; (800ae30 <tcp_slowtmr+0x288>)
 800acce:	5cd3      	ldrb	r3, [r2, r3]
 800acd0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800acd8:	7c7a      	ldrb	r2, [r7, #17]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d907      	bls.n	800acee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ace4:	3301      	adds	r3, #1
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800acf4:	7c7a      	ldrb	r2, [r7, #17]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	f200 80d2 	bhi.w	800aea0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800acfc:	2301      	movs	r3, #1
 800acfe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d108      	bne.n	800ad1c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ad0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad0c:	f005 f968 	bl	800ffe0 <tcp_zero_window_probe>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d014      	beq.n	800ad40 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ad16:	2300      	movs	r3, #0
 800ad18:	623b      	str	r3, [r7, #32]
 800ad1a:	e011      	b.n	800ad40 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad22:	4619      	mov	r1, r3
 800ad24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad26:	f004 f82d 	bl	800ed84 <tcp_split_unsent_seg>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d107      	bne.n	800ad40 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ad30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad32:	f004 faad 	bl	800f290 <tcp_output>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	f000 80ac 	beq.w	800aea0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad56:	2b06      	cmp	r3, #6
 800ad58:	f200 80a2 	bhi.w	800aea0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad62:	3301      	adds	r3, #1
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ad6c:	e098      	b.n	800aea0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	db0f      	blt.n	800ad98 <tcp_slowtmr+0x1f0>
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d008      	beq.n	800ad98 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	3301      	adds	r3, #1
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	b21a      	sxth	r2, r3
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ad98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ada4:	429a      	cmp	r2, r3
 800ada6:	db7b      	blt.n	800aea0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ada8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adaa:	f004 fd65 	bl	800f878 <tcp_rexmit_rto_prepare>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <tcp_slowtmr+0x21c>
 800adb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d171      	bne.n	800aea0 <tcp_slowtmr+0x2f8>
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d06d      	beq.n	800aea0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	7d1b      	ldrb	r3, [r3, #20]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d03a      	beq.n	800ae42 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800add2:	2b0c      	cmp	r3, #12
 800add4:	bf28      	it	cs
 800add6:	230c      	movcs	r3, #12
 800add8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ade0:	10db      	asrs	r3, r3, #3
 800ade2:	b21b      	sxth	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800adec:	4413      	add	r3, r2
 800adee:	7efa      	ldrb	r2, [r7, #27]
 800adf0:	4910      	ldr	r1, [pc, #64]	; (800ae34 <tcp_slowtmr+0x28c>)
 800adf2:	5c8a      	ldrb	r2, [r1, r2]
 800adf4:	4093      	lsls	r3, r2
 800adf6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800adfe:	4293      	cmp	r3, r2
 800ae00:	dc1a      	bgt.n	800ae38 <tcp_slowtmr+0x290>
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	b21a      	sxth	r2, r3
 800ae06:	e019      	b.n	800ae3c <tcp_slowtmr+0x294>
 800ae08:	2000a908 	.word	0x2000a908
 800ae0c:	2000a91e 	.word	0x2000a91e
 800ae10:	2000a914 	.word	0x2000a914
 800ae14:	08014988 	.word	0x08014988
 800ae18:	08014ccc 	.word	0x08014ccc
 800ae1c:	080149cc 	.word	0x080149cc
 800ae20:	08014cf8 	.word	0x08014cf8
 800ae24:	08014d24 	.word	0x08014d24
 800ae28:	08014d54 	.word	0x08014d54
 800ae2c:	08014d88 	.word	0x08014d88
 800ae30:	08016960 	.word	0x08016960
 800ae34:	08016950 	.word	0x08016950
 800ae38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	2200      	movs	r2, #0
 800ae46:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae54:	4293      	cmp	r3, r2
 800ae56:	bf28      	it	cs
 800ae58:	4613      	movcs	r3, r2
 800ae5a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ae5c:	8a7b      	ldrh	r3, [r7, #18]
 800ae5e:	085b      	lsrs	r3, r3, #1
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d206      	bcs.n	800ae88 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae7e:	005b      	lsls	r3, r3, #1
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ae9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae9c:	f004 fd5c 	bl	800f958 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea2:	7d1b      	ldrb	r3, [r3, #20]
 800aea4:	2b06      	cmp	r3, #6
 800aea6:	d111      	bne.n	800aecc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	8b5b      	ldrh	r3, [r3, #26]
 800aeac:	f003 0310 	and.w	r3, r3, #16
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aeb4:	4b9d      	ldr	r3, [pc, #628]	; (800b12c <tcp_slowtmr+0x584>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	2b28      	cmp	r3, #40	; 0x28
 800aec0:	d904      	bls.n	800aecc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800aec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aec6:	3301      	adds	r3, #1
 800aec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	7a5b      	ldrb	r3, [r3, #9]
 800aed0:	f003 0308 	and.w	r3, r3, #8
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d04c      	beq.n	800af72 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aedc:	2b04      	cmp	r3, #4
 800aede:	d003      	beq.n	800aee8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800aee4:	2b07      	cmp	r3, #7
 800aee6:	d144      	bne.n	800af72 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aee8:	4b90      	ldr	r3, [pc, #576]	; (800b12c <tcp_slowtmr+0x584>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800aef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aef8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800aefc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800af00:	498b      	ldr	r1, [pc, #556]	; (800b130 <tcp_slowtmr+0x588>)
 800af02:	fba1 1303 	umull	r1, r3, r1, r3
 800af06:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af08:	429a      	cmp	r2, r3
 800af0a:	d90a      	bls.n	800af22 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800af0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af10:	3301      	adds	r3, #1
 800af12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800af16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af1a:	3301      	adds	r3, #1
 800af1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800af20:	e027      	b.n	800af72 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af22:	4b82      	ldr	r3, [pc, #520]	; (800b12c <tcp_slowtmr+0x584>)
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800af32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800af38:	4618      	mov	r0, r3
 800af3a:	4b7e      	ldr	r3, [pc, #504]	; (800b134 <tcp_slowtmr+0x58c>)
 800af3c:	fb00 f303 	mul.w	r3, r0, r3
 800af40:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800af42:	497b      	ldr	r1, [pc, #492]	; (800b130 <tcp_slowtmr+0x588>)
 800af44:	fba1 1303 	umull	r1, r3, r1, r3
 800af48:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d911      	bls.n	800af72 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800af4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af50:	f005 f806 	bl	800ff60 <tcp_keepalive>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800af5a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d107      	bne.n	800af72 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800af68:	3301      	adds	r3, #1
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af76:	2b00      	cmp	r3, #0
 800af78:	d011      	beq.n	800af9e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800af7a:	4b6c      	ldr	r3, [pc, #432]	; (800b12c <tcp_slowtmr+0x584>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	1ad2      	subs	r2, r2, r3
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800af8a:	4619      	mov	r1, r3
 800af8c:	460b      	mov	r3, r1
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	440b      	add	r3, r1
 800af92:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800af94:	429a      	cmp	r2, r3
 800af96:	d302      	bcc.n	800af9e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800af98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af9a:	f000 fec1 	bl	800bd20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800af9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d10b      	bne.n	800afbe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800afa6:	4b61      	ldr	r3, [pc, #388]	; (800b12c <tcp_slowtmr+0x584>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	2b28      	cmp	r3, #40	; 0x28
 800afb2:	d904      	bls.n	800afbe <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800afb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afb8:	3301      	adds	r3, #1
 800afba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800afbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc0:	7d1b      	ldrb	r3, [r3, #20]
 800afc2:	2b09      	cmp	r3, #9
 800afc4:	d10b      	bne.n	800afde <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800afc6:	4b59      	ldr	r3, [pc, #356]	; (800b12c <tcp_slowtmr+0x584>)
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	2bf0      	cmp	r3, #240	; 0xf0
 800afd2:	d904      	bls.n	800afde <tcp_slowtmr+0x436>
        ++pcb_remove;
 800afd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afd8:	3301      	adds	r3, #1
 800afda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800afde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d060      	beq.n	800b0a8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800afee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aff0:	f000 fce2 	bl	800b9b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d010      	beq.n	800b01c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800affa:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <tcp_slowtmr+0x590>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b000:	429a      	cmp	r2, r3
 800b002:	d106      	bne.n	800b012 <tcp_slowtmr+0x46a>
 800b004:	4b4d      	ldr	r3, [pc, #308]	; (800b13c <tcp_slowtmr+0x594>)
 800b006:	f240 526d 	movw	r2, #1389	; 0x56d
 800b00a:	494d      	ldr	r1, [pc, #308]	; (800b140 <tcp_slowtmr+0x598>)
 800b00c:	484d      	ldr	r0, [pc, #308]	; (800b144 <tcp_slowtmr+0x59c>)
 800b00e:	f008 f80f 	bl	8013030 <iprintf>
        prev->next = pcb->next;
 800b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b014:	68da      	ldr	r2, [r3, #12]
 800b016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	e00f      	b.n	800b03c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b01c:	4b46      	ldr	r3, [pc, #280]	; (800b138 <tcp_slowtmr+0x590>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b022:	429a      	cmp	r2, r3
 800b024:	d006      	beq.n	800b034 <tcp_slowtmr+0x48c>
 800b026:	4b45      	ldr	r3, [pc, #276]	; (800b13c <tcp_slowtmr+0x594>)
 800b028:	f240 5271 	movw	r2, #1393	; 0x571
 800b02c:	4946      	ldr	r1, [pc, #280]	; (800b148 <tcp_slowtmr+0x5a0>)
 800b02e:	4845      	ldr	r0, [pc, #276]	; (800b144 <tcp_slowtmr+0x59c>)
 800b030:	f007 fffe 	bl	8013030 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	4a3f      	ldr	r2, [pc, #252]	; (800b138 <tcp_slowtmr+0x590>)
 800b03a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b03c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b040:	2b00      	cmp	r3, #0
 800b042:	d013      	beq.n	800b06c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b046:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b04c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	3304      	adds	r3, #4
 800b052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b054:	8ad2      	ldrh	r2, [r2, #22]
 800b056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b058:	8b09      	ldrh	r1, [r1, #24]
 800b05a:	9102      	str	r1, [sp, #8]
 800b05c:	9201      	str	r2, [sp, #4]
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	462b      	mov	r3, r5
 800b062:	4622      	mov	r2, r4
 800b064:	4601      	mov	r1, r0
 800b066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b068:	f004 fec6 	bl	800fdf8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	7d1b      	ldrb	r3, [r3, #20]
 800b076:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b082:	6838      	ldr	r0, [r7, #0]
 800b084:	f7ff f838 	bl	800a0f8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b088:	4b30      	ldr	r3, [pc, #192]	; (800b14c <tcp_slowtmr+0x5a4>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <tcp_slowtmr+0x4f6>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f06f 010c 	mvn.w	r1, #12
 800b09a:	68b8      	ldr	r0, [r7, #8]
 800b09c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b09e:	4b2b      	ldr	r3, [pc, #172]	; (800b14c <tcp_slowtmr+0x5a4>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d037      	beq.n	800b116 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b0a6:	e590      	b.n	800abca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	7f1b      	ldrb	r3, [r3, #28]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	7f1a      	ldrb	r2, [r3, #28]
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	7f5b      	ldrb	r3, [r3, #29]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d325      	bcc.n	800b116 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b0d0:	4b1e      	ldr	r3, [pc, #120]	; (800b14c <tcp_slowtmr+0x5a4>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <tcp_slowtmr+0x550>
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0e8:	6912      	ldr	r2, [r2, #16]
 800b0ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4798      	blx	r3
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b0f6:	e002      	b.n	800b0fe <tcp_slowtmr+0x556>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b0fe:	4b13      	ldr	r3, [pc, #76]	; (800b14c <tcp_slowtmr+0x5a4>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d000      	beq.n	800b108 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b106:	e560      	b.n	800abca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b108:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b112:	f004 f8bd 	bl	800f290 <tcp_output>
  while (pcb != NULL) {
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f47f ad5c 	bne.w	800abd6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b11e:	2300      	movs	r3, #0
 800b120:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b122:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <tcp_slowtmr+0x5a8>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b128:	e067      	b.n	800b1fa <tcp_slowtmr+0x652>
 800b12a:	bf00      	nop
 800b12c:	2000a908 	.word	0x2000a908
 800b130:	10624dd3 	.word	0x10624dd3
 800b134:	000124f8 	.word	0x000124f8
 800b138:	2000a914 	.word	0x2000a914
 800b13c:	08014988 	.word	0x08014988
 800b140:	08014dc0 	.word	0x08014dc0
 800b144:	080149cc 	.word	0x080149cc
 800b148:	08014dec 	.word	0x08014dec
 800b14c:	2000a91c 	.word	0x2000a91c
 800b150:	2000a918 	.word	0x2000a918
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b156:	7d1b      	ldrb	r3, [r3, #20]
 800b158:	2b0a      	cmp	r3, #10
 800b15a:	d006      	beq.n	800b16a <tcp_slowtmr+0x5c2>
 800b15c:	4b2b      	ldr	r3, [pc, #172]	; (800b20c <tcp_slowtmr+0x664>)
 800b15e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b162:	492b      	ldr	r1, [pc, #172]	; (800b210 <tcp_slowtmr+0x668>)
 800b164:	482b      	ldr	r0, [pc, #172]	; (800b214 <tcp_slowtmr+0x66c>)
 800b166:	f007 ff63 	bl	8013030 <iprintf>
    pcb_remove = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b170:	4b29      	ldr	r3, [pc, #164]	; (800b218 <tcp_slowtmr+0x670>)
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	2bf0      	cmp	r3, #240	; 0xf0
 800b17c:	d904      	bls.n	800b188 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b17e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b182:	3301      	adds	r3, #1
 800b184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d02f      	beq.n	800b1f0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b192:	f000 fc11 	bl	800b9b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d010      	beq.n	800b1be <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b19c:	4b1f      	ldr	r3, [pc, #124]	; (800b21c <tcp_slowtmr+0x674>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d106      	bne.n	800b1b4 <tcp_slowtmr+0x60c>
 800b1a6:	4b19      	ldr	r3, [pc, #100]	; (800b20c <tcp_slowtmr+0x664>)
 800b1a8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b1ac:	491c      	ldr	r1, [pc, #112]	; (800b220 <tcp_slowtmr+0x678>)
 800b1ae:	4819      	ldr	r0, [pc, #100]	; (800b214 <tcp_slowtmr+0x66c>)
 800b1b0:	f007 ff3e 	bl	8013030 <iprintf>
        prev->next = pcb->next;
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	68da      	ldr	r2, [r3, #12]
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	60da      	str	r2, [r3, #12]
 800b1bc:	e00f      	b.n	800b1de <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b1be:	4b17      	ldr	r3, [pc, #92]	; (800b21c <tcp_slowtmr+0x674>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d006      	beq.n	800b1d6 <tcp_slowtmr+0x62e>
 800b1c8:	4b10      	ldr	r3, [pc, #64]	; (800b20c <tcp_slowtmr+0x664>)
 800b1ca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b1ce:	4915      	ldr	r1, [pc, #84]	; (800b224 <tcp_slowtmr+0x67c>)
 800b1d0:	4810      	ldr	r0, [pc, #64]	; (800b214 <tcp_slowtmr+0x66c>)
 800b1d2:	f007 ff2d 	bl	8013030 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	4a10      	ldr	r2, [pc, #64]	; (800b21c <tcp_slowtmr+0x674>)
 800b1dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b1e8:	69f8      	ldr	r0, [r7, #28]
 800b1ea:	f7fe ff85 	bl	800a0f8 <tcp_free>
 800b1ee:	e004      	b.n	800b1fa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1a9      	bne.n	800b154 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	3730      	adds	r7, #48	; 0x30
 800b206:	46bd      	mov	sp, r7
 800b208:	bdb0      	pop	{r4, r5, r7, pc}
 800b20a:	bf00      	nop
 800b20c:	08014988 	.word	0x08014988
 800b210:	08014e18 	.word	0x08014e18
 800b214:	080149cc 	.word	0x080149cc
 800b218:	2000a908 	.word	0x2000a908
 800b21c:	2000a918 	.word	0x2000a918
 800b220:	08014e48 	.word	0x08014e48
 800b224:	08014e70 	.word	0x08014e70

0800b228 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b22e:	4b2d      	ldr	r3, [pc, #180]	; (800b2e4 <tcp_fasttmr+0xbc>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	b2da      	uxtb	r2, r3
 800b236:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <tcp_fasttmr+0xbc>)
 800b238:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b23a:	4b2b      	ldr	r3, [pc, #172]	; (800b2e8 <tcp_fasttmr+0xc0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b240:	e048      	b.n	800b2d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	7f9a      	ldrb	r2, [r3, #30]
 800b246:	4b27      	ldr	r3, [pc, #156]	; (800b2e4 <tcp_fasttmr+0xbc>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d03f      	beq.n	800b2ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b24e:	4b25      	ldr	r3, [pc, #148]	; (800b2e4 <tcp_fasttmr+0xbc>)
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8b5b      	ldrh	r3, [r3, #26]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d010      	beq.n	800b284 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	8b5b      	ldrh	r3, [r3, #26]
 800b266:	f043 0302 	orr.w	r3, r3, #2
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f004 f80d 	bl	800f290 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	8b5b      	ldrh	r3, [r3, #26]
 800b27a:	f023 0303 	bic.w	r3, r3, #3
 800b27e:	b29a      	uxth	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	8b5b      	ldrh	r3, [r3, #26]
 800b288:	f003 0308 	and.w	r3, r3, #8
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d009      	beq.n	800b2a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	8b5b      	ldrh	r3, [r3, #26]
 800b294:	f023 0308 	bic.w	r3, r3, #8
 800b298:	b29a      	uxth	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff f8be 	bl	800a420 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00a      	beq.n	800b2c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b2b2:	4b0e      	ldr	r3, [pc, #56]	; (800b2ec <tcp_fasttmr+0xc4>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f819 	bl	800b2f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <tcp_fasttmr+0xc4>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d000      	beq.n	800b2c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b2c6:	e7b8      	b.n	800b23a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	607b      	str	r3, [r7, #4]
 800b2cc:	e002      	b.n	800b2d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1b3      	bne.n	800b242 <tcp_fasttmr+0x1a>
    }
  }
}
 800b2da:	bf00      	nop
 800b2dc:	bf00      	nop
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	2000a91e 	.word	0x2000a91e
 800b2e8:	2000a914 	.word	0x2000a914
 800b2ec:	2000a91c 	.word	0x2000a91c

0800b2f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d109      	bne.n	800b312 <tcp_process_refused_data+0x22>
 800b2fe:	4b37      	ldr	r3, [pc, #220]	; (800b3dc <tcp_process_refused_data+0xec>)
 800b300:	f240 6209 	movw	r2, #1545	; 0x609
 800b304:	4936      	ldr	r1, [pc, #216]	; (800b3e0 <tcp_process_refused_data+0xf0>)
 800b306:	4837      	ldr	r0, [pc, #220]	; (800b3e4 <tcp_process_refused_data+0xf4>)
 800b308:	f007 fe92 	bl	8013030 <iprintf>
 800b30c:	f06f 030f 	mvn.w	r3, #15
 800b310:	e060      	b.n	800b3d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b316:	7b5b      	ldrb	r3, [r3, #13]
 800b318:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b31e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00b      	beq.n	800b348 <tcp_process_refused_data+0x58>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6918      	ldr	r0, [r3, #16]
 800b33a:	2300      	movs	r3, #0
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	6879      	ldr	r1, [r7, #4]
 800b340:	47a0      	blx	r4
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]
 800b346:	e007      	b.n	800b358 <tcp_process_refused_data+0x68>
 800b348:	2300      	movs	r3, #0
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	6879      	ldr	r1, [r7, #4]
 800b34e:	2000      	movs	r0, #0
 800b350:	f000 f8c2 	bl	800b4d8 <tcp_recv_null>
 800b354:	4603      	mov	r3, r0
 800b356:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d12a      	bne.n	800b3b6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b360:	7bbb      	ldrb	r3, [r7, #14]
 800b362:	f003 0320 	and.w	r3, r3, #32
 800b366:	2b00      	cmp	r3, #0
 800b368:	d033      	beq.n	800b3d2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b36e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b372:	d005      	beq.n	800b380 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b378:	3301      	adds	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00b      	beq.n	800b3a2 <tcp_process_refused_data+0xb2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6918      	ldr	r0, [r3, #16]
 800b394:	2300      	movs	r3, #0
 800b396:	2200      	movs	r2, #0
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	47a0      	blx	r4
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
 800b3a0:	e001      	b.n	800b3a6 <tcp_process_refused_data+0xb6>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3aa:	f113 0f0d 	cmn.w	r3, #13
 800b3ae:	d110      	bne.n	800b3d2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b3b0:	f06f 030c 	mvn.w	r3, #12
 800b3b4:	e00e      	b.n	800b3d4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ba:	f113 0f0d 	cmn.w	r3, #13
 800b3be:	d102      	bne.n	800b3c6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b3c0:	f06f 030c 	mvn.w	r3, #12
 800b3c4:	e006      	b.n	800b3d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b3cc:	f06f 0304 	mvn.w	r3, #4
 800b3d0:	e000      	b.n	800b3d4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd90      	pop	{r4, r7, pc}
 800b3dc:	08014988 	.word	0x08014988
 800b3e0:	08014e98 	.word	0x08014e98
 800b3e4:	080149cc 	.word	0x080149cc

0800b3e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b3f0:	e007      	b.n	800b402 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 f80a 	bl	800b412 <tcp_seg_free>
    seg = next;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1f4      	bne.n	800b3f2 <tcp_segs_free+0xa>
  }
}
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b082      	sub	sp, #8
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00c      	beq.n	800b43a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fe fbb3 	bl	8009b98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	2003      	movs	r0, #3
 800b436:	f7fd fd39 	bl	8008eac <memp_free>
  }
}
 800b43a:	bf00      	nop
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	460b      	mov	r3, r1
 800b44e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d107      	bne.n	800b466 <tcp_setprio+0x22>
 800b456:	4b07      	ldr	r3, [pc, #28]	; (800b474 <tcp_setprio+0x30>)
 800b458:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800b45c:	4906      	ldr	r1, [pc, #24]	; (800b478 <tcp_setprio+0x34>)
 800b45e:	4807      	ldr	r0, [pc, #28]	; (800b47c <tcp_setprio+0x38>)
 800b460:	f007 fde6 	bl	8013030 <iprintf>
 800b464:	e002      	b.n	800b46c <tcp_setprio+0x28>

  pcb->prio = prio;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	78fa      	ldrb	r2, [r7, #3]
 800b46a:	755a      	strb	r2, [r3, #21]
}
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	08014988 	.word	0x08014988
 800b478:	08014ec0 	.word	0x08014ec0
 800b47c:	080149cc 	.word	0x080149cc

0800b480 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d106      	bne.n	800b49c <tcp_seg_copy+0x1c>
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <tcp_seg_copy+0x4c>)
 800b490:	f240 6282 	movw	r2, #1666	; 0x682
 800b494:	490e      	ldr	r1, [pc, #56]	; (800b4d0 <tcp_seg_copy+0x50>)
 800b496:	480f      	ldr	r0, [pc, #60]	; (800b4d4 <tcp_seg_copy+0x54>)
 800b498:	f007 fdca 	bl	8013030 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b49c:	2003      	movs	r0, #3
 800b49e:	f7fd fc95 	bl	8008dcc <memp_malloc>
 800b4a2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <tcp_seg_copy+0x2e>
    return NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e00a      	b.n	800b4c4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b4ae:	2210      	movs	r2, #16
 800b4b0:	6879      	ldr	r1, [r7, #4]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f007 fe97 	bl	80131e6 <memcpy>
  pbuf_ref(cseg->p);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fe fc0b 	bl	8009cd8 <pbuf_ref>
  return cseg;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	08014988 	.word	0x08014988
 800b4d0:	08014edc 	.word	0x08014edc
 800b4d4:	080149cc 	.word	0x080149cc

0800b4d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	607a      	str	r2, [r7, #4]
 800b4e4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d109      	bne.n	800b500 <tcp_recv_null+0x28>
 800b4ec:	4b12      	ldr	r3, [pc, #72]	; (800b538 <tcp_recv_null+0x60>)
 800b4ee:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b4f2:	4912      	ldr	r1, [pc, #72]	; (800b53c <tcp_recv_null+0x64>)
 800b4f4:	4812      	ldr	r0, [pc, #72]	; (800b540 <tcp_recv_null+0x68>)
 800b4f6:	f007 fd9b 	bl	8013030 <iprintf>
 800b4fa:	f06f 030f 	mvn.w	r3, #15
 800b4fe:	e016      	b.n	800b52e <tcp_recv_null+0x56>

  if (p != NULL) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d009      	beq.n	800b51a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	891b      	ldrh	r3, [r3, #8]
 800b50a:	4619      	mov	r1, r3
 800b50c:	68b8      	ldr	r0, [r7, #8]
 800b50e:	f7ff fab5 	bl	800aa7c <tcp_recved>
    pbuf_free(p);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7fe fb40 	bl	8009b98 <pbuf_free>
 800b518:	e008      	b.n	800b52c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b51a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d104      	bne.n	800b52c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b522:	68b8      	ldr	r0, [r7, #8]
 800b524:	f7fe ffe6 	bl	800a4f4 <tcp_close>
 800b528:	4603      	mov	r3, r0
 800b52a:	e000      	b.n	800b52e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	08014988 	.word	0x08014988
 800b53c:	08014ef8 	.word	0x08014ef8
 800b540:	080149cc 	.word	0x080149cc

0800b544 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b552:	2b00      	cmp	r3, #0
 800b554:	db01      	blt.n	800b55a <tcp_kill_prio+0x16>
 800b556:	79fb      	ldrb	r3, [r7, #7]
 800b558:	e000      	b.n	800b55c <tcp_kill_prio+0x18>
 800b55a:	237f      	movs	r3, #127	; 0x7f
 800b55c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d034      	beq.n	800b5ce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b564:	7afb      	ldrb	r3, [r7, #11]
 800b566:	3b01      	subs	r3, #1
 800b568:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b572:	4b19      	ldr	r3, [pc, #100]	; (800b5d8 <tcp_kill_prio+0x94>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	617b      	str	r3, [r7, #20]
 800b578:	e01f      	b.n	800b5ba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	7d5b      	ldrb	r3, [r3, #21]
 800b57e:	7afa      	ldrb	r2, [r7, #11]
 800b580:	429a      	cmp	r2, r3
 800b582:	d80c      	bhi.n	800b59e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b588:	7afa      	ldrb	r2, [r7, #11]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d112      	bne.n	800b5b4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <tcp_kill_prio+0x98>)
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d80a      	bhi.n	800b5b4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b59e:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <tcp_kill_prio+0x98>)
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	7d5b      	ldrb	r3, [r3, #21]
 800b5b2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	617b      	str	r3, [r7, #20]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1dc      	bne.n	800b57a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b5c6:	6938      	ldr	r0, [r7, #16]
 800b5c8:	f7ff f87e 	bl	800a6c8 <tcp_abort>
 800b5cc:	e000      	b.n	800b5d0 <tcp_kill_prio+0x8c>
    return;
 800b5ce:	bf00      	nop
  }
}
 800b5d0:	3718      	adds	r7, #24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	2000a914 	.word	0x2000a914
 800b5dc:	2000a908 	.word	0x2000a908

0800b5e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b5ea:	79fb      	ldrb	r3, [r7, #7]
 800b5ec:	2b08      	cmp	r3, #8
 800b5ee:	d009      	beq.n	800b604 <tcp_kill_state+0x24>
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b09      	cmp	r3, #9
 800b5f4:	d006      	beq.n	800b604 <tcp_kill_state+0x24>
 800b5f6:	4b1a      	ldr	r3, [pc, #104]	; (800b660 <tcp_kill_state+0x80>)
 800b5f8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b5fc:	4919      	ldr	r1, [pc, #100]	; (800b664 <tcp_kill_state+0x84>)
 800b5fe:	481a      	ldr	r0, [pc, #104]	; (800b668 <tcp_kill_state+0x88>)
 800b600:	f007 fd16 	bl	8013030 <iprintf>

  inactivity = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b60c:	4b17      	ldr	r3, [pc, #92]	; (800b66c <tcp_kill_state+0x8c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	e017      	b.n	800b644 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	7d1b      	ldrb	r3, [r3, #20]
 800b618:	79fa      	ldrb	r2, [r7, #7]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d10f      	bne.n	800b63e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b61e:	4b14      	ldr	r3, [pc, #80]	; (800b670 <tcp_kill_state+0x90>)
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d807      	bhi.n	800b63e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b62e:	4b10      	ldr	r3, [pc, #64]	; (800b670 <tcp_kill_state+0x90>)
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	6a1b      	ldr	r3, [r3, #32]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	617b      	str	r3, [r7, #20]
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e4      	bne.n	800b614 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d003      	beq.n	800b658 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b650:	2100      	movs	r1, #0
 800b652:	6938      	ldr	r0, [r7, #16]
 800b654:	f7fe ff7a 	bl	800a54c <tcp_abandon>
  }
}
 800b658:	bf00      	nop
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	08014988 	.word	0x08014988
 800b664:	08014f14 	.word	0x08014f14
 800b668:	080149cc 	.word	0x080149cc
 800b66c:	2000a914 	.word	0x2000a914
 800b670:	2000a908 	.word	0x2000a908

0800b674 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <tcp_kill_timewait+0x58>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	e012      	b.n	800b6b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b68a:	4b11      	ldr	r3, [pc, #68]	; (800b6d0 <tcp_kill_timewait+0x5c>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	429a      	cmp	r2, r3
 800b698:	d807      	bhi.n	800b6aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b69a:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <tcp_kill_timewait+0x5c>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6a1b      	ldr	r3, [r3, #32]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1e9      	bne.n	800b68a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b6bc:	68b8      	ldr	r0, [r7, #8]
 800b6be:	f7ff f803 	bl	800a6c8 <tcp_abort>
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	2000a918 	.word	0x2000a918
 800b6d0:	2000a908 	.word	0x2000a908

0800b6d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b6da:	4b10      	ldr	r3, [pc, #64]	; (800b71c <tcp_handle_closepend+0x48>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b6e0:	e014      	b.n	800b70c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	8b5b      	ldrh	r3, [r3, #26]
 800b6ec:	f003 0308 	and.w	r3, r3, #8
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d009      	beq.n	800b708 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8b5b      	ldrh	r3, [r3, #26]
 800b6f8:	f023 0308 	bic.w	r3, r3, #8
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7fe fe8c 	bl	800a420 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1e7      	bne.n	800b6e2 <tcp_handle_closepend+0xe>
  }
}
 800b712:	bf00      	nop
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	2000a914 	.word	0x2000a914

0800b720 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b72a:	2001      	movs	r0, #1
 800b72c:	f7fd fb4e 	bl	8008dcc <memp_malloc>
 800b730:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d126      	bne.n	800b786 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b738:	f7ff ffcc 	bl	800b6d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b73c:	f7ff ff9a 	bl	800b674 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b740:	2001      	movs	r0, #1
 800b742:	f7fd fb43 	bl	8008dcc <memp_malloc>
 800b746:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d11b      	bne.n	800b786 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b74e:	2009      	movs	r0, #9
 800b750:	f7ff ff46 	bl	800b5e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b754:	2001      	movs	r0, #1
 800b756:	f7fd fb39 	bl	8008dcc <memp_malloc>
 800b75a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d111      	bne.n	800b786 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b762:	2008      	movs	r0, #8
 800b764:	f7ff ff3c 	bl	800b5e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b768:	2001      	movs	r0, #1
 800b76a:	f7fd fb2f 	bl	8008dcc <memp_malloc>
 800b76e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d107      	bne.n	800b786 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b776:	79fb      	ldrb	r3, [r7, #7]
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff fee3 	bl	800b544 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b77e:	2001      	movs	r0, #1
 800b780:	f7fd fb24 	bl	8008dcc <memp_malloc>
 800b784:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d03f      	beq.n	800b80c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b78c:	229c      	movs	r2, #156	; 0x9c
 800b78e:	2100      	movs	r1, #0
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f007 fcb2 	bl	80130fa <memset>
    pcb->prio = prio;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	79fa      	ldrb	r2, [r7, #7]
 800b79a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b7a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b7ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	22ff      	movs	r2, #255	; 0xff
 800b7ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b7c2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2206      	movs	r2, #6
 800b7c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2206      	movs	r2, #6
 800b7d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7d8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b7e2:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <tcp_alloc+0xf8>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b7ea:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <tcp_alloc+0xfc>)
 800b7ec:	781a      	ldrb	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b7f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4a08      	ldr	r2, [pc, #32]	; (800b820 <tcp_alloc+0x100>)
 800b800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4a07      	ldr	r2, [pc, #28]	; (800b824 <tcp_alloc+0x104>)
 800b808:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b80c:	68fb      	ldr	r3, [r7, #12]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	2000a908 	.word	0x2000a908
 800b81c:	2000a91e 	.word	0x2000a91e
 800b820:	0800b4d9 	.word	0x0800b4d9
 800b824:	006ddd00 	.word	0x006ddd00

0800b828 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800b82c:	2040      	movs	r0, #64	; 0x40
 800b82e:	f7ff ff77 	bl	800b720 <tcp_alloc>
 800b832:	4603      	mov	r3, r0
}
 800b834:	4618      	mov	r0, r3
 800b836:	bd80      	pop	{r7, pc}

0800b838 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	611a      	str	r2, [r3, #16]
  }
}
 800b84e:	bf00      	nop
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
	...

0800b85c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00e      	beq.n	800b88a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	7d1b      	ldrb	r3, [r3, #20]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d106      	bne.n	800b882 <tcp_recv+0x26>
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <tcp_recv+0x38>)
 800b876:	f240 72df 	movw	r2, #2015	; 0x7df
 800b87a:	4907      	ldr	r1, [pc, #28]	; (800b898 <tcp_recv+0x3c>)
 800b87c:	4807      	ldr	r0, [pc, #28]	; (800b89c <tcp_recv+0x40>)
 800b87e:	f007 fbd7 	bl	8013030 <iprintf>
    pcb->recv = recv;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	08014988 	.word	0x08014988
 800b898:	08014f24 	.word	0x08014f24
 800b89c:	080149cc 	.word	0x080149cc

0800b8a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00e      	beq.n	800b8ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d106      	bne.n	800b8c6 <tcp_sent+0x26>
 800b8b8:	4b07      	ldr	r3, [pc, #28]	; (800b8d8 <tcp_sent+0x38>)
 800b8ba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b8be:	4907      	ldr	r1, [pc, #28]	; (800b8dc <tcp_sent+0x3c>)
 800b8c0:	4807      	ldr	r0, [pc, #28]	; (800b8e0 <tcp_sent+0x40>)
 800b8c2:	f007 fbb5 	bl	8013030 <iprintf>
    pcb->sent = sent;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	3708      	adds	r7, #8
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	08014988 	.word	0x08014988
 800b8dc:	08014f4c 	.word	0x08014f4c
 800b8e0:	080149cc 	.word	0x080149cc

0800b8e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00e      	beq.n	800b912 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	7d1b      	ldrb	r3, [r3, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d106      	bne.n	800b90a <tcp_err+0x26>
 800b8fc:	4b07      	ldr	r3, [pc, #28]	; (800b91c <tcp_err+0x38>)
 800b8fe:	f640 020d 	movw	r2, #2061	; 0x80d
 800b902:	4907      	ldr	r1, [pc, #28]	; (800b920 <tcp_err+0x3c>)
 800b904:	4807      	ldr	r0, [pc, #28]	; (800b924 <tcp_err+0x40>)
 800b906:	f007 fb93 	bl	8013030 <iprintf>
    pcb->errf = err;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	08014988 	.word	0x08014988
 800b920:	08014f74 	.word	0x08014f74
 800b924:	080149cc 	.word	0x080149cc

0800b928 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d008      	beq.n	800b94a <tcp_accept+0x22>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7d1b      	ldrb	r3, [r3, #20]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d104      	bne.n	800b94a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	619a      	str	r2, [r3, #24]
  }
}
 800b94a:	bf00      	nop
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d107      	bne.n	800b97c <tcp_poll+0x24>
 800b96c:	4b0e      	ldr	r3, [pc, #56]	; (800b9a8 <tcp_poll+0x50>)
 800b96e:	f640 023d 	movw	r2, #2109	; 0x83d
 800b972:	490e      	ldr	r1, [pc, #56]	; (800b9ac <tcp_poll+0x54>)
 800b974:	480e      	ldr	r0, [pc, #56]	; (800b9b0 <tcp_poll+0x58>)
 800b976:	f007 fb5b 	bl	8013030 <iprintf>
 800b97a:	e011      	b.n	800b9a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	7d1b      	ldrb	r3, [r3, #20]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d106      	bne.n	800b992 <tcp_poll+0x3a>
 800b984:	4b08      	ldr	r3, [pc, #32]	; (800b9a8 <tcp_poll+0x50>)
 800b986:	f640 023e 	movw	r2, #2110	; 0x83e
 800b98a:	490a      	ldr	r1, [pc, #40]	; (800b9b4 <tcp_poll+0x5c>)
 800b98c:	4808      	ldr	r0, [pc, #32]	; (800b9b0 <tcp_poll+0x58>)
 800b98e:	f007 fb4f 	bl	8013030 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	79fa      	ldrb	r2, [r7, #7]
 800b99e:	775a      	strb	r2, [r3, #29]
}
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	08014988 	.word	0x08014988
 800b9ac:	08014f9c 	.word	0x08014f9c
 800b9b0:	080149cc 	.word	0x080149cc
 800b9b4:	08014fb4 	.word	0x08014fb4

0800b9b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d107      	bne.n	800b9d6 <tcp_pcb_purge+0x1e>
 800b9c6:	4b21      	ldr	r3, [pc, #132]	; (800ba4c <tcp_pcb_purge+0x94>)
 800b9c8:	f640 0251 	movw	r2, #2129	; 0x851
 800b9cc:	4920      	ldr	r1, [pc, #128]	; (800ba50 <tcp_pcb_purge+0x98>)
 800b9ce:	4821      	ldr	r0, [pc, #132]	; (800ba54 <tcp_pcb_purge+0x9c>)
 800b9d0:	f007 fb2e 	bl	8013030 <iprintf>
 800b9d4:	e037      	b.n	800ba46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	7d1b      	ldrb	r3, [r3, #20]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d033      	beq.n	800ba46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b9e2:	2b0a      	cmp	r3, #10
 800b9e4:	d02f      	beq.n	800ba46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d02b      	beq.n	800ba46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d007      	beq.n	800ba06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe f8cc 	bl	8009b98 <pbuf_free>
      pcb->refused_data = NULL;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d002      	beq.n	800ba14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f986 	bl	800bd20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff fce1 	bl	800b3e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fcdc 	bl	800b3e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	08014988 	.word	0x08014988
 800ba50:	08014fd4 	.word	0x08014fd4
 800ba54:	080149cc 	.word	0x080149cc

0800ba58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d106      	bne.n	800ba76 <tcp_pcb_remove+0x1e>
 800ba68:	4b3e      	ldr	r3, [pc, #248]	; (800bb64 <tcp_pcb_remove+0x10c>)
 800ba6a:	f640 0283 	movw	r2, #2179	; 0x883
 800ba6e:	493e      	ldr	r1, [pc, #248]	; (800bb68 <tcp_pcb_remove+0x110>)
 800ba70:	483e      	ldr	r0, [pc, #248]	; (800bb6c <tcp_pcb_remove+0x114>)
 800ba72:	f007 fadd 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d106      	bne.n	800ba8a <tcp_pcb_remove+0x32>
 800ba7c:	4b39      	ldr	r3, [pc, #228]	; (800bb64 <tcp_pcb_remove+0x10c>)
 800ba7e:	f640 0284 	movw	r2, #2180	; 0x884
 800ba82:	493b      	ldr	r1, [pc, #236]	; (800bb70 <tcp_pcb_remove+0x118>)
 800ba84:	4839      	ldr	r0, [pc, #228]	; (800bb6c <tcp_pcb_remove+0x114>)
 800ba86:	f007 fad3 	bl	8013030 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d105      	bne.n	800baa0 <tcp_pcb_remove+0x48>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	68da      	ldr	r2, [r3, #12]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e013      	b.n	800bac8 <tcp_pcb_remove+0x70>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	e00c      	b.n	800bac2 <tcp_pcb_remove+0x6a>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d104      	bne.n	800babc <tcp_pcb_remove+0x64>
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	60da      	str	r2, [r3, #12]
 800baba:	e005      	b.n	800bac8 <tcp_pcb_remove+0x70>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1ef      	bne.n	800baa8 <tcp_pcb_remove+0x50>
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2200      	movs	r2, #0
 800bacc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bace:	6838      	ldr	r0, [r7, #0]
 800bad0:	f7ff ff72 	bl	800b9b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	7d1b      	ldrb	r3, [r3, #20]
 800bad8:	2b0a      	cmp	r3, #10
 800bada:	d013      	beq.n	800bb04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d00f      	beq.n	800bb04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	8b5b      	ldrh	r3, [r3, #26]
 800bae8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800baec:	2b00      	cmp	r3, #0
 800baee:	d009      	beq.n	800bb04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	8b5b      	ldrh	r3, [r3, #26]
 800baf4:	f043 0302 	orr.w	r3, r3, #2
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bafe:	6838      	ldr	r0, [r7, #0]
 800bb00:	f003 fbc6 	bl	800f290 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	7d1b      	ldrb	r3, [r3, #20]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d020      	beq.n	800bb4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d006      	beq.n	800bb22 <tcp_pcb_remove+0xca>
 800bb14:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <tcp_pcb_remove+0x10c>)
 800bb16:	f640 0293 	movw	r2, #2195	; 0x893
 800bb1a:	4916      	ldr	r1, [pc, #88]	; (800bb74 <tcp_pcb_remove+0x11c>)
 800bb1c:	4813      	ldr	r0, [pc, #76]	; (800bb6c <tcp_pcb_remove+0x114>)
 800bb1e:	f007 fa87 	bl	8013030 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d006      	beq.n	800bb38 <tcp_pcb_remove+0xe0>
 800bb2a:	4b0e      	ldr	r3, [pc, #56]	; (800bb64 <tcp_pcb_remove+0x10c>)
 800bb2c:	f640 0294 	movw	r2, #2196	; 0x894
 800bb30:	4911      	ldr	r1, [pc, #68]	; (800bb78 <tcp_pcb_remove+0x120>)
 800bb32:	480e      	ldr	r0, [pc, #56]	; (800bb6c <tcp_pcb_remove+0x114>)
 800bb34:	f007 fa7c 	bl	8013030 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d006      	beq.n	800bb4e <tcp_pcb_remove+0xf6>
 800bb40:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <tcp_pcb_remove+0x10c>)
 800bb42:	f640 0296 	movw	r2, #2198	; 0x896
 800bb46:	490d      	ldr	r1, [pc, #52]	; (800bb7c <tcp_pcb_remove+0x124>)
 800bb48:	4808      	ldr	r0, [pc, #32]	; (800bb6c <tcp_pcb_remove+0x114>)
 800bb4a:	f007 fa71 	bl	8013030 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2200      	movs	r2, #0
 800bb52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	2200      	movs	r2, #0
 800bb58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	08014988 	.word	0x08014988
 800bb68:	08014ff0 	.word	0x08014ff0
 800bb6c:	080149cc 	.word	0x080149cc
 800bb70:	0801500c 	.word	0x0801500c
 800bb74:	0801502c 	.word	0x0801502c
 800bb78:	08015044 	.word	0x08015044
 800bb7c:	08015060 	.word	0x08015060

0800bb80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d106      	bne.n	800bb9c <tcp_next_iss+0x1c>
 800bb8e:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <tcp_next_iss+0x38>)
 800bb90:	f640 02af 	movw	r2, #2223	; 0x8af
 800bb94:	4909      	ldr	r1, [pc, #36]	; (800bbbc <tcp_next_iss+0x3c>)
 800bb96:	480a      	ldr	r0, [pc, #40]	; (800bbc0 <tcp_next_iss+0x40>)
 800bb98:	f007 fa4a 	bl	8013030 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bb9c:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <tcp_next_iss+0x44>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <tcp_next_iss+0x48>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	4a07      	ldr	r2, [pc, #28]	; (800bbc4 <tcp_next_iss+0x44>)
 800bba8:	6013      	str	r3, [r2, #0]
  return iss;
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <tcp_next_iss+0x44>)
 800bbac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	08014988 	.word	0x08014988
 800bbbc:	08015078 	.word	0x08015078
 800bbc0:	080149cc 	.word	0x080149cc
 800bbc4:	20000028 	.word	0x20000028
 800bbc8:	2000a908 	.word	0x2000a908

0800bbcc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <tcp_eff_send_mss_netif+0x22>
 800bbe0:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <tcp_eff_send_mss_netif+0x68>)
 800bbe2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bbe6:	4914      	ldr	r1, [pc, #80]	; (800bc38 <tcp_eff_send_mss_netif+0x6c>)
 800bbe8:	4814      	ldr	r0, [pc, #80]	; (800bc3c <tcp_eff_send_mss_netif+0x70>)
 800bbea:	f007 fa21 	bl	8013030 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bbf4:	89fb      	ldrh	r3, [r7, #14]
 800bbf6:	e019      	b.n	800bc2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bbfc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bbfe:	8afb      	ldrh	r3, [r7, #22]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d012      	beq.n	800bc2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bc04:	2328      	movs	r3, #40	; 0x28
 800bc06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bc08:	8afa      	ldrh	r2, [r7, #22]
 800bc0a:	8abb      	ldrh	r3, [r7, #20]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d904      	bls.n	800bc1a <tcp_eff_send_mss_netif+0x4e>
 800bc10:	8afa      	ldrh	r2, [r7, #22]
 800bc12:	8abb      	ldrh	r3, [r7, #20]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	e000      	b.n	800bc1c <tcp_eff_send_mss_netif+0x50>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bc1e:	8a7a      	ldrh	r2, [r7, #18]
 800bc20:	89fb      	ldrh	r3, [r7, #14]
 800bc22:	4293      	cmp	r3, r2
 800bc24:	bf28      	it	cs
 800bc26:	4613      	movcs	r3, r2
 800bc28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bc2a:	89fb      	ldrh	r3, [r7, #14]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3718      	adds	r7, #24
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	08014988 	.word	0x08014988
 800bc38:	08015094 	.word	0x08015094
 800bc3c:	080149cc 	.word	0x080149cc

0800bc40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d119      	bne.n	800bc88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bc54:	4b10      	ldr	r3, [pc, #64]	; (800bc98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bc56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bc5a:	4910      	ldr	r1, [pc, #64]	; (800bc9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bc5c:	4810      	ldr	r0, [pc, #64]	; (800bca0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bc5e:	f007 f9e7 	bl	8013030 <iprintf>

  while (pcb != NULL) {
 800bc62:	e011      	b.n	800bc88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d108      	bne.n	800bc82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7fe fd26 	bl	800a6c8 <tcp_abort>
      pcb = next;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e002      	b.n	800bc88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d1ea      	bne.n	800bc64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bc8e:	bf00      	nop
 800bc90:	bf00      	nop
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	08014988 	.word	0x08014988
 800bc9c:	080150bc 	.word	0x080150bc
 800bca0:	080149cc 	.word	0x080149cc

0800bca4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d02a      	beq.n	800bd0a <tcp_netif_ip_addr_changed+0x66>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d026      	beq.n	800bd0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bcbc:	4b15      	ldr	r3, [pc, #84]	; (800bd14 <tcp_netif_ip_addr_changed+0x70>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff ffbc 	bl	800bc40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bcc8:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <tcp_netif_ip_addr_changed+0x74>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff ffb6 	bl	800bc40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d017      	beq.n	800bd0a <tcp_netif_ip_addr_changed+0x66>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d013      	beq.n	800bd0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bce2:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <tcp_netif_ip_addr_changed+0x78>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e00c      	b.n	800bd04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d103      	bne.n	800bcfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1ef      	bne.n	800bcea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bd0a:	bf00      	nop
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2000a914 	.word	0x2000a914
 800bd18:	2000a90c 	.word	0x2000a90c
 800bd1c:	2000a910 	.word	0x2000a910

0800bd20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff fb57 	bl	800b3e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bd48:	b590      	push	{r4, r7, lr}
 800bd4a:	b08d      	sub	sp, #52	; 0x34
 800bd4c:	af04      	add	r7, sp, #16
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <tcp_input+0x1c>
 800bd58:	4b9b      	ldr	r3, [pc, #620]	; (800bfc8 <tcp_input+0x280>)
 800bd5a:	2283      	movs	r2, #131	; 0x83
 800bd5c:	499b      	ldr	r1, [pc, #620]	; (800bfcc <tcp_input+0x284>)
 800bd5e:	489c      	ldr	r0, [pc, #624]	; (800bfd0 <tcp_input+0x288>)
 800bd60:	f007 f966 	bl	8013030 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	4a9a      	ldr	r2, [pc, #616]	; (800bfd4 <tcp_input+0x28c>)
 800bd6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	895b      	ldrh	r3, [r3, #10]
 800bd70:	2b13      	cmp	r3, #19
 800bd72:	f240 83d1 	bls.w	800c518 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bd76:	4b98      	ldr	r3, [pc, #608]	; (800bfd8 <tcp_input+0x290>)
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	4a97      	ldr	r2, [pc, #604]	; (800bfd8 <tcp_input+0x290>)
 800bd7c:	6812      	ldr	r2, [r2, #0]
 800bd7e:	4611      	mov	r1, r2
 800bd80:	4618      	mov	r0, r3
 800bd82:	f006 f86f 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f040 83c7 	bne.w	800c51c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bd8e:	4b92      	ldr	r3, [pc, #584]	; (800bfd8 <tcp_input+0x290>)
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bd96:	2be0      	cmp	r3, #224	; 0xe0
 800bd98:	f000 83c0 	beq.w	800c51c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bd9c:	4b8d      	ldr	r3, [pc, #564]	; (800bfd4 <tcp_input+0x28c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	899b      	ldrh	r3, [r3, #12]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fc fb99 	bl	80084dc <lwip_htons>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	0b1b      	lsrs	r3, r3, #12
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bdb6:	7cbb      	ldrb	r3, [r7, #18]
 800bdb8:	2b13      	cmp	r3, #19
 800bdba:	f240 83b1 	bls.w	800c520 <tcp_input+0x7d8>
 800bdbe:	7cbb      	ldrb	r3, [r7, #18]
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	891b      	ldrh	r3, [r3, #8]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	f200 83aa 	bhi.w	800c520 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bdcc:	7cbb      	ldrb	r3, [r7, #18]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	3b14      	subs	r3, #20
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	4b81      	ldr	r3, [pc, #516]	; (800bfdc <tcp_input+0x294>)
 800bdd6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bdd8:	4b81      	ldr	r3, [pc, #516]	; (800bfe0 <tcp_input+0x298>)
 800bdda:	2200      	movs	r2, #0
 800bddc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	895a      	ldrh	r2, [r3, #10]
 800bde2:	7cbb      	ldrb	r3, [r7, #18]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d309      	bcc.n	800bdfe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bdea:	4b7c      	ldr	r3, [pc, #496]	; (800bfdc <tcp_input+0x294>)
 800bdec:	881a      	ldrh	r2, [r3, #0]
 800bdee:	4b7d      	ldr	r3, [pc, #500]	; (800bfe4 <tcp_input+0x29c>)
 800bdf0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bdf2:	7cbb      	ldrb	r3, [r7, #18]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7fd fe48 	bl	8009a8c <pbuf_remove_header>
 800bdfc:	e04e      	b.n	800be9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d105      	bne.n	800be12 <tcp_input+0xca>
 800be06:	4b70      	ldr	r3, [pc, #448]	; (800bfc8 <tcp_input+0x280>)
 800be08:	22c2      	movs	r2, #194	; 0xc2
 800be0a:	4977      	ldr	r1, [pc, #476]	; (800bfe8 <tcp_input+0x2a0>)
 800be0c:	4870      	ldr	r0, [pc, #448]	; (800bfd0 <tcp_input+0x288>)
 800be0e:	f007 f90f 	bl	8013030 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800be12:	2114      	movs	r1, #20
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7fd fe39 	bl	8009a8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	895a      	ldrh	r2, [r3, #10]
 800be1e:	4b71      	ldr	r3, [pc, #452]	; (800bfe4 <tcp_input+0x29c>)
 800be20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800be22:	4b6e      	ldr	r3, [pc, #440]	; (800bfdc <tcp_input+0x294>)
 800be24:	881a      	ldrh	r2, [r3, #0]
 800be26:	4b6f      	ldr	r3, [pc, #444]	; (800bfe4 <tcp_input+0x29c>)
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800be2e:	4b6d      	ldr	r3, [pc, #436]	; (800bfe4 <tcp_input+0x29c>)
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7fd fe29 	bl	8009a8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	895b      	ldrh	r3, [r3, #10]
 800be40:	8a3a      	ldrh	r2, [r7, #16]
 800be42:	429a      	cmp	r2, r3
 800be44:	f200 836e 	bhi.w	800c524 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	4a64      	ldr	r2, [pc, #400]	; (800bfe0 <tcp_input+0x298>)
 800be50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	8a3a      	ldrh	r2, [r7, #16]
 800be58:	4611      	mov	r1, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd fe16 	bl	8009a8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	891a      	ldrh	r2, [r3, #8]
 800be64:	8a3b      	ldrh	r3, [r7, #16]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	b29a      	uxth	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	895b      	ldrh	r3, [r3, #10]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d005      	beq.n	800be82 <tcp_input+0x13a>
 800be76:	4b54      	ldr	r3, [pc, #336]	; (800bfc8 <tcp_input+0x280>)
 800be78:	22df      	movs	r2, #223	; 0xdf
 800be7a:	495c      	ldr	r1, [pc, #368]	; (800bfec <tcp_input+0x2a4>)
 800be7c:	4854      	ldr	r0, [pc, #336]	; (800bfd0 <tcp_input+0x288>)
 800be7e:	f007 f8d7 	bl	8013030 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	891a      	ldrh	r2, [r3, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	891b      	ldrh	r3, [r3, #8]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d005      	beq.n	800be9c <tcp_input+0x154>
 800be90:	4b4d      	ldr	r3, [pc, #308]	; (800bfc8 <tcp_input+0x280>)
 800be92:	22e0      	movs	r2, #224	; 0xe0
 800be94:	4956      	ldr	r1, [pc, #344]	; (800bff0 <tcp_input+0x2a8>)
 800be96:	484e      	ldr	r0, [pc, #312]	; (800bfd0 <tcp_input+0x288>)
 800be98:	f007 f8ca 	bl	8013030 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800be9c:	4b4d      	ldr	r3, [pc, #308]	; (800bfd4 <tcp_input+0x28c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	4a4b      	ldr	r2, [pc, #300]	; (800bfd4 <tcp_input+0x28c>)
 800bea6:	6814      	ldr	r4, [r2, #0]
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fc fb17 	bl	80084dc <lwip_htons>
 800beae:	4603      	mov	r3, r0
 800beb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800beb2:	4b48      	ldr	r3, [pc, #288]	; (800bfd4 <tcp_input+0x28c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	885b      	ldrh	r3, [r3, #2]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	4a46      	ldr	r2, [pc, #280]	; (800bfd4 <tcp_input+0x28c>)
 800bebc:	6814      	ldr	r4, [r2, #0]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fc fb0c 	bl	80084dc <lwip_htons>
 800bec4:	4603      	mov	r3, r0
 800bec6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bec8:	4b42      	ldr	r3, [pc, #264]	; (800bfd4 <tcp_input+0x28c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	4a41      	ldr	r2, [pc, #260]	; (800bfd4 <tcp_input+0x28c>)
 800bed0:	6814      	ldr	r4, [r2, #0]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fc fb17 	bl	8008506 <lwip_htonl>
 800bed8:	4603      	mov	r3, r0
 800beda:	6063      	str	r3, [r4, #4]
 800bedc:	6863      	ldr	r3, [r4, #4]
 800bede:	4a45      	ldr	r2, [pc, #276]	; (800bff4 <tcp_input+0x2ac>)
 800bee0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bee2:	4b3c      	ldr	r3, [pc, #240]	; (800bfd4 <tcp_input+0x28c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	4a3a      	ldr	r2, [pc, #232]	; (800bfd4 <tcp_input+0x28c>)
 800beea:	6814      	ldr	r4, [r2, #0]
 800beec:	4618      	mov	r0, r3
 800beee:	f7fc fb0a 	bl	8008506 <lwip_htonl>
 800bef2:	4603      	mov	r3, r0
 800bef4:	60a3      	str	r3, [r4, #8]
 800bef6:	68a3      	ldr	r3, [r4, #8]
 800bef8:	4a3f      	ldr	r2, [pc, #252]	; (800bff8 <tcp_input+0x2b0>)
 800befa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800befc:	4b35      	ldr	r3, [pc, #212]	; (800bfd4 <tcp_input+0x28c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	89db      	ldrh	r3, [r3, #14]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	4a33      	ldr	r2, [pc, #204]	; (800bfd4 <tcp_input+0x28c>)
 800bf06:	6814      	ldr	r4, [r2, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fc fae7 	bl	80084dc <lwip_htons>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bf12:	4b30      	ldr	r3, [pc, #192]	; (800bfd4 <tcp_input+0x28c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	899b      	ldrh	r3, [r3, #12]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fc fade 	bl	80084dc <lwip_htons>
 800bf20:	4603      	mov	r3, r0
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	4b34      	ldr	r3, [pc, #208]	; (800bffc <tcp_input+0x2b4>)
 800bf2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	891a      	ldrh	r2, [r3, #8]
 800bf32:	4b33      	ldr	r3, [pc, #204]	; (800c000 <tcp_input+0x2b8>)
 800bf34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bf36:	4b31      	ldr	r3, [pc, #196]	; (800bffc <tcp_input+0x2b4>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00c      	beq.n	800bf5c <tcp_input+0x214>
    tcplen++;
 800bf42:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <tcp_input+0x2b8>)
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	3301      	adds	r3, #1
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	4b2d      	ldr	r3, [pc, #180]	; (800c000 <tcp_input+0x2b8>)
 800bf4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	891a      	ldrh	r2, [r3, #8]
 800bf52:	4b2b      	ldr	r3, [pc, #172]	; (800c000 <tcp_input+0x2b8>)
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	f200 82e6 	bhi.w	800c528 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf60:	4b28      	ldr	r3, [pc, #160]	; (800c004 <tcp_input+0x2bc>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	61fb      	str	r3, [r7, #28]
 800bf66:	e09d      	b.n	800c0a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	7d1b      	ldrb	r3, [r3, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d105      	bne.n	800bf7c <tcp_input+0x234>
 800bf70:	4b15      	ldr	r3, [pc, #84]	; (800bfc8 <tcp_input+0x280>)
 800bf72:	22fb      	movs	r2, #251	; 0xfb
 800bf74:	4924      	ldr	r1, [pc, #144]	; (800c008 <tcp_input+0x2c0>)
 800bf76:	4816      	ldr	r0, [pc, #88]	; (800bfd0 <tcp_input+0x288>)
 800bf78:	f007 f85a 	bl	8013030 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	7d1b      	ldrb	r3, [r3, #20]
 800bf80:	2b0a      	cmp	r3, #10
 800bf82:	d105      	bne.n	800bf90 <tcp_input+0x248>
 800bf84:	4b10      	ldr	r3, [pc, #64]	; (800bfc8 <tcp_input+0x280>)
 800bf86:	22fc      	movs	r2, #252	; 0xfc
 800bf88:	4920      	ldr	r1, [pc, #128]	; (800c00c <tcp_input+0x2c4>)
 800bf8a:	4811      	ldr	r0, [pc, #68]	; (800bfd0 <tcp_input+0x288>)
 800bf8c:	f007 f850 	bl	8013030 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	7d1b      	ldrb	r3, [r3, #20]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d105      	bne.n	800bfa4 <tcp_input+0x25c>
 800bf98:	4b0b      	ldr	r3, [pc, #44]	; (800bfc8 <tcp_input+0x280>)
 800bf9a:	22fd      	movs	r2, #253	; 0xfd
 800bf9c:	491c      	ldr	r1, [pc, #112]	; (800c010 <tcp_input+0x2c8>)
 800bf9e:	480c      	ldr	r0, [pc, #48]	; (800bfd0 <tcp_input+0x288>)
 800bfa0:	f007 f846 	bl	8013030 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	7a1b      	ldrb	r3, [r3, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d033      	beq.n	800c014 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	7a1a      	ldrb	r2, [r3, #8]
 800bfb0:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <tcp_input+0x290>)
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfb8:	3301      	adds	r3, #1
 800bfba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d029      	beq.n	800c014 <tcp_input+0x2cc>
      prev = pcb;
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	61bb      	str	r3, [r7, #24]
      continue;
 800bfc4:	e06b      	b.n	800c09e <tcp_input+0x356>
 800bfc6:	bf00      	nop
 800bfc8:	080150f0 	.word	0x080150f0
 800bfcc:	08015124 	.word	0x08015124
 800bfd0:	0801513c 	.word	0x0801513c
 800bfd4:	2000a930 	.word	0x2000a930
 800bfd8:	200051d8 	.word	0x200051d8
 800bfdc:	2000a934 	.word	0x2000a934
 800bfe0:	2000a938 	.word	0x2000a938
 800bfe4:	2000a936 	.word	0x2000a936
 800bfe8:	08015164 	.word	0x08015164
 800bfec:	08015174 	.word	0x08015174
 800bff0:	08015180 	.word	0x08015180
 800bff4:	2000a940 	.word	0x2000a940
 800bff8:	2000a944 	.word	0x2000a944
 800bffc:	2000a94c 	.word	0x2000a94c
 800c000:	2000a94a 	.word	0x2000a94a
 800c004:	2000a914 	.word	0x2000a914
 800c008:	080151a0 	.word	0x080151a0
 800c00c:	080151c8 	.word	0x080151c8
 800c010:	080151f4 	.word	0x080151f4
    }

    if (pcb->remote_port == tcphdr->src &&
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	8b1a      	ldrh	r2, [r3, #24]
 800c018:	4b72      	ldr	r3, [pc, #456]	; (800c1e4 <tcp_input+0x49c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	429a      	cmp	r2, r3
 800c022:	d13a      	bne.n	800c09a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	8ada      	ldrh	r2, [r3, #22]
 800c028:	4b6e      	ldr	r3, [pc, #440]	; (800c1e4 <tcp_input+0x49c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	885b      	ldrh	r3, [r3, #2]
 800c02e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c030:	429a      	cmp	r2, r3
 800c032:	d132      	bne.n	800c09a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	685a      	ldr	r2, [r3, #4]
 800c038:	4b6b      	ldr	r3, [pc, #428]	; (800c1e8 <tcp_input+0x4a0>)
 800c03a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d12c      	bne.n	800c09a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	4b68      	ldr	r3, [pc, #416]	; (800c1e8 <tcp_input+0x4a0>)
 800c046:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c048:	429a      	cmp	r2, r3
 800c04a:	d126      	bne.n	800c09a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	69fa      	ldr	r2, [r7, #28]
 800c052:	429a      	cmp	r2, r3
 800c054:	d106      	bne.n	800c064 <tcp_input+0x31c>
 800c056:	4b65      	ldr	r3, [pc, #404]	; (800c1ec <tcp_input+0x4a4>)
 800c058:	f240 120d 	movw	r2, #269	; 0x10d
 800c05c:	4964      	ldr	r1, [pc, #400]	; (800c1f0 <tcp_input+0x4a8>)
 800c05e:	4865      	ldr	r0, [pc, #404]	; (800c1f4 <tcp_input+0x4ac>)
 800c060:	f006 ffe6 	bl	8013030 <iprintf>
      if (prev != NULL) {
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <tcp_input+0x338>
        prev->next = pcb->next;
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c072:	4b61      	ldr	r3, [pc, #388]	; (800c1f8 <tcp_input+0x4b0>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c07a:	4a5f      	ldr	r2, [pc, #380]	; (800c1f8 <tcp_input+0x4b0>)
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	69fa      	ldr	r2, [r7, #28]
 800c086:	429a      	cmp	r2, r3
 800c088:	d111      	bne.n	800c0ae <tcp_input+0x366>
 800c08a:	4b58      	ldr	r3, [pc, #352]	; (800c1ec <tcp_input+0x4a4>)
 800c08c:	f240 1215 	movw	r2, #277	; 0x115
 800c090:	495a      	ldr	r1, [pc, #360]	; (800c1fc <tcp_input+0x4b4>)
 800c092:	4858      	ldr	r0, [pc, #352]	; (800c1f4 <tcp_input+0x4ac>)
 800c094:	f006 ffcc 	bl	8013030 <iprintf>
      break;
 800c098:	e009      	b.n	800c0ae <tcp_input+0x366>
    }
    prev = pcb;
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	61fb      	str	r3, [r7, #28]
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f47f af5e 	bne.w	800bf68 <tcp_input+0x220>
 800c0ac:	e000      	b.n	800c0b0 <tcp_input+0x368>
      break;
 800c0ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f040 80aa 	bne.w	800c20c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0b8:	4b51      	ldr	r3, [pc, #324]	; (800c200 <tcp_input+0x4b8>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	61fb      	str	r3, [r7, #28]
 800c0be:	e03f      	b.n	800c140 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	7d1b      	ldrb	r3, [r3, #20]
 800c0c4:	2b0a      	cmp	r3, #10
 800c0c6:	d006      	beq.n	800c0d6 <tcp_input+0x38e>
 800c0c8:	4b48      	ldr	r3, [pc, #288]	; (800c1ec <tcp_input+0x4a4>)
 800c0ca:	f240 121f 	movw	r2, #287	; 0x11f
 800c0ce:	494d      	ldr	r1, [pc, #308]	; (800c204 <tcp_input+0x4bc>)
 800c0d0:	4848      	ldr	r0, [pc, #288]	; (800c1f4 <tcp_input+0x4ac>)
 800c0d2:	f006 ffad 	bl	8013030 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	7a1b      	ldrb	r3, [r3, #8]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d009      	beq.n	800c0f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	7a1a      	ldrb	r2, [r3, #8]
 800c0e2:	4b41      	ldr	r3, [pc, #260]	; (800c1e8 <tcp_input+0x4a0>)
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d122      	bne.n	800c138 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	8b1a      	ldrh	r2, [r3, #24]
 800c0f6:	4b3b      	ldr	r3, [pc, #236]	; (800c1e4 <tcp_input+0x49c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d11b      	bne.n	800c13a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	8ada      	ldrh	r2, [r3, #22]
 800c106:	4b37      	ldr	r3, [pc, #220]	; (800c1e4 <tcp_input+0x49c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	885b      	ldrh	r3, [r3, #2]
 800c10c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c10e:	429a      	cmp	r2, r3
 800c110:	d113      	bne.n	800c13a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	4b34      	ldr	r3, [pc, #208]	; (800c1e8 <tcp_input+0x4a0>)
 800c118:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d10d      	bne.n	800c13a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b31      	ldr	r3, [pc, #196]	; (800c1e8 <tcp_input+0x4a0>)
 800c124:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c126:	429a      	cmp	r2, r3
 800c128:	d107      	bne.n	800c13a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c12a:	69f8      	ldr	r0, [r7, #28]
 800c12c:	f000 fb56 	bl	800c7dc <tcp_timewait_input>
        }
        pbuf_free(p);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7fd fd31 	bl	8009b98 <pbuf_free>
        return;
 800c136:	e1fd      	b.n	800c534 <tcp_input+0x7ec>
        continue;
 800c138:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	61fb      	str	r3, [r7, #28]
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1bc      	bne.n	800c0c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c14a:	4b2f      	ldr	r3, [pc, #188]	; (800c208 <tcp_input+0x4c0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	e02a      	b.n	800c1a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	7a1b      	ldrb	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00c      	beq.n	800c174 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	7a1a      	ldrb	r2, [r3, #8]
 800c15e:	4b22      	ldr	r3, [pc, #136]	; (800c1e8 <tcp_input+0x4a0>)
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c166:	3301      	adds	r3, #1
 800c168:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d002      	beq.n	800c174 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	61bb      	str	r3, [r7, #24]
        continue;
 800c172:	e016      	b.n	800c1a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	8ada      	ldrh	r2, [r3, #22]
 800c178:	4b1a      	ldr	r3, [pc, #104]	; (800c1e4 <tcp_input+0x49c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	b29b      	uxth	r3, r3
 800c180:	429a      	cmp	r2, r3
 800c182:	d10c      	bne.n	800c19e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	4b17      	ldr	r3, [pc, #92]	; (800c1e8 <tcp_input+0x4a0>)
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d00f      	beq.n	800c1b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00d      	beq.n	800c1b2 <tcp_input+0x46a>
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	617b      	str	r3, [r7, #20]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d1d1      	bne.n	800c152 <tcp_input+0x40a>
 800c1ae:	e000      	b.n	800c1b2 <tcp_input+0x46a>
            break;
 800c1b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d029      	beq.n	800c20c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00a      	beq.n	800c1d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <tcp_input+0x4c0>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c1ce:	4a0e      	ldr	r2, [pc, #56]	; (800c208 <tcp_input+0x4c0>)
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c1d4:	6978      	ldr	r0, [r7, #20]
 800c1d6:	f000 fa03 	bl	800c5e0 <tcp_listen_input>
      }
      pbuf_free(p);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7fd fcdc 	bl	8009b98 <pbuf_free>
      return;
 800c1e0:	e1a8      	b.n	800c534 <tcp_input+0x7ec>
 800c1e2:	bf00      	nop
 800c1e4:	2000a930 	.word	0x2000a930
 800c1e8:	200051d8 	.word	0x200051d8
 800c1ec:	080150f0 	.word	0x080150f0
 800c1f0:	0801521c 	.word	0x0801521c
 800c1f4:	0801513c 	.word	0x0801513c
 800c1f8:	2000a914 	.word	0x2000a914
 800c1fc:	08015248 	.word	0x08015248
 800c200:	2000a918 	.word	0x2000a918
 800c204:	08015274 	.word	0x08015274
 800c208:	2000a910 	.word	0x2000a910
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 8158 	beq.w	800c4c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c214:	4b95      	ldr	r3, [pc, #596]	; (800c46c <tcp_input+0x724>)
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	891a      	ldrh	r2, [r3, #8]
 800c21e:	4b93      	ldr	r3, [pc, #588]	; (800c46c <tcp_input+0x724>)
 800c220:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c222:	4a92      	ldr	r2, [pc, #584]	; (800c46c <tcp_input+0x724>)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c228:	4b91      	ldr	r3, [pc, #580]	; (800c470 <tcp_input+0x728>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a8f      	ldr	r2, [pc, #572]	; (800c46c <tcp_input+0x724>)
 800c22e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c230:	4b90      	ldr	r3, [pc, #576]	; (800c474 <tcp_input+0x72c>)
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c236:	4b90      	ldr	r3, [pc, #576]	; (800c478 <tcp_input+0x730>)
 800c238:	2200      	movs	r2, #0
 800c23a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c23c:	4b8f      	ldr	r3, [pc, #572]	; (800c47c <tcp_input+0x734>)
 800c23e:	2200      	movs	r2, #0
 800c240:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c242:	4b8f      	ldr	r3, [pc, #572]	; (800c480 <tcp_input+0x738>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	f003 0308 	and.w	r3, r3, #8
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d006      	beq.n	800c25c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	7b5b      	ldrb	r3, [r3, #13]
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c260:	2b00      	cmp	r3, #0
 800c262:	d017      	beq.n	800c294 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c264:	69f8      	ldr	r0, [r7, #28]
 800c266:	f7ff f843 	bl	800b2f0 <tcp_process_refused_data>
 800c26a:	4603      	mov	r3, r0
 800c26c:	f113 0f0d 	cmn.w	r3, #13
 800c270:	d007      	beq.n	800c282 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00c      	beq.n	800c294 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c27a:	4b82      	ldr	r3, [pc, #520]	; (800c484 <tcp_input+0x73c>)
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d008      	beq.n	800c294 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c286:	2b00      	cmp	r3, #0
 800c288:	f040 80e3 	bne.w	800c452 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c28c:	69f8      	ldr	r0, [r7, #28]
 800c28e:	f003 fe05 	bl	800fe9c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c292:	e0de      	b.n	800c452 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c294:	4a7c      	ldr	r2, [pc, #496]	; (800c488 <tcp_input+0x740>)
 800c296:	69fb      	ldr	r3, [r7, #28]
 800c298:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c29a:	69f8      	ldr	r0, [r7, #28]
 800c29c:	f000 fb18 	bl	800c8d0 <tcp_process>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c2a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2a8:	f113 0f0d 	cmn.w	r3, #13
 800c2ac:	f000 80d3 	beq.w	800c456 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c2b0:	4b71      	ldr	r3, [pc, #452]	; (800c478 <tcp_input+0x730>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	f003 0308 	and.w	r3, r3, #8
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d015      	beq.n	800c2e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d008      	beq.n	800c2d8 <tcp_input+0x590>
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2cc:	69fa      	ldr	r2, [r7, #28]
 800c2ce:	6912      	ldr	r2, [r2, #16]
 800c2d0:	f06f 010d 	mvn.w	r1, #13
 800c2d4:	4610      	mov	r0, r2
 800c2d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c2d8:	69f9      	ldr	r1, [r7, #28]
 800c2da:	486c      	ldr	r0, [pc, #432]	; (800c48c <tcp_input+0x744>)
 800c2dc:	f7ff fbbc 	bl	800ba58 <tcp_pcb_remove>
        tcp_free(pcb);
 800c2e0:	69f8      	ldr	r0, [r7, #28]
 800c2e2:	f7fd ff09 	bl	800a0f8 <tcp_free>
 800c2e6:	e0da      	b.n	800c49e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c2ec:	4b63      	ldr	r3, [pc, #396]	; (800c47c <tcp_input+0x734>)
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d01d      	beq.n	800c330 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c2f4:	4b61      	ldr	r3, [pc, #388]	; (800c47c <tcp_input+0x734>)
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00a      	beq.n	800c31a <tcp_input+0x5d2>
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c30a:	69fa      	ldr	r2, [r7, #28]
 800c30c:	6910      	ldr	r0, [r2, #16]
 800c30e:	89fa      	ldrh	r2, [r7, #14]
 800c310:	69f9      	ldr	r1, [r7, #28]
 800c312:	4798      	blx	r3
 800c314:	4603      	mov	r3, r0
 800c316:	74fb      	strb	r3, [r7, #19]
 800c318:	e001      	b.n	800c31e <tcp_input+0x5d6>
 800c31a:	2300      	movs	r3, #0
 800c31c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c31e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c322:	f113 0f0d 	cmn.w	r3, #13
 800c326:	f000 8098 	beq.w	800c45a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c32a:	4b54      	ldr	r3, [pc, #336]	; (800c47c <tcp_input+0x734>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c330:	69f8      	ldr	r0, [r7, #28]
 800c332:	f000 f915 	bl	800c560 <tcp_input_delayed_close>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f040 8090 	bne.w	800c45e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c33e:	4b4d      	ldr	r3, [pc, #308]	; (800c474 <tcp_input+0x72c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d041      	beq.n	800c3ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d006      	beq.n	800c35c <tcp_input+0x614>
 800c34e:	4b50      	ldr	r3, [pc, #320]	; (800c490 <tcp_input+0x748>)
 800c350:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c354:	494f      	ldr	r1, [pc, #316]	; (800c494 <tcp_input+0x74c>)
 800c356:	4850      	ldr	r0, [pc, #320]	; (800c498 <tcp_input+0x750>)
 800c358:	f006 fe6a 	bl	8013030 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	8b5b      	ldrh	r3, [r3, #26]
 800c360:	f003 0310 	and.w	r3, r3, #16
 800c364:	2b00      	cmp	r3, #0
 800c366:	d008      	beq.n	800c37a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c368:	4b42      	ldr	r3, [pc, #264]	; (800c474 <tcp_input+0x72c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fd fc13 	bl	8009b98 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c372:	69f8      	ldr	r0, [r7, #28]
 800c374:	f7fe f9a8 	bl	800a6c8 <tcp_abort>
            goto aborted;
 800c378:	e091      	b.n	800c49e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00c      	beq.n	800c39e <tcp_input+0x656>
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	6918      	ldr	r0, [r3, #16]
 800c38e:	4b39      	ldr	r3, [pc, #228]	; (800c474 <tcp_input+0x72c>)
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	69f9      	ldr	r1, [r7, #28]
 800c396:	47a0      	blx	r4
 800c398:	4603      	mov	r3, r0
 800c39a:	74fb      	strb	r3, [r7, #19]
 800c39c:	e008      	b.n	800c3b0 <tcp_input+0x668>
 800c39e:	4b35      	ldr	r3, [pc, #212]	; (800c474 <tcp_input+0x72c>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	69f9      	ldr	r1, [r7, #28]
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	f7ff f896 	bl	800b4d8 <tcp_recv_null>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c3b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3b4:	f113 0f0d 	cmn.w	r3, #13
 800c3b8:	d053      	beq.n	800c462 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c3ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d003      	beq.n	800c3ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c3c2:	4b2c      	ldr	r3, [pc, #176]	; (800c474 <tcp_input+0x72c>)
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c3ca:	4b2b      	ldr	r3, [pc, #172]	; (800c478 <tcp_input+0x730>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	f003 0320 	and.w	r3, r3, #32
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d030      	beq.n	800c438 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d009      	beq.n	800c3f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3e2:	7b5a      	ldrb	r2, [r3, #13]
 800c3e4:	69fb      	ldr	r3, [r7, #28]
 800c3e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3e8:	f042 0220 	orr.w	r2, r2, #32
 800c3ec:	b2d2      	uxtb	r2, r2
 800c3ee:	735a      	strb	r2, [r3, #13]
 800c3f0:	e022      	b.n	800c438 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c3fa:	d005      	beq.n	800c408 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c400:	3301      	adds	r3, #1
 800c402:	b29a      	uxth	r2, r3
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <tcp_input+0x6e2>
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	6918      	ldr	r0, [r3, #16]
 800c41c:	2300      	movs	r3, #0
 800c41e:	2200      	movs	r2, #0
 800c420:	69f9      	ldr	r1, [r7, #28]
 800c422:	47a0      	blx	r4
 800c424:	4603      	mov	r3, r0
 800c426:	74fb      	strb	r3, [r7, #19]
 800c428:	e001      	b.n	800c42e <tcp_input+0x6e6>
 800c42a:	2300      	movs	r3, #0
 800c42c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c42e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c432:	f113 0f0d 	cmn.w	r3, #13
 800c436:	d016      	beq.n	800c466 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c438:	4b13      	ldr	r3, [pc, #76]	; (800c488 <tcp_input+0x740>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c43e:	69f8      	ldr	r0, [r7, #28]
 800c440:	f000 f88e 	bl	800c560 <tcp_input_delayed_close>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d128      	bne.n	800c49c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c44a:	69f8      	ldr	r0, [r7, #28]
 800c44c:	f002 ff20 	bl	800f290 <tcp_output>
 800c450:	e025      	b.n	800c49e <tcp_input+0x756>
        goto aborted;
 800c452:	bf00      	nop
 800c454:	e023      	b.n	800c49e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c456:	bf00      	nop
 800c458:	e021      	b.n	800c49e <tcp_input+0x756>
              goto aborted;
 800c45a:	bf00      	nop
 800c45c:	e01f      	b.n	800c49e <tcp_input+0x756>
          goto aborted;
 800c45e:	bf00      	nop
 800c460:	e01d      	b.n	800c49e <tcp_input+0x756>
            goto aborted;
 800c462:	bf00      	nop
 800c464:	e01b      	b.n	800c49e <tcp_input+0x756>
              goto aborted;
 800c466:	bf00      	nop
 800c468:	e019      	b.n	800c49e <tcp_input+0x756>
 800c46a:	bf00      	nop
 800c46c:	2000a920 	.word	0x2000a920
 800c470:	2000a930 	.word	0x2000a930
 800c474:	2000a950 	.word	0x2000a950
 800c478:	2000a94d 	.word	0x2000a94d
 800c47c:	2000a948 	.word	0x2000a948
 800c480:	2000a94c 	.word	0x2000a94c
 800c484:	2000a94a 	.word	0x2000a94a
 800c488:	2000a954 	.word	0x2000a954
 800c48c:	2000a914 	.word	0x2000a914
 800c490:	080150f0 	.word	0x080150f0
 800c494:	080152a4 	.word	0x080152a4
 800c498:	0801513c 	.word	0x0801513c
          goto aborted;
 800c49c:	bf00      	nop
    tcp_input_pcb = NULL;
 800c49e:	4b27      	ldr	r3, [pc, #156]	; (800c53c <tcp_input+0x7f4>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c4a4:	4b26      	ldr	r3, [pc, #152]	; (800c540 <tcp_input+0x7f8>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c4aa:	4b26      	ldr	r3, [pc, #152]	; (800c544 <tcp_input+0x7fc>)
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d03f      	beq.n	800c532 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c4b2:	4b24      	ldr	r3, [pc, #144]	; (800c544 <tcp_input+0x7fc>)
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fd fb6e 	bl	8009b98 <pbuf_free>
      inseg.p = NULL;
 800c4bc:	4b21      	ldr	r3, [pc, #132]	; (800c544 <tcp_input+0x7fc>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c4c2:	e036      	b.n	800c532 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c4c4:	4b20      	ldr	r3, [pc, #128]	; (800c548 <tcp_input+0x800>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	899b      	ldrh	r3, [r3, #12]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fc f805 	bl	80084dc <lwip_htons>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	f003 0304 	and.w	r3, r3, #4
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d118      	bne.n	800c510 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4de:	4b1b      	ldr	r3, [pc, #108]	; (800c54c <tcp_input+0x804>)
 800c4e0:	6819      	ldr	r1, [r3, #0]
 800c4e2:	4b1b      	ldr	r3, [pc, #108]	; (800c550 <tcp_input+0x808>)
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	4b1a      	ldr	r3, [pc, #104]	; (800c554 <tcp_input+0x80c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4ee:	4b16      	ldr	r3, [pc, #88]	; (800c548 <tcp_input+0x800>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4f2:	885b      	ldrh	r3, [r3, #2]
 800c4f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c4f6:	4a14      	ldr	r2, [pc, #80]	; (800c548 <tcp_input+0x800>)
 800c4f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4fa:	8812      	ldrh	r2, [r2, #0]
 800c4fc:	b292      	uxth	r2, r2
 800c4fe:	9202      	str	r2, [sp, #8]
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	4b15      	ldr	r3, [pc, #84]	; (800c558 <tcp_input+0x810>)
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	4b15      	ldr	r3, [pc, #84]	; (800c55c <tcp_input+0x814>)
 800c508:	4602      	mov	r2, r0
 800c50a:	2000      	movs	r0, #0
 800c50c:	f003 fc74 	bl	800fdf8 <tcp_rst>
    pbuf_free(p);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7fd fb41 	bl	8009b98 <pbuf_free>
  return;
 800c516:	e00c      	b.n	800c532 <tcp_input+0x7ea>
    goto dropped;
 800c518:	bf00      	nop
 800c51a:	e006      	b.n	800c52a <tcp_input+0x7e2>
    goto dropped;
 800c51c:	bf00      	nop
 800c51e:	e004      	b.n	800c52a <tcp_input+0x7e2>
    goto dropped;
 800c520:	bf00      	nop
 800c522:	e002      	b.n	800c52a <tcp_input+0x7e2>
      goto dropped;
 800c524:	bf00      	nop
 800c526:	e000      	b.n	800c52a <tcp_input+0x7e2>
      goto dropped;
 800c528:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f7fd fb34 	bl	8009b98 <pbuf_free>
 800c530:	e000      	b.n	800c534 <tcp_input+0x7ec>
  return;
 800c532:	bf00      	nop
}
 800c534:	3724      	adds	r7, #36	; 0x24
 800c536:	46bd      	mov	sp, r7
 800c538:	bd90      	pop	{r4, r7, pc}
 800c53a:	bf00      	nop
 800c53c:	2000a954 	.word	0x2000a954
 800c540:	2000a950 	.word	0x2000a950
 800c544:	2000a920 	.word	0x2000a920
 800c548:	2000a930 	.word	0x2000a930
 800c54c:	2000a944 	.word	0x2000a944
 800c550:	2000a94a 	.word	0x2000a94a
 800c554:	2000a940 	.word	0x2000a940
 800c558:	200051e8 	.word	0x200051e8
 800c55c:	200051ec 	.word	0x200051ec

0800c560 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d106      	bne.n	800c57c <tcp_input_delayed_close+0x1c>
 800c56e:	4b17      	ldr	r3, [pc, #92]	; (800c5cc <tcp_input_delayed_close+0x6c>)
 800c570:	f240 225a 	movw	r2, #602	; 0x25a
 800c574:	4916      	ldr	r1, [pc, #88]	; (800c5d0 <tcp_input_delayed_close+0x70>)
 800c576:	4817      	ldr	r0, [pc, #92]	; (800c5d4 <tcp_input_delayed_close+0x74>)
 800c578:	f006 fd5a 	bl	8013030 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c57c:	4b16      	ldr	r3, [pc, #88]	; (800c5d8 <tcp_input_delayed_close+0x78>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	f003 0310 	and.w	r3, r3, #16
 800c584:	2b00      	cmp	r3, #0
 800c586:	d01c      	beq.n	800c5c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	8b5b      	ldrh	r3, [r3, #26]
 800c58c:	f003 0310 	and.w	r3, r3, #16
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10d      	bne.n	800c5b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d008      	beq.n	800c5b0 <tcp_input_delayed_close+0x50>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	6912      	ldr	r2, [r2, #16]
 800c5a8:	f06f 010e 	mvn.w	r1, #14
 800c5ac:	4610      	mov	r0, r2
 800c5ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	480a      	ldr	r0, [pc, #40]	; (800c5dc <tcp_input_delayed_close+0x7c>)
 800c5b4:	f7ff fa50 	bl	800ba58 <tcp_pcb_remove>
    tcp_free(pcb);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7fd fd9d 	bl	800a0f8 <tcp_free>
    return 1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	080150f0 	.word	0x080150f0
 800c5d0:	080152c0 	.word	0x080152c0
 800c5d4:	0801513c 	.word	0x0801513c
 800c5d8:	2000a94d 	.word	0x2000a94d
 800c5dc:	2000a914 	.word	0x2000a914

0800c5e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c5e0:	b590      	push	{r4, r7, lr}
 800c5e2:	b08b      	sub	sp, #44	; 0x2c
 800c5e4:	af04      	add	r7, sp, #16
 800c5e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c5e8:	4b6f      	ldr	r3, [pc, #444]	; (800c7a8 <tcp_listen_input+0x1c8>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f040 80d2 	bne.w	800c79a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <tcp_listen_input+0x2a>
 800c5fc:	4b6b      	ldr	r3, [pc, #428]	; (800c7ac <tcp_listen_input+0x1cc>)
 800c5fe:	f240 2281 	movw	r2, #641	; 0x281
 800c602:	496b      	ldr	r1, [pc, #428]	; (800c7b0 <tcp_listen_input+0x1d0>)
 800c604:	486b      	ldr	r0, [pc, #428]	; (800c7b4 <tcp_listen_input+0x1d4>)
 800c606:	f006 fd13 	bl	8013030 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c60a:	4b67      	ldr	r3, [pc, #412]	; (800c7a8 <tcp_listen_input+0x1c8>)
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	f003 0310 	and.w	r3, r3, #16
 800c612:	2b00      	cmp	r3, #0
 800c614:	d019      	beq.n	800c64a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c616:	4b68      	ldr	r3, [pc, #416]	; (800c7b8 <tcp_listen_input+0x1d8>)
 800c618:	6819      	ldr	r1, [r3, #0]
 800c61a:	4b68      	ldr	r3, [pc, #416]	; (800c7bc <tcp_listen_input+0x1dc>)
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	4b67      	ldr	r3, [pc, #412]	; (800c7c0 <tcp_listen_input+0x1e0>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c626:	4b67      	ldr	r3, [pc, #412]	; (800c7c4 <tcp_listen_input+0x1e4>)
 800c628:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c62a:	885b      	ldrh	r3, [r3, #2]
 800c62c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c62e:	4a65      	ldr	r2, [pc, #404]	; (800c7c4 <tcp_listen_input+0x1e4>)
 800c630:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c632:	8812      	ldrh	r2, [r2, #0]
 800c634:	b292      	uxth	r2, r2
 800c636:	9202      	str	r2, [sp, #8]
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	4b63      	ldr	r3, [pc, #396]	; (800c7c8 <tcp_listen_input+0x1e8>)
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	4b63      	ldr	r3, [pc, #396]	; (800c7cc <tcp_listen_input+0x1ec>)
 800c640:	4602      	mov	r2, r0
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f003 fbd8 	bl	800fdf8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c648:	e0a9      	b.n	800c79e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c64a:	4b57      	ldr	r3, [pc, #348]	; (800c7a8 <tcp_listen_input+0x1c8>)
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	f000 80a3 	beq.w	800c79e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	7d5b      	ldrb	r3, [r3, #21]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff f85f 	bl	800b720 <tcp_alloc>
 800c662:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d111      	bne.n	800c68e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00a      	beq.n	800c688 <tcp_listen_input+0xa8>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	6910      	ldr	r0, [r2, #16]
 800c67a:	f04f 32ff 	mov.w	r2, #4294967295
 800c67e:	2100      	movs	r1, #0
 800c680:	4798      	blx	r3
 800c682:	4603      	mov	r3, r0
 800c684:	73bb      	strb	r3, [r7, #14]
      return;
 800c686:	e08b      	b.n	800c7a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c688:	23f0      	movs	r3, #240	; 0xf0
 800c68a:	73bb      	strb	r3, [r7, #14]
      return;
 800c68c:	e088      	b.n	800c7a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c68e:	4b50      	ldr	r3, [pc, #320]	; (800c7d0 <tcp_listen_input+0x1f0>)
 800c690:	695a      	ldr	r2, [r3, #20]
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c696:	4b4e      	ldr	r3, [pc, #312]	; (800c7d0 <tcp_listen_input+0x1f0>)
 800c698:	691a      	ldr	r2, [r3, #16]
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8ada      	ldrh	r2, [r3, #22]
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c6a6:	4b47      	ldr	r3, [pc, #284]	; (800c7c4 <tcp_listen_input+0x1e4>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c6b8:	4b41      	ldr	r3, [pc, #260]	; (800c7c0 <tcp_listen_input+0x1e0>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c6ca:	6978      	ldr	r0, [r7, #20]
 800c6cc:	f7ff fa58 	bl	800bb80 <tcp_next_iss>
 800c6d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	693a      	ldr	r2, [r7, #16]
 800c6d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c6ea:	4b35      	ldr	r3, [pc, #212]	; (800c7c0 <tcp_listen_input+0x1e0>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	1e5a      	subs	r2, r3, #1
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	691a      	ldr	r2, [r3, #16]
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7a5b      	ldrb	r3, [r3, #9]
 800c706:	f003 030c 	and.w	r3, r3, #12
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	7a1a      	ldrb	r2, [r3, #8]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c718:	4b2e      	ldr	r3, [pc, #184]	; (800c7d4 <tcp_listen_input+0x1f4>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	60da      	str	r2, [r3, #12]
 800c720:	4a2c      	ldr	r2, [pc, #176]	; (800c7d4 <tcp_listen_input+0x1f4>)
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	f003 fd29 	bl	801017c <tcp_timer_needed>
 800c72a:	4b2b      	ldr	r3, [pc, #172]	; (800c7d8 <tcp_listen_input+0x1f8>)
 800c72c:	2201      	movs	r2, #1
 800c72e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c730:	6978      	ldr	r0, [r7, #20]
 800c732:	f001 fd8f 	bl	800e254 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c736:	4b23      	ldr	r3, [pc, #140]	; (800c7c4 <tcp_listen_input+0x1e4>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	89db      	ldrh	r3, [r3, #14]
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	3304      	adds	r3, #4
 800c758:	4618      	mov	r0, r3
 800c75a:	f005 f8ed 	bl	8011938 <ip4_route>
 800c75e:	4601      	mov	r1, r0
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	3304      	adds	r3, #4
 800c764:	461a      	mov	r2, r3
 800c766:	4620      	mov	r0, r4
 800c768:	f7ff fa30 	bl	800bbcc <tcp_eff_send_mss_netif>
 800c76c:	4603      	mov	r3, r0
 800c76e:	461a      	mov	r2, r3
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c774:	2112      	movs	r1, #18
 800c776:	6978      	ldr	r0, [r7, #20]
 800c778:	f002 fc9c 	bl	800f0b4 <tcp_enqueue_flags>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d004      	beq.n	800c792 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c788:	2100      	movs	r1, #0
 800c78a:	6978      	ldr	r0, [r7, #20]
 800c78c:	f7fd fede 	bl	800a54c <tcp_abandon>
      return;
 800c790:	e006      	b.n	800c7a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c792:	6978      	ldr	r0, [r7, #20]
 800c794:	f002 fd7c 	bl	800f290 <tcp_output>
  return;
 800c798:	e001      	b.n	800c79e <tcp_listen_input+0x1be>
    return;
 800c79a:	bf00      	nop
 800c79c:	e000      	b.n	800c7a0 <tcp_listen_input+0x1c0>
  return;
 800c79e:	bf00      	nop
}
 800c7a0:	371c      	adds	r7, #28
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd90      	pop	{r4, r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	2000a94c 	.word	0x2000a94c
 800c7ac:	080150f0 	.word	0x080150f0
 800c7b0:	080152e8 	.word	0x080152e8
 800c7b4:	0801513c 	.word	0x0801513c
 800c7b8:	2000a944 	.word	0x2000a944
 800c7bc:	2000a94a 	.word	0x2000a94a
 800c7c0:	2000a940 	.word	0x2000a940
 800c7c4:	2000a930 	.word	0x2000a930
 800c7c8:	200051e8 	.word	0x200051e8
 800c7cc:	200051ec 	.word	0x200051ec
 800c7d0:	200051d8 	.word	0x200051d8
 800c7d4:	2000a914 	.word	0x2000a914
 800c7d8:	2000a91c 	.word	0x2000a91c

0800c7dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af04      	add	r7, sp, #16
 800c7e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c7e4:	4b2f      	ldr	r3, [pc, #188]	; (800c8a4 <tcp_timewait_input+0xc8>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d153      	bne.n	800c898 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <tcp_timewait_input+0x28>
 800c7f6:	4b2c      	ldr	r3, [pc, #176]	; (800c8a8 <tcp_timewait_input+0xcc>)
 800c7f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c7fc:	492b      	ldr	r1, [pc, #172]	; (800c8ac <tcp_timewait_input+0xd0>)
 800c7fe:	482c      	ldr	r0, [pc, #176]	; (800c8b0 <tcp_timewait_input+0xd4>)
 800c800:	f006 fc16 	bl	8013030 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c804:	4b27      	ldr	r3, [pc, #156]	; (800c8a4 <tcp_timewait_input+0xc8>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	f003 0302 	and.w	r3, r3, #2
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d02a      	beq.n	800c866 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <tcp_timewait_input+0xd8>)
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	db2d      	blt.n	800c87a <tcp_timewait_input+0x9e>
 800c81e:	4b25      	ldr	r3, [pc, #148]	; (800c8b4 <tcp_timewait_input+0xd8>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c82a:	440b      	add	r3, r1
 800c82c:	1ad3      	subs	r3, r2, r3
 800c82e:	2b00      	cmp	r3, #0
 800c830:	dc23      	bgt.n	800c87a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c832:	4b21      	ldr	r3, [pc, #132]	; (800c8b8 <tcp_timewait_input+0xdc>)
 800c834:	6819      	ldr	r1, [r3, #0]
 800c836:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <tcp_timewait_input+0xe0>)
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	4b1d      	ldr	r3, [pc, #116]	; (800c8b4 <tcp_timewait_input+0xd8>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c842:	4b1f      	ldr	r3, [pc, #124]	; (800c8c0 <tcp_timewait_input+0xe4>)
 800c844:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c846:	885b      	ldrh	r3, [r3, #2]
 800c848:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c84a:	4a1d      	ldr	r2, [pc, #116]	; (800c8c0 <tcp_timewait_input+0xe4>)
 800c84c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c84e:	8812      	ldrh	r2, [r2, #0]
 800c850:	b292      	uxth	r2, r2
 800c852:	9202      	str	r2, [sp, #8]
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	4b1b      	ldr	r3, [pc, #108]	; (800c8c4 <tcp_timewait_input+0xe8>)
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	4b1b      	ldr	r3, [pc, #108]	; (800c8c8 <tcp_timewait_input+0xec>)
 800c85c:	4602      	mov	r2, r0
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f003 faca 	bl	800fdf8 <tcp_rst>
      return;
 800c864:	e01b      	b.n	800c89e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c866:	4b0f      	ldr	r3, [pc, #60]	; (800c8a4 <tcp_timewait_input+0xc8>)
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c872:	4b16      	ldr	r3, [pc, #88]	; (800c8cc <tcp_timewait_input+0xf0>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c87a:	4b10      	ldr	r3, [pc, #64]	; (800c8bc <tcp_timewait_input+0xe0>)
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00c      	beq.n	800c89c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	8b5b      	ldrh	r3, [r3, #26]
 800c886:	f043 0302 	orr.w	r3, r3, #2
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f002 fcfd 	bl	800f290 <tcp_output>
  }
  return;
 800c896:	e001      	b.n	800c89c <tcp_timewait_input+0xc0>
    return;
 800c898:	bf00      	nop
 800c89a:	e000      	b.n	800c89e <tcp_timewait_input+0xc2>
  return;
 800c89c:	bf00      	nop
}
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	2000a94c 	.word	0x2000a94c
 800c8a8:	080150f0 	.word	0x080150f0
 800c8ac:	08015308 	.word	0x08015308
 800c8b0:	0801513c 	.word	0x0801513c
 800c8b4:	2000a940 	.word	0x2000a940
 800c8b8:	2000a944 	.word	0x2000a944
 800c8bc:	2000a94a 	.word	0x2000a94a
 800c8c0:	2000a930 	.word	0x2000a930
 800c8c4:	200051e8 	.word	0x200051e8
 800c8c8:	200051ec 	.word	0x200051ec
 800c8cc:	2000a908 	.word	0x2000a908

0800c8d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c8d0:	b590      	push	{r4, r7, lr}
 800c8d2:	b08d      	sub	sp, #52	; 0x34
 800c8d4:	af04      	add	r7, sp, #16
 800c8d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d106      	bne.n	800c8f4 <tcp_process+0x24>
 800c8e6:	4b9d      	ldr	r3, [pc, #628]	; (800cb5c <tcp_process+0x28c>)
 800c8e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c8ec:	499c      	ldr	r1, [pc, #624]	; (800cb60 <tcp_process+0x290>)
 800c8ee:	489d      	ldr	r0, [pc, #628]	; (800cb64 <tcp_process+0x294>)
 800c8f0:	f006 fb9e 	bl	8013030 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c8f4:	4b9c      	ldr	r3, [pc, #624]	; (800cb68 <tcp_process+0x298>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	f003 0304 	and.w	r3, r3, #4
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d04e      	beq.n	800c99e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	7d1b      	ldrb	r3, [r3, #20]
 800c904:	2b02      	cmp	r3, #2
 800c906:	d108      	bne.n	800c91a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c90c:	4b97      	ldr	r3, [pc, #604]	; (800cb6c <tcp_process+0x29c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	429a      	cmp	r2, r3
 800c912:	d123      	bne.n	800c95c <tcp_process+0x8c>
        acceptable = 1;
 800c914:	2301      	movs	r3, #1
 800c916:	76fb      	strb	r3, [r7, #27]
 800c918:	e020      	b.n	800c95c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c91e:	4b94      	ldr	r3, [pc, #592]	; (800cb70 <tcp_process+0x2a0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	429a      	cmp	r2, r3
 800c924:	d102      	bne.n	800c92c <tcp_process+0x5c>
        acceptable = 1;
 800c926:	2301      	movs	r3, #1
 800c928:	76fb      	strb	r3, [r7, #27]
 800c92a:	e017      	b.n	800c95c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c92c:	4b90      	ldr	r3, [pc, #576]	; (800cb70 <tcp_process+0x2a0>)
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c934:	1ad3      	subs	r3, r2, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	db10      	blt.n	800c95c <tcp_process+0x8c>
 800c93a:	4b8d      	ldr	r3, [pc, #564]	; (800cb70 <tcp_process+0x2a0>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c946:	440b      	add	r3, r1
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	dc06      	bgt.n	800c95c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	8b5b      	ldrh	r3, [r3, #26]
 800c952:	f043 0302 	orr.w	r3, r3, #2
 800c956:	b29a      	uxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c95c:	7efb      	ldrb	r3, [r7, #27]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d01b      	beq.n	800c99a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7d1b      	ldrb	r3, [r3, #20]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d106      	bne.n	800c978 <tcp_process+0xa8>
 800c96a:	4b7c      	ldr	r3, [pc, #496]	; (800cb5c <tcp_process+0x28c>)
 800c96c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c970:	4980      	ldr	r1, [pc, #512]	; (800cb74 <tcp_process+0x2a4>)
 800c972:	487c      	ldr	r0, [pc, #496]	; (800cb64 <tcp_process+0x294>)
 800c974:	f006 fb5c 	bl	8013030 <iprintf>
      recv_flags |= TF_RESET;
 800c978:	4b7f      	ldr	r3, [pc, #508]	; (800cb78 <tcp_process+0x2a8>)
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f043 0308 	orr.w	r3, r3, #8
 800c980:	b2da      	uxtb	r2, r3
 800c982:	4b7d      	ldr	r3, [pc, #500]	; (800cb78 <tcp_process+0x2a8>)
 800c984:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	8b5b      	ldrh	r3, [r3, #26]
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c994:	f06f 030d 	mvn.w	r3, #13
 800c998:	e37a      	b.n	800d090 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c99a:	2300      	movs	r3, #0
 800c99c:	e378      	b.n	800d090 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c99e:	4b72      	ldr	r3, [pc, #456]	; (800cb68 <tcp_process+0x298>)
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	f003 0302 	and.w	r3, r3, #2
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d010      	beq.n	800c9cc <tcp_process+0xfc>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	7d1b      	ldrb	r3, [r3, #20]
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d00c      	beq.n	800c9cc <tcp_process+0xfc>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7d1b      	ldrb	r3, [r3, #20]
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d008      	beq.n	800c9cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	8b5b      	ldrh	r3, [r3, #26]
 800c9be:	f043 0302 	orr.w	r3, r3, #2
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e361      	b.n	800d090 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	8b5b      	ldrh	r3, [r3, #26]
 800c9d0:	f003 0310 	and.w	r3, r3, #16
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d103      	bne.n	800c9e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c9d8:	4b68      	ldr	r3, [pc, #416]	; (800cb7c <tcp_process+0x2ac>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f001 fc2f 	bl	800e254 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	7d1b      	ldrb	r3, [r3, #20]
 800c9fa:	3b02      	subs	r3, #2
 800c9fc:	2b07      	cmp	r3, #7
 800c9fe:	f200 8337 	bhi.w	800d070 <tcp_process+0x7a0>
 800ca02:	a201      	add	r2, pc, #4	; (adr r2, 800ca08 <tcp_process+0x138>)
 800ca04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca08:	0800ca29 	.word	0x0800ca29
 800ca0c:	0800cc59 	.word	0x0800cc59
 800ca10:	0800cdd1 	.word	0x0800cdd1
 800ca14:	0800cdfb 	.word	0x0800cdfb
 800ca18:	0800cf1f 	.word	0x0800cf1f
 800ca1c:	0800cdd1 	.word	0x0800cdd1
 800ca20:	0800cfab 	.word	0x0800cfab
 800ca24:	0800d03b 	.word	0x0800d03b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ca28:	4b4f      	ldr	r3, [pc, #316]	; (800cb68 <tcp_process+0x298>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	f003 0310 	and.w	r3, r3, #16
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 80e4 	beq.w	800cbfe <tcp_process+0x32e>
 800ca36:	4b4c      	ldr	r3, [pc, #304]	; (800cb68 <tcp_process+0x298>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80dd 	beq.w	800cbfe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	4b48      	ldr	r3, [pc, #288]	; (800cb6c <tcp_process+0x29c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	f040 80d5 	bne.w	800cbfe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ca54:	4b46      	ldr	r3, [pc, #280]	; (800cb70 <tcp_process+0x2a0>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	1c5a      	adds	r2, r3, #1
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ca66:	4b41      	ldr	r3, [pc, #260]	; (800cb6c <tcp_process+0x29c>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ca6e:	4b44      	ldr	r3, [pc, #272]	; (800cb80 <tcp_process+0x2b0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	89db      	ldrh	r3, [r3, #14]
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ca88:	4b39      	ldr	r3, [pc, #228]	; (800cb70 <tcp_process+0x2a0>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	1e5a      	subs	r2, r3, #1
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2204      	movs	r2, #4
 800ca96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	4618      	mov	r0, r3
 800caa2:	f004 ff49 	bl	8011938 <ip4_route>
 800caa6:	4601      	mov	r1, r0
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	3304      	adds	r3, #4
 800caac:	461a      	mov	r2, r3
 800caae:	4620      	mov	r0, r4
 800cab0:	f7ff f88c 	bl	800bbcc <tcp_eff_send_mss_netif>
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cac0:	009a      	lsls	r2, r3, #2
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cac6:	005b      	lsls	r3, r3, #1
 800cac8:	f241 111c 	movw	r1, #4380	; 0x111c
 800cacc:	428b      	cmp	r3, r1
 800cace:	bf38      	it	cc
 800cad0:	460b      	movcc	r3, r1
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d204      	bcs.n	800cae0 <tcp_process+0x210>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	b29b      	uxth	r3, r3
 800cade:	e00d      	b.n	800cafc <tcp_process+0x22c>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cae4:	005b      	lsls	r3, r3, #1
 800cae6:	f241 121c 	movw	r2, #4380	; 0x111c
 800caea:	4293      	cmp	r3, r2
 800caec:	d904      	bls.n	800caf8 <tcp_process+0x228>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	e001      	b.n	800cafc <tcp_process+0x22c>
 800caf8:	f241 131c 	movw	r3, #4380	; 0x111c
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d106      	bne.n	800cb1a <tcp_process+0x24a>
 800cb0c:	4b13      	ldr	r3, [pc, #76]	; (800cb5c <tcp_process+0x28c>)
 800cb0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cb12:	491c      	ldr	r1, [pc, #112]	; (800cb84 <tcp_process+0x2b4>)
 800cb14:	4813      	ldr	r0, [pc, #76]	; (800cb64 <tcp_process+0x294>)
 800cb16:	f006 fa8b 	bl	8013030 <iprintf>
        --pcb->snd_queuelen;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb20:	3b01      	subs	r3, #1
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d12a      	bne.n	800cb8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d106      	bne.n	800cb50 <tcp_process+0x280>
 800cb42:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <tcp_process+0x28c>)
 800cb44:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cb48:	490f      	ldr	r1, [pc, #60]	; (800cb88 <tcp_process+0x2b8>)
 800cb4a:	4806      	ldr	r0, [pc, #24]	; (800cb64 <tcp_process+0x294>)
 800cb4c:	f006 fa70 	bl	8013030 <iprintf>
          pcb->unsent = rseg->next;
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	66da      	str	r2, [r3, #108]	; 0x6c
 800cb58:	e01c      	b.n	800cb94 <tcp_process+0x2c4>
 800cb5a:	bf00      	nop
 800cb5c:	080150f0 	.word	0x080150f0
 800cb60:	08015328 	.word	0x08015328
 800cb64:	0801513c 	.word	0x0801513c
 800cb68:	2000a94c 	.word	0x2000a94c
 800cb6c:	2000a944 	.word	0x2000a944
 800cb70:	2000a940 	.word	0x2000a940
 800cb74:	08015344 	.word	0x08015344
 800cb78:	2000a94d 	.word	0x2000a94d
 800cb7c:	2000a908 	.word	0x2000a908
 800cb80:	2000a930 	.word	0x2000a930
 800cb84:	08015364 	.word	0x08015364
 800cb88:	0801537c 	.word	0x0801537c
        } else {
          pcb->unacked = rseg->next;
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800cb94:	69f8      	ldr	r0, [r7, #28]
 800cb96:	f7fe fc3c 	bl	800b412 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d104      	bne.n	800cbac <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba8:	861a      	strh	r2, [r3, #48]	; 0x30
 800cbaa:	e006      	b.n	800cbba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00a      	beq.n	800cbda <tcp_process+0x30a>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	6910      	ldr	r0, [r2, #16]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	4798      	blx	r3
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	76bb      	strb	r3, [r7, #26]
 800cbd8:	e001      	b.n	800cbde <tcp_process+0x30e>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800cbde:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cbe2:	f113 0f0d 	cmn.w	r3, #13
 800cbe6:	d102      	bne.n	800cbee <tcp_process+0x31e>
          return ERR_ABRT;
 800cbe8:	f06f 030c 	mvn.w	r3, #12
 800cbec:	e250      	b.n	800d090 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	8b5b      	ldrh	r3, [r3, #26]
 800cbf2:	f043 0302 	orr.w	r3, r3, #2
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cbfc:	e23a      	b.n	800d074 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cbfe:	4b98      	ldr	r3, [pc, #608]	; (800ce60 <tcp_process+0x590>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	f003 0310 	and.w	r3, r3, #16
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f000 8234 	beq.w	800d074 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc0c:	4b95      	ldr	r3, [pc, #596]	; (800ce64 <tcp_process+0x594>)
 800cc0e:	6819      	ldr	r1, [r3, #0]
 800cc10:	4b95      	ldr	r3, [pc, #596]	; (800ce68 <tcp_process+0x598>)
 800cc12:	881b      	ldrh	r3, [r3, #0]
 800cc14:	461a      	mov	r2, r3
 800cc16:	4b95      	ldr	r3, [pc, #596]	; (800ce6c <tcp_process+0x59c>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc1c:	4b94      	ldr	r3, [pc, #592]	; (800ce70 <tcp_process+0x5a0>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc20:	885b      	ldrh	r3, [r3, #2]
 800cc22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc24:	4a92      	ldr	r2, [pc, #584]	; (800ce70 <tcp_process+0x5a0>)
 800cc26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc28:	8812      	ldrh	r2, [r2, #0]
 800cc2a:	b292      	uxth	r2, r2
 800cc2c:	9202      	str	r2, [sp, #8]
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	4b90      	ldr	r3, [pc, #576]	; (800ce74 <tcp_process+0x5a4>)
 800cc32:	9300      	str	r3, [sp, #0]
 800cc34:	4b90      	ldr	r3, [pc, #576]	; (800ce78 <tcp_process+0x5a8>)
 800cc36:	4602      	mov	r2, r0
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f003 f8dd 	bl	800fdf8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc44:	2b05      	cmp	r3, #5
 800cc46:	f200 8215 	bhi.w	800d074 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f002 fea9 	bl	800f9a8 <tcp_rexmit_rto>
      break;
 800cc56:	e20d      	b.n	800d074 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cc58:	4b81      	ldr	r3, [pc, #516]	; (800ce60 <tcp_process+0x590>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	f003 0310 	and.w	r3, r3, #16
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 80a1 	beq.w	800cda8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc66:	4b7f      	ldr	r3, [pc, #508]	; (800ce64 <tcp_process+0x594>)
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	3b01      	subs	r3, #1
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	db7e      	blt.n	800cd74 <tcp_process+0x4a4>
 800cc76:	4b7b      	ldr	r3, [pc, #492]	; (800ce64 <tcp_process+0x594>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dc77      	bgt.n	800cd74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2204      	movs	r2, #4
 800cc88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d102      	bne.n	800cc98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800cc92:	23fa      	movs	r3, #250	; 0xfa
 800cc94:	76bb      	strb	r3, [r7, #26]
 800cc96:	e01d      	b.n	800ccd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc9c:	699b      	ldr	r3, [r3, #24]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d106      	bne.n	800ccb0 <tcp_process+0x3e0>
 800cca2:	4b76      	ldr	r3, [pc, #472]	; (800ce7c <tcp_process+0x5ac>)
 800cca4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800cca8:	4975      	ldr	r1, [pc, #468]	; (800ce80 <tcp_process+0x5b0>)
 800ccaa:	4876      	ldr	r0, [pc, #472]	; (800ce84 <tcp_process+0x5b4>)
 800ccac:	f006 f9c0 	bl	8013030 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <tcp_process+0x400>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccbe:	699b      	ldr	r3, [r3, #24]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	6910      	ldr	r0, [r2, #16]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	4798      	blx	r3
 800ccca:	4603      	mov	r3, r0
 800cccc:	76bb      	strb	r3, [r7, #26]
 800ccce:	e001      	b.n	800ccd4 <tcp_process+0x404>
 800ccd0:	23f0      	movs	r3, #240	; 0xf0
 800ccd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ccd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00a      	beq.n	800ccf2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ccdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cce0:	f113 0f0d 	cmn.w	r3, #13
 800cce4:	d002      	beq.n	800ccec <tcp_process+0x41c>
              tcp_abort(pcb);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7fd fcee 	bl	800a6c8 <tcp_abort>
            }
            return ERR_ABRT;
 800ccec:	f06f 030c 	mvn.w	r3, #12
 800ccf0:	e1ce      	b.n	800d090 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fae0 	bl	800d2b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ccf8:	4b63      	ldr	r3, [pc, #396]	; (800ce88 <tcp_process+0x5b8>)
 800ccfa:	881b      	ldrh	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d005      	beq.n	800cd0c <tcp_process+0x43c>
            recv_acked--;
 800cd00:	4b61      	ldr	r3, [pc, #388]	; (800ce88 <tcp_process+0x5b8>)
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	3b01      	subs	r3, #1
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	4b5f      	ldr	r3, [pc, #380]	; (800ce88 <tcp_process+0x5b8>)
 800cd0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd10:	009a      	lsls	r2, r3, #2
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	f241 111c 	movw	r1, #4380	; 0x111c
 800cd1c:	428b      	cmp	r3, r1
 800cd1e:	bf38      	it	cc
 800cd20:	460b      	movcc	r3, r1
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d204      	bcs.n	800cd30 <tcp_process+0x460>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	e00d      	b.n	800cd4c <tcp_process+0x47c>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	f241 121c 	movw	r2, #4380	; 0x111c
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d904      	bls.n	800cd48 <tcp_process+0x478>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	e001      	b.n	800cd4c <tcp_process+0x47c>
 800cd48:	f241 131c 	movw	r3, #4380	; 0x111c
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800cd52:	4b4e      	ldr	r3, [pc, #312]	; (800ce8c <tcp_process+0x5bc>)
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d037      	beq.n	800cdce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8b5b      	ldrh	r3, [r3, #26]
 800cd62:	f043 0302 	orr.w	r3, r3, #2
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2207      	movs	r2, #7
 800cd70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800cd72:	e02c      	b.n	800cdce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd74:	4b3b      	ldr	r3, [pc, #236]	; (800ce64 <tcp_process+0x594>)
 800cd76:	6819      	ldr	r1, [r3, #0]
 800cd78:	4b3b      	ldr	r3, [pc, #236]	; (800ce68 <tcp_process+0x598>)
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	4b3b      	ldr	r3, [pc, #236]	; (800ce6c <tcp_process+0x59c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd84:	4b3a      	ldr	r3, [pc, #232]	; (800ce70 <tcp_process+0x5a0>)
 800cd86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd88:	885b      	ldrh	r3, [r3, #2]
 800cd8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd8c:	4a38      	ldr	r2, [pc, #224]	; (800ce70 <tcp_process+0x5a0>)
 800cd8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd90:	8812      	ldrh	r2, [r2, #0]
 800cd92:	b292      	uxth	r2, r2
 800cd94:	9202      	str	r2, [sp, #8]
 800cd96:	9301      	str	r3, [sp, #4]
 800cd98:	4b36      	ldr	r3, [pc, #216]	; (800ce74 <tcp_process+0x5a4>)
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	4b36      	ldr	r3, [pc, #216]	; (800ce78 <tcp_process+0x5a8>)
 800cd9e:	4602      	mov	r2, r0
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f003 f829 	bl	800fdf8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800cda6:	e167      	b.n	800d078 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cda8:	4b2d      	ldr	r3, [pc, #180]	; (800ce60 <tcp_process+0x590>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 0302 	and.w	r3, r3, #2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 8161 	beq.w	800d078 <tcp_process+0x7a8>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdba:	1e5a      	subs	r2, r3, #1
 800cdbc:	4b2b      	ldr	r3, [pc, #172]	; (800ce6c <tcp_process+0x59c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	f040 8159 	bne.w	800d078 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f002 fe10 	bl	800f9ec <tcp_rexmit>
      break;
 800cdcc:	e154      	b.n	800d078 <tcp_process+0x7a8>
 800cdce:	e153      	b.n	800d078 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fa71 	bl	800d2b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cdd6:	4b2d      	ldr	r3, [pc, #180]	; (800ce8c <tcp_process+0x5bc>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	f003 0320 	and.w	r3, r3, #32
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 814c 	beq.w	800d07c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	8b5b      	ldrh	r3, [r3, #26]
 800cde8:	f043 0302 	orr.w	r3, r3, #2
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2207      	movs	r2, #7
 800cdf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cdf8:	e140      	b.n	800d07c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fa5c 	bl	800d2b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ce00:	4b22      	ldr	r3, [pc, #136]	; (800ce8c <tcp_process+0x5bc>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f003 0320 	and.w	r3, r3, #32
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d071      	beq.n	800cef0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce0c:	4b14      	ldr	r3, [pc, #80]	; (800ce60 <tcp_process+0x590>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	f003 0310 	and.w	r3, r3, #16
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d060      	beq.n	800ceda <tcp_process+0x60a>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce1c:	4b11      	ldr	r3, [pc, #68]	; (800ce64 <tcp_process+0x594>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d15a      	bne.n	800ceda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d156      	bne.n	800ceda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	8b5b      	ldrh	r3, [r3, #26]
 800ce30:	f043 0302 	orr.w	r3, r3, #2
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7fe fdbc 	bl	800b9b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ce40:	4b13      	ldr	r3, [pc, #76]	; (800ce90 <tcp_process+0x5c0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d105      	bne.n	800ce56 <tcp_process+0x586>
 800ce4a:	4b11      	ldr	r3, [pc, #68]	; (800ce90 <tcp_process+0x5c0>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	4a0f      	ldr	r2, [pc, #60]	; (800ce90 <tcp_process+0x5c0>)
 800ce52:	6013      	str	r3, [r2, #0]
 800ce54:	e02e      	b.n	800ceb4 <tcp_process+0x5e4>
 800ce56:	4b0e      	ldr	r3, [pc, #56]	; (800ce90 <tcp_process+0x5c0>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	617b      	str	r3, [r7, #20]
 800ce5c:	e027      	b.n	800ceae <tcp_process+0x5de>
 800ce5e:	bf00      	nop
 800ce60:	2000a94c 	.word	0x2000a94c
 800ce64:	2000a944 	.word	0x2000a944
 800ce68:	2000a94a 	.word	0x2000a94a
 800ce6c:	2000a940 	.word	0x2000a940
 800ce70:	2000a930 	.word	0x2000a930
 800ce74:	200051e8 	.word	0x200051e8
 800ce78:	200051ec 	.word	0x200051ec
 800ce7c:	080150f0 	.word	0x080150f0
 800ce80:	08015390 	.word	0x08015390
 800ce84:	0801513c 	.word	0x0801513c
 800ce88:	2000a948 	.word	0x2000a948
 800ce8c:	2000a94d 	.word	0x2000a94d
 800ce90:	2000a914 	.word	0x2000a914
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d104      	bne.n	800cea8 <tcp_process+0x5d8>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68da      	ldr	r2, [r3, #12]
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	60da      	str	r2, [r3, #12]
 800cea6:	e005      	b.n	800ceb4 <tcp_process+0x5e4>
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1ef      	bne.n	800ce94 <tcp_process+0x5c4>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	60da      	str	r2, [r3, #12]
 800ceba:	4b77      	ldr	r3, [pc, #476]	; (800d098 <tcp_process+0x7c8>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	220a      	movs	r2, #10
 800cec4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cec6:	4b75      	ldr	r3, [pc, #468]	; (800d09c <tcp_process+0x7cc>)
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	60da      	str	r2, [r3, #12]
 800cece:	4a73      	ldr	r2, [pc, #460]	; (800d09c <tcp_process+0x7cc>)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	f003 f952 	bl	801017c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ced8:	e0d2      	b.n	800d080 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	8b5b      	ldrh	r3, [r3, #26]
 800cede:	f043 0302 	orr.w	r3, r3, #2
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2208      	movs	r2, #8
 800ceec:	751a      	strb	r2, [r3, #20]
      break;
 800ceee:	e0c7      	b.n	800d080 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cef0:	4b6b      	ldr	r3, [pc, #428]	; (800d0a0 <tcp_process+0x7d0>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	f003 0310 	and.w	r3, r3, #16
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 80c1 	beq.w	800d080 <tcp_process+0x7b0>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf02:	4b68      	ldr	r3, [pc, #416]	; (800d0a4 <tcp_process+0x7d4>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	f040 80ba 	bne.w	800d080 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f040 80b5 	bne.w	800d080 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2206      	movs	r2, #6
 800cf1a:	751a      	strb	r2, [r3, #20]
      break;
 800cf1c:	e0b0      	b.n	800d080 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f9ca 	bl	800d2b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cf24:	4b60      	ldr	r3, [pc, #384]	; (800d0a8 <tcp_process+0x7d8>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f003 0320 	and.w	r3, r3, #32
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 80a9 	beq.w	800d084 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	8b5b      	ldrh	r3, [r3, #26]
 800cf36:	f043 0302 	orr.w	r3, r3, #2
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7fe fd39 	bl	800b9b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cf46:	4b59      	ldr	r3, [pc, #356]	; (800d0ac <tcp_process+0x7dc>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d105      	bne.n	800cf5c <tcp_process+0x68c>
 800cf50:	4b56      	ldr	r3, [pc, #344]	; (800d0ac <tcp_process+0x7dc>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	4a55      	ldr	r2, [pc, #340]	; (800d0ac <tcp_process+0x7dc>)
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	e013      	b.n	800cf84 <tcp_process+0x6b4>
 800cf5c:	4b53      	ldr	r3, [pc, #332]	; (800d0ac <tcp_process+0x7dc>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	613b      	str	r3, [r7, #16]
 800cf62:	e00c      	b.n	800cf7e <tcp_process+0x6ae>
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d104      	bne.n	800cf78 <tcp_process+0x6a8>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	60da      	str	r2, [r3, #12]
 800cf76:	e005      	b.n	800cf84 <tcp_process+0x6b4>
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	613b      	str	r3, [r7, #16]
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1ef      	bne.n	800cf64 <tcp_process+0x694>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	60da      	str	r2, [r3, #12]
 800cf8a:	4b43      	ldr	r3, [pc, #268]	; (800d098 <tcp_process+0x7c8>)
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	220a      	movs	r2, #10
 800cf94:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cf96:	4b41      	ldr	r3, [pc, #260]	; (800d09c <tcp_process+0x7cc>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	4a3f      	ldr	r2, [pc, #252]	; (800d09c <tcp_process+0x7cc>)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	f003 f8ea 	bl	801017c <tcp_timer_needed>
      }
      break;
 800cfa8:	e06c      	b.n	800d084 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f984 	bl	800d2b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cfb0:	4b3b      	ldr	r3, [pc, #236]	; (800d0a0 <tcp_process+0x7d0>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 0310 	and.w	r3, r3, #16
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d065      	beq.n	800d088 <tcp_process+0x7b8>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cfc0:	4b38      	ldr	r3, [pc, #224]	; (800d0a4 <tcp_process+0x7d4>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d15f      	bne.n	800d088 <tcp_process+0x7b8>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d15b      	bne.n	800d088 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f7fe fcf1 	bl	800b9b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cfd6:	4b35      	ldr	r3, [pc, #212]	; (800d0ac <tcp_process+0x7dc>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d105      	bne.n	800cfec <tcp_process+0x71c>
 800cfe0:	4b32      	ldr	r3, [pc, #200]	; (800d0ac <tcp_process+0x7dc>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	4a31      	ldr	r2, [pc, #196]	; (800d0ac <tcp_process+0x7dc>)
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	e013      	b.n	800d014 <tcp_process+0x744>
 800cfec:	4b2f      	ldr	r3, [pc, #188]	; (800d0ac <tcp_process+0x7dc>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	e00c      	b.n	800d00e <tcp_process+0x73e>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d104      	bne.n	800d008 <tcp_process+0x738>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	68da      	ldr	r2, [r3, #12]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	60da      	str	r2, [r3, #12]
 800d006:	e005      	b.n	800d014 <tcp_process+0x744>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1ef      	bne.n	800cff4 <tcp_process+0x724>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	60da      	str	r2, [r3, #12]
 800d01a:	4b1f      	ldr	r3, [pc, #124]	; (800d098 <tcp_process+0x7c8>)
 800d01c:	2201      	movs	r2, #1
 800d01e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	220a      	movs	r2, #10
 800d024:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d026:	4b1d      	ldr	r3, [pc, #116]	; (800d09c <tcp_process+0x7cc>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	60da      	str	r2, [r3, #12]
 800d02e:	4a1b      	ldr	r2, [pc, #108]	; (800d09c <tcp_process+0x7cc>)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	f003 f8a2 	bl	801017c <tcp_timer_needed>
      }
      break;
 800d038:	e026      	b.n	800d088 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f93c 	bl	800d2b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d040:	4b17      	ldr	r3, [pc, #92]	; (800d0a0 <tcp_process+0x7d0>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d01f      	beq.n	800d08c <tcp_process+0x7bc>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d050:	4b14      	ldr	r3, [pc, #80]	; (800d0a4 <tcp_process+0x7d4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	429a      	cmp	r2, r3
 800d056:	d119      	bne.n	800d08c <tcp_process+0x7bc>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d115      	bne.n	800d08c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d060:	4b11      	ldr	r3, [pc, #68]	; (800d0a8 <tcp_process+0x7d8>)
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	f043 0310 	orr.w	r3, r3, #16
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	4b0f      	ldr	r3, [pc, #60]	; (800d0a8 <tcp_process+0x7d8>)
 800d06c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d06e:	e00d      	b.n	800d08c <tcp_process+0x7bc>
    default:
      break;
 800d070:	bf00      	nop
 800d072:	e00c      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d074:	bf00      	nop
 800d076:	e00a      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d078:	bf00      	nop
 800d07a:	e008      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d07c:	bf00      	nop
 800d07e:	e006      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d080:	bf00      	nop
 800d082:	e004      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d084:	bf00      	nop
 800d086:	e002      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d088:	bf00      	nop
 800d08a:	e000      	b.n	800d08e <tcp_process+0x7be>
      break;
 800d08c:	bf00      	nop
  }
  return ERR_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3724      	adds	r7, #36	; 0x24
 800d094:	46bd      	mov	sp, r7
 800d096:	bd90      	pop	{r4, r7, pc}
 800d098:	2000a91c 	.word	0x2000a91c
 800d09c:	2000a918 	.word	0x2000a918
 800d0a0:	2000a94c 	.word	0x2000a94c
 800d0a4:	2000a944 	.word	0x2000a944
 800d0a8:	2000a94d 	.word	0x2000a94d
 800d0ac:	2000a914 	.word	0x2000a914

0800d0b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d0b0:	b590      	push	{r4, r7, lr}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d106      	bne.n	800d0ce <tcp_oos_insert_segment+0x1e>
 800d0c0:	4b3b      	ldr	r3, [pc, #236]	; (800d1b0 <tcp_oos_insert_segment+0x100>)
 800d0c2:	f240 421f 	movw	r2, #1055	; 0x41f
 800d0c6:	493b      	ldr	r1, [pc, #236]	; (800d1b4 <tcp_oos_insert_segment+0x104>)
 800d0c8:	483b      	ldr	r0, [pc, #236]	; (800d1b8 <tcp_oos_insert_segment+0x108>)
 800d0ca:	f005 ffb1 	bl	8013030 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	899b      	ldrh	r3, [r3, #12]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fb fa00 	bl	80084dc <lwip_htons>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d028      	beq.n	800d13a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d0e8:	6838      	ldr	r0, [r7, #0]
 800d0ea:	f7fe f97d 	bl	800b3e8 <tcp_segs_free>
    next = NULL;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	603b      	str	r3, [r7, #0]
 800d0f2:	e056      	b.n	800d1a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	899b      	ldrh	r3, [r3, #12]
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fb f9ed 	bl	80084dc <lwip_htons>
 800d102:	4603      	mov	r3, r0
 800d104:	b2db      	uxtb	r3, r3
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00d      	beq.n	800d12a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	899b      	ldrh	r3, [r3, #12]
 800d114:	b29c      	uxth	r4, r3
 800d116:	2001      	movs	r0, #1
 800d118:	f7fb f9e0 	bl	80084dc <lwip_htons>
 800d11c:	4603      	mov	r3, r0
 800d11e:	461a      	mov	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	4322      	orrs	r2, r4
 800d126:	b292      	uxth	r2, r2
 800d128:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f7fe f96c 	bl	800b412 <tcp_seg_free>
    while (next &&
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00e      	beq.n	800d15e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	891b      	ldrh	r3, [r3, #8]
 800d144:	461a      	mov	r2, r3
 800d146:	4b1d      	ldr	r3, [pc, #116]	; (800d1bc <tcp_oos_insert_segment+0x10c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	441a      	add	r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	8909      	ldrh	r1, [r1, #8]
 800d156:	440b      	add	r3, r1
 800d158:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	daca      	bge.n	800d0f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d01e      	beq.n	800d1a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	891b      	ldrh	r3, [r3, #8]
 800d168:	461a      	mov	r2, r3
 800d16a:	4b14      	ldr	r3, [pc, #80]	; (800d1bc <tcp_oos_insert_segment+0x10c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	441a      	add	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd12      	ble.n	800d1a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	b29a      	uxth	r2, r3
 800d184:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <tcp_oos_insert_segment+0x10c>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	891b      	ldrh	r3, [r3, #8]
 800d19a:	4619      	mov	r1, r3
 800d19c:	4610      	mov	r0, r2
 800d19e:	f7fc fb75 	bl	800988c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	601a      	str	r2, [r3, #0]
}
 800d1a8:	bf00      	nop
 800d1aa:	3714      	adds	r7, #20
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd90      	pop	{r4, r7, pc}
 800d1b0:	080150f0 	.word	0x080150f0
 800d1b4:	080153b0 	.word	0x080153b0
 800d1b8:	0801513c 	.word	0x0801513c
 800d1bc:	2000a940 	.word	0x2000a940

0800d1c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d1c0:	b5b0      	push	{r4, r5, r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d1ce:	e03e      	b.n	800d24e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fc fd62 	bl	8009ca8 <pbuf_clen>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d1ee:	8a7a      	ldrh	r2, [r7, #18]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d906      	bls.n	800d202 <tcp_free_acked_segments+0x42>
 800d1f4:	4b2a      	ldr	r3, [pc, #168]	; (800d2a0 <tcp_free_acked_segments+0xe0>)
 800d1f6:	f240 4257 	movw	r2, #1111	; 0x457
 800d1fa:	492a      	ldr	r1, [pc, #168]	; (800d2a4 <tcp_free_acked_segments+0xe4>)
 800d1fc:	482a      	ldr	r0, [pc, #168]	; (800d2a8 <tcp_free_acked_segments+0xe8>)
 800d1fe:	f005 ff17 	bl	8013030 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d208:	8a7b      	ldrh	r3, [r7, #18]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	891a      	ldrh	r2, [r3, #8]
 800d218:	4b24      	ldr	r3, [pc, #144]	; (800d2ac <tcp_free_acked_segments+0xec>)
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	4413      	add	r3, r2
 800d21e:	b29a      	uxth	r2, r3
 800d220:	4b22      	ldr	r3, [pc, #136]	; (800d2ac <tcp_free_acked_segments+0xec>)
 800d222:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d224:	6978      	ldr	r0, [r7, #20]
 800d226:	f7fe f8f4 	bl	800b412 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00c      	beq.n	800d24e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d109      	bne.n	800d24e <tcp_free_acked_segments+0x8e>
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <tcp_free_acked_segments+0x8e>
 800d240:	4b17      	ldr	r3, [pc, #92]	; (800d2a0 <tcp_free_acked_segments+0xe0>)
 800d242:	f240 4261 	movw	r2, #1121	; 0x461
 800d246:	491a      	ldr	r1, [pc, #104]	; (800d2b0 <tcp_free_acked_segments+0xf0>)
 800d248:	4817      	ldr	r0, [pc, #92]	; (800d2a8 <tcp_free_acked_segments+0xe8>)
 800d24a:	f005 fef1 	bl	8013030 <iprintf>
  while (seg_list != NULL &&
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d020      	beq.n	800d296 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fb f953 	bl	8008506 <lwip_htonl>
 800d260:	4604      	mov	r4, r0
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	891b      	ldrh	r3, [r3, #8]
 800d266:	461d      	mov	r5, r3
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	899b      	ldrh	r3, [r3, #12]
 800d26e:	b29b      	uxth	r3, r3
 800d270:	4618      	mov	r0, r3
 800d272:	f7fb f933 	bl	80084dc <lwip_htons>
 800d276:	4603      	mov	r3, r0
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	f003 0303 	and.w	r3, r3, #3
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <tcp_free_acked_segments+0xc6>
 800d282:	2301      	movs	r3, #1
 800d284:	e000      	b.n	800d288 <tcp_free_acked_segments+0xc8>
 800d286:	2300      	movs	r3, #0
 800d288:	442b      	add	r3, r5
 800d28a:	18e2      	adds	r2, r4, r3
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <tcp_free_acked_segments+0xf4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d292:	2b00      	cmp	r3, #0
 800d294:	dd9c      	ble.n	800d1d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d296:	68bb      	ldr	r3, [r7, #8]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3718      	adds	r7, #24
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bdb0      	pop	{r4, r5, r7, pc}
 800d2a0:	080150f0 	.word	0x080150f0
 800d2a4:	080153d8 	.word	0x080153d8
 800d2a8:	0801513c 	.word	0x0801513c
 800d2ac:	2000a948 	.word	0x2000a948
 800d2b0:	08015400 	.word	0x08015400
 800d2b4:	2000a944 	.word	0x2000a944

0800d2b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d2b8:	b5b0      	push	{r4, r5, r7, lr}
 800d2ba:	b094      	sub	sp, #80	; 0x50
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <tcp_receive+0x20>
 800d2ca:	4b91      	ldr	r3, [pc, #580]	; (800d510 <tcp_receive+0x258>)
 800d2cc:	f240 427b 	movw	r2, #1147	; 0x47b
 800d2d0:	4990      	ldr	r1, [pc, #576]	; (800d514 <tcp_receive+0x25c>)
 800d2d2:	4891      	ldr	r0, [pc, #580]	; (800d518 <tcp_receive+0x260>)
 800d2d4:	f005 feac 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	7d1b      	ldrb	r3, [r3, #20]
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	d806      	bhi.n	800d2ee <tcp_receive+0x36>
 800d2e0:	4b8b      	ldr	r3, [pc, #556]	; (800d510 <tcp_receive+0x258>)
 800d2e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800d2e6:	498d      	ldr	r1, [pc, #564]	; (800d51c <tcp_receive+0x264>)
 800d2e8:	488b      	ldr	r0, [pc, #556]	; (800d518 <tcp_receive+0x260>)
 800d2ea:	f005 fea1 	bl	8013030 <iprintf>

  if (flags & TCP_ACK) {
 800d2ee:	4b8c      	ldr	r3, [pc, #560]	; (800d520 <tcp_receive+0x268>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	f003 0310 	and.w	r3, r3, #16
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 8264 	beq.w	800d7c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d302:	461a      	mov	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d308:	4413      	add	r3, r2
 800d30a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d310:	4b84      	ldr	r3, [pc, #528]	; (800d524 <tcp_receive+0x26c>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	2b00      	cmp	r3, #0
 800d318:	db1b      	blt.n	800d352 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d31e:	4b81      	ldr	r3, [pc, #516]	; (800d524 <tcp_receive+0x26c>)
 800d320:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d322:	429a      	cmp	r2, r3
 800d324:	d106      	bne.n	800d334 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d32a:	4b7f      	ldr	r3, [pc, #508]	; (800d528 <tcp_receive+0x270>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	2b00      	cmp	r3, #0
 800d332:	db0e      	blt.n	800d352 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d338:	4b7b      	ldr	r3, [pc, #492]	; (800d528 <tcp_receive+0x270>)
 800d33a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d125      	bne.n	800d38c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d340:	4b7a      	ldr	r3, [pc, #488]	; (800d52c <tcp_receive+0x274>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	89db      	ldrh	r3, [r3, #14]
 800d346:	b29a      	uxth	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d34e:	429a      	cmp	r2, r3
 800d350:	d91c      	bls.n	800d38c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d352:	4b76      	ldr	r3, [pc, #472]	; (800d52c <tcp_receive+0x274>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	89db      	ldrh	r3, [r3, #14]
 800d358:	b29a      	uxth	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d205      	bcs.n	800d37c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d37c:	4b69      	ldr	r3, [pc, #420]	; (800d524 <tcp_receive+0x26c>)
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d384:	4b68      	ldr	r3, [pc, #416]	; (800d528 <tcp_receive+0x270>)
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d38c:	4b66      	ldr	r3, [pc, #408]	; (800d528 <tcp_receive+0x270>)
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d394:	1ad3      	subs	r3, r2, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	dc58      	bgt.n	800d44c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d39a:	4b65      	ldr	r3, [pc, #404]	; (800d530 <tcp_receive+0x278>)
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d14b      	bne.n	800d43a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d3ac:	4413      	add	r3, r2
 800d3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d142      	bne.n	800d43a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	db3d      	blt.n	800d43a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3c2:	4b59      	ldr	r3, [pc, #356]	; (800d528 <tcp_receive+0x270>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d137      	bne.n	800d43a <tcp_receive+0x182>
              found_dupack = 1;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3d4:	2bff      	cmp	r3, #255	; 0xff
 800d3d6:	d007      	beq.n	800d3e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d3ee:	2b03      	cmp	r3, #3
 800d3f0:	d91b      	bls.n	800d42a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3fc:	4413      	add	r3, r2
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d406:	429a      	cmp	r2, r3
 800d408:	d30a      	bcc.n	800d420 <tcp_receive+0x168>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d414:	4413      	add	r3, r2
 800d416:	b29a      	uxth	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d41e:	e004      	b.n	800d42a <tcp_receive+0x172>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d426:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d430:	2b02      	cmp	r3, #2
 800d432:	d902      	bls.n	800d43a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f002 fb45 	bl	800fac4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f040 8161 	bne.w	800d704 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d44a:	e15b      	b.n	800d704 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d44c:	4b36      	ldr	r3, [pc, #216]	; (800d528 <tcp_receive+0x270>)
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d454:	1ad3      	subs	r3, r2, r3
 800d456:	3b01      	subs	r3, #1
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f2c0 814e 	blt.w	800d6fa <tcp_receive+0x442>
 800d45e:	4b32      	ldr	r3, [pc, #200]	; (800d528 <tcp_receive+0x270>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f300 8146 	bgt.w	800d6fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	8b5b      	ldrh	r3, [r3, #26]
 800d472:	f003 0304 	and.w	r3, r3, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	d010      	beq.n	800d49c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	8b5b      	ldrh	r3, [r3, #26]
 800d47e:	f023 0304 	bic.w	r3, r3, #4
 800d482:	b29a      	uxth	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d4aa:	10db      	asrs	r3, r3, #3
 800d4ac:	b21b      	sxth	r3, r3
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	4413      	add	r3, r2
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	b21a      	sxth	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d4c4:	4b18      	ldr	r3, [pc, #96]	; (800d528 <tcp_receive+0x270>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d4dc:	4b12      	ldr	r3, [pc, #72]	; (800d528 <tcp_receive+0x270>)
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7d1b      	ldrb	r3, [r3, #20]
 800d4e8:	2b03      	cmp	r3, #3
 800d4ea:	f240 8097 	bls.w	800d61c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d245      	bcs.n	800d58a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	8b5b      	ldrh	r3, [r3, #26]
 800d502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d506:	2b00      	cmp	r3, #0
 800d508:	d014      	beq.n	800d534 <tcp_receive+0x27c>
 800d50a:	2301      	movs	r3, #1
 800d50c:	e013      	b.n	800d536 <tcp_receive+0x27e>
 800d50e:	bf00      	nop
 800d510:	080150f0 	.word	0x080150f0
 800d514:	08015420 	.word	0x08015420
 800d518:	0801513c 	.word	0x0801513c
 800d51c:	0801543c 	.word	0x0801543c
 800d520:	2000a94c 	.word	0x2000a94c
 800d524:	2000a940 	.word	0x2000a940
 800d528:	2000a944 	.word	0x2000a944
 800d52c:	2000a930 	.word	0x2000a930
 800d530:	2000a94a 	.word	0x2000a94a
 800d534:	2302      	movs	r3, #2
 800d536:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d53a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d53e:	b29a      	uxth	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d544:	fb12 f303 	smulbb	r3, r2, r3
 800d548:	b29b      	uxth	r3, r3
 800d54a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d54c:	4293      	cmp	r3, r2
 800d54e:	bf28      	it	cs
 800d550:	4613      	movcs	r3, r2
 800d552:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d55a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d55c:	4413      	add	r3, r2
 800d55e:	b29a      	uxth	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d566:	429a      	cmp	r2, r3
 800d568:	d309      	bcc.n	800d57e <tcp_receive+0x2c6>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d572:	4413      	add	r3, r2
 800d574:	b29a      	uxth	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d57c:	e04e      	b.n	800d61c <tcp_receive+0x364>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d584:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d588:	e048      	b.n	800d61c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d592:	4413      	add	r3, r2
 800d594:	b29a      	uxth	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d309      	bcc.n	800d5b4 <tcp_receive+0x2fc>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d5a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5a8:	4413      	add	r3, r2
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d5b2:	e004      	b.n	800d5be <tcp_receive+0x306>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d326      	bcc.n	800d61c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5ee:	4413      	add	r3, r2
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d30a      	bcc.n	800d612 <tcp_receive+0x35a>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d606:	4413      	add	r3, r2
 800d608:	b29a      	uxth	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d610:	e004      	b.n	800d61c <tcp_receive+0x364>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d618:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d624:	4a98      	ldr	r2, [pc, #608]	; (800d888 <tcp_receive+0x5d0>)
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7ff fdca 	bl	800d1c0 <tcp_free_acked_segments>
 800d62c:	4602      	mov	r2, r0
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d63a:	4a94      	ldr	r2, [pc, #592]	; (800d88c <tcp_receive+0x5d4>)
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fdbf 	bl	800d1c0 <tcp_free_acked_segments>
 800d642:	4602      	mov	r2, r0
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d104      	bne.n	800d65a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d656:	861a      	strh	r2, [r3, #48]	; 0x30
 800d658:	e002      	b.n	800d660 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d103      	bne.n	800d676 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d67c:	4b84      	ldr	r3, [pc, #528]	; (800d890 <tcp_receive+0x5d8>)
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	4413      	add	r3, r2
 800d682:	b29a      	uxth	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	8b5b      	ldrh	r3, [r3, #26]
 800d68e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d692:	2b00      	cmp	r3, #0
 800d694:	d035      	beq.n	800d702 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d118      	bne.n	800d6d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00c      	beq.n	800d6c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fa ff27 	bl	8008506 <lwip_htonl>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dc20      	bgt.n	800d702 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	8b5b      	ldrh	r3, [r3, #26]
 800d6c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d6ce:	e018      	b.n	800d702 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fa ff12 	bl	8008506 <lwip_htonl>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	1ae3      	subs	r3, r4, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	dc0b      	bgt.n	800d702 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	8b5b      	ldrh	r3, [r3, #26]
 800d6ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d6f8:	e003      	b.n	800d702 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f002 fbce 	bl	800fe9c <tcp_send_empty_ack>
 800d700:	e000      	b.n	800d704 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d702:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d05b      	beq.n	800d7c4 <tcp_receive+0x50c>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d710:	4b60      	ldr	r3, [pc, #384]	; (800d894 <tcp_receive+0x5dc>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	2b00      	cmp	r3, #0
 800d718:	da54      	bge.n	800d7c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d71a:	4b5f      	ldr	r3, [pc, #380]	; (800d898 <tcp_receive+0x5e0>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	b29a      	uxth	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d724:	b29b      	uxth	r3, r3
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	b29b      	uxth	r3, r3
 800d72a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d72e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d738:	10db      	asrs	r3, r3, #3
 800d73a:	b21b      	sxth	r3, r3
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	b29b      	uxth	r3, r3
 800d742:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d752:	4413      	add	r3, r2
 800d754:	b29b      	uxth	r3, r3
 800d756:	b21a      	sxth	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d75c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d760:	2b00      	cmp	r3, #0
 800d762:	da05      	bge.n	800d770 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d768:	425b      	negs	r3, r3
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d770:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d77a:	109b      	asrs	r3, r3, #2
 800d77c:	b21b      	sxth	r3, r3
 800d77e:	b29b      	uxth	r3, r3
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	b29b      	uxth	r3, r3
 800d784:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d78e:	b29a      	uxth	r2, r3
 800d790:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d794:	4413      	add	r3, r2
 800d796:	b29b      	uxth	r3, r3
 800d798:	b21a      	sxth	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d7a4:	10db      	asrs	r3, r3, #3
 800d7a6:	b21b      	sxth	r3, r3
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	b21a      	sxth	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d7c4:	4b35      	ldr	r3, [pc, #212]	; (800d89c <tcp_receive+0x5e4>)
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 84e2 	beq.w	800e192 <tcp_receive+0xeda>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	7d1b      	ldrb	r3, [r3, #20]
 800d7d2:	2b06      	cmp	r3, #6
 800d7d4:	f200 84dd 	bhi.w	800e192 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7dc:	4b30      	ldr	r3, [pc, #192]	; (800d8a0 <tcp_receive+0x5e8>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f2c0 808f 	blt.w	800d908 <tcp_receive+0x650>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7ee:	4b2b      	ldr	r3, [pc, #172]	; (800d89c <tcp_receive+0x5e4>)
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4b2a      	ldr	r3, [pc, #168]	; (800d8a0 <tcp_receive+0x5e8>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	440b      	add	r3, r1
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f300 8082 	bgt.w	800d908 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d804:	4b27      	ldr	r3, [pc, #156]	; (800d8a4 <tcp_receive+0x5ec>)
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d80e:	4b24      	ldr	r3, [pc, #144]	; (800d8a0 <tcp_receive+0x5e8>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d816:	4b23      	ldr	r3, [pc, #140]	; (800d8a4 <tcp_receive+0x5ec>)
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d106      	bne.n	800d82c <tcp_receive+0x574>
 800d81e:	4b22      	ldr	r3, [pc, #136]	; (800d8a8 <tcp_receive+0x5f0>)
 800d820:	f240 5294 	movw	r2, #1428	; 0x594
 800d824:	4921      	ldr	r1, [pc, #132]	; (800d8ac <tcp_receive+0x5f4>)
 800d826:	4822      	ldr	r0, [pc, #136]	; (800d8b0 <tcp_receive+0x5f8>)
 800d828:	f005 fc02 	bl	8013030 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d832:	4293      	cmp	r3, r2
 800d834:	d906      	bls.n	800d844 <tcp_receive+0x58c>
 800d836:	4b1c      	ldr	r3, [pc, #112]	; (800d8a8 <tcp_receive+0x5f0>)
 800d838:	f240 5295 	movw	r2, #1429	; 0x595
 800d83c:	491d      	ldr	r1, [pc, #116]	; (800d8b4 <tcp_receive+0x5fc>)
 800d83e:	481c      	ldr	r0, [pc, #112]	; (800d8b0 <tcp_receive+0x5f8>)
 800d840:	f005 fbf6 	bl	8013030 <iprintf>
      off = (u16_t)off32;
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d84a:	4b16      	ldr	r3, [pc, #88]	; (800d8a4 <tcp_receive+0x5ec>)
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	891b      	ldrh	r3, [r3, #8]
 800d850:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d854:	429a      	cmp	r2, r3
 800d856:	d906      	bls.n	800d866 <tcp_receive+0x5ae>
 800d858:	4b13      	ldr	r3, [pc, #76]	; (800d8a8 <tcp_receive+0x5f0>)
 800d85a:	f240 5297 	movw	r2, #1431	; 0x597
 800d85e:	4916      	ldr	r1, [pc, #88]	; (800d8b8 <tcp_receive+0x600>)
 800d860:	4813      	ldr	r0, [pc, #76]	; (800d8b0 <tcp_receive+0x5f8>)
 800d862:	f005 fbe5 	bl	8013030 <iprintf>
      inseg.len -= off;
 800d866:	4b0f      	ldr	r3, [pc, #60]	; (800d8a4 <tcp_receive+0x5ec>)
 800d868:	891a      	ldrh	r2, [r3, #8]
 800d86a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	b29a      	uxth	r2, r3
 800d872:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <tcp_receive+0x5ec>)
 800d874:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d876:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <tcp_receive+0x5ec>)
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	891a      	ldrh	r2, [r3, #8]
 800d87c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d884:	e02a      	b.n	800d8dc <tcp_receive+0x624>
 800d886:	bf00      	nop
 800d888:	08015458 	.word	0x08015458
 800d88c:	08015460 	.word	0x08015460
 800d890:	2000a948 	.word	0x2000a948
 800d894:	2000a944 	.word	0x2000a944
 800d898:	2000a908 	.word	0x2000a908
 800d89c:	2000a94a 	.word	0x2000a94a
 800d8a0:	2000a940 	.word	0x2000a940
 800d8a4:	2000a920 	.word	0x2000a920
 800d8a8:	080150f0 	.word	0x080150f0
 800d8ac:	08015468 	.word	0x08015468
 800d8b0:	0801513c 	.word	0x0801513c
 800d8b4:	08015478 	.word	0x08015478
 800d8b8:	08015488 	.word	0x08015488
        off -= p->len;
 800d8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8be:	895b      	ldrh	r3, [r3, #10]
 800d8c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d8d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8de:	895b      	ldrh	r3, [r3, #10]
 800d8e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d8e9      	bhi.n	800d8bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d8e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d8f0:	f7fc f8cc 	bl	8009a8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f8:	4a91      	ldr	r2, [pc, #580]	; (800db40 <tcp_receive+0x888>)
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	4b91      	ldr	r3, [pc, #580]	; (800db44 <tcp_receive+0x88c>)
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	4a8f      	ldr	r2, [pc, #572]	; (800db40 <tcp_receive+0x888>)
 800d902:	6812      	ldr	r2, [r2, #0]
 800d904:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d906:	e00d      	b.n	800d924 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d908:	4b8d      	ldr	r3, [pc, #564]	; (800db40 <tcp_receive+0x888>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	da06      	bge.n	800d924 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	8b5b      	ldrh	r3, [r3, #26]
 800d91a:	f043 0302 	orr.w	r3, r3, #2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d924:	4b86      	ldr	r3, [pc, #536]	; (800db40 <tcp_receive+0x888>)
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92c:	1ad3      	subs	r3, r2, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f2c0 842a 	blt.w	800e188 <tcp_receive+0xed0>
 800d934:	4b82      	ldr	r3, [pc, #520]	; (800db40 <tcp_receive+0x888>)
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93c:	6879      	ldr	r1, [r7, #4]
 800d93e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d940:	440b      	add	r3, r1
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	3301      	adds	r3, #1
 800d946:	2b00      	cmp	r3, #0
 800d948:	f300 841e 	bgt.w	800e188 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d950:	4b7b      	ldr	r3, [pc, #492]	; (800db40 <tcp_receive+0x888>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	429a      	cmp	r2, r3
 800d956:	f040 829a 	bne.w	800de8e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d95a:	4b7a      	ldr	r3, [pc, #488]	; (800db44 <tcp_receive+0x88c>)
 800d95c:	891c      	ldrh	r4, [r3, #8]
 800d95e:	4b79      	ldr	r3, [pc, #484]	; (800db44 <tcp_receive+0x88c>)
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	899b      	ldrh	r3, [r3, #12]
 800d964:	b29b      	uxth	r3, r3
 800d966:	4618      	mov	r0, r3
 800d968:	f7fa fdb8 	bl	80084dc <lwip_htons>
 800d96c:	4603      	mov	r3, r0
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	f003 0303 	and.w	r3, r3, #3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <tcp_receive+0x6c4>
 800d978:	2301      	movs	r3, #1
 800d97a:	e000      	b.n	800d97e <tcp_receive+0x6c6>
 800d97c:	2300      	movs	r3, #0
 800d97e:	4423      	add	r3, r4
 800d980:	b29a      	uxth	r2, r3
 800d982:	4b71      	ldr	r3, [pc, #452]	; (800db48 <tcp_receive+0x890>)
 800d984:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d98a:	4b6f      	ldr	r3, [pc, #444]	; (800db48 <tcp_receive+0x890>)
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d275      	bcs.n	800da7e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d992:	4b6c      	ldr	r3, [pc, #432]	; (800db44 <tcp_receive+0x88c>)
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	899b      	ldrh	r3, [r3, #12]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fa fd9e 	bl	80084dc <lwip_htons>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 0301 	and.w	r3, r3, #1
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01f      	beq.n	800d9ec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d9ac:	4b65      	ldr	r3, [pc, #404]	; (800db44 <tcp_receive+0x88c>)
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	899b      	ldrh	r3, [r3, #12]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	b21b      	sxth	r3, r3
 800d9b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d9ba:	b21c      	sxth	r4, r3
 800d9bc:	4b61      	ldr	r3, [pc, #388]	; (800db44 <tcp_receive+0x88c>)
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	899b      	ldrh	r3, [r3, #12]
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fa fd89 	bl	80084dc <lwip_htons>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fa fd80 	bl	80084dc <lwip_htons>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	b21b      	sxth	r3, r3
 800d9e0:	4323      	orrs	r3, r4
 800d9e2:	b21a      	sxth	r2, r3
 800d9e4:	4b57      	ldr	r3, [pc, #348]	; (800db44 <tcp_receive+0x88c>)
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	b292      	uxth	r2, r2
 800d9ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9f0:	4b54      	ldr	r3, [pc, #336]	; (800db44 <tcp_receive+0x88c>)
 800d9f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d9f4:	4b53      	ldr	r3, [pc, #332]	; (800db44 <tcp_receive+0x88c>)
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	899b      	ldrh	r3, [r3, #12]
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fa fd6d 	bl	80084dc <lwip_htons>
 800da02:	4603      	mov	r3, r0
 800da04:	b2db      	uxtb	r3, r3
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d005      	beq.n	800da1a <tcp_receive+0x762>
            inseg.len -= 1;
 800da0e:	4b4d      	ldr	r3, [pc, #308]	; (800db44 <tcp_receive+0x88c>)
 800da10:	891b      	ldrh	r3, [r3, #8]
 800da12:	3b01      	subs	r3, #1
 800da14:	b29a      	uxth	r2, r3
 800da16:	4b4b      	ldr	r3, [pc, #300]	; (800db44 <tcp_receive+0x88c>)
 800da18:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800da1a:	4b4a      	ldr	r3, [pc, #296]	; (800db44 <tcp_receive+0x88c>)
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	4a49      	ldr	r2, [pc, #292]	; (800db44 <tcp_receive+0x88c>)
 800da20:	8912      	ldrh	r2, [r2, #8]
 800da22:	4611      	mov	r1, r2
 800da24:	4618      	mov	r0, r3
 800da26:	f7fb ff31 	bl	800988c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800da2a:	4b46      	ldr	r3, [pc, #280]	; (800db44 <tcp_receive+0x88c>)
 800da2c:	891c      	ldrh	r4, [r3, #8]
 800da2e:	4b45      	ldr	r3, [pc, #276]	; (800db44 <tcp_receive+0x88c>)
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	899b      	ldrh	r3, [r3, #12]
 800da34:	b29b      	uxth	r3, r3
 800da36:	4618      	mov	r0, r3
 800da38:	f7fa fd50 	bl	80084dc <lwip_htons>
 800da3c:	4603      	mov	r3, r0
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0303 	and.w	r3, r3, #3
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <tcp_receive+0x794>
 800da48:	2301      	movs	r3, #1
 800da4a:	e000      	b.n	800da4e <tcp_receive+0x796>
 800da4c:	2300      	movs	r3, #0
 800da4e:	4423      	add	r3, r4
 800da50:	b29a      	uxth	r2, r3
 800da52:	4b3d      	ldr	r3, [pc, #244]	; (800db48 <tcp_receive+0x890>)
 800da54:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800da56:	4b3c      	ldr	r3, [pc, #240]	; (800db48 <tcp_receive+0x890>)
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	4b38      	ldr	r3, [pc, #224]	; (800db40 <tcp_receive+0x888>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	441a      	add	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da66:	6879      	ldr	r1, [r7, #4]
 800da68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da6a:	440b      	add	r3, r1
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d006      	beq.n	800da7e <tcp_receive+0x7c6>
 800da70:	4b36      	ldr	r3, [pc, #216]	; (800db4c <tcp_receive+0x894>)
 800da72:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800da76:	4936      	ldr	r1, [pc, #216]	; (800db50 <tcp_receive+0x898>)
 800da78:	4836      	ldr	r0, [pc, #216]	; (800db54 <tcp_receive+0x89c>)
 800da7a:	f005 fad9 	bl	8013030 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 80e7 	beq.w	800dc56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da88:	4b2e      	ldr	r3, [pc, #184]	; (800db44 <tcp_receive+0x88c>)
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	899b      	ldrh	r3, [r3, #12]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	4618      	mov	r0, r3
 800da92:	f7fa fd23 	bl	80084dc <lwip_htons>
 800da96:	4603      	mov	r3, r0
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d010      	beq.n	800dac4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800daa2:	e00a      	b.n	800daba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daa8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7fd fcac 	bl	800b412 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f0      	bne.n	800daa4 <tcp_receive+0x7ec>
 800dac2:	e0c8      	b.n	800dc56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800daca:	e052      	b.n	800db72 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	899b      	ldrh	r3, [r3, #12]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fa fd01 	bl	80084dc <lwip_htons>
 800dada:	4603      	mov	r3, r0
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	f003 0301 	and.w	r3, r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d03d      	beq.n	800db62 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800dae6:	4b17      	ldr	r3, [pc, #92]	; (800db44 <tcp_receive+0x88c>)
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	899b      	ldrh	r3, [r3, #12]
 800daec:	b29b      	uxth	r3, r3
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fa fcf4 	bl	80084dc <lwip_htons>
 800daf4:	4603      	mov	r3, r0
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d130      	bne.n	800db62 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800db00:	4b10      	ldr	r3, [pc, #64]	; (800db44 <tcp_receive+0x88c>)
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	899b      	ldrh	r3, [r3, #12]
 800db06:	b29c      	uxth	r4, r3
 800db08:	2001      	movs	r0, #1
 800db0a:	f7fa fce7 	bl	80084dc <lwip_htons>
 800db0e:	4603      	mov	r3, r0
 800db10:	461a      	mov	r2, r3
 800db12:	4b0c      	ldr	r3, [pc, #48]	; (800db44 <tcp_receive+0x88c>)
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	4322      	orrs	r2, r4
 800db18:	b292      	uxth	r2, r2
 800db1a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800db1c:	4b09      	ldr	r3, [pc, #36]	; (800db44 <tcp_receive+0x88c>)
 800db1e:	891c      	ldrh	r4, [r3, #8]
 800db20:	4b08      	ldr	r3, [pc, #32]	; (800db44 <tcp_receive+0x88c>)
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	899b      	ldrh	r3, [r3, #12]
 800db26:	b29b      	uxth	r3, r3
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fa fcd7 	bl	80084dc <lwip_htons>
 800db2e:	4603      	mov	r3, r0
 800db30:	b2db      	uxtb	r3, r3
 800db32:	f003 0303 	and.w	r3, r3, #3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00e      	beq.n	800db58 <tcp_receive+0x8a0>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e00d      	b.n	800db5a <tcp_receive+0x8a2>
 800db3e:	bf00      	nop
 800db40:	2000a940 	.word	0x2000a940
 800db44:	2000a920 	.word	0x2000a920
 800db48:	2000a94a 	.word	0x2000a94a
 800db4c:	080150f0 	.word	0x080150f0
 800db50:	08015498 	.word	0x08015498
 800db54:	0801513c 	.word	0x0801513c
 800db58:	2300      	movs	r3, #0
 800db5a:	4423      	add	r3, r4
 800db5c:	b29a      	uxth	r2, r3
 800db5e:	4b98      	ldr	r3, [pc, #608]	; (800ddc0 <tcp_receive+0xb08>)
 800db60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800db62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db64:	613b      	str	r3, [r7, #16]
              next = next->next;
 800db66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800db6c:	6938      	ldr	r0, [r7, #16]
 800db6e:	f7fd fc50 	bl	800b412 <tcp_seg_free>
            while (next &&
 800db72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00e      	beq.n	800db96 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800db78:	4b91      	ldr	r3, [pc, #580]	; (800ddc0 <tcp_receive+0xb08>)
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	461a      	mov	r2, r3
 800db7e:	4b91      	ldr	r3, [pc, #580]	; (800ddc4 <tcp_receive+0xb0c>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	441a      	add	r2, r3
 800db84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db8c:	8909      	ldrh	r1, [r1, #8]
 800db8e:	440b      	add	r3, r1
 800db90:	1ad3      	subs	r3, r2, r3
            while (next &&
 800db92:	2b00      	cmp	r3, #0
 800db94:	da9a      	bge.n	800dacc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800db96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d059      	beq.n	800dc50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800db9c:	4b88      	ldr	r3, [pc, #544]	; (800ddc0 <tcp_receive+0xb08>)
 800db9e:	881b      	ldrh	r3, [r3, #0]
 800dba0:	461a      	mov	r2, r3
 800dba2:	4b88      	ldr	r3, [pc, #544]	; (800ddc4 <tcp_receive+0xb0c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	441a      	add	r2, r3
 800dba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dd4d      	ble.n	800dc50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800dbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb6:	68db      	ldr	r3, [r3, #12]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	4b81      	ldr	r3, [pc, #516]	; (800ddc4 <tcp_receive+0xb0c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	4b80      	ldr	r3, [pc, #512]	; (800ddc8 <tcp_receive+0xb10>)
 800dbc8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dbca:	4b7f      	ldr	r3, [pc, #508]	; (800ddc8 <tcp_receive+0xb10>)
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	899b      	ldrh	r3, [r3, #12]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fa fc82 	bl	80084dc <lwip_htons>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d005      	beq.n	800dbf0 <tcp_receive+0x938>
                inseg.len -= 1;
 800dbe4:	4b78      	ldr	r3, [pc, #480]	; (800ddc8 <tcp_receive+0xb10>)
 800dbe6:	891b      	ldrh	r3, [r3, #8]
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	4b76      	ldr	r3, [pc, #472]	; (800ddc8 <tcp_receive+0xb10>)
 800dbee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dbf0:	4b75      	ldr	r3, [pc, #468]	; (800ddc8 <tcp_receive+0xb10>)
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	4a74      	ldr	r2, [pc, #464]	; (800ddc8 <tcp_receive+0xb10>)
 800dbf6:	8912      	ldrh	r2, [r2, #8]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fb fe46 	bl	800988c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dc00:	4b71      	ldr	r3, [pc, #452]	; (800ddc8 <tcp_receive+0xb10>)
 800dc02:	891c      	ldrh	r4, [r3, #8]
 800dc04:	4b70      	ldr	r3, [pc, #448]	; (800ddc8 <tcp_receive+0xb10>)
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	899b      	ldrh	r3, [r3, #12]
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fa fc65 	bl	80084dc <lwip_htons>
 800dc12:	4603      	mov	r3, r0
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <tcp_receive+0x96a>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e000      	b.n	800dc24 <tcp_receive+0x96c>
 800dc22:	2300      	movs	r3, #0
 800dc24:	4423      	add	r3, r4
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	4b65      	ldr	r3, [pc, #404]	; (800ddc0 <tcp_receive+0xb08>)
 800dc2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dc2c:	4b64      	ldr	r3, [pc, #400]	; (800ddc0 <tcp_receive+0xb08>)
 800dc2e:	881b      	ldrh	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	4b64      	ldr	r3, [pc, #400]	; (800ddc4 <tcp_receive+0xb0c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	441a      	add	r2, r3
 800dc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d006      	beq.n	800dc50 <tcp_receive+0x998>
 800dc42:	4b62      	ldr	r3, [pc, #392]	; (800ddcc <tcp_receive+0xb14>)
 800dc44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dc48:	4961      	ldr	r1, [pc, #388]	; (800ddd0 <tcp_receive+0xb18>)
 800dc4a:	4862      	ldr	r0, [pc, #392]	; (800ddd4 <tcp_receive+0xb1c>)
 800dc4c:	f005 f9f0 	bl	8013030 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dc56:	4b5a      	ldr	r3, [pc, #360]	; (800ddc0 <tcp_receive+0xb08>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	4b59      	ldr	r3, [pc, #356]	; (800ddc4 <tcp_receive+0xb0c>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	441a      	add	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc6a:	4b55      	ldr	r3, [pc, #340]	; (800ddc0 <tcp_receive+0xb08>)
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d206      	bcs.n	800dc80 <tcp_receive+0x9c8>
 800dc72:	4b56      	ldr	r3, [pc, #344]	; (800ddcc <tcp_receive+0xb14>)
 800dc74:	f240 6207 	movw	r2, #1543	; 0x607
 800dc78:	4957      	ldr	r1, [pc, #348]	; (800ddd8 <tcp_receive+0xb20>)
 800dc7a:	4856      	ldr	r0, [pc, #344]	; (800ddd4 <tcp_receive+0xb1c>)
 800dc7c:	f005 f9d8 	bl	8013030 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc84:	4b4e      	ldr	r3, [pc, #312]	; (800ddc0 <tcp_receive+0xb08>)
 800dc86:	881b      	ldrh	r3, [r3, #0]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7fc fe99 	bl	800a9c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dc96:	4b4c      	ldr	r3, [pc, #304]	; (800ddc8 <tcp_receive+0xb10>)
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	891b      	ldrh	r3, [r3, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d006      	beq.n	800dcae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800dca0:	4b49      	ldr	r3, [pc, #292]	; (800ddc8 <tcp_receive+0xb10>)
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	4a4d      	ldr	r2, [pc, #308]	; (800dddc <tcp_receive+0xb24>)
 800dca6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dca8:	4b47      	ldr	r3, [pc, #284]	; (800ddc8 <tcp_receive+0xb10>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dcae:	4b46      	ldr	r3, [pc, #280]	; (800ddc8 <tcp_receive+0xb10>)
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	899b      	ldrh	r3, [r3, #12]
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fa fc10 	bl	80084dc <lwip_htons>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f003 0301 	and.w	r3, r3, #1
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f000 80b8 	beq.w	800de3a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dcca:	4b45      	ldr	r3, [pc, #276]	; (800dde0 <tcp_receive+0xb28>)
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	f043 0320 	orr.w	r3, r3, #32
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	4b42      	ldr	r3, [pc, #264]	; (800dde0 <tcp_receive+0xb28>)
 800dcd6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dcd8:	e0af      	b.n	800de3a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcde:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	4a36      	ldr	r2, [pc, #216]	; (800ddc4 <tcp_receive+0xb0c>)
 800dcea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	891b      	ldrh	r3, [r3, #8]
 800dcf0:	461c      	mov	r4, r3
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	899b      	ldrh	r3, [r3, #12]
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fa fbee 	bl	80084dc <lwip_htons>
 800dd00:	4603      	mov	r3, r0
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	f003 0303 	and.w	r3, r3, #3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <tcp_receive+0xa58>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e000      	b.n	800dd12 <tcp_receive+0xa5a>
 800dd10:	2300      	movs	r3, #0
 800dd12:	191a      	adds	r2, r3, r4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	441a      	add	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd22:	461c      	mov	r4, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	891b      	ldrh	r3, [r3, #8]
 800dd28:	461d      	mov	r5, r3
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	899b      	ldrh	r3, [r3, #12]
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fa fbd2 	bl	80084dc <lwip_htons>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	f003 0303 	and.w	r3, r3, #3
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d001      	beq.n	800dd48 <tcp_receive+0xa90>
 800dd44:	2301      	movs	r3, #1
 800dd46:	e000      	b.n	800dd4a <tcp_receive+0xa92>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	442b      	add	r3, r5
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	d206      	bcs.n	800dd5e <tcp_receive+0xaa6>
 800dd50:	4b1e      	ldr	r3, [pc, #120]	; (800ddcc <tcp_receive+0xb14>)
 800dd52:	f240 622b 	movw	r2, #1579	; 0x62b
 800dd56:	4923      	ldr	r1, [pc, #140]	; (800dde4 <tcp_receive+0xb2c>)
 800dd58:	481e      	ldr	r0, [pc, #120]	; (800ddd4 <tcp_receive+0xb1c>)
 800dd5a:	f005 f969 	bl	8013030 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	891b      	ldrh	r3, [r3, #8]
 800dd62:	461c      	mov	r4, r3
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	899b      	ldrh	r3, [r3, #12]
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fa fbb5 	bl	80084dc <lwip_htons>
 800dd72:	4603      	mov	r3, r0
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	f003 0303 	and.w	r3, r3, #3
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <tcp_receive+0xaca>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e000      	b.n	800dd84 <tcp_receive+0xacc>
 800dd82:	2300      	movs	r3, #0
 800dd84:	1919      	adds	r1, r3, r4
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd8a:	b28b      	uxth	r3, r1
 800dd8c:	1ad3      	subs	r3, r2, r3
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7fc fe17 	bl	800a9c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	891b      	ldrh	r3, [r3, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d028      	beq.n	800ddf6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800dda4:	4b0d      	ldr	r3, [pc, #52]	; (800dddc <tcp_receive+0xb24>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d01d      	beq.n	800dde8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800ddac:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <tcp_receive+0xb24>)
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	4610      	mov	r0, r2
 800ddb8:	f7fb ffb0 	bl	8009d1c <pbuf_cat>
 800ddbc:	e018      	b.n	800ddf0 <tcp_receive+0xb38>
 800ddbe:	bf00      	nop
 800ddc0:	2000a94a 	.word	0x2000a94a
 800ddc4:	2000a940 	.word	0x2000a940
 800ddc8:	2000a920 	.word	0x2000a920
 800ddcc:	080150f0 	.word	0x080150f0
 800ddd0:	080154d0 	.word	0x080154d0
 800ddd4:	0801513c 	.word	0x0801513c
 800ddd8:	0801550c 	.word	0x0801550c
 800dddc:	2000a950 	.word	0x2000a950
 800dde0:	2000a94d 	.word	0x2000a94d
 800dde4:	0801552c 	.word	0x0801552c
            } else {
              recv_data = cseg->p;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	4a70      	ldr	r2, [pc, #448]	; (800dfb0 <tcp_receive+0xcf8>)
 800ddee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	899b      	ldrh	r3, [r3, #12]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fa fb6c 	bl	80084dc <lwip_htons>
 800de04:	4603      	mov	r3, r0
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 0301 	and.w	r3, r3, #1
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00d      	beq.n	800de2c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800de10:	4b68      	ldr	r3, [pc, #416]	; (800dfb4 <tcp_receive+0xcfc>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	f043 0320 	orr.w	r3, r3, #32
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	4b66      	ldr	r3, [pc, #408]	; (800dfb4 <tcp_receive+0xcfc>)
 800de1c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	7d1b      	ldrb	r3, [r3, #20]
 800de22:	2b04      	cmp	r3, #4
 800de24:	d102      	bne.n	800de2c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2207      	movs	r2, #7
 800de2a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800de34:	68b8      	ldr	r0, [r7, #8]
 800de36:	f7fd faec 	bl	800b412 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d008      	beq.n	800de54 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800de4e:	429a      	cmp	r2, r3
 800de50:	f43f af43 	beq.w	800dcda <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	8b5b      	ldrh	r3, [r3, #26]
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d00e      	beq.n	800de7e <tcp_receive+0xbc6>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	8b5b      	ldrh	r3, [r3, #26]
 800de64:	f023 0301 	bic.w	r3, r3, #1
 800de68:	b29a      	uxth	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	835a      	strh	r2, [r3, #26]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	8b5b      	ldrh	r3, [r3, #26]
 800de72:	f043 0302 	orr.w	r3, r3, #2
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800de7c:	e188      	b.n	800e190 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8b5b      	ldrh	r3, [r3, #26]
 800de82:	f043 0301 	orr.w	r3, r3, #1
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800de8c:	e180      	b.n	800e190 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800de96:	4848      	ldr	r0, [pc, #288]	; (800dfb8 <tcp_receive+0xd00>)
 800de98:	f7fd faf2 	bl	800b480 <tcp_seg_copy>
 800de9c:	4602      	mov	r2, r0
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	675a      	str	r2, [r3, #116]	; 0x74
 800dea2:	e16d      	b.n	800e180 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deac:	63bb      	str	r3, [r7, #56]	; 0x38
 800deae:	e157      	b.n	800e160 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800deb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	4b41      	ldr	r3, [pc, #260]	; (800dfbc <tcp_receive+0xd04>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	429a      	cmp	r2, r3
 800debc:	d11d      	bne.n	800defa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800debe:	4b3e      	ldr	r3, [pc, #248]	; (800dfb8 <tcp_receive+0xd00>)
 800dec0:	891a      	ldrh	r2, [r3, #8]
 800dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec4:	891b      	ldrh	r3, [r3, #8]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	f240 814f 	bls.w	800e16a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800decc:	483a      	ldr	r0, [pc, #232]	; (800dfb8 <tcp_receive+0xd00>)
 800dece:	f7fd fad7 	bl	800b480 <tcp_seg_copy>
 800ded2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f000 8149 	beq.w	800e16e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800dedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d003      	beq.n	800deea <tcp_receive+0xc32>
                    prev->next = cseg;
 800dee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	e002      	b.n	800def0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800def0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800def2:	6978      	ldr	r0, [r7, #20]
 800def4:	f7ff f8dc 	bl	800d0b0 <tcp_oos_insert_segment>
                }
                break;
 800def8:	e139      	b.n	800e16e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800defa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defc:	2b00      	cmp	r3, #0
 800defe:	d117      	bne.n	800df30 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800df00:	4b2e      	ldr	r3, [pc, #184]	; (800dfbc <tcp_receive+0xd04>)
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	1ad3      	subs	r3, r2, r3
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	da57      	bge.n	800dfc0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800df10:	4829      	ldr	r0, [pc, #164]	; (800dfb8 <tcp_receive+0xd00>)
 800df12:	f7fd fab5 	bl	800b480 <tcp_seg_copy>
 800df16:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f000 8129 	beq.w	800e172 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	69ba      	ldr	r2, [r7, #24]
 800df24:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800df26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df28:	69b8      	ldr	r0, [r7, #24]
 800df2a:	f7ff f8c1 	bl	800d0b0 <tcp_oos_insert_segment>
                  }
                  break;
 800df2e:	e120      	b.n	800e172 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800df30:	4b22      	ldr	r3, [pc, #136]	; (800dfbc <tcp_receive+0xd04>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	3b01      	subs	r3, #1
 800df3e:	2b00      	cmp	r3, #0
 800df40:	db3e      	blt.n	800dfc0 <tcp_receive+0xd08>
 800df42:	4b1e      	ldr	r3, [pc, #120]	; (800dfbc <tcp_receive+0xd04>)
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	3301      	adds	r3, #1
 800df50:	2b00      	cmp	r3, #0
 800df52:	dc35      	bgt.n	800dfc0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800df54:	4818      	ldr	r0, [pc, #96]	; (800dfb8 <tcp_receive+0xd00>)
 800df56:	f7fd fa93 	bl	800b480 <tcp_seg_copy>
 800df5a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f000 8109 	beq.w	800e176 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800df64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df6c:	8912      	ldrh	r2, [r2, #8]
 800df6e:	441a      	add	r2, r3
 800df70:	4b12      	ldr	r3, [pc, #72]	; (800dfbc <tcp_receive+0xd04>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	dd12      	ble.n	800dfa0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800df7a:	4b10      	ldr	r3, [pc, #64]	; (800dfbc <tcp_receive+0xd04>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	b29a      	uxth	r2, r3
 800df80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	b29b      	uxth	r3, r3
 800df88:	1ad3      	subs	r3, r2, r3
 800df8a:	b29a      	uxth	r2, r3
 800df8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800df90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df92:	685a      	ldr	r2, [r3, #4]
 800df94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df96:	891b      	ldrh	r3, [r3, #8]
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f7fb fc76 	bl	800988c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dfa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfa8:	69f8      	ldr	r0, [r7, #28]
 800dfaa:	f7ff f881 	bl	800d0b0 <tcp_oos_insert_segment>
                  }
                  break;
 800dfae:	e0e2      	b.n	800e176 <tcp_receive+0xebe>
 800dfb0:	2000a950 	.word	0x2000a950
 800dfb4:	2000a94d 	.word	0x2000a94d
 800dfb8:	2000a920 	.word	0x2000a920
 800dfbc:	2000a940 	.word	0x2000a940
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f040 80c6 	bne.w	800e15a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dfce:	4b80      	ldr	r3, [pc, #512]	; (800e1d0 <tcp_receive+0xf18>)
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f340 80bd 	ble.w	800e15a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	899b      	ldrh	r3, [r3, #12]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7fa fa77 	bl	80084dc <lwip_htons>
 800dfee:	4603      	mov	r3, r0
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 0301 	and.w	r3, r3, #1
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f040 80bf 	bne.w	800e17a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dffc:	4875      	ldr	r0, [pc, #468]	; (800e1d4 <tcp_receive+0xf1c>)
 800dffe:	f7fd fa3f 	bl	800b480 <tcp_seg_copy>
 800e002:	4602      	mov	r2, r0
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 80b6 	beq.w	800e17e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e01a:	8912      	ldrh	r2, [r2, #8]
 800e01c:	441a      	add	r2, r3
 800e01e:	4b6c      	ldr	r3, [pc, #432]	; (800e1d0 <tcp_receive+0xf18>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	dd12      	ble.n	800e04e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e028:	4b69      	ldr	r3, [pc, #420]	; (800e1d0 <tcp_receive+0xf18>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	b29b      	uxth	r3, r3
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	b29a      	uxth	r2, r3
 800e03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e040:	685a      	ldr	r2, [r3, #4]
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	891b      	ldrh	r3, [r3, #8]
 800e046:	4619      	mov	r1, r3
 800e048:	4610      	mov	r0, r2
 800e04a:	f7fb fc1f 	bl	800988c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e04e:	4b62      	ldr	r3, [pc, #392]	; (800e1d8 <tcp_receive+0xf20>)
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	461a      	mov	r2, r3
 800e054:	4b5e      	ldr	r3, [pc, #376]	; (800e1d0 <tcp_receive+0xf18>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	441a      	add	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e05e:	6879      	ldr	r1, [r7, #4]
 800e060:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e062:	440b      	add	r3, r1
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	f340 8089 	ble.w	800e17e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	899b      	ldrh	r3, [r3, #12]
 800e074:	b29b      	uxth	r3, r3
 800e076:	4618      	mov	r0, r3
 800e078:	f7fa fa30 	bl	80084dc <lwip_htons>
 800e07c:	4603      	mov	r3, r0
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	2b00      	cmp	r3, #0
 800e086:	d022      	beq.n	800e0ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	899b      	ldrh	r3, [r3, #12]
 800e090:	b29b      	uxth	r3, r3
 800e092:	b21b      	sxth	r3, r3
 800e094:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e098:	b21c      	sxth	r4, r3
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	899b      	ldrh	r3, [r3, #12]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fa fa19 	bl	80084dc <lwip_htons>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fa fa10 	bl	80084dc <lwip_htons>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	b21b      	sxth	r3, r3
 800e0c0:	4323      	orrs	r3, r4
 800e0c2:	b21a      	sxth	r2, r3
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	b292      	uxth	r2, r2
 800e0cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0d8:	4413      	add	r3, r2
 800e0da:	b299      	uxth	r1, r3
 800e0dc:	4b3c      	ldr	r3, [pc, #240]	; (800e1d0 <tcp_receive+0xf18>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	1a8a      	subs	r2, r1, r2
 800e0e8:	b292      	uxth	r2, r2
 800e0ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	891b      	ldrh	r3, [r3, #8]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	f7fb fbc6 	bl	800988c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	891c      	ldrh	r4, [r3, #8]
 800e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	b29b      	uxth	r3, r3
 800e110:	4618      	mov	r0, r3
 800e112:	f7fa f9e3 	bl	80084dc <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	f003 0303 	and.w	r3, r3, #3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <tcp_receive+0xe6e>
 800e122:	2301      	movs	r3, #1
 800e124:	e000      	b.n	800e128 <tcp_receive+0xe70>
 800e126:	2300      	movs	r3, #0
 800e128:	4423      	add	r3, r4
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	4b2a      	ldr	r3, [pc, #168]	; (800e1d8 <tcp_receive+0xf20>)
 800e12e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e130:	4b29      	ldr	r3, [pc, #164]	; (800e1d8 <tcp_receive+0xf20>)
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	461a      	mov	r2, r3
 800e136:	4b26      	ldr	r3, [pc, #152]	; (800e1d0 <tcp_receive+0xf18>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	441a      	add	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e144:	440b      	add	r3, r1
 800e146:	429a      	cmp	r2, r3
 800e148:	d019      	beq.n	800e17e <tcp_receive+0xec6>
 800e14a:	4b24      	ldr	r3, [pc, #144]	; (800e1dc <tcp_receive+0xf24>)
 800e14c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e150:	4923      	ldr	r1, [pc, #140]	; (800e1e0 <tcp_receive+0xf28>)
 800e152:	4824      	ldr	r0, [pc, #144]	; (800e1e4 <tcp_receive+0xf2c>)
 800e154:	f004 ff6c 	bl	8013030 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e158:	e011      	b.n	800e17e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	2b00      	cmp	r3, #0
 800e164:	f47f aea4 	bne.w	800deb0 <tcp_receive+0xbf8>
 800e168:	e00a      	b.n	800e180 <tcp_receive+0xec8>
                break;
 800e16a:	bf00      	nop
 800e16c:	e008      	b.n	800e180 <tcp_receive+0xec8>
                break;
 800e16e:	bf00      	nop
 800e170:	e006      	b.n	800e180 <tcp_receive+0xec8>
                  break;
 800e172:	bf00      	nop
 800e174:	e004      	b.n	800e180 <tcp_receive+0xec8>
                  break;
 800e176:	bf00      	nop
 800e178:	e002      	b.n	800e180 <tcp_receive+0xec8>
                  break;
 800e17a:	bf00      	nop
 800e17c:	e000      	b.n	800e180 <tcp_receive+0xec8>
                break;
 800e17e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f001 fe8b 	bl	800fe9c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e186:	e003      	b.n	800e190 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f001 fe87 	bl	800fe9c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e18e:	e01a      	b.n	800e1c6 <tcp_receive+0xf0e>
 800e190:	e019      	b.n	800e1c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e192:	4b0f      	ldr	r3, [pc, #60]	; (800e1d0 <tcp_receive+0xf18>)
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	db0a      	blt.n	800e1b6 <tcp_receive+0xefe>
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <tcp_receive+0xf18>)
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a8:	6879      	ldr	r1, [r7, #4]
 800e1aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1ac:	440b      	add	r3, r1
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	dd07      	ble.n	800e1c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ba:	f043 0302 	orr.w	r3, r3, #2
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e1c4:	e7ff      	b.n	800e1c6 <tcp_receive+0xf0e>
 800e1c6:	bf00      	nop
 800e1c8:	3750      	adds	r7, #80	; 0x50
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	2000a940 	.word	0x2000a940
 800e1d4:	2000a920 	.word	0x2000a920
 800e1d8:	2000a94a 	.word	0x2000a94a
 800e1dc:	080150f0 	.word	0x080150f0
 800e1e0:	08015498 	.word	0x08015498
 800e1e4:	0801513c 	.word	0x0801513c

0800e1e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e1ee:	4b15      	ldr	r3, [pc, #84]	; (800e244 <tcp_get_next_optbyte+0x5c>)
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	b291      	uxth	r1, r2
 800e1f6:	4a13      	ldr	r2, [pc, #76]	; (800e244 <tcp_get_next_optbyte+0x5c>)
 800e1f8:	8011      	strh	r1, [r2, #0]
 800e1fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e1fc:	4b12      	ldr	r3, [pc, #72]	; (800e248 <tcp_get_next_optbyte+0x60>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d004      	beq.n	800e20e <tcp_get_next_optbyte+0x26>
 800e204:	4b11      	ldr	r3, [pc, #68]	; (800e24c <tcp_get_next_optbyte+0x64>)
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	88fa      	ldrh	r2, [r7, #6]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d208      	bcs.n	800e220 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e20e:	4b10      	ldr	r3, [pc, #64]	; (800e250 <tcp_get_next_optbyte+0x68>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	3314      	adds	r3, #20
 800e214:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e216:	88fb      	ldrh	r3, [r7, #6]
 800e218:	683a      	ldr	r2, [r7, #0]
 800e21a:	4413      	add	r3, r2
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	e00b      	b.n	800e238 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e220:	88fb      	ldrh	r3, [r7, #6]
 800e222:	b2da      	uxtb	r2, r3
 800e224:	4b09      	ldr	r3, [pc, #36]	; (800e24c <tcp_get_next_optbyte+0x64>)
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e22e:	4b06      	ldr	r3, [pc, #24]	; (800e248 <tcp_get_next_optbyte+0x60>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	797b      	ldrb	r3, [r7, #5]
 800e234:	4413      	add	r3, r2
 800e236:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr
 800e244:	2000a93c 	.word	0x2000a93c
 800e248:	2000a938 	.word	0x2000a938
 800e24c:	2000a936 	.word	0x2000a936
 800e250:	2000a930 	.word	0x2000a930

0800e254 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_parseopt+0x1c>
 800e262:	4b32      	ldr	r3, [pc, #200]	; (800e32c <tcp_parseopt+0xd8>)
 800e264:	f240 727d 	movw	r2, #1917	; 0x77d
 800e268:	4931      	ldr	r1, [pc, #196]	; (800e330 <tcp_parseopt+0xdc>)
 800e26a:	4832      	ldr	r0, [pc, #200]	; (800e334 <tcp_parseopt+0xe0>)
 800e26c:	f004 fee0 	bl	8013030 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e270:	4b31      	ldr	r3, [pc, #196]	; (800e338 <tcp_parseopt+0xe4>)
 800e272:	881b      	ldrh	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d055      	beq.n	800e324 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e278:	4b30      	ldr	r3, [pc, #192]	; (800e33c <tcp_parseopt+0xe8>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	801a      	strh	r2, [r3, #0]
 800e27e:	e045      	b.n	800e30c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e280:	f7ff ffb2 	bl	800e1e8 <tcp_get_next_optbyte>
 800e284:	4603      	mov	r3, r0
 800e286:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e288:	7bfb      	ldrb	r3, [r7, #15]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d006      	beq.n	800e29c <tcp_parseopt+0x48>
 800e28e:	2b02      	cmp	r3, #2
 800e290:	dc2b      	bgt.n	800e2ea <tcp_parseopt+0x96>
 800e292:	2b00      	cmp	r3, #0
 800e294:	d041      	beq.n	800e31a <tcp_parseopt+0xc6>
 800e296:	2b01      	cmp	r3, #1
 800e298:	d127      	bne.n	800e2ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e29a:	e037      	b.n	800e30c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e29c:	f7ff ffa4 	bl	800e1e8 <tcp_get_next_optbyte>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	d13b      	bne.n	800e31e <tcp_parseopt+0xca>
 800e2a6:	4b25      	ldr	r3, [pc, #148]	; (800e33c <tcp_parseopt+0xe8>)
 800e2a8:	881b      	ldrh	r3, [r3, #0]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	4a22      	ldr	r2, [pc, #136]	; (800e338 <tcp_parseopt+0xe4>)
 800e2ae:	8812      	ldrh	r2, [r2, #0]
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	da34      	bge.n	800e31e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e2b4:	f7ff ff98 	bl	800e1e8 <tcp_get_next_optbyte>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e2c0:	f7ff ff92 	bl	800e1e8 <tcp_get_next_optbyte>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	89bb      	ldrh	r3, [r7, #12]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e2ce:	89bb      	ldrh	r3, [r7, #12]
 800e2d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e2d4:	d804      	bhi.n	800e2e0 <tcp_parseopt+0x8c>
 800e2d6:	89bb      	ldrh	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <tcp_parseopt+0x8c>
 800e2dc:	89ba      	ldrh	r2, [r7, #12]
 800e2de:	e001      	b.n	800e2e4 <tcp_parseopt+0x90>
 800e2e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e2e8:	e010      	b.n	800e30c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e2ea:	f7ff ff7d 	bl	800e1e8 <tcp_get_next_optbyte>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e2f2:	7afb      	ldrb	r3, [r7, #11]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d914      	bls.n	800e322 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e2f8:	7afb      	ldrb	r3, [r7, #11]
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	4b0f      	ldr	r3, [pc, #60]	; (800e33c <tcp_parseopt+0xe8>)
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	4413      	add	r3, r2
 800e302:	b29b      	uxth	r3, r3
 800e304:	3b02      	subs	r3, #2
 800e306:	b29a      	uxth	r2, r3
 800e308:	4b0c      	ldr	r3, [pc, #48]	; (800e33c <tcp_parseopt+0xe8>)
 800e30a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e30c:	4b0b      	ldr	r3, [pc, #44]	; (800e33c <tcp_parseopt+0xe8>)
 800e30e:	881a      	ldrh	r2, [r3, #0]
 800e310:	4b09      	ldr	r3, [pc, #36]	; (800e338 <tcp_parseopt+0xe4>)
 800e312:	881b      	ldrh	r3, [r3, #0]
 800e314:	429a      	cmp	r2, r3
 800e316:	d3b3      	bcc.n	800e280 <tcp_parseopt+0x2c>
 800e318:	e004      	b.n	800e324 <tcp_parseopt+0xd0>
          return;
 800e31a:	bf00      	nop
 800e31c:	e002      	b.n	800e324 <tcp_parseopt+0xd0>
            return;
 800e31e:	bf00      	nop
 800e320:	e000      	b.n	800e324 <tcp_parseopt+0xd0>
            return;
 800e322:	bf00      	nop
      }
    }
  }
}
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	080150f0 	.word	0x080150f0
 800e330:	08015554 	.word	0x08015554
 800e334:	0801513c 	.word	0x0801513c
 800e338:	2000a934 	.word	0x2000a934
 800e33c:	2000a93c 	.word	0x2000a93c

0800e340 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e340:	b480      	push	{r7}
 800e342:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <tcp_trigger_input_pcb_close+0x1c>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f043 0310 	orr.w	r3, r3, #16
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	4b03      	ldr	r3, [pc, #12]	; (800e35c <tcp_trigger_input_pcb_close+0x1c>)
 800e350:	701a      	strb	r2, [r3, #0]
}
 800e352:	bf00      	nop
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	2000a94d 	.word	0x2000a94d

0800e360 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00a      	beq.n	800e388 <tcp_route+0x28>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	7a1b      	ldrb	r3, [r3, #8]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d006      	beq.n	800e388 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	7a1b      	ldrb	r3, [r3, #8]
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fb f8aa 	bl	80094d8 <netif_get_by_index>
 800e384:	4603      	mov	r3, r0
 800e386:	e003      	b.n	800e390 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f003 fad5 	bl	8011938 <ip4_route>
 800e38e:	4603      	mov	r3, r0
  }
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d105      	bne.n	800e3ba <tcp_create_segment+0x22>
 800e3ae:	4b44      	ldr	r3, [pc, #272]	; (800e4c0 <tcp_create_segment+0x128>)
 800e3b0:	22a3      	movs	r2, #163	; 0xa3
 800e3b2:	4944      	ldr	r1, [pc, #272]	; (800e4c4 <tcp_create_segment+0x12c>)
 800e3b4:	4844      	ldr	r0, [pc, #272]	; (800e4c8 <tcp_create_segment+0x130>)
 800e3b6:	f004 fe3b 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d105      	bne.n	800e3cc <tcp_create_segment+0x34>
 800e3c0:	4b3f      	ldr	r3, [pc, #252]	; (800e4c0 <tcp_create_segment+0x128>)
 800e3c2:	22a4      	movs	r2, #164	; 0xa4
 800e3c4:	4941      	ldr	r1, [pc, #260]	; (800e4cc <tcp_create_segment+0x134>)
 800e3c6:	4840      	ldr	r0, [pc, #256]	; (800e4c8 <tcp_create_segment+0x130>)
 800e3c8:	f004 fe32 	bl	8013030 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	f003 0304 	and.w	r3, r3, #4
 800e3d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e3da:	2003      	movs	r0, #3
 800e3dc:	f7fa fcf6 	bl	8008dcc <memp_malloc>
 800e3e0:	6138      	str	r0, [r7, #16]
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d104      	bne.n	800e3f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e3e8:	68b8      	ldr	r0, [r7, #8]
 800e3ea:	f7fb fbd5 	bl	8009b98 <pbuf_free>
    return NULL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e061      	b.n	800e4b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e3f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	68ba      	ldr	r2, [r7, #8]
 800e404:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	891a      	ldrh	r2, [r3, #8]
 800e40a:	7dfb      	ldrb	r3, [r7, #23]
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	429a      	cmp	r2, r3
 800e410:	d205      	bcs.n	800e41e <tcp_create_segment+0x86>
 800e412:	4b2b      	ldr	r3, [pc, #172]	; (800e4c0 <tcp_create_segment+0x128>)
 800e414:	22b0      	movs	r2, #176	; 0xb0
 800e416:	492e      	ldr	r1, [pc, #184]	; (800e4d0 <tcp_create_segment+0x138>)
 800e418:	482b      	ldr	r0, [pc, #172]	; (800e4c8 <tcp_create_segment+0x130>)
 800e41a:	f004 fe09 	bl	8013030 <iprintf>
  seg->len = p->tot_len - optlen;
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	891a      	ldrh	r2, [r3, #8]
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	b29b      	uxth	r3, r3
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	b29a      	uxth	r2, r3
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e42e:	2114      	movs	r1, #20
 800e430:	68b8      	ldr	r0, [r7, #8]
 800e432:	f7fb fb1b 	bl	8009a6c <pbuf_add_header>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d004      	beq.n	800e446 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e43c:	6938      	ldr	r0, [r7, #16]
 800e43e:	f7fc ffe8 	bl	800b412 <tcp_seg_free>
    return NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	e037      	b.n	800e4b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	8ada      	ldrh	r2, [r3, #22]
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	68dc      	ldr	r4, [r3, #12]
 800e458:	4610      	mov	r0, r2
 800e45a:	f7fa f83f 	bl	80084dc <lwip_htons>
 800e45e:	4603      	mov	r3, r0
 800e460:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8b1a      	ldrh	r2, [r3, #24]
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	68dc      	ldr	r4, [r3, #12]
 800e46a:	4610      	mov	r0, r2
 800e46c:	f7fa f836 	bl	80084dc <lwip_htons>
 800e470:	4603      	mov	r3, r0
 800e472:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	68dc      	ldr	r4, [r3, #12]
 800e478:	6838      	ldr	r0, [r7, #0]
 800e47a:	f7fa f844 	bl	8008506 <lwip_htonl>
 800e47e:	4603      	mov	r3, r0
 800e480:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e482:	7dfb      	ldrb	r3, [r7, #23]
 800e484:	089b      	lsrs	r3, r3, #2
 800e486:	b2db      	uxtb	r3, r3
 800e488:	b29b      	uxth	r3, r3
 800e48a:	3305      	adds	r3, #5
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	031b      	lsls	r3, r3, #12
 800e490:	b29a      	uxth	r2, r3
 800e492:	79fb      	ldrb	r3, [r7, #7]
 800e494:	b29b      	uxth	r3, r3
 800e496:	4313      	orrs	r3, r2
 800e498:	b29a      	uxth	r2, r3
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	68dc      	ldr	r4, [r3, #12]
 800e49e:	4610      	mov	r0, r2
 800e4a0:	f7fa f81c 	bl	80084dc <lwip_htons>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	749a      	strb	r2, [r3, #18]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	74da      	strb	r2, [r3, #19]
  return seg;
 800e4b4:	693b      	ldr	r3, [r7, #16]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd90      	pop	{r4, r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	08015570 	.word	0x08015570
 800e4c4:	080155a4 	.word	0x080155a4
 800e4c8:	080155c4 	.word	0x080155c4
 800e4cc:	080155ec 	.word	0x080155ec
 800e4d0:	08015610 	.word	0x08015610

0800e4d4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	607b      	str	r3, [r7, #4]
 800e4dc:	4603      	mov	r3, r0
 800e4de:	73fb      	strb	r3, [r7, #15]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	81bb      	strh	r3, [r7, #12]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e4e8:	89bb      	ldrh	r3, [r7, #12]
 800e4ea:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d105      	bne.n	800e4fe <tcp_pbuf_prealloc+0x2a>
 800e4f2:	4b30      	ldr	r3, [pc, #192]	; (800e5b4 <tcp_pbuf_prealloc+0xe0>)
 800e4f4:	22e8      	movs	r2, #232	; 0xe8
 800e4f6:	4930      	ldr	r1, [pc, #192]	; (800e5b8 <tcp_pbuf_prealloc+0xe4>)
 800e4f8:	4830      	ldr	r0, [pc, #192]	; (800e5bc <tcp_pbuf_prealloc+0xe8>)
 800e4fa:	f004 fd99 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d105      	bne.n	800e510 <tcp_pbuf_prealloc+0x3c>
 800e504:	4b2b      	ldr	r3, [pc, #172]	; (800e5b4 <tcp_pbuf_prealloc+0xe0>)
 800e506:	22e9      	movs	r2, #233	; 0xe9
 800e508:	492d      	ldr	r1, [pc, #180]	; (800e5c0 <tcp_pbuf_prealloc+0xec>)
 800e50a:	482c      	ldr	r0, [pc, #176]	; (800e5bc <tcp_pbuf_prealloc+0xe8>)
 800e50c:	f004 fd90 	bl	8013030 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e510:	89ba      	ldrh	r2, [r7, #12]
 800e512:	897b      	ldrh	r3, [r7, #10]
 800e514:	429a      	cmp	r2, r3
 800e516:	d221      	bcs.n	800e55c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e518:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	2b00      	cmp	r3, #0
 800e522:	d111      	bne.n	800e548 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	8b5b      	ldrh	r3, [r3, #26]
 800e528:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d115      	bne.n	800e55c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e534:	2b00      	cmp	r3, #0
 800e536:	d007      	beq.n	800e548 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e538:	6a3b      	ldr	r3, [r7, #32]
 800e53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e544:	2b00      	cmp	r3, #0
 800e546:	d009      	beq.n	800e55c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e548:	89bb      	ldrh	r3, [r7, #12]
 800e54a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e54e:	f023 0203 	bic.w	r2, r3, #3
 800e552:	897b      	ldrh	r3, [r7, #10]
 800e554:	4293      	cmp	r3, r2
 800e556:	bf28      	it	cs
 800e558:	4613      	movcs	r3, r2
 800e55a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e55c:	8af9      	ldrh	r1, [r7, #22]
 800e55e:	7bfb      	ldrb	r3, [r7, #15]
 800e560:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e564:	4618      	mov	r0, r3
 800e566:	f7fb f833 	bl	80095d0 <pbuf_alloc>
 800e56a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d101      	bne.n	800e576 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e572:	2300      	movs	r3, #0
 800e574:	e019      	b.n	800e5aa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d006      	beq.n	800e58c <tcp_pbuf_prealloc+0xb8>
 800e57e:	4b0d      	ldr	r3, [pc, #52]	; (800e5b4 <tcp_pbuf_prealloc+0xe0>)
 800e580:	f240 120b 	movw	r2, #267	; 0x10b
 800e584:	490f      	ldr	r1, [pc, #60]	; (800e5c4 <tcp_pbuf_prealloc+0xf0>)
 800e586:	480d      	ldr	r0, [pc, #52]	; (800e5bc <tcp_pbuf_prealloc+0xe8>)
 800e588:	f004 fd52 	bl	8013030 <iprintf>
  *oversize = p->len - length;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	895a      	ldrh	r2, [r3, #10]
 800e590:	89bb      	ldrh	r3, [r7, #12]
 800e592:	1ad3      	subs	r3, r2, r3
 800e594:	b29a      	uxth	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	89ba      	ldrh	r2, [r7, #12]
 800e59e:	811a      	strh	r2, [r3, #8]
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	891a      	ldrh	r2, [r3, #8]
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	815a      	strh	r2, [r3, #10]
  return p;
 800e5a8:	693b      	ldr	r3, [r7, #16]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3718      	adds	r7, #24
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	08015570 	.word	0x08015570
 800e5b8:	08015628 	.word	0x08015628
 800e5bc:	080155c4 	.word	0x080155c4
 800e5c0:	0801564c 	.word	0x0801564c
 800e5c4:	0801566c 	.word	0x0801566c

0800e5c8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d106      	bne.n	800e5e8 <tcp_write_checks+0x20>
 800e5da:	4b33      	ldr	r3, [pc, #204]	; (800e6a8 <tcp_write_checks+0xe0>)
 800e5dc:	f240 1233 	movw	r2, #307	; 0x133
 800e5e0:	4932      	ldr	r1, [pc, #200]	; (800e6ac <tcp_write_checks+0xe4>)
 800e5e2:	4833      	ldr	r0, [pc, #204]	; (800e6b0 <tcp_write_checks+0xe8>)
 800e5e4:	f004 fd24 	bl	8013030 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7d1b      	ldrb	r3, [r3, #20]
 800e5ec:	2b04      	cmp	r3, #4
 800e5ee:	d00e      	beq.n	800e60e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e5f4:	2b07      	cmp	r3, #7
 800e5f6:	d00a      	beq.n	800e60e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d006      	beq.n	800e60e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e604:	2b03      	cmp	r3, #3
 800e606:	d002      	beq.n	800e60e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e608:	f06f 030a 	mvn.w	r3, #10
 800e60c:	e048      	b.n	800e6a0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800e60e:	887b      	ldrh	r3, [r7, #2]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d101      	bne.n	800e618 <tcp_write_checks+0x50>
    return ERR_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	e043      	b.n	800e6a0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e61e:	887a      	ldrh	r2, [r7, #2]
 800e620:	429a      	cmp	r2, r3
 800e622:	d909      	bls.n	800e638 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	8b5b      	ldrh	r3, [r3, #26]
 800e628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e632:	f04f 33ff 	mov.w	r3, #4294967295
 800e636:	e033      	b.n	800e6a0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e63e:	2b08      	cmp	r3, #8
 800e640:	d909      	bls.n	800e656 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8b5b      	ldrh	r3, [r3, #26]
 800e646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e650:	f04f 33ff 	mov.w	r3, #4294967295
 800e654:	e024      	b.n	800e6a0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00f      	beq.n	800e680 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e664:	2b00      	cmp	r3, #0
 800e666:	d11a      	bne.n	800e69e <tcp_write_checks+0xd6>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d116      	bne.n	800e69e <tcp_write_checks+0xd6>
 800e670:	4b0d      	ldr	r3, [pc, #52]	; (800e6a8 <tcp_write_checks+0xe0>)
 800e672:	f240 1255 	movw	r2, #341	; 0x155
 800e676:	490f      	ldr	r1, [pc, #60]	; (800e6b4 <tcp_write_checks+0xec>)
 800e678:	480d      	ldr	r0, [pc, #52]	; (800e6b0 <tcp_write_checks+0xe8>)
 800e67a:	f004 fcd9 	bl	8013030 <iprintf>
 800e67e:	e00e      	b.n	800e69e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e684:	2b00      	cmp	r3, #0
 800e686:	d103      	bne.n	800e690 <tcp_write_checks+0xc8>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d006      	beq.n	800e69e <tcp_write_checks+0xd6>
 800e690:	4b05      	ldr	r3, [pc, #20]	; (800e6a8 <tcp_write_checks+0xe0>)
 800e692:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800e696:	4908      	ldr	r1, [pc, #32]	; (800e6b8 <tcp_write_checks+0xf0>)
 800e698:	4805      	ldr	r0, [pc, #20]	; (800e6b0 <tcp_write_checks+0xe8>)
 800e69a:	f004 fcc9 	bl	8013030 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	08015570 	.word	0x08015570
 800e6ac:	08015680 	.word	0x08015680
 800e6b0:	080155c4 	.word	0x080155c4
 800e6b4:	080156a0 	.word	0x080156a0
 800e6b8:	080156dc 	.word	0x080156dc

0800e6bc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e6bc:	b590      	push	{r4, r7, lr}
 800e6be:	b09b      	sub	sp, #108	; 0x6c
 800e6c0:	af04      	add	r7, sp, #16
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	80fb      	strh	r3, [r7, #6]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	653b      	str	r3, [r7, #80]	; 0x50
 800e6da:	2300      	movs	r3, #0
 800e6dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e6de:	2300      	movs	r3, #0
 800e6e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d109      	bne.n	800e718 <tcp_write+0x5c>
 800e704:	4ba4      	ldr	r3, [pc, #656]	; (800e998 <tcp_write+0x2dc>)
 800e706:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e70a:	49a4      	ldr	r1, [pc, #656]	; (800e99c <tcp_write+0x2e0>)
 800e70c:	48a4      	ldr	r0, [pc, #656]	; (800e9a0 <tcp_write+0x2e4>)
 800e70e:	f004 fc8f 	bl	8013030 <iprintf>
 800e712:	f06f 030f 	mvn.w	r3, #15
 800e716:	e32a      	b.n	800ed6e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e71e:	085b      	lsrs	r3, r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e726:	4293      	cmp	r3, r2
 800e728:	bf28      	it	cs
 800e72a:	4613      	movcs	r3, r2
 800e72c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e72e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e730:	2b00      	cmp	r3, #0
 800e732:	d102      	bne.n	800e73a <tcp_write+0x7e>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e738:	e000      	b.n	800e73c <tcp_write+0x80>
 800e73a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e73c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d109      	bne.n	800e758 <tcp_write+0x9c>
 800e744:	4b94      	ldr	r3, [pc, #592]	; (800e998 <tcp_write+0x2dc>)
 800e746:	f240 12ad 	movw	r2, #429	; 0x1ad
 800e74a:	4996      	ldr	r1, [pc, #600]	; (800e9a4 <tcp_write+0x2e8>)
 800e74c:	4894      	ldr	r0, [pc, #592]	; (800e9a0 <tcp_write+0x2e4>)
 800e74e:	f004 fc6f 	bl	8013030 <iprintf>
 800e752:	f06f 030f 	mvn.w	r3, #15
 800e756:	e30a      	b.n	800ed6e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e758:	88fb      	ldrh	r3, [r7, #6]
 800e75a:	4619      	mov	r1, r3
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f7ff ff33 	bl	800e5c8 <tcp_write_checks>
 800e762:	4603      	mov	r3, r0
 800e764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e768:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d002      	beq.n	800e776 <tcp_write+0xba>
    return err;
 800e770:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e774:	e2fb      	b.n	800ed6e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e77c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e780:	2300      	movs	r3, #0
 800e782:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f000 80f6 	beq.w	800e97c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e794:	653b      	str	r3, [r7, #80]	; 0x50
 800e796:	e002      	b.n	800e79e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1f8      	bne.n	800e798 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a8:	7a9b      	ldrb	r3, [r3, #10]
 800e7aa:	009b      	lsls	r3, r3, #2
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f003 0304 	and.w	r3, r3, #4
 800e7b2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e7b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7b8:	891b      	ldrh	r3, [r3, #8]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	8c3b      	ldrh	r3, [r7, #32]
 800e7be:	440b      	add	r3, r1
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	da06      	bge.n	800e7d2 <tcp_write+0x116>
 800e7c4:	4b74      	ldr	r3, [pc, #464]	; (800e998 <tcp_write+0x2dc>)
 800e7c6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e7ca:	4977      	ldr	r1, [pc, #476]	; (800e9a8 <tcp_write+0x2ec>)
 800e7cc:	4874      	ldr	r0, [pc, #464]	; (800e9a0 <tcp_write+0x2e4>)
 800e7ce:	f004 fc2f 	bl	8013030 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d4:	891a      	ldrh	r2, [r3, #8]
 800e7d6:	8c3b      	ldrh	r3, [r7, #32]
 800e7d8:	4413      	add	r3, r2
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e7e8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e7ea:	8a7b      	ldrh	r3, [r7, #18]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d026      	beq.n	800e83e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e7f0:	8a7b      	ldrh	r3, [r7, #18]
 800e7f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d206      	bcs.n	800e806 <tcp_write+0x14a>
 800e7f8:	4b67      	ldr	r3, [pc, #412]	; (800e998 <tcp_write+0x2dc>)
 800e7fa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e7fe:	496b      	ldr	r1, [pc, #428]	; (800e9ac <tcp_write+0x2f0>)
 800e800:	4867      	ldr	r0, [pc, #412]	; (800e9a0 <tcp_write+0x2e4>)
 800e802:	f004 fc15 	bl	8013030 <iprintf>
      seg = last_unsent;
 800e806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e808:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e80a:	8a7b      	ldrh	r3, [r7, #18]
 800e80c:	88fa      	ldrh	r2, [r7, #6]
 800e80e:	4293      	cmp	r3, r2
 800e810:	bf28      	it	cs
 800e812:	4613      	movcs	r3, r2
 800e814:	b29b      	uxth	r3, r3
 800e816:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e818:	4293      	cmp	r3, r2
 800e81a:	bf28      	it	cs
 800e81c:	4613      	movcs	r3, r2
 800e81e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e826:	4413      	add	r3, r2
 800e828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e82c:	8a7a      	ldrh	r2, [r7, #18]
 800e82e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	b29b      	uxth	r3, r3
 800e834:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e836:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e838:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e83e:	8a7b      	ldrh	r3, [r7, #18]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d00b      	beq.n	800e85c <tcp_write+0x1a0>
 800e844:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e848:	88fb      	ldrh	r3, [r7, #6]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d006      	beq.n	800e85c <tcp_write+0x1a0>
 800e84e:	4b52      	ldr	r3, [pc, #328]	; (800e998 <tcp_write+0x2dc>)
 800e850:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e854:	4956      	ldr	r1, [pc, #344]	; (800e9b0 <tcp_write+0x2f4>)
 800e856:	4852      	ldr	r0, [pc, #328]	; (800e9a0 <tcp_write+0x2e4>)
 800e858:	f004 fbea 	bl	8013030 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e85c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e860:	88fb      	ldrh	r3, [r7, #6]
 800e862:	429a      	cmp	r2, r3
 800e864:	f080 8167 	bcs.w	800eb36 <tcp_write+0x47a>
 800e868:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 8163 	beq.w	800eb36 <tcp_write+0x47a>
 800e870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e872:	891b      	ldrh	r3, [r3, #8]
 800e874:	2b00      	cmp	r3, #0
 800e876:	f000 815e 	beq.w	800eb36 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e87a:	88fa      	ldrh	r2, [r7, #6]
 800e87c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e880:	1ad2      	subs	r2, r2, r3
 800e882:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e884:	4293      	cmp	r3, r2
 800e886:	bfa8      	it	ge
 800e888:	4613      	movge	r3, r2
 800e88a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e88c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e88e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e890:	797b      	ldrb	r3, [r7, #5]
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d027      	beq.n	800e8ea <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e89a:	f107 0012 	add.w	r0, r7, #18
 800e89e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e8a0:	8bf9      	ldrh	r1, [r7, #30]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	9302      	str	r3, [sp, #8]
 800e8a6:	797b      	ldrb	r3, [r7, #5]
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	f7ff fe0f 	bl	800e4d4 <tcp_pbuf_prealloc>
 800e8b6:	6578      	str	r0, [r7, #84]	; 0x54
 800e8b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 8225 	beq.w	800ed0a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8c2:	6858      	ldr	r0, [r3, #4]
 800e8c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	8bfa      	ldrh	r2, [r7, #30]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	f004 fc89 	bl	80131e6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e8d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e8d6:	f7fb f9e7 	bl	8009ca8 <pbuf_clen>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	461a      	mov	r2, r3
 800e8de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e8e8:	e041      	b.n	800e96e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e8f0:	e002      	b.n	800e8f8 <tcp_write+0x23c>
 800e8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1f8      	bne.n	800e8f2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e902:	7b1b      	ldrb	r3, [r3, #12]
 800e904:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d115      	bne.n	800e938 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e912:	8952      	ldrh	r2, [r2, #10]
 800e914:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d10d      	bne.n	800e938 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e91c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e920:	2b00      	cmp	r3, #0
 800e922:	d006      	beq.n	800e932 <tcp_write+0x276>
 800e924:	4b1c      	ldr	r3, [pc, #112]	; (800e998 <tcp_write+0x2dc>)
 800e926:	f240 2231 	movw	r2, #561	; 0x231
 800e92a:	4922      	ldr	r1, [pc, #136]	; (800e9b4 <tcp_write+0x2f8>)
 800e92c:	481c      	ldr	r0, [pc, #112]	; (800e9a0 <tcp_write+0x2e4>)
 800e92e:	f004 fb7f 	bl	8013030 <iprintf>
          extendlen = seglen;
 800e932:	8bfb      	ldrh	r3, [r7, #30]
 800e934:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e936:	e01a      	b.n	800e96e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e938:	8bfb      	ldrh	r3, [r7, #30]
 800e93a:	2201      	movs	r2, #1
 800e93c:	4619      	mov	r1, r3
 800e93e:	2000      	movs	r0, #0
 800e940:	f7fa fe46 	bl	80095d0 <pbuf_alloc>
 800e944:	6578      	str	r0, [r7, #84]	; 0x54
 800e946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e948:	2b00      	cmp	r3, #0
 800e94a:	f000 81e0 	beq.w	800ed0e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e94e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	441a      	add	r2, r3
 800e956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e958:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e95a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e95c:	f7fb f9a4 	bl	8009ca8 <pbuf_clen>
 800e960:	4603      	mov	r3, r0
 800e962:	461a      	mov	r2, r3
 800e964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e968:	4413      	add	r3, r2
 800e96a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e96e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e972:	8bfb      	ldrh	r3, [r7, #30]
 800e974:	4413      	add	r3, r2
 800e976:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e97a:	e0dc      	b.n	800eb36 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e982:	2b00      	cmp	r3, #0
 800e984:	f000 80d7 	beq.w	800eb36 <tcp_write+0x47a>
 800e988:	4b03      	ldr	r3, [pc, #12]	; (800e998 <tcp_write+0x2dc>)
 800e98a:	f240 224a 	movw	r2, #586	; 0x24a
 800e98e:	490a      	ldr	r1, [pc, #40]	; (800e9b8 <tcp_write+0x2fc>)
 800e990:	4803      	ldr	r0, [pc, #12]	; (800e9a0 <tcp_write+0x2e4>)
 800e992:	f004 fb4d 	bl	8013030 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e996:	e0ce      	b.n	800eb36 <tcp_write+0x47a>
 800e998:	08015570 	.word	0x08015570
 800e99c:	08015710 	.word	0x08015710
 800e9a0:	080155c4 	.word	0x080155c4
 800e9a4:	08015728 	.word	0x08015728
 800e9a8:	0801575c 	.word	0x0801575c
 800e9ac:	08015774 	.word	0x08015774
 800e9b0:	08015794 	.word	0x08015794
 800e9b4:	080157b4 	.word	0x080157b4
 800e9b8:	080157e0 	.word	0x080157e0
    struct pbuf *p;
    u16_t left = len - pos;
 800e9bc:	88fa      	ldrh	r2, [r7, #6]
 800e9be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e9c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e9d2:	8b7a      	ldrh	r2, [r7, #26]
 800e9d4:	8bbb      	ldrh	r3, [r7, #28]
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	bf28      	it	cs
 800e9da:	4613      	movcs	r3, r2
 800e9dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e9de:	797b      	ldrb	r3, [r7, #5]
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d036      	beq.n	800ea56 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e9e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	8b3b      	ldrh	r3, [r7, #24]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	b299      	uxth	r1, r3
 800e9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	bf0c      	ite	eq
 800e9fa:	2301      	moveq	r3, #1
 800e9fc:	2300      	movne	r3, #0
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	f107 0012 	add.w	r0, r7, #18
 800ea04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea06:	9302      	str	r3, [sp, #8]
 800ea08:	797b      	ldrb	r3, [r7, #5]
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	4603      	mov	r3, r0
 800ea12:	2036      	movs	r0, #54	; 0x36
 800ea14:	f7ff fd5e 	bl	800e4d4 <tcp_pbuf_prealloc>
 800ea18:	6338      	str	r0, [r7, #48]	; 0x30
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	f000 8178 	beq.w	800ed12 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	895b      	ldrh	r3, [r3, #10]
 800ea26:	8b3a      	ldrh	r2, [r7, #24]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d906      	bls.n	800ea3a <tcp_write+0x37e>
 800ea2c:	4b8c      	ldr	r3, [pc, #560]	; (800ec60 <tcp_write+0x5a4>)
 800ea2e:	f240 2266 	movw	r2, #614	; 0x266
 800ea32:	498c      	ldr	r1, [pc, #560]	; (800ec64 <tcp_write+0x5a8>)
 800ea34:	488c      	ldr	r0, [pc, #560]	; (800ec68 <tcp_write+0x5ac>)
 800ea36:	f004 fafb 	bl	8013030 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	685a      	ldr	r2, [r3, #4]
 800ea3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ea42:	18d0      	adds	r0, r2, r3
 800ea44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea48:	68ba      	ldr	r2, [r7, #8]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	8b3a      	ldrh	r2, [r7, #24]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	f004 fbc9 	bl	80131e6 <memcpy>
 800ea54:	e02f      	b.n	800eab6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ea56:	8a7b      	ldrh	r3, [r7, #18]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d006      	beq.n	800ea6a <tcp_write+0x3ae>
 800ea5c:	4b80      	ldr	r3, [pc, #512]	; (800ec60 <tcp_write+0x5a4>)
 800ea5e:	f240 2271 	movw	r2, #625	; 0x271
 800ea62:	4982      	ldr	r1, [pc, #520]	; (800ec6c <tcp_write+0x5b0>)
 800ea64:	4880      	ldr	r0, [pc, #512]	; (800ec68 <tcp_write+0x5ac>)
 800ea66:	f004 fae3 	bl	8013030 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ea6a:	8b3b      	ldrh	r3, [r7, #24]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	4619      	mov	r1, r3
 800ea70:	2036      	movs	r0, #54	; 0x36
 800ea72:	f7fa fdad 	bl	80095d0 <pbuf_alloc>
 800ea76:	6178      	str	r0, [r7, #20]
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f000 814b 	beq.w	800ed16 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ea80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea84:	68ba      	ldr	r2, [r7, #8]
 800ea86:	441a      	add	r2, r3
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ea8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea96:	4619      	mov	r1, r3
 800ea98:	2036      	movs	r0, #54	; 0x36
 800ea9a:	f7fa fd99 	bl	80095d0 <pbuf_alloc>
 800ea9e:	6338      	str	r0, [r7, #48]	; 0x30
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d103      	bne.n	800eaae <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800eaa6:	6978      	ldr	r0, [r7, #20]
 800eaa8:	f7fb f876 	bl	8009b98 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800eaac:	e136      	b.n	800ed1c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800eaae:	6979      	ldr	r1, [r7, #20]
 800eab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eab2:	f7fb f933 	bl	8009d1c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800eab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eab8:	f7fb f8f6 	bl	8009ca8 <pbuf_clen>
 800eabc:	4603      	mov	r3, r0
 800eabe:	461a      	mov	r2, r3
 800eac0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eac4:	4413      	add	r3, r2
 800eac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800eaca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eace:	2b09      	cmp	r3, #9
 800ead0:	d903      	bls.n	800eada <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ead2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ead4:	f7fb f860 	bl	8009b98 <pbuf_free>
      goto memerr;
 800ead8:	e120      	b.n	800ed1c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eae2:	441a      	add	r2, r3
 800eae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eae8:	9300      	str	r3, [sp, #0]
 800eaea:	4613      	mov	r3, r2
 800eaec:	2200      	movs	r2, #0
 800eaee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaf0:	68f8      	ldr	r0, [r7, #12]
 800eaf2:	f7ff fc51 	bl	800e398 <tcp_create_segment>
 800eaf6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800eaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 810d 	beq.w	800ed1a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800eb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d102      	bne.n	800eb0c <tcp_write+0x450>
      queue = seg;
 800eb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb08:	647b      	str	r3, [r7, #68]	; 0x44
 800eb0a:	e00c      	b.n	800eb26 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800eb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d106      	bne.n	800eb20 <tcp_write+0x464>
 800eb12:	4b53      	ldr	r3, [pc, #332]	; (800ec60 <tcp_write+0x5a4>)
 800eb14:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eb18:	4955      	ldr	r1, [pc, #340]	; (800ec70 <tcp_write+0x5b4>)
 800eb1a:	4853      	ldr	r0, [pc, #332]	; (800ec68 <tcp_write+0x5ac>)
 800eb1c:	f004 fa88 	bl	8013030 <iprintf>
      prev_seg->next = seg;
 800eb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb24:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800eb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb28:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800eb2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb2e:	8b3b      	ldrh	r3, [r7, #24]
 800eb30:	4413      	add	r3, r2
 800eb32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800eb36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb3a:	88fb      	ldrh	r3, [r7, #6]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	f4ff af3d 	bcc.w	800e9bc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800eb42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d02c      	beq.n	800eba2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800eb48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb4e:	e01e      	b.n	800eb8e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb52:	891a      	ldrh	r2, [r3, #8]
 800eb54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb56:	4413      	add	r3, r2
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800eb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d110      	bne.n	800eb88 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb6c:	8952      	ldrh	r2, [r2, #10]
 800eb6e:	4413      	add	r3, r2
 800eb70:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eb72:	68b9      	ldr	r1, [r7, #8]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f004 fb36 	bl	80131e6 <memcpy>
        p->len += oversize_used;
 800eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7c:	895a      	ldrh	r2, [r3, #10]
 800eb7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb80:	4413      	add	r3, r2
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800eb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1dd      	bne.n	800eb50 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800eb94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb96:	891a      	ldrh	r2, [r3, #8]
 800eb98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb9a:	4413      	add	r3, r2
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eba0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800eba2:	8a7a      	ldrh	r2, [r7, #18]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ebaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d018      	beq.n	800ebe2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ebb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d106      	bne.n	800ebc4 <tcp_write+0x508>
 800ebb6:	4b2a      	ldr	r3, [pc, #168]	; (800ec60 <tcp_write+0x5a4>)
 800ebb8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ebbc:	492d      	ldr	r1, [pc, #180]	; (800ec74 <tcp_write+0x5b8>)
 800ebbe:	482a      	ldr	r0, [pc, #168]	; (800ec68 <tcp_write+0x5ac>)
 800ebc0:	f004 fa36 	bl	8013030 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ebc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fb f8a6 	bl	8009d1c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ebd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebd2:	891a      	ldrh	r2, [r3, #8]
 800ebd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebd6:	891b      	ldrh	r3, [r3, #8]
 800ebd8:	4413      	add	r3, r2
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebde:	811a      	strh	r2, [r3, #8]
 800ebe0:	e037      	b.n	800ec52 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ebe2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d034      	beq.n	800ec52 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ebe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <tcp_write+0x53a>
 800ebee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_write+0x548>
 800ebf6:	4b1a      	ldr	r3, [pc, #104]	; (800ec60 <tcp_write+0x5a4>)
 800ebf8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ebfc:	491e      	ldr	r1, [pc, #120]	; (800ec78 <tcp_write+0x5bc>)
 800ebfe:	481a      	ldr	r0, [pc, #104]	; (800ec68 <tcp_write+0x5ac>)
 800ec00:	f004 fa16 	bl	8013030 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ec04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec0a:	e009      	b.n	800ec20 <tcp_write+0x564>
      p->tot_len += extendlen;
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	891a      	ldrh	r2, [r3, #8]
 800ec10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec12:	4413      	add	r3, r2
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec18:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1f1      	bne.n	800ec0c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	891a      	ldrh	r2, [r3, #8]
 800ec2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec2e:	4413      	add	r3, r2
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ec36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec38:	895a      	ldrh	r2, [r3, #10]
 800ec3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec3c:	4413      	add	r3, r2
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ec44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec46:	891a      	ldrh	r2, [r3, #8]
 800ec48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec4a:	4413      	add	r3, r2
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec50:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ec52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d111      	bne.n	800ec7c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec5c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec5e:	e010      	b.n	800ec82 <tcp_write+0x5c6>
 800ec60:	08015570 	.word	0x08015570
 800ec64:	08015810 	.word	0x08015810
 800ec68:	080155c4 	.word	0x080155c4
 800ec6c:	08015850 	.word	0x08015850
 800ec70:	08015860 	.word	0x08015860
 800ec74:	08015874 	.word	0x08015874
 800ec78:	080158ac 	.word	0x080158ac
  } else {
    last_unsent->next = queue;
 800ec7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec80:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec86:	88fb      	ldrh	r3, [r7, #6]
 800ec88:	441a      	add	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ec94:	88fb      	ldrh	r3, [r7, #6]
 800ec96:	1ad3      	subs	r3, r2, r3
 800ec98:	b29a      	uxth	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eca6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00e      	beq.n	800ecd2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10a      	bne.n	800ecd2 <tcp_write+0x616>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d106      	bne.n	800ecd2 <tcp_write+0x616>
 800ecc4:	4b2c      	ldr	r3, [pc, #176]	; (800ed78 <tcp_write+0x6bc>)
 800ecc6:	f240 3212 	movw	r2, #786	; 0x312
 800ecca:	492c      	ldr	r1, [pc, #176]	; (800ed7c <tcp_write+0x6c0>)
 800eccc:	482c      	ldr	r0, [pc, #176]	; (800ed80 <tcp_write+0x6c4>)
 800ecce:	f004 f9af 	bl	8013030 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ecd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d016      	beq.n	800ed06 <tcp_write+0x64a>
 800ecd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d012      	beq.n	800ed06 <tcp_write+0x64a>
 800ece0:	797b      	ldrb	r3, [r7, #5]
 800ece2:	f003 0302 	and.w	r3, r3, #2
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d10d      	bne.n	800ed06 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ecea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	899b      	ldrh	r3, [r3, #12]
 800ecf0:	b29c      	uxth	r4, r3
 800ecf2:	2008      	movs	r0, #8
 800ecf4:	f7f9 fbf2 	bl	80084dc <lwip_htons>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	4322      	orrs	r2, r4
 800ed02:	b292      	uxth	r2, r2
 800ed04:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	e031      	b.n	800ed6e <tcp_write+0x6b2>
          goto memerr;
 800ed0a:	bf00      	nop
 800ed0c:	e006      	b.n	800ed1c <tcp_write+0x660>
            goto memerr;
 800ed0e:	bf00      	nop
 800ed10:	e004      	b.n	800ed1c <tcp_write+0x660>
        goto memerr;
 800ed12:	bf00      	nop
 800ed14:	e002      	b.n	800ed1c <tcp_write+0x660>
        goto memerr;
 800ed16:	bf00      	nop
 800ed18:	e000      	b.n	800ed1c <tcp_write+0x660>
      goto memerr;
 800ed1a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	8b5b      	ldrh	r3, [r3, #26]
 800ed20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ed2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d002      	beq.n	800ed36 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ed30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ed32:	f7fa ff31 	bl	8009b98 <pbuf_free>
  }
  if (queue != NULL) {
 800ed36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d002      	beq.n	800ed42 <tcp_write+0x686>
    tcp_segs_free(queue);
 800ed3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed3e:	f7fc fb53 	bl	800b3e8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00e      	beq.n	800ed6a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10a      	bne.n	800ed6a <tcp_write+0x6ae>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d106      	bne.n	800ed6a <tcp_write+0x6ae>
 800ed5c:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <tcp_write+0x6bc>)
 800ed5e:	f240 3227 	movw	r2, #807	; 0x327
 800ed62:	4906      	ldr	r1, [pc, #24]	; (800ed7c <tcp_write+0x6c0>)
 800ed64:	4806      	ldr	r0, [pc, #24]	; (800ed80 <tcp_write+0x6c4>)
 800ed66:	f004 f963 	bl	8013030 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ed6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	375c      	adds	r7, #92	; 0x5c
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd90      	pop	{r4, r7, pc}
 800ed76:	bf00      	nop
 800ed78:	08015570 	.word	0x08015570
 800ed7c:	080158e4 	.word	0x080158e4
 800ed80:	080155c4 	.word	0x080155c4

0800ed84 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ed84:	b590      	push	{r4, r7, lr}
 800ed86:	b08b      	sub	sp, #44	; 0x2c
 800ed88:	af02      	add	r7, sp, #8
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ed90:	2300      	movs	r3, #0
 800ed92:	61fb      	str	r3, [r7, #28]
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d106      	bne.n	800edb0 <tcp_split_unsent_seg+0x2c>
 800eda2:	4b95      	ldr	r3, [pc, #596]	; (800eff8 <tcp_split_unsent_seg+0x274>)
 800eda4:	f240 324b 	movw	r2, #843	; 0x34b
 800eda8:	4994      	ldr	r1, [pc, #592]	; (800effc <tcp_split_unsent_seg+0x278>)
 800edaa:	4895      	ldr	r0, [pc, #596]	; (800f000 <tcp_split_unsent_seg+0x27c>)
 800edac:	f004 f940 	bl	8013030 <iprintf>

  useg = pcb->unsent;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d102      	bne.n	800edc2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800edbc:	f04f 33ff 	mov.w	r3, #4294967295
 800edc0:	e116      	b.n	800eff0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800edc2:	887b      	ldrh	r3, [r7, #2]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d109      	bne.n	800eddc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800edc8:	4b8b      	ldr	r3, [pc, #556]	; (800eff8 <tcp_split_unsent_seg+0x274>)
 800edca:	f240 3253 	movw	r2, #851	; 0x353
 800edce:	498d      	ldr	r1, [pc, #564]	; (800f004 <tcp_split_unsent_seg+0x280>)
 800edd0:	488b      	ldr	r0, [pc, #556]	; (800f000 <tcp_split_unsent_seg+0x27c>)
 800edd2:	f004 f92d 	bl	8013030 <iprintf>
    return ERR_VAL;
 800edd6:	f06f 0305 	mvn.w	r3, #5
 800edda:	e109      	b.n	800eff0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	891b      	ldrh	r3, [r3, #8]
 800ede0:	887a      	ldrh	r2, [r7, #2]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d301      	bcc.n	800edea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	e102      	b.n	800eff0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edee:	887a      	ldrh	r2, [r7, #2]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d906      	bls.n	800ee02 <tcp_split_unsent_seg+0x7e>
 800edf4:	4b80      	ldr	r3, [pc, #512]	; (800eff8 <tcp_split_unsent_seg+0x274>)
 800edf6:	f240 325b 	movw	r2, #859	; 0x35b
 800edfa:	4983      	ldr	r1, [pc, #524]	; (800f008 <tcp_split_unsent_seg+0x284>)
 800edfc:	4880      	ldr	r0, [pc, #512]	; (800f000 <tcp_split_unsent_seg+0x27c>)
 800edfe:	f004 f917 	bl	8013030 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	891b      	ldrh	r3, [r3, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <tcp_split_unsent_seg+0x94>
 800ee0a:	4b7b      	ldr	r3, [pc, #492]	; (800eff8 <tcp_split_unsent_seg+0x274>)
 800ee0c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ee10:	497e      	ldr	r1, [pc, #504]	; (800f00c <tcp_split_unsent_seg+0x288>)
 800ee12:	487b      	ldr	r0, [pc, #492]	; (800f000 <tcp_split_unsent_seg+0x27c>)
 800ee14:	f004 f90c 	bl	8013030 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	7a9b      	ldrb	r3, [r3, #10]
 800ee1c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	f003 0304 	and.w	r3, r3, #4
 800ee28:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	891a      	ldrh	r2, [r3, #8]
 800ee2e:	887b      	ldrh	r3, [r7, #2]
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ee34:	7bbb      	ldrb	r3, [r7, #14]
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	89bb      	ldrh	r3, [r7, #12]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee42:	4619      	mov	r1, r3
 800ee44:	2036      	movs	r0, #54	; 0x36
 800ee46:	f7fa fbc3 	bl	80095d0 <pbuf_alloc>
 800ee4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f000 80b7 	beq.w	800efc2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	891a      	ldrh	r2, [r3, #8]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	891b      	ldrh	r3, [r3, #8]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	887b      	ldrh	r3, [r7, #2]
 800ee64:	4413      	add	r3, r2
 800ee66:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	6858      	ldr	r0, [r3, #4]
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	18d1      	adds	r1, r2, r3
 800ee74:	897b      	ldrh	r3, [r7, #10]
 800ee76:	89ba      	ldrh	r2, [r7, #12]
 800ee78:	f7fb f888 	bl	8009f8c <pbuf_copy_partial>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	461a      	mov	r2, r3
 800ee80:	89bb      	ldrh	r3, [r7, #12]
 800ee82:	4293      	cmp	r3, r2
 800ee84:	f040 809f 	bne.w	800efc6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	899b      	ldrh	r3, [r3, #12]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f9 fb23 	bl	80084dc <lwip_htons>
 800ee96:	4603      	mov	r3, r0
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee9e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eea0:	2300      	movs	r3, #0
 800eea2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800eea4:	7efb      	ldrb	r3, [r7, #27]
 800eea6:	f003 0308 	and.w	r3, r3, #8
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eeae:	7efb      	ldrb	r3, [r7, #27]
 800eeb0:	f023 0308 	bic.w	r3, r3, #8
 800eeb4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800eeb6:	7ebb      	ldrb	r3, [r7, #26]
 800eeb8:	f043 0308 	orr.w	r3, r3, #8
 800eebc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800eebe:	7efb      	ldrb	r3, [r7, #27]
 800eec0:	f003 0301 	and.w	r3, r3, #1
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d007      	beq.n	800eed8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800eec8:	7efb      	ldrb	r3, [r7, #27]
 800eeca:	f023 0301 	bic.w	r3, r3, #1
 800eece:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800eed0:	7ebb      	ldrb	r3, [r7, #26]
 800eed2:	f043 0301 	orr.w	r3, r3, #1
 800eed6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f9 fb11 	bl	8008506 <lwip_htonl>
 800eee4:	4602      	mov	r2, r0
 800eee6:	887b      	ldrh	r3, [r7, #2]
 800eee8:	18d1      	adds	r1, r2, r3
 800eeea:	7eba      	ldrb	r2, [r7, #26]
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	460b      	mov	r3, r1
 800eef2:	6939      	ldr	r1, [r7, #16]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fa4f 	bl	800e398 <tcp_create_segment>
 800eefa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d063      	beq.n	800efca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fa fece 	bl	8009ca8 <pbuf_clen>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	461a      	mov	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef16:	1a9b      	subs	r3, r3, r2
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	6858      	ldr	r0, [r3, #4]
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	891a      	ldrh	r2, [r3, #8]
 800ef2a:	89bb      	ldrh	r3, [r7, #12]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	4619      	mov	r1, r3
 800ef32:	f7fa fcab 	bl	800988c <pbuf_realloc>
  useg->len -= remainder;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	891a      	ldrh	r2, [r3, #8]
 800ef3a:	89bb      	ldrh	r3, [r7, #12]
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	899b      	ldrh	r3, [r3, #12]
 800ef4a:	b29c      	uxth	r4, r3
 800ef4c:	7efb      	ldrb	r3, [r7, #27]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7f9 fac3 	bl	80084dc <lwip_htons>
 800ef56:	4603      	mov	r3, r0
 800ef58:	461a      	mov	r2, r3
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	4322      	orrs	r2, r4
 800ef60:	b292      	uxth	r2, r2
 800ef62:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fa fe9d 	bl	8009ca8 <pbuf_clen>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	461a      	mov	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef78:	4413      	add	r3, r2
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fa fe8e 	bl	8009ca8 <pbuf_clen>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	461a      	mov	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef96:	4413      	add	r3, r2
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	69fa      	ldr	r2, [r7, #28]
 800efac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d103      	bne.n	800efbe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	e016      	b.n	800eff0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800efc2:	bf00      	nop
 800efc4:	e002      	b.n	800efcc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800efc6:	bf00      	nop
 800efc8:	e000      	b.n	800efcc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800efca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d006      	beq.n	800efe0 <tcp_split_unsent_seg+0x25c>
 800efd2:	4b09      	ldr	r3, [pc, #36]	; (800eff8 <tcp_split_unsent_seg+0x274>)
 800efd4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800efd8:	490d      	ldr	r1, [pc, #52]	; (800f010 <tcp_split_unsent_seg+0x28c>)
 800efda:	4809      	ldr	r0, [pc, #36]	; (800f000 <tcp_split_unsent_seg+0x27c>)
 800efdc:	f004 f828 	bl	8013030 <iprintf>
  if (p != NULL) {
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d002      	beq.n	800efec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800efe6:	6938      	ldr	r0, [r7, #16]
 800efe8:	f7fa fdd6 	bl	8009b98 <pbuf_free>
  }

  return ERR_MEM;
 800efec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3724      	adds	r7, #36	; 0x24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd90      	pop	{r4, r7, pc}
 800eff8:	08015570 	.word	0x08015570
 800effc:	08015904 	.word	0x08015904
 800f000:	080155c4 	.word	0x080155c4
 800f004:	08015928 	.word	0x08015928
 800f008:	0801594c 	.word	0x0801594c
 800f00c:	0801595c 	.word	0x0801595c
 800f010:	0801596c 	.word	0x0801596c

0800f014 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f014:	b590      	push	{r4, r7, lr}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d106      	bne.n	800f030 <tcp_send_fin+0x1c>
 800f022:	4b21      	ldr	r3, [pc, #132]	; (800f0a8 <tcp_send_fin+0x94>)
 800f024:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f028:	4920      	ldr	r1, [pc, #128]	; (800f0ac <tcp_send_fin+0x98>)
 800f02a:	4821      	ldr	r0, [pc, #132]	; (800f0b0 <tcp_send_fin+0x9c>)
 800f02c:	f004 f800 	bl	8013030 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d02e      	beq.n	800f096 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f03c:	60fb      	str	r3, [r7, #12]
 800f03e:	e002      	b.n	800f046 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1f8      	bne.n	800f040 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	899b      	ldrh	r3, [r3, #12]
 800f054:	b29b      	uxth	r3, r3
 800f056:	4618      	mov	r0, r3
 800f058:	f7f9 fa40 	bl	80084dc <lwip_htons>
 800f05c:	4603      	mov	r3, r0
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	f003 0307 	and.w	r3, r3, #7
 800f064:	2b00      	cmp	r3, #0
 800f066:	d116      	bne.n	800f096 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	899b      	ldrh	r3, [r3, #12]
 800f06e:	b29c      	uxth	r4, r3
 800f070:	2001      	movs	r0, #1
 800f072:	f7f9 fa33 	bl	80084dc <lwip_htons>
 800f076:	4603      	mov	r3, r0
 800f078:	461a      	mov	r2, r3
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	4322      	orrs	r2, r4
 800f080:	b292      	uxth	r2, r2
 800f082:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	8b5b      	ldrh	r3, [r3, #26]
 800f088:	f043 0320 	orr.w	r3, r3, #32
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f092:	2300      	movs	r3, #0
 800f094:	e004      	b.n	800f0a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f096:	2101      	movs	r1, #1
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 f80b 	bl	800f0b4 <tcp_enqueue_flags>
 800f09e:	4603      	mov	r3, r0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3714      	adds	r7, #20
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd90      	pop	{r4, r7, pc}
 800f0a8:	08015570 	.word	0x08015570
 800f0ac:	08015978 	.word	0x08015978
 800f0b0:	080155c4 	.word	0x080155c4

0800f0b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b08a      	sub	sp, #40	; 0x28
 800f0b8:	af02      	add	r7, sp, #8
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f0c8:	78fb      	ldrb	r3, [r7, #3]
 800f0ca:	f003 0303 	and.w	r3, r3, #3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d106      	bne.n	800f0e0 <tcp_enqueue_flags+0x2c>
 800f0d2:	4b67      	ldr	r3, [pc, #412]	; (800f270 <tcp_enqueue_flags+0x1bc>)
 800f0d4:	f240 4211 	movw	r2, #1041	; 0x411
 800f0d8:	4966      	ldr	r1, [pc, #408]	; (800f274 <tcp_enqueue_flags+0x1c0>)
 800f0da:	4867      	ldr	r0, [pc, #412]	; (800f278 <tcp_enqueue_flags+0x1c4>)
 800f0dc:	f003 ffa8 	bl	8013030 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <tcp_enqueue_flags+0x40>
 800f0e6:	4b62      	ldr	r3, [pc, #392]	; (800f270 <tcp_enqueue_flags+0x1bc>)
 800f0e8:	f240 4213 	movw	r2, #1043	; 0x413
 800f0ec:	4963      	ldr	r1, [pc, #396]	; (800f27c <tcp_enqueue_flags+0x1c8>)
 800f0ee:	4862      	ldr	r0, [pc, #392]	; (800f278 <tcp_enqueue_flags+0x1c4>)
 800f0f0:	f003 ff9e 	bl	8013030 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f0f4:	78fb      	ldrb	r3, [r7, #3]
 800f0f6:	f003 0302 	and.w	r3, r3, #2
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f0fe:	2301      	movs	r3, #1
 800f100:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f102:	7ffb      	ldrb	r3, [r7, #31]
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f003 0304 	and.w	r3, r3, #4
 800f10c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f10e:	7dfb      	ldrb	r3, [r7, #23]
 800f110:	b29b      	uxth	r3, r3
 800f112:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f116:	4619      	mov	r1, r3
 800f118:	2036      	movs	r0, #54	; 0x36
 800f11a:	f7fa fa59 	bl	80095d0 <pbuf_alloc>
 800f11e:	6138      	str	r0, [r7, #16]
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d109      	bne.n	800f13a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	8b5b      	ldrh	r3, [r3, #26]
 800f12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f12e:	b29a      	uxth	r2, r3
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f134:	f04f 33ff 	mov.w	r3, #4294967295
 800f138:	e095      	b.n	800f266 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	895a      	ldrh	r2, [r3, #10]
 800f13e:	7dfb      	ldrb	r3, [r7, #23]
 800f140:	b29b      	uxth	r3, r3
 800f142:	429a      	cmp	r2, r3
 800f144:	d206      	bcs.n	800f154 <tcp_enqueue_flags+0xa0>
 800f146:	4b4a      	ldr	r3, [pc, #296]	; (800f270 <tcp_enqueue_flags+0x1bc>)
 800f148:	f240 4239 	movw	r2, #1081	; 0x439
 800f14c:	494c      	ldr	r1, [pc, #304]	; (800f280 <tcp_enqueue_flags+0x1cc>)
 800f14e:	484a      	ldr	r0, [pc, #296]	; (800f278 <tcp_enqueue_flags+0x1c4>)
 800f150:	f003 ff6e 	bl	8013030 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f158:	78fa      	ldrb	r2, [r7, #3]
 800f15a:	7ffb      	ldrb	r3, [r7, #31]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	460b      	mov	r3, r1
 800f160:	6939      	ldr	r1, [r7, #16]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7ff f918 	bl	800e398 <tcp_create_segment>
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d109      	bne.n	800f184 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	8b5b      	ldrh	r3, [r3, #26]
 800f174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f178:	b29a      	uxth	r2, r3
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f17e:	f04f 33ff 	mov.w	r3, #4294967295
 800f182:	e070      	b.n	800f266 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	f003 0303 	and.w	r3, r3, #3
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d006      	beq.n	800f19e <tcp_enqueue_flags+0xea>
 800f190:	4b37      	ldr	r3, [pc, #220]	; (800f270 <tcp_enqueue_flags+0x1bc>)
 800f192:	f240 4242 	movw	r2, #1090	; 0x442
 800f196:	493b      	ldr	r1, [pc, #236]	; (800f284 <tcp_enqueue_flags+0x1d0>)
 800f198:	4837      	ldr	r0, [pc, #220]	; (800f278 <tcp_enqueue_flags+0x1c4>)
 800f19a:	f003 ff49 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	891b      	ldrh	r3, [r3, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d006      	beq.n	800f1b4 <tcp_enqueue_flags+0x100>
 800f1a6:	4b32      	ldr	r3, [pc, #200]	; (800f270 <tcp_enqueue_flags+0x1bc>)
 800f1a8:	f240 4243 	movw	r2, #1091	; 0x443
 800f1ac:	4936      	ldr	r1, [pc, #216]	; (800f288 <tcp_enqueue_flags+0x1d4>)
 800f1ae:	4832      	ldr	r0, [pc, #200]	; (800f278 <tcp_enqueue_flags+0x1c4>)
 800f1b0:	f003 ff3e 	bl	8013030 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d103      	bne.n	800f1c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1c2:	e00d      	b.n	800f1e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c8:	61bb      	str	r3, [r7, #24]
 800f1ca:	e002      	b.n	800f1d2 <tcp_enqueue_flags+0x11e>
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	61bb      	str	r3, [r7, #24]
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1f8      	bne.n	800f1cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f1e8:	78fb      	ldrb	r3, [r7, #3]
 800f1ea:	f003 0302 	and.w	r3, r3, #2
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d104      	bne.n	800f1fc <tcp_enqueue_flags+0x148>
 800f1f2:	78fb      	ldrb	r3, [r7, #3]
 800f1f4:	f003 0301 	and.w	r3, r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d004      	beq.n	800f206 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f206:	78fb      	ldrb	r3, [r7, #3]
 800f208:	f003 0301 	and.w	r3, r3, #1
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d006      	beq.n	800f21e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	8b5b      	ldrh	r3, [r3, #26]
 800f214:	f043 0320 	orr.w	r3, r3, #32
 800f218:	b29a      	uxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	4618      	mov	r0, r3
 800f224:	f7fa fd40 	bl	8009ca8 <pbuf_clen>
 800f228:	4603      	mov	r3, r0
 800f22a:	461a      	mov	r2, r3
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f232:	4413      	add	r3, r2
 800f234:	b29a      	uxth	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00e      	beq.n	800f264 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <tcp_enqueue_flags+0x1b0>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f252:	2b00      	cmp	r3, #0
 800f254:	d106      	bne.n	800f264 <tcp_enqueue_flags+0x1b0>
 800f256:	4b06      	ldr	r3, [pc, #24]	; (800f270 <tcp_enqueue_flags+0x1bc>)
 800f258:	f240 4265 	movw	r2, #1125	; 0x465
 800f25c:	490b      	ldr	r1, [pc, #44]	; (800f28c <tcp_enqueue_flags+0x1d8>)
 800f25e:	4806      	ldr	r0, [pc, #24]	; (800f278 <tcp_enqueue_flags+0x1c4>)
 800f260:	f003 fee6 	bl	8013030 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3720      	adds	r7, #32
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
 800f26e:	bf00      	nop
 800f270:	08015570 	.word	0x08015570
 800f274:	08015994 	.word	0x08015994
 800f278:	080155c4 	.word	0x080155c4
 800f27c:	080159ec 	.word	0x080159ec
 800f280:	08015a0c 	.word	0x08015a0c
 800f284:	08015a48 	.word	0x08015a48
 800f288:	08015a60 	.word	0x08015a60
 800f28c:	08015a8c 	.word	0x08015a8c

0800f290 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f290:	b5b0      	push	{r4, r5, r7, lr}
 800f292:	b08a      	sub	sp, #40	; 0x28
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d106      	bne.n	800f2ac <tcp_output+0x1c>
 800f29e:	4b8a      	ldr	r3, [pc, #552]	; (800f4c8 <tcp_output+0x238>)
 800f2a0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f2a4:	4989      	ldr	r1, [pc, #548]	; (800f4cc <tcp_output+0x23c>)
 800f2a6:	488a      	ldr	r0, [pc, #552]	; (800f4d0 <tcp_output+0x240>)
 800f2a8:	f003 fec2 	bl	8013030 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	7d1b      	ldrb	r3, [r3, #20]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d106      	bne.n	800f2c2 <tcp_output+0x32>
 800f2b4:	4b84      	ldr	r3, [pc, #528]	; (800f4c8 <tcp_output+0x238>)
 800f2b6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f2ba:	4986      	ldr	r1, [pc, #536]	; (800f4d4 <tcp_output+0x244>)
 800f2bc:	4884      	ldr	r0, [pc, #528]	; (800f4d0 <tcp_output+0x240>)
 800f2be:	f003 feb7 	bl	8013030 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f2c2:	4b85      	ldr	r3, [pc, #532]	; (800f4d8 <tcp_output+0x248>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d101      	bne.n	800f2d0 <tcp_output+0x40>
    return ERR_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e1ce      	b.n	800f66e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	bf28      	it	cs
 800f2e0:	4613      	movcs	r3, r2
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d10b      	bne.n	800f30a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	8b5b      	ldrh	r3, [r3, #26]
 800f2f6:	f003 0302 	and.w	r3, r3, #2
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	f000 81aa 	beq.w	800f654 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 fdcb 	bl	800fe9c <tcp_send_empty_ack>
 800f306:	4603      	mov	r3, r0
 800f308:	e1b1      	b.n	800f66e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f30a:	6879      	ldr	r1, [r7, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	3304      	adds	r3, #4
 800f310:	461a      	mov	r2, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff f824 	bl	800e360 <tcp_route>
 800f318:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d102      	bne.n	800f326 <tcp_output+0x96>
    return ERR_RTE;
 800f320:	f06f 0303 	mvn.w	r3, #3
 800f324:	e1a3      	b.n	800f66e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d003      	beq.n	800f334 <tcp_output+0xa4>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d111      	bne.n	800f358 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d002      	beq.n	800f340 <tcp_output+0xb0>
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	3304      	adds	r3, #4
 800f33e:	e000      	b.n	800f342 <tcp_output+0xb2>
 800f340:	2300      	movs	r3, #0
 800f342:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d102      	bne.n	800f350 <tcp_output+0xc0>
      return ERR_RTE;
 800f34a:	f06f 0303 	mvn.w	r3, #3
 800f34e:	e18e      	b.n	800f66e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	681a      	ldr	r2, [r3, #0]
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f9 f8d1 	bl	8008506 <lwip_htonl>
 800f364:	4602      	mov	r2, r0
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f36e:	8912      	ldrh	r2, [r2, #8]
 800f370:	4413      	add	r3, r2
 800f372:	69ba      	ldr	r2, [r7, #24]
 800f374:	429a      	cmp	r2, r3
 800f376:	d227      	bcs.n	800f3c8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f37e:	461a      	mov	r2, r3
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	4293      	cmp	r3, r2
 800f384:	d114      	bne.n	800f3b0 <tcp_output+0x120>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d110      	bne.n	800f3b0 <tcp_output+0x120>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10b      	bne.n	800f3b0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2200      	movs	r2, #0
 800f39c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	8b5b      	ldrh	r3, [r3, #26]
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f000 814d 	beq.w	800f658 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 fd6c 	bl	800fe9c <tcp_send_empty_ack>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	e152      	b.n	800f66e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f3d6:	6a3b      	ldr	r3, [r7, #32]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f000 811c 	beq.w	800f616 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f3de:	e002      	b.n	800f3e6 <tcp_output+0x156>
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	623b      	str	r3, [r7, #32]
 800f3e6:	6a3b      	ldr	r3, [r7, #32]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d1f8      	bne.n	800f3e0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f3ee:	e112      	b.n	800f616 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	899b      	ldrh	r3, [r3, #12]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7f9 f86f 	bl	80084dc <lwip_htons>
 800f3fe:	4603      	mov	r3, r0
 800f400:	b2db      	uxtb	r3, r3
 800f402:	f003 0304 	and.w	r3, r3, #4
 800f406:	2b00      	cmp	r3, #0
 800f408:	d006      	beq.n	800f418 <tcp_output+0x188>
 800f40a:	4b2f      	ldr	r3, [pc, #188]	; (800f4c8 <tcp_output+0x238>)
 800f40c:	f240 5236 	movw	r2, #1334	; 0x536
 800f410:	4932      	ldr	r1, [pc, #200]	; (800f4dc <tcp_output+0x24c>)
 800f412:	482f      	ldr	r0, [pc, #188]	; (800f4d0 <tcp_output+0x240>)
 800f414:	f003 fe0c 	bl	8013030 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d01f      	beq.n	800f460 <tcp_output+0x1d0>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	8b5b      	ldrh	r3, [r3, #26]
 800f424:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d119      	bne.n	800f460 <tcp_output+0x1d0>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00b      	beq.n	800f44c <tcp_output+0x1bc>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d110      	bne.n	800f460 <tcp_output+0x1d0>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f442:	891a      	ldrh	r2, [r3, #8]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f448:	429a      	cmp	r2, r3
 800f44a:	d209      	bcs.n	800f460 <tcp_output+0x1d0>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f452:	2b00      	cmp	r3, #0
 800f454:	d004      	beq.n	800f460 <tcp_output+0x1d0>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	d901      	bls.n	800f464 <tcp_output+0x1d4>
 800f460:	2301      	movs	r3, #1
 800f462:	e000      	b.n	800f466 <tcp_output+0x1d6>
 800f464:	2300      	movs	r3, #0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d106      	bne.n	800f478 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8b5b      	ldrh	r3, [r3, #26]
 800f46e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 80e4 	beq.w	800f640 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	7d1b      	ldrb	r3, [r3, #20]
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d00d      	beq.n	800f49c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	899b      	ldrh	r3, [r3, #12]
 800f486:	b29c      	uxth	r4, r3
 800f488:	2010      	movs	r0, #16
 800f48a:	f7f9 f827 	bl	80084dc <lwip_htons>
 800f48e:	4603      	mov	r3, r0
 800f490:	461a      	mov	r2, r3
 800f492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	4322      	orrs	r2, r4
 800f498:	b292      	uxth	r2, r2
 800f49a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	6879      	ldr	r1, [r7, #4]
 800f4a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4a2:	f000 f909 	bl	800f6b8 <tcp_output_segment>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d016      	beq.n	800f4e0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	8b5b      	ldrh	r3, [r3, #26]
 800f4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	835a      	strh	r2, [r3, #26]
      return err;
 800f4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4c4:	e0d3      	b.n	800f66e <tcp_output+0x3de>
 800f4c6:	bf00      	nop
 800f4c8:	08015570 	.word	0x08015570
 800f4cc:	08015ab4 	.word	0x08015ab4
 800f4d0:	080155c4 	.word	0x080155c4
 800f4d4:	08015acc 	.word	0x08015acc
 800f4d8:	2000a954 	.word	0x2000a954
 800f4dc:	08015af4 	.word	0x08015af4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	7d1b      	ldrb	r3, [r3, #20]
 800f4ec:	2b02      	cmp	r3, #2
 800f4ee:	d006      	beq.n	800f4fe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	8b5b      	ldrh	r3, [r3, #26]
 800f4f4:	f023 0303 	bic.w	r3, r3, #3
 800f4f8:	b29a      	uxth	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	f7f8 fffe 	bl	8008506 <lwip_htonl>
 800f50a:	4604      	mov	r4, r0
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	891b      	ldrh	r3, [r3, #8]
 800f510:	461d      	mov	r5, r3
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	899b      	ldrh	r3, [r3, #12]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7f8 ffde 	bl	80084dc <lwip_htons>
 800f520:	4603      	mov	r3, r0
 800f522:	b2db      	uxtb	r3, r3
 800f524:	f003 0303 	and.w	r3, r3, #3
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d001      	beq.n	800f530 <tcp_output+0x2a0>
 800f52c:	2301      	movs	r3, #1
 800f52e:	e000      	b.n	800f532 <tcp_output+0x2a2>
 800f530:	2300      	movs	r3, #0
 800f532:	442b      	add	r3, r5
 800f534:	4423      	add	r3, r4
 800f536:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	1ad3      	subs	r3, r2, r3
 800f540:	2b00      	cmp	r3, #0
 800f542:	da02      	bge.n	800f54a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	891b      	ldrh	r3, [r3, #8]
 800f54e:	461c      	mov	r4, r3
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	899b      	ldrh	r3, [r3, #12]
 800f556:	b29b      	uxth	r3, r3
 800f558:	4618      	mov	r0, r3
 800f55a:	f7f8 ffbf 	bl	80084dc <lwip_htons>
 800f55e:	4603      	mov	r3, r0
 800f560:	b2db      	uxtb	r3, r3
 800f562:	f003 0303 	and.w	r3, r3, #3
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <tcp_output+0x2de>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e000      	b.n	800f570 <tcp_output+0x2e0>
 800f56e:	2300      	movs	r3, #0
 800f570:	4423      	add	r3, r4
 800f572:	2b00      	cmp	r3, #0
 800f574:	d049      	beq.n	800f60a <tcp_output+0x37a>
      seg->next = NULL;
 800f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f578:	2200      	movs	r2, #0
 800f57a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f580:	2b00      	cmp	r3, #0
 800f582:	d105      	bne.n	800f590 <tcp_output+0x300>
        pcb->unacked = seg;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f588:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	623b      	str	r3, [r7, #32]
 800f58e:	e03f      	b.n	800f610 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	4618      	mov	r0, r3
 800f598:	f7f8 ffb5 	bl	8008506 <lwip_htonl>
 800f59c:	4604      	mov	r4, r0
 800f59e:	6a3b      	ldr	r3, [r7, #32]
 800f5a0:	68db      	ldr	r3, [r3, #12]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7f8 ffae 	bl	8008506 <lwip_htonl>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	1ae3      	subs	r3, r4, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	da24      	bge.n	800f5fc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3370      	adds	r3, #112	; 0x70
 800f5b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f5b8:	e002      	b.n	800f5c0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d011      	beq.n	800f5ec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7f8 ff98 	bl	8008506 <lwip_htonl>
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7f8 ff91 	bl	8008506 <lwip_htonl>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	dbe6      	blt.n	800f5ba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	e009      	b.n	800f610 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f5fc:	6a3b      	ldr	r3, [r7, #32]
 800f5fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f600:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f602:	6a3b      	ldr	r3, [r7, #32]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	623b      	str	r3, [r7, #32]
 800f608:	e002      	b.n	800f610 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f60a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f60c:	f7fb ff01 	bl	800b412 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f614:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d012      	beq.n	800f642 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	f7f8 ff6f 	bl	8008506 <lwip_htonl>
 800f628:	4602      	mov	r2, r0
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f632:	8912      	ldrh	r2, [r2, #8]
 800f634:	4413      	add	r3, r2
  while (seg != NULL &&
 800f636:	69ba      	ldr	r2, [r7, #24]
 800f638:	429a      	cmp	r2, r3
 800f63a:	f4bf aed9 	bcs.w	800f3f0 <tcp_output+0x160>
 800f63e:	e000      	b.n	800f642 <tcp_output+0x3b2>
      break;
 800f640:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f646:	2b00      	cmp	r3, #0
 800f648:	d108      	bne.n	800f65c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f652:	e004      	b.n	800f65e <tcp_output+0x3ce>
    goto output_done;
 800f654:	bf00      	nop
 800f656:	e002      	b.n	800f65e <tcp_output+0x3ce>
    goto output_done;
 800f658:	bf00      	nop
 800f65a:	e000      	b.n	800f65e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f65c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	8b5b      	ldrh	r3, [r3, #26]
 800f662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f666:	b29a      	uxth	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3728      	adds	r7, #40	; 0x28
 800f672:	46bd      	mov	sp, r7
 800f674:	bdb0      	pop	{r4, r5, r7, pc}
 800f676:	bf00      	nop

0800f678 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d106      	bne.n	800f694 <tcp_output_segment_busy+0x1c>
 800f686:	4b09      	ldr	r3, [pc, #36]	; (800f6ac <tcp_output_segment_busy+0x34>)
 800f688:	f240 529a 	movw	r2, #1434	; 0x59a
 800f68c:	4908      	ldr	r1, [pc, #32]	; (800f6b0 <tcp_output_segment_busy+0x38>)
 800f68e:	4809      	ldr	r0, [pc, #36]	; (800f6b4 <tcp_output_segment_busy+0x3c>)
 800f690:	f003 fcce 	bl	8013030 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	7b9b      	ldrb	r3, [r3, #14]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d001      	beq.n	800f6a2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e000      	b.n	800f6a4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	08015570 	.word	0x08015570
 800f6b0:	08015b0c 	.word	0x08015b0c
 800f6b4:	080155c4 	.word	0x080155c4

0800f6b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f6b8:	b5b0      	push	{r4, r5, r7, lr}
 800f6ba:	b08c      	sub	sp, #48	; 0x30
 800f6bc:	af04      	add	r7, sp, #16
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <tcp_output_segment+0x20>
 800f6ca:	4b64      	ldr	r3, [pc, #400]	; (800f85c <tcp_output_segment+0x1a4>)
 800f6cc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f6d0:	4963      	ldr	r1, [pc, #396]	; (800f860 <tcp_output_segment+0x1a8>)
 800f6d2:	4864      	ldr	r0, [pc, #400]	; (800f864 <tcp_output_segment+0x1ac>)
 800f6d4:	f003 fcac 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d106      	bne.n	800f6ec <tcp_output_segment+0x34>
 800f6de:	4b5f      	ldr	r3, [pc, #380]	; (800f85c <tcp_output_segment+0x1a4>)
 800f6e0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f6e4:	4960      	ldr	r1, [pc, #384]	; (800f868 <tcp_output_segment+0x1b0>)
 800f6e6:	485f      	ldr	r0, [pc, #380]	; (800f864 <tcp_output_segment+0x1ac>)
 800f6e8:	f003 fca2 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d106      	bne.n	800f700 <tcp_output_segment+0x48>
 800f6f2:	4b5a      	ldr	r3, [pc, #360]	; (800f85c <tcp_output_segment+0x1a4>)
 800f6f4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f6f8:	495c      	ldr	r1, [pc, #368]	; (800f86c <tcp_output_segment+0x1b4>)
 800f6fa:	485a      	ldr	r0, [pc, #360]	; (800f864 <tcp_output_segment+0x1ac>)
 800f6fc:	f003 fc98 	bl	8013030 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f7ff ffb9 	bl	800f678 <tcp_output_segment_busy>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f70c:	2300      	movs	r3, #0
 800f70e:	e0a1      	b.n	800f854 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	68dc      	ldr	r4, [r3, #12]
 800f718:	4610      	mov	r0, r2
 800f71a:	f7f8 fef4 	bl	8008506 <lwip_htonl>
 800f71e:	4603      	mov	r3, r0
 800f720:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	68dc      	ldr	r4, [r3, #12]
 800f72a:	4610      	mov	r0, r2
 800f72c:	f7f8 fed6 	bl	80084dc <lwip_htons>
 800f730:	4603      	mov	r3, r0
 800f732:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f73c:	441a      	add	r2, r3
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	3314      	adds	r3, #20
 800f748:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	7a9b      	ldrb	r3, [r3, #10]
 800f74e:	f003 0301 	and.w	r3, r3, #1
 800f752:	2b00      	cmp	r3, #0
 800f754:	d015      	beq.n	800f782 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	3304      	adds	r3, #4
 800f75a:	461a      	mov	r2, r3
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f762:	f7fc fa33 	bl	800bbcc <tcp_eff_send_mss_netif>
 800f766:	4603      	mov	r3, r0
 800f768:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f76a:	8b7b      	ldrh	r3, [r7, #26]
 800f76c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f770:	4618      	mov	r0, r3
 800f772:	f7f8 fec8 	bl	8008506 <lwip_htonl>
 800f776:	4602      	mov	r2, r0
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	3304      	adds	r3, #4
 800f780:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f788:	2b00      	cmp	r3, #0
 800f78a:	da02      	bge.n	800f792 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2200      	movs	r2, #0
 800f790:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f796:	2b00      	cmp	r3, #0
 800f798:	d10c      	bne.n	800f7b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f79a:	4b35      	ldr	r3, [pc, #212]	; (800f870 <tcp_output_segment+0x1b8>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7f8 feac 	bl	8008506 <lwip_htonl>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	68da      	ldr	r2, [r3, #12]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	8959      	ldrh	r1, [r3, #10]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	8b3a      	ldrh	r2, [r7, #24]
 800f7ce:	1a8a      	subs	r2, r1, r2
 800f7d0:	b292      	uxth	r2, r2
 800f7d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	8919      	ldrh	r1, [r3, #8]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	8b3a      	ldrh	r2, [r7, #24]
 800f7e0:	1a8a      	subs	r2, r1, r2
 800f7e2:	b292      	uxth	r2, r2
 800f7e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	68d2      	ldr	r2, [r2, #12]
 800f7ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	741a      	strb	r2, [r3, #16]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	68da      	ldr	r2, [r3, #12]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	7a9b      	ldrb	r3, [r3, #10]
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <tcp_output_segment+0x158>
 800f80c:	2318      	movs	r3, #24
 800f80e:	e000      	b.n	800f812 <tcp_output_segment+0x15a>
 800f810:	2314      	movs	r3, #20
 800f812:	4413      	add	r3, r2
 800f814:	69fa      	ldr	r2, [r7, #28]
 800f816:	429a      	cmp	r2, r3
 800f818:	d006      	beq.n	800f828 <tcp_output_segment+0x170>
 800f81a:	4b10      	ldr	r3, [pc, #64]	; (800f85c <tcp_output_segment+0x1a4>)
 800f81c:	f240 621c 	movw	r2, #1564	; 0x61c
 800f820:	4914      	ldr	r1, [pc, #80]	; (800f874 <tcp_output_segment+0x1bc>)
 800f822:	4810      	ldr	r0, [pc, #64]	; (800f864 <tcp_output_segment+0x1ac>)
 800f824:	f003 fc04 	bl	8013030 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	6858      	ldr	r0, [r3, #4]
 800f82c:	68b9      	ldr	r1, [r7, #8]
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	1d1c      	adds	r4, r3, #4
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	7add      	ldrb	r5, [r3, #11]
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	7a9b      	ldrb	r3, [r3, #10]
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	9202      	str	r2, [sp, #8]
 800f83e:	2206      	movs	r2, #6
 800f840:	9201      	str	r2, [sp, #4]
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	462b      	mov	r3, r5
 800f846:	4622      	mov	r2, r4
 800f848:	f002 fa34 	bl	8011cb4 <ip4_output_if>
 800f84c:	4603      	mov	r3, r0
 800f84e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3720      	adds	r7, #32
 800f858:	46bd      	mov	sp, r7
 800f85a:	bdb0      	pop	{r4, r5, r7, pc}
 800f85c:	08015570 	.word	0x08015570
 800f860:	08015b34 	.word	0x08015b34
 800f864:	080155c4 	.word	0x080155c4
 800f868:	08015b54 	.word	0x08015b54
 800f86c:	08015b74 	.word	0x08015b74
 800f870:	2000a908 	.word	0x2000a908
 800f874:	08015b98 	.word	0x08015b98

0800f878 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f878:	b5b0      	push	{r4, r5, r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d106      	bne.n	800f894 <tcp_rexmit_rto_prepare+0x1c>
 800f886:	4b31      	ldr	r3, [pc, #196]	; (800f94c <tcp_rexmit_rto_prepare+0xd4>)
 800f888:	f240 6263 	movw	r2, #1635	; 0x663
 800f88c:	4930      	ldr	r1, [pc, #192]	; (800f950 <tcp_rexmit_rto_prepare+0xd8>)
 800f88e:	4831      	ldr	r0, [pc, #196]	; (800f954 <tcp_rexmit_rto_prepare+0xdc>)
 800f890:	f003 fbce 	bl	8013030 <iprintf>

  if (pcb->unacked == NULL) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d102      	bne.n	800f8a2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f89c:	f06f 0305 	mvn.w	r3, #5
 800f8a0:	e050      	b.n	800f944 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	e00b      	b.n	800f8c2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff fee4 	bl	800f678 <tcp_output_segment_busy>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d002      	beq.n	800f8bc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f8b6:	f06f 0305 	mvn.w	r3, #5
 800f8ba:	e043      	b.n	800f944 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	60fb      	str	r3, [r7, #12]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d1ef      	bne.n	800f8aa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff fed4 	bl	800f678 <tcp_output_segment_busy>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d002      	beq.n	800f8dc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f8d6:	f06f 0305 	mvn.w	r3, #5
 800f8da:	e033      	b.n	800f944 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8b5b      	ldrh	r3, [r3, #26]
 800f8f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	f7f8 fdfd 	bl	8008506 <lwip_htonl>
 800f90c:	4604      	mov	r4, r0
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	891b      	ldrh	r3, [r3, #8]
 800f912:	461d      	mov	r5, r3
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	899b      	ldrh	r3, [r3, #12]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7f8 fddd 	bl	80084dc <lwip_htons>
 800f922:	4603      	mov	r3, r0
 800f924:	b2db      	uxtb	r3, r3
 800f926:	f003 0303 	and.w	r3, r3, #3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d001      	beq.n	800f932 <tcp_rexmit_rto_prepare+0xba>
 800f92e:	2301      	movs	r3, #1
 800f930:	e000      	b.n	800f934 <tcp_rexmit_rto_prepare+0xbc>
 800f932:	2300      	movs	r3, #0
 800f934:	442b      	add	r3, r5
 800f936:	18e2      	adds	r2, r4, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bdb0      	pop	{r4, r5, r7, pc}
 800f94c:	08015570 	.word	0x08015570
 800f950:	08015bac 	.word	0x08015bac
 800f954:	080155c4 	.word	0x080155c4

0800f958 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d106      	bne.n	800f974 <tcp_rexmit_rto_commit+0x1c>
 800f966:	4b0d      	ldr	r3, [pc, #52]	; (800f99c <tcp_rexmit_rto_commit+0x44>)
 800f968:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f96c:	490c      	ldr	r1, [pc, #48]	; (800f9a0 <tcp_rexmit_rto_commit+0x48>)
 800f96e:	480d      	ldr	r0, [pc, #52]	; (800f9a4 <tcp_rexmit_rto_commit+0x4c>)
 800f970:	f003 fb5e 	bl	8013030 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f97a:	2bff      	cmp	r3, #255	; 0xff
 800f97c:	d007      	beq.n	800f98e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f984:	3301      	adds	r3, #1
 800f986:	b2da      	uxtb	r2, r3
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7ff fc7e 	bl	800f290 <tcp_output>
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	08015570 	.word	0x08015570
 800f9a0:	08015bd0 	.word	0x08015bd0
 800f9a4:	080155c4 	.word	0x080155c4

0800f9a8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <tcp_rexmit_rto+0x1c>
 800f9b6:	4b0a      	ldr	r3, [pc, #40]	; (800f9e0 <tcp_rexmit_rto+0x38>)
 800f9b8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f9bc:	4909      	ldr	r1, [pc, #36]	; (800f9e4 <tcp_rexmit_rto+0x3c>)
 800f9be:	480a      	ldr	r0, [pc, #40]	; (800f9e8 <tcp_rexmit_rto+0x40>)
 800f9c0:	f003 fb36 	bl	8013030 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7ff ff57 	bl	800f878 <tcp_rexmit_rto_prepare>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d102      	bne.n	800f9d6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff ffc1 	bl	800f958 <tcp_rexmit_rto_commit>
  }
}
 800f9d6:	bf00      	nop
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	08015570 	.word	0x08015570
 800f9e4:	08015bf4 	.word	0x08015bf4
 800f9e8:	080155c4 	.word	0x080155c4

0800f9ec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f9ec:	b590      	push	{r4, r7, lr}
 800f9ee:	b085      	sub	sp, #20
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d106      	bne.n	800fa08 <tcp_rexmit+0x1c>
 800f9fa:	4b2f      	ldr	r3, [pc, #188]	; (800fab8 <tcp_rexmit+0xcc>)
 800f9fc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fa00:	492e      	ldr	r1, [pc, #184]	; (800fabc <tcp_rexmit+0xd0>)
 800fa02:	482f      	ldr	r0, [pc, #188]	; (800fac0 <tcp_rexmit+0xd4>)
 800fa04:	f003 fb14 	bl	8013030 <iprintf>

  if (pcb->unacked == NULL) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d102      	bne.n	800fa16 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fa10:	f06f 0305 	mvn.w	r3, #5
 800fa14:	e04c      	b.n	800fab0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa1a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fa1c:	68b8      	ldr	r0, [r7, #8]
 800fa1e:	f7ff fe2b 	bl	800f678 <tcp_output_segment_busy>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fa28:	f06f 0305 	mvn.w	r3, #5
 800fa2c:	e040      	b.n	800fab0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	336c      	adds	r3, #108	; 0x6c
 800fa3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fa3c:	e002      	b.n	800fa44 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d011      	beq.n	800fa70 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7f8 fd56 	bl	8008506 <lwip_htonl>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f8 fd4f 	bl	8008506 <lwip_htonl>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dbe6      	blt.n	800fa3e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	68ba      	ldr	r2, [r7, #8]
 800fa7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d103      	bne.n	800fa8e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa94:	2bff      	cmp	r3, #255	; 0xff
 800fa96:	d007      	beq.n	800faa8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa9e:	3301      	adds	r3, #1
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd90      	pop	{r4, r7, pc}
 800fab8:	08015570 	.word	0x08015570
 800fabc:	08015c10 	.word	0x08015c10
 800fac0:	080155c4 	.word	0x080155c4

0800fac4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d106      	bne.n	800fae0 <tcp_rexmit_fast+0x1c>
 800fad2:	4b2a      	ldr	r3, [pc, #168]	; (800fb7c <tcp_rexmit_fast+0xb8>)
 800fad4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fad8:	4929      	ldr	r1, [pc, #164]	; (800fb80 <tcp_rexmit_fast+0xbc>)
 800fada:	482a      	ldr	r0, [pc, #168]	; (800fb84 <tcp_rexmit_fast+0xc0>)
 800fadc:	f003 faa8 	bl	8013030 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d044      	beq.n	800fb72 <tcp_rexmit_fast+0xae>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	8b5b      	ldrh	r3, [r3, #26]
 800faec:	f003 0304 	and.w	r3, r3, #4
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d13e      	bne.n	800fb72 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7ff ff79 	bl	800f9ec <tcp_rexmit>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d138      	bne.n	800fb72 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	bf28      	it	cs
 800fb10:	4613      	movcs	r3, r2
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	0fda      	lsrs	r2, r3, #31
 800fb16:	4413      	add	r3, r2
 800fb18:	105b      	asrs	r3, r3, #1
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb28:	461a      	mov	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb2e:	005b      	lsls	r3, r3, #1
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d206      	bcs.n	800fb42 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	0049      	lsls	r1, r1, #1
 800fb50:	440b      	add	r3, r1
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	4413      	add	r3, r2
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	8b5b      	ldrh	r3, [r3, #26]
 800fb62:	f043 0304 	orr.w	r3, r3, #4
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fb72:	bf00      	nop
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	08015570 	.word	0x08015570
 800fb80:	08015c28 	.word	0x08015c28
 800fb84:	080155c4 	.word	0x080155c4

0800fb88 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	607b      	str	r3, [r7, #4]
 800fb92:	460b      	mov	r3, r1
 800fb94:	817b      	strh	r3, [r7, #10]
 800fb96:	4613      	mov	r3, r2
 800fb98:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fb9a:	897a      	ldrh	r2, [r7, #10]
 800fb9c:	893b      	ldrh	r3, [r7, #8]
 800fb9e:	4413      	add	r3, r2
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	3314      	adds	r3, #20
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fbaa:	4619      	mov	r1, r3
 800fbac:	2022      	movs	r0, #34	; 0x22
 800fbae:	f7f9 fd0f 	bl	80095d0 <pbuf_alloc>
 800fbb2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d04d      	beq.n	800fc56 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fbba:	897b      	ldrh	r3, [r7, #10]
 800fbbc:	3313      	adds	r3, #19
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	8952      	ldrh	r2, [r2, #10]
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	db06      	blt.n	800fbd4 <tcp_output_alloc_header_common+0x4c>
 800fbc6:	4b26      	ldr	r3, [pc, #152]	; (800fc60 <tcp_output_alloc_header_common+0xd8>)
 800fbc8:	f240 7223 	movw	r2, #1827	; 0x723
 800fbcc:	4925      	ldr	r1, [pc, #148]	; (800fc64 <tcp_output_alloc_header_common+0xdc>)
 800fbce:	4826      	ldr	r0, [pc, #152]	; (800fc68 <tcp_output_alloc_header_common+0xe0>)
 800fbd0:	f003 fa2e 	bl	8013030 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fbda:	8c3b      	ldrh	r3, [r7, #32]
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7f8 fc7d 	bl	80084dc <lwip_htons>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fbea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbec:	4618      	mov	r0, r3
 800fbee:	f7f8 fc75 	bl	80084dc <lwip_htons>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f7f8 fc80 	bl	8008506 <lwip_htonl>
 800fc06:	4602      	mov	r2, r0
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fc0c:	897b      	ldrh	r3, [r7, #10]
 800fc0e:	089b      	lsrs	r3, r3, #2
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	3305      	adds	r3, #5
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	031b      	lsls	r3, r3, #12
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	4313      	orrs	r3, r2
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7f8 fc59 	bl	80084dc <lwip_htons>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fc32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7f8 fc51 	bl	80084dc <lwip_htons>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	2200      	movs	r2, #0
 800fc46:	741a      	strb	r2, [r3, #16]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	749a      	strb	r2, [r3, #18]
 800fc52:	2200      	movs	r2, #0
 800fc54:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fc56:	697b      	ldr	r3, [r7, #20]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3718      	adds	r7, #24
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	08015570 	.word	0x08015570
 800fc64:	08015c48 	.word	0x08015c48
 800fc68:	080155c4 	.word	0x080155c4

0800fc6c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fc6c:	b5b0      	push	{r4, r5, r7, lr}
 800fc6e:	b08a      	sub	sp, #40	; 0x28
 800fc70:	af04      	add	r7, sp, #16
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	607b      	str	r3, [r7, #4]
 800fc76:	460b      	mov	r3, r1
 800fc78:	817b      	strh	r3, [r7, #10]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <tcp_output_alloc_header+0x26>
 800fc84:	4b15      	ldr	r3, [pc, #84]	; (800fcdc <tcp_output_alloc_header+0x70>)
 800fc86:	f240 7242 	movw	r2, #1858	; 0x742
 800fc8a:	4915      	ldr	r1, [pc, #84]	; (800fce0 <tcp_output_alloc_header+0x74>)
 800fc8c:	4815      	ldr	r0, [pc, #84]	; (800fce4 <tcp_output_alloc_header+0x78>)
 800fc8e:	f003 f9cf 	bl	8013030 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	8adb      	ldrh	r3, [r3, #22]
 800fc9a:	68fa      	ldr	r2, [r7, #12]
 800fc9c:	8b12      	ldrh	r2, [r2, #24]
 800fc9e:	68f9      	ldr	r1, [r7, #12]
 800fca0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fca2:	893d      	ldrh	r5, [r7, #8]
 800fca4:	897c      	ldrh	r4, [r7, #10]
 800fca6:	9103      	str	r1, [sp, #12]
 800fca8:	2110      	movs	r1, #16
 800fcaa:	9102      	str	r1, [sp, #8]
 800fcac:	9201      	str	r2, [sp, #4]
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	462a      	mov	r2, r5
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	f7ff ff67 	bl	800fb88 <tcp_output_alloc_header_common>
 800fcba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d006      	beq.n	800fcd0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fcca:	441a      	add	r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fcd0:	697b      	ldr	r3, [r7, #20]
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bdb0      	pop	{r4, r5, r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	08015570 	.word	0x08015570
 800fce0:	08015c78 	.word	0x08015c78
 800fce4:	080155c4 	.word	0x080155c4

0800fce8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	4611      	mov	r1, r2
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	71fb      	strb	r3, [r7, #7]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d106      	bne.n	800fd16 <tcp_output_fill_options+0x2e>
 800fd08:	4b12      	ldr	r3, [pc, #72]	; (800fd54 <tcp_output_fill_options+0x6c>)
 800fd0a:	f240 7256 	movw	r2, #1878	; 0x756
 800fd0e:	4912      	ldr	r1, [pc, #72]	; (800fd58 <tcp_output_fill_options+0x70>)
 800fd10:	4812      	ldr	r0, [pc, #72]	; (800fd5c <tcp_output_fill_options+0x74>)
 800fd12:	f003 f98d 	bl	8013030 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	3314      	adds	r3, #20
 800fd20:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fd22:	8bfb      	ldrh	r3, [r7, #30]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	461a      	mov	r2, r3
 800fd28:	79fb      	ldrb	r3, [r7, #7]
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	f003 0304 	and.w	r3, r3, #4
 800fd30:	4413      	add	r3, r2
 800fd32:	3314      	adds	r3, #20
 800fd34:	69ba      	ldr	r2, [r7, #24]
 800fd36:	4413      	add	r3, r2
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d006      	beq.n	800fd4c <tcp_output_fill_options+0x64>
 800fd3e:	4b05      	ldr	r3, [pc, #20]	; (800fd54 <tcp_output_fill_options+0x6c>)
 800fd40:	f240 7275 	movw	r2, #1909	; 0x775
 800fd44:	4906      	ldr	r1, [pc, #24]	; (800fd60 <tcp_output_fill_options+0x78>)
 800fd46:	4805      	ldr	r0, [pc, #20]	; (800fd5c <tcp_output_fill_options+0x74>)
 800fd48:	f003 f972 	bl	8013030 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fd4c:	bf00      	nop
 800fd4e:	3720      	adds	r7, #32
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	08015570 	.word	0x08015570
 800fd58:	08015ca0 	.word	0x08015ca0
 800fd5c:	080155c4 	.word	0x080155c4
 800fd60:	08015b98 	.word	0x08015b98

0800fd64 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b08a      	sub	sp, #40	; 0x28
 800fd68:	af04      	add	r7, sp, #16
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	60b9      	str	r1, [r7, #8]
 800fd6e:	607a      	str	r2, [r7, #4]
 800fd70:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d106      	bne.n	800fd86 <tcp_output_control_segment+0x22>
 800fd78:	4b1c      	ldr	r3, [pc, #112]	; (800fdec <tcp_output_control_segment+0x88>)
 800fd7a:	f240 7287 	movw	r2, #1927	; 0x787
 800fd7e:	491c      	ldr	r1, [pc, #112]	; (800fdf0 <tcp_output_control_segment+0x8c>)
 800fd80:	481c      	ldr	r0, [pc, #112]	; (800fdf4 <tcp_output_control_segment+0x90>)
 800fd82:	f003 f955 	bl	8013030 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fd86:	683a      	ldr	r2, [r7, #0]
 800fd88:	6879      	ldr	r1, [r7, #4]
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f7fe fae8 	bl	800e360 <tcp_route>
 800fd90:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d102      	bne.n	800fd9e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fd98:	23fc      	movs	r3, #252	; 0xfc
 800fd9a:	75fb      	strb	r3, [r7, #23]
 800fd9c:	e01c      	b.n	800fdd8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d006      	beq.n	800fdb2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	7adb      	ldrb	r3, [r3, #11]
 800fda8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	7a9b      	ldrb	r3, [r3, #10]
 800fdae:	757b      	strb	r3, [r7, #21]
 800fdb0:	e003      	b.n	800fdba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fdb2:	23ff      	movs	r3, #255	; 0xff
 800fdb4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fdba:	7dba      	ldrb	r2, [r7, #22]
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	9302      	str	r3, [sp, #8]
 800fdc0:	2306      	movs	r3, #6
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	7d7b      	ldrb	r3, [r7, #21]
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	683a      	ldr	r2, [r7, #0]
 800fdcc:	6879      	ldr	r1, [r7, #4]
 800fdce:	68b8      	ldr	r0, [r7, #8]
 800fdd0:	f001 ff70 	bl	8011cb4 <ip4_output_if>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fdd8:	68b8      	ldr	r0, [r7, #8]
 800fdda:	f7f9 fedd 	bl	8009b98 <pbuf_free>
  return err;
 800fdde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3718      	adds	r7, #24
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	08015570 	.word	0x08015570
 800fdf0:	08015cc8 	.word	0x08015cc8
 800fdf4:	080155c4 	.word	0x080155c4

0800fdf8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fdf8:	b590      	push	{r4, r7, lr}
 800fdfa:	b08b      	sub	sp, #44	; 0x2c
 800fdfc:	af04      	add	r7, sp, #16
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
 800fe04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d106      	bne.n	800fe1a <tcp_rst+0x22>
 800fe0c:	4b1f      	ldr	r3, [pc, #124]	; (800fe8c <tcp_rst+0x94>)
 800fe0e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fe12:	491f      	ldr	r1, [pc, #124]	; (800fe90 <tcp_rst+0x98>)
 800fe14:	481f      	ldr	r0, [pc, #124]	; (800fe94 <tcp_rst+0x9c>)
 800fe16:	f003 f90b 	bl	8013030 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fe1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d106      	bne.n	800fe2e <tcp_rst+0x36>
 800fe20:	4b1a      	ldr	r3, [pc, #104]	; (800fe8c <tcp_rst+0x94>)
 800fe22:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fe26:	491c      	ldr	r1, [pc, #112]	; (800fe98 <tcp_rst+0xa0>)
 800fe28:	481a      	ldr	r0, [pc, #104]	; (800fe94 <tcp_rst+0x9c>)
 800fe2a:	f003 f901 	bl	8013030 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fe2e:	2300      	movs	r3, #0
 800fe30:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fe32:	f246 0308 	movw	r3, #24584	; 0x6008
 800fe36:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fe38:	7dfb      	ldrb	r3, [r7, #23]
 800fe3a:	b29c      	uxth	r4, r3
 800fe3c:	68b8      	ldr	r0, [r7, #8]
 800fe3e:	f7f8 fb62 	bl	8008506 <lwip_htonl>
 800fe42:	4602      	mov	r2, r0
 800fe44:	8abb      	ldrh	r3, [r7, #20]
 800fe46:	9303      	str	r3, [sp, #12]
 800fe48:	2314      	movs	r3, #20
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fe4e:	9301      	str	r3, [sp, #4]
 800fe50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	4613      	mov	r3, r2
 800fe56:	2200      	movs	r2, #0
 800fe58:	4621      	mov	r1, r4
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f7ff fe94 	bl	800fb88 <tcp_output_alloc_header_common>
 800fe60:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00c      	beq.n	800fe82 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe68:	7dfb      	ldrb	r3, [r7, #23]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	6939      	ldr	r1, [r7, #16]
 800fe6e:	68f8      	ldr	r0, [r7, #12]
 800fe70:	f7ff ff3a 	bl	800fce8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	6939      	ldr	r1, [r7, #16]
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f7ff ff72 	bl	800fd64 <tcp_output_control_segment>
 800fe80:	e000      	b.n	800fe84 <tcp_rst+0x8c>
    return;
 800fe82:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fe84:	371c      	adds	r7, #28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd90      	pop	{r4, r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	08015570 	.word	0x08015570
 800fe90:	08015cf4 	.word	0x08015cf4
 800fe94:	080155c4 	.word	0x080155c4
 800fe98:	08015d10 	.word	0x08015d10

0800fe9c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fe9c:	b590      	push	{r4, r7, lr}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fea4:	2300      	movs	r3, #0
 800fea6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fea8:	2300      	movs	r3, #0
 800feaa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d106      	bne.n	800fec0 <tcp_send_empty_ack+0x24>
 800feb2:	4b28      	ldr	r3, [pc, #160]	; (800ff54 <tcp_send_empty_ack+0xb8>)
 800feb4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800feb8:	4927      	ldr	r1, [pc, #156]	; (800ff58 <tcp_send_empty_ack+0xbc>)
 800feba:	4828      	ldr	r0, [pc, #160]	; (800ff5c <tcp_send_empty_ack+0xc0>)
 800febc:	f003 f8b8 	bl	8013030 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	009b      	lsls	r3, r3, #2
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	f003 0304 	and.w	r3, r3, #4
 800feca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fecc:	7d7b      	ldrb	r3, [r7, #21]
 800fece:	b29c      	uxth	r4, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f8 fb16 	bl	8008506 <lwip_htonl>
 800feda:	4603      	mov	r3, r0
 800fedc:	2200      	movs	r2, #0
 800fede:	4621      	mov	r1, r4
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff fec3 	bl	800fc6c <tcp_output_alloc_header>
 800fee6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d109      	bne.n	800ff02 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	8b5b      	ldrh	r3, [r3, #26]
 800fef2:	f043 0303 	orr.w	r3, r3, #3
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fefc:	f06f 0301 	mvn.w	r3, #1
 800ff00:	e023      	b.n	800ff4a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ff02:	7dbb      	ldrb	r3, [r7, #22]
 800ff04:	7dfa      	ldrb	r2, [r7, #23]
 800ff06:	6939      	ldr	r1, [r7, #16]
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7ff feed 	bl	800fce8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3304      	adds	r3, #4
 800ff14:	6939      	ldr	r1, [r7, #16]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff ff24 	bl	800fd64 <tcp_output_control_segment>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ff20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d007      	beq.n	800ff38 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	8b5b      	ldrh	r3, [r3, #26]
 800ff2c:	f043 0303 	orr.w	r3, r3, #3
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	835a      	strh	r2, [r3, #26]
 800ff36:	e006      	b.n	800ff46 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	8b5b      	ldrh	r3, [r3, #26]
 800ff3c:	f023 0303 	bic.w	r3, r3, #3
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ff46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	371c      	adds	r7, #28
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd90      	pop	{r4, r7, pc}
 800ff52:	bf00      	nop
 800ff54:	08015570 	.word	0x08015570
 800ff58:	08015d2c 	.word	0x08015d2c
 800ff5c:	080155c4 	.word	0x080155c4

0800ff60 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ff60:	b590      	push	{r4, r7, lr}
 800ff62:	b087      	sub	sp, #28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff68:	2300      	movs	r3, #0
 800ff6a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d106      	bne.n	800ff80 <tcp_keepalive+0x20>
 800ff72:	4b18      	ldr	r3, [pc, #96]	; (800ffd4 <tcp_keepalive+0x74>)
 800ff74:	f640 0224 	movw	r2, #2084	; 0x824
 800ff78:	4917      	ldr	r1, [pc, #92]	; (800ffd8 <tcp_keepalive+0x78>)
 800ff7a:	4818      	ldr	r0, [pc, #96]	; (800ffdc <tcp_keepalive+0x7c>)
 800ff7c:	f003 f858 	bl	8013030 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ff80:	7dfb      	ldrb	r3, [r7, #23]
 800ff82:	b29c      	uxth	r4, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7f8 fabb 	bl	8008506 <lwip_htonl>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2200      	movs	r2, #0
 800ff94:	4621      	mov	r1, r4
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7ff fe68 	bl	800fc6c <tcp_output_alloc_header>
 800ff9c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d102      	bne.n	800ffaa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	e010      	b.n	800ffcc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ffaa:	7dfb      	ldrb	r3, [r7, #23]
 800ffac:	2200      	movs	r2, #0
 800ffae:	6939      	ldr	r1, [r7, #16]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff fe99 	bl	800fce8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	3304      	adds	r3, #4
 800ffbc:	6939      	ldr	r1, [r7, #16]
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7ff fed0 	bl	800fd64 <tcp_output_control_segment>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ffc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	371c      	adds	r7, #28
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd90      	pop	{r4, r7, pc}
 800ffd4:	08015570 	.word	0x08015570
 800ffd8:	08015d4c 	.word	0x08015d4c
 800ffdc:	080155c4 	.word	0x080155c4

0800ffe0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ffe0:	b590      	push	{r4, r7, lr}
 800ffe2:	b08b      	sub	sp, #44	; 0x2c
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d106      	bne.n	8010002 <tcp_zero_window_probe+0x22>
 800fff4:	4b4c      	ldr	r3, [pc, #304]	; (8010128 <tcp_zero_window_probe+0x148>)
 800fff6:	f640 024f 	movw	r2, #2127	; 0x84f
 800fffa:	494c      	ldr	r1, [pc, #304]	; (801012c <tcp_zero_window_probe+0x14c>)
 800fffc:	484c      	ldr	r0, [pc, #304]	; (8010130 <tcp_zero_window_probe+0x150>)
 800fffe:	f003 f817 	bl	8013030 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010006:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d101      	bne.n	8010012 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801000e:	2300      	movs	r3, #0
 8010010:	e086      	b.n	8010120 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010018:	2bff      	cmp	r3, #255	; 0xff
 801001a:	d007      	beq.n	801002c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010022:	3301      	adds	r3, #1
 8010024:	b2da      	uxtb	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801002c:	6a3b      	ldr	r3, [r7, #32]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	899b      	ldrh	r3, [r3, #12]
 8010032:	b29b      	uxth	r3, r3
 8010034:	4618      	mov	r0, r3
 8010036:	f7f8 fa51 	bl	80084dc <lwip_htons>
 801003a:	4603      	mov	r3, r0
 801003c:	b2db      	uxtb	r3, r3
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	d005      	beq.n	8010052 <tcp_zero_window_probe+0x72>
 8010046:	6a3b      	ldr	r3, [r7, #32]
 8010048:	891b      	ldrh	r3, [r3, #8]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <tcp_zero_window_probe+0x72>
 801004e:	2301      	movs	r3, #1
 8010050:	e000      	b.n	8010054 <tcp_zero_window_probe+0x74>
 8010052:	2300      	movs	r3, #0
 8010054:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010056:	7ffb      	ldrb	r3, [r7, #31]
 8010058:	2b00      	cmp	r3, #0
 801005a:	bf0c      	ite	eq
 801005c:	2301      	moveq	r3, #1
 801005e:	2300      	movne	r3, #0
 8010060:	b2db      	uxtb	r3, r3
 8010062:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010068:	b299      	uxth	r1, r3
 801006a:	6a3b      	ldr	r3, [r7, #32]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	8bba      	ldrh	r2, [r7, #28]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff fdfa 	bl	800fc6c <tcp_output_alloc_header>
 8010078:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d102      	bne.n	8010086 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010080:	f04f 33ff 	mov.w	r3, #4294967295
 8010084:	e04c      	b.n	8010120 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801008c:	7ffb      	ldrb	r3, [r7, #31]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d011      	beq.n	80100b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	b29b      	uxth	r3, r3
 8010098:	b21b      	sxth	r3, r3
 801009a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801009e:	b21c      	sxth	r4, r3
 80100a0:	2011      	movs	r0, #17
 80100a2:	f7f8 fa1b 	bl	80084dc <lwip_htons>
 80100a6:	4603      	mov	r3, r0
 80100a8:	b21b      	sxth	r3, r3
 80100aa:	4323      	orrs	r3, r4
 80100ac:	b21b      	sxth	r3, r3
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	819a      	strh	r2, [r3, #12]
 80100b4:	e010      	b.n	80100d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	685b      	ldr	r3, [r3, #4]
 80100ba:	3314      	adds	r3, #20
 80100bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80100be:	6a3b      	ldr	r3, [r7, #32]
 80100c0:	6858      	ldr	r0, [r3, #4]
 80100c2:	6a3b      	ldr	r3, [r7, #32]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	891a      	ldrh	r2, [r3, #8]
 80100c8:	6a3b      	ldr	r3, [r7, #32]
 80100ca:	891b      	ldrh	r3, [r3, #8]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	2201      	movs	r2, #1
 80100d2:	6939      	ldr	r1, [r7, #16]
 80100d4:	f7f9 ff5a 	bl	8009f8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80100d8:	6a3b      	ldr	r3, [r7, #32]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7f8 fa11 	bl	8008506 <lwip_htonl>
 80100e4:	4603      	mov	r3, r0
 80100e6:	3301      	adds	r3, #1
 80100e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	da02      	bge.n	80100fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80100fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010100:	2200      	movs	r2, #0
 8010102:	69b9      	ldr	r1, [r7, #24]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff fdef 	bl	800fce8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	3304      	adds	r3, #4
 8010110:	69b9      	ldr	r1, [r7, #24]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff fe26 	bl	800fd64 <tcp_output_control_segment>
 8010118:	4603      	mov	r3, r0
 801011a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801011c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010120:	4618      	mov	r0, r3
 8010122:	372c      	adds	r7, #44	; 0x2c
 8010124:	46bd      	mov	sp, r7
 8010126:	bd90      	pop	{r4, r7, pc}
 8010128:	08015570 	.word	0x08015570
 801012c:	08015d68 	.word	0x08015d68
 8010130:	080155c4 	.word	0x080155c4

08010134 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801013c:	f7fa f814 	bl	800a168 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010140:	4b0a      	ldr	r3, [pc, #40]	; (801016c <tcpip_tcp_timer+0x38>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d103      	bne.n	8010150 <tcpip_tcp_timer+0x1c>
 8010148:	4b09      	ldr	r3, [pc, #36]	; (8010170 <tcpip_tcp_timer+0x3c>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010150:	2200      	movs	r2, #0
 8010152:	4908      	ldr	r1, [pc, #32]	; (8010174 <tcpip_tcp_timer+0x40>)
 8010154:	20fa      	movs	r0, #250	; 0xfa
 8010156:	f000 f8f3 	bl	8010340 <sys_timeout>
 801015a:	e003      	b.n	8010164 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801015c:	4b06      	ldr	r3, [pc, #24]	; (8010178 <tcpip_tcp_timer+0x44>)
 801015e:	2200      	movs	r2, #0
 8010160:	601a      	str	r2, [r3, #0]
  }
}
 8010162:	bf00      	nop
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	2000a914 	.word	0x2000a914
 8010170:	2000a918 	.word	0x2000a918
 8010174:	08010135 	.word	0x08010135
 8010178:	2000a960 	.word	0x2000a960

0801017c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010180:	4b0a      	ldr	r3, [pc, #40]	; (80101ac <tcp_timer_needed+0x30>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10f      	bne.n	80101a8 <tcp_timer_needed+0x2c>
 8010188:	4b09      	ldr	r3, [pc, #36]	; (80101b0 <tcp_timer_needed+0x34>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d103      	bne.n	8010198 <tcp_timer_needed+0x1c>
 8010190:	4b08      	ldr	r3, [pc, #32]	; (80101b4 <tcp_timer_needed+0x38>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d007      	beq.n	80101a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <tcp_timer_needed+0x30>)
 801019a:	2201      	movs	r2, #1
 801019c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801019e:	2200      	movs	r2, #0
 80101a0:	4905      	ldr	r1, [pc, #20]	; (80101b8 <tcp_timer_needed+0x3c>)
 80101a2:	20fa      	movs	r0, #250	; 0xfa
 80101a4:	f000 f8cc 	bl	8010340 <sys_timeout>
  }
}
 80101a8:	bf00      	nop
 80101aa:	bd80      	pop	{r7, pc}
 80101ac:	2000a960 	.word	0x2000a960
 80101b0:	2000a914 	.word	0x2000a914
 80101b4:	2000a918 	.word	0x2000a918
 80101b8:	08010135 	.word	0x08010135

080101bc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b086      	sub	sp, #24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80101c8:	2006      	movs	r0, #6
 80101ca:	f7f8 fdff 	bl	8008dcc <memp_malloc>
 80101ce:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d109      	bne.n	80101ea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d151      	bne.n	8010280 <sys_timeout_abs+0xc4>
 80101dc:	4b2a      	ldr	r3, [pc, #168]	; (8010288 <sys_timeout_abs+0xcc>)
 80101de:	22be      	movs	r2, #190	; 0xbe
 80101e0:	492a      	ldr	r1, [pc, #168]	; (801028c <sys_timeout_abs+0xd0>)
 80101e2:	482b      	ldr	r0, [pc, #172]	; (8010290 <sys_timeout_abs+0xd4>)
 80101e4:	f002 ff24 	bl	8013030 <iprintf>
    return;
 80101e8:	e04a      	b.n	8010280 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	2200      	movs	r2, #0
 80101ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	68ba      	ldr	r2, [r7, #8]
 80101f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	687a      	ldr	r2, [r7, #4]
 80101fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010202:	4b24      	ldr	r3, [pc, #144]	; (8010294 <sys_timeout_abs+0xd8>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d103      	bne.n	8010212 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801020a:	4a22      	ldr	r2, [pc, #136]	; (8010294 <sys_timeout_abs+0xd8>)
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	6013      	str	r3, [r2, #0]
    return;
 8010210:	e037      	b.n	8010282 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	685a      	ldr	r2, [r3, #4]
 8010216:	4b1f      	ldr	r3, [pc, #124]	; (8010294 <sys_timeout_abs+0xd8>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	0fdb      	lsrs	r3, r3, #31
 8010220:	f003 0301 	and.w	r3, r3, #1
 8010224:	b2db      	uxtb	r3, r3
 8010226:	2b00      	cmp	r3, #0
 8010228:	d007      	beq.n	801023a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801022a:	4b1a      	ldr	r3, [pc, #104]	; (8010294 <sys_timeout_abs+0xd8>)
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010232:	4a18      	ldr	r2, [pc, #96]	; (8010294 <sys_timeout_abs+0xd8>)
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	6013      	str	r3, [r2, #0]
 8010238:	e023      	b.n	8010282 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801023a:	4b16      	ldr	r3, [pc, #88]	; (8010294 <sys_timeout_abs+0xd8>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	617b      	str	r3, [r7, #20]
 8010240:	e01a      	b.n	8010278 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00b      	beq.n	8010262 <sys_timeout_abs+0xa6>
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	685a      	ldr	r2, [r3, #4]
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	1ad3      	subs	r3, r2, r3
 8010256:	0fdb      	lsrs	r3, r3, #31
 8010258:	f003 0301 	and.w	r3, r3, #1
 801025c:	b2db      	uxtb	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d007      	beq.n	8010272 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	693a      	ldr	r2, [r7, #16]
 801026e:	601a      	str	r2, [r3, #0]
        break;
 8010270:	e007      	b.n	8010282 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	617b      	str	r3, [r7, #20]
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1e1      	bne.n	8010242 <sys_timeout_abs+0x86>
 801027e:	e000      	b.n	8010282 <sys_timeout_abs+0xc6>
    return;
 8010280:	bf00      	nop
      }
    }
  }
}
 8010282:	3718      	adds	r7, #24
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	08015d8c 	.word	0x08015d8c
 801028c:	08015dc0 	.word	0x08015dc0
 8010290:	08015e00 	.word	0x08015e00
 8010294:	2000a958 	.word	0x2000a958

08010298 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b086      	sub	sp, #24
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	4798      	blx	r3

  now = sys_now();
 80102aa:	f7f7 fedf 	bl	800806c <sys_now>
 80102ae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	4b0f      	ldr	r3, [pc, #60]	; (80102f4 <lwip_cyclic_timer+0x5c>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4413      	add	r3, r2
 80102ba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	0fdb      	lsrs	r3, r3, #31
 80102c4:	f003 0301 	and.w	r3, r3, #1
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d009      	beq.n	80102e2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	4413      	add	r3, r2
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	4907      	ldr	r1, [pc, #28]	; (80102f8 <lwip_cyclic_timer+0x60>)
 80102da:	4618      	mov	r0, r3
 80102dc:	f7ff ff6e 	bl	80101bc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80102e0:	e004      	b.n	80102ec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	4904      	ldr	r1, [pc, #16]	; (80102f8 <lwip_cyclic_timer+0x60>)
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f7ff ff68 	bl	80101bc <sys_timeout_abs>
}
 80102ec:	bf00      	nop
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	2000a95c 	.word	0x2000a95c
 80102f8:	08010299 	.word	0x08010299

080102fc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010302:	2301      	movs	r3, #1
 8010304:	607b      	str	r3, [r7, #4]
 8010306:	e00e      	b.n	8010326 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010308:	4a0b      	ldr	r2, [pc, #44]	; (8010338 <sys_timeouts_init+0x3c>)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	00db      	lsls	r3, r3, #3
 8010314:	4a08      	ldr	r2, [pc, #32]	; (8010338 <sys_timeouts_init+0x3c>)
 8010316:	4413      	add	r3, r2
 8010318:	461a      	mov	r2, r3
 801031a:	4908      	ldr	r1, [pc, #32]	; (801033c <sys_timeouts_init+0x40>)
 801031c:	f000 f810 	bl	8010340 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	3301      	adds	r3, #1
 8010324:	607b      	str	r3, [r7, #4]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2b02      	cmp	r3, #2
 801032a:	d9ed      	bls.n	8010308 <sys_timeouts_init+0xc>
  }
}
 801032c:	bf00      	nop
 801032e:	bf00      	nop
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	08016978 	.word	0x08016978
 801033c:	08010299 	.word	0x08010299

08010340 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010352:	d306      	bcc.n	8010362 <sys_timeout+0x22>
 8010354:	4b0a      	ldr	r3, [pc, #40]	; (8010380 <sys_timeout+0x40>)
 8010356:	f240 1229 	movw	r2, #297	; 0x129
 801035a:	490a      	ldr	r1, [pc, #40]	; (8010384 <sys_timeout+0x44>)
 801035c:	480a      	ldr	r0, [pc, #40]	; (8010388 <sys_timeout+0x48>)
 801035e:	f002 fe67 	bl	8013030 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010362:	f7f7 fe83 	bl	800806c <sys_now>
 8010366:	4602      	mov	r2, r0
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	4413      	add	r3, r2
 801036c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	68b9      	ldr	r1, [r7, #8]
 8010372:	6978      	ldr	r0, [r7, #20]
 8010374:	f7ff ff22 	bl	80101bc <sys_timeout_abs>
#endif
}
 8010378:	bf00      	nop
 801037a:	3718      	adds	r7, #24
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	08015d8c 	.word	0x08015d8c
 8010384:	08015e28 	.word	0x08015e28
 8010388:	08015e00 	.word	0x08015e00

0801038c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010392:	f7f7 fe6b 	bl	800806c <sys_now>
 8010396:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010398:	4b1a      	ldr	r3, [pc, #104]	; (8010404 <sys_check_timeouts+0x78>)
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d001      	beq.n	80103a6 <sys_check_timeouts+0x1a>
 80103a2:	f7f9 f8bf 	bl	8009524 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80103a6:	4b18      	ldr	r3, [pc, #96]	; (8010408 <sys_check_timeouts+0x7c>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d022      	beq.n	80103f8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	68fa      	ldr	r2, [r7, #12]
 80103b8:	1ad3      	subs	r3, r2, r3
 80103ba:	0fdb      	lsrs	r3, r3, #31
 80103bc:	f003 0301 	and.w	r3, r3, #1
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d11a      	bne.n	80103fc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a0f      	ldr	r2, [pc, #60]	; (8010408 <sys_check_timeouts+0x7c>)
 80103cc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	4a0b      	ldr	r2, [pc, #44]	; (801040c <sys_check_timeouts+0x80>)
 80103e0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80103e2:	68b9      	ldr	r1, [r7, #8]
 80103e4:	2006      	movs	r0, #6
 80103e6:	f7f8 fd61 	bl	8008eac <memp_free>
    if (handler != NULL) {
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d0d3      	beq.n	8010398 <sys_check_timeouts+0xc>
      handler(arg);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6838      	ldr	r0, [r7, #0]
 80103f4:	4798      	blx	r3
  do {
 80103f6:	e7cf      	b.n	8010398 <sys_check_timeouts+0xc>
      return;
 80103f8:	bf00      	nop
 80103fa:	e000      	b.n	80103fe <sys_check_timeouts+0x72>
      return;
 80103fc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	2000a905 	.word	0x2000a905
 8010408:	2000a958 	.word	0x2000a958
 801040c:	2000a95c 	.word	0x2000a95c

08010410 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010414:	f002 fd0c 	bl	8012e30 <rand>
 8010418:	4603      	mov	r3, r0
 801041a:	b29b      	uxth	r3, r3
 801041c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010420:	b29b      	uxth	r3, r3
 8010422:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010426:	b29a      	uxth	r2, r3
 8010428:	4b01      	ldr	r3, [pc, #4]	; (8010430 <udp_init+0x20>)
 801042a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801042c:	bf00      	nop
 801042e:	bd80      	pop	{r7, pc}
 8010430:	2000002c 	.word	0x2000002c

08010434 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	4613      	mov	r3, r2
 8010440:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d105      	bne.n	8010454 <udp_input_local_match+0x20>
 8010448:	4b27      	ldr	r3, [pc, #156]	; (80104e8 <udp_input_local_match+0xb4>)
 801044a:	2287      	movs	r2, #135	; 0x87
 801044c:	4927      	ldr	r1, [pc, #156]	; (80104ec <udp_input_local_match+0xb8>)
 801044e:	4828      	ldr	r0, [pc, #160]	; (80104f0 <udp_input_local_match+0xbc>)
 8010450:	f002 fdee 	bl	8013030 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d105      	bne.n	8010466 <udp_input_local_match+0x32>
 801045a:	4b23      	ldr	r3, [pc, #140]	; (80104e8 <udp_input_local_match+0xb4>)
 801045c:	2288      	movs	r2, #136	; 0x88
 801045e:	4925      	ldr	r1, [pc, #148]	; (80104f4 <udp_input_local_match+0xc0>)
 8010460:	4823      	ldr	r0, [pc, #140]	; (80104f0 <udp_input_local_match+0xbc>)
 8010462:	f002 fde5 	bl	8013030 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	7a1b      	ldrb	r3, [r3, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00b      	beq.n	8010486 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	7a1a      	ldrb	r2, [r3, #8]
 8010472:	4b21      	ldr	r3, [pc, #132]	; (80104f8 <udp_input_local_match+0xc4>)
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801047a:	3301      	adds	r3, #1
 801047c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801047e:	429a      	cmp	r2, r3
 8010480:	d001      	beq.n	8010486 <udp_input_local_match+0x52>
    return 0;
 8010482:	2300      	movs	r3, #0
 8010484:	e02b      	b.n	80104de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010486:	79fb      	ldrb	r3, [r7, #7]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d018      	beq.n	80104be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d013      	beq.n	80104ba <udp_input_local_match+0x86>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00f      	beq.n	80104ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801049a:	4b17      	ldr	r3, [pc, #92]	; (80104f8 <udp_input_local_match+0xc4>)
 801049c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801049e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a2:	d00a      	beq.n	80104ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	4b13      	ldr	r3, [pc, #76]	; (80104f8 <udp_input_local_match+0xc4>)
 80104aa:	695b      	ldr	r3, [r3, #20]
 80104ac:	405a      	eors	r2, r3
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	3308      	adds	r3, #8
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d110      	bne.n	80104dc <udp_input_local_match+0xa8>
          return 1;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e00f      	b.n	80104de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d009      	beq.n	80104d8 <udp_input_local_match+0xa4>
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d005      	beq.n	80104d8 <udp_input_local_match+0xa4>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	4b09      	ldr	r3, [pc, #36]	; (80104f8 <udp_input_local_match+0xc4>)
 80104d2:	695b      	ldr	r3, [r3, #20]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d101      	bne.n	80104dc <udp_input_local_match+0xa8>
        return 1;
 80104d8:	2301      	movs	r3, #1
 80104da:	e000      	b.n	80104de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	08015e74 	.word	0x08015e74
 80104ec:	08015ea4 	.word	0x08015ea4
 80104f0:	08015ec8 	.word	0x08015ec8
 80104f4:	08015ef0 	.word	0x08015ef0
 80104f8:	200051d8 	.word	0x200051d8

080104fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80104fc:	b590      	push	{r4, r7, lr}
 80104fe:	b08d      	sub	sp, #52	; 0x34
 8010500:	af02      	add	r7, sp, #8
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d105      	bne.n	801051c <udp_input+0x20>
 8010510:	4b7c      	ldr	r3, [pc, #496]	; (8010704 <udp_input+0x208>)
 8010512:	22cf      	movs	r2, #207	; 0xcf
 8010514:	497c      	ldr	r1, [pc, #496]	; (8010708 <udp_input+0x20c>)
 8010516:	487d      	ldr	r0, [pc, #500]	; (801070c <udp_input+0x210>)
 8010518:	f002 fd8a 	bl	8013030 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d105      	bne.n	801052e <udp_input+0x32>
 8010522:	4b78      	ldr	r3, [pc, #480]	; (8010704 <udp_input+0x208>)
 8010524:	22d0      	movs	r2, #208	; 0xd0
 8010526:	497a      	ldr	r1, [pc, #488]	; (8010710 <udp_input+0x214>)
 8010528:	4878      	ldr	r0, [pc, #480]	; (801070c <udp_input+0x210>)
 801052a:	f002 fd81 	bl	8013030 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	895b      	ldrh	r3, [r3, #10]
 8010532:	2b07      	cmp	r3, #7
 8010534:	d803      	bhi.n	801053e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7f9 fb2e 	bl	8009b98 <pbuf_free>
    goto end;
 801053c:	e0de      	b.n	80106fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010544:	4b73      	ldr	r3, [pc, #460]	; (8010714 <udp_input+0x218>)
 8010546:	695b      	ldr	r3, [r3, #20]
 8010548:	4a72      	ldr	r2, [pc, #456]	; (8010714 <udp_input+0x218>)
 801054a:	6812      	ldr	r2, [r2, #0]
 801054c:	4611      	mov	r1, r2
 801054e:	4618      	mov	r0, r3
 8010550:	f001 fc88 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8010554:	4603      	mov	r3, r0
 8010556:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	b29b      	uxth	r3, r3
 801055e:	4618      	mov	r0, r3
 8010560:	f7f7 ffbc 	bl	80084dc <lwip_htons>
 8010564:	4603      	mov	r3, r0
 8010566:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	885b      	ldrh	r3, [r3, #2]
 801056c:	b29b      	uxth	r3, r3
 801056e:	4618      	mov	r0, r3
 8010570:	f7f7 ffb4 	bl	80084dc <lwip_htons>
 8010574:	4603      	mov	r3, r0
 8010576:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010578:	2300      	movs	r3, #0
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801057c:	2300      	movs	r3, #0
 801057e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010584:	4b64      	ldr	r3, [pc, #400]	; (8010718 <udp_input+0x21c>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	627b      	str	r3, [r7, #36]	; 0x24
 801058a:	e054      	b.n	8010636 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	8a5b      	ldrh	r3, [r3, #18]
 8010590:	89fa      	ldrh	r2, [r7, #14]
 8010592:	429a      	cmp	r2, r3
 8010594:	d14a      	bne.n	801062c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010596:	7cfb      	ldrb	r3, [r7, #19]
 8010598:	461a      	mov	r2, r3
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801059e:	f7ff ff49 	bl	8010434 <udp_input_local_match>
 80105a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d041      	beq.n	801062c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80105a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105aa:	7c1b      	ldrb	r3, [r3, #16]
 80105ac:	f003 0304 	and.w	r3, r3, #4
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d11d      	bne.n	80105f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d102      	bne.n	80105c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	61fb      	str	r3, [r7, #28]
 80105be:	e017      	b.n	80105f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80105c0:	7cfb      	ldrb	r3, [r7, #19]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d014      	beq.n	80105f0 <udp_input+0xf4>
 80105c6:	4b53      	ldr	r3, [pc, #332]	; (8010714 <udp_input+0x218>)
 80105c8:	695b      	ldr	r3, [r3, #20]
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ce:	d10f      	bne.n	80105f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	3304      	adds	r3, #4
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d008      	beq.n	80105f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	3304      	adds	r3, #4
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d101      	bne.n	80105f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	8a9b      	ldrh	r3, [r3, #20]
 80105f4:	8a3a      	ldrh	r2, [r7, #16]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d118      	bne.n	801062c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d005      	beq.n	801060e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	685a      	ldr	r2, [r3, #4]
 8010606:	4b43      	ldr	r3, [pc, #268]	; (8010714 <udp_input+0x218>)
 8010608:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801060a:	429a      	cmp	r2, r3
 801060c:	d10e      	bne.n	801062c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801060e:	6a3b      	ldr	r3, [r7, #32]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d014      	beq.n	801063e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	68da      	ldr	r2, [r3, #12]
 8010618:	6a3b      	ldr	r3, [r7, #32]
 801061a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801061c:	4b3e      	ldr	r3, [pc, #248]	; (8010718 <udp_input+0x21c>)
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010624:	4a3c      	ldr	r2, [pc, #240]	; (8010718 <udp_input+0x21c>)
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801062a:	e008      	b.n	801063e <udp_input+0x142>
      }
    }

    prev = pcb;
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
 8010636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1a7      	bne.n	801058c <udp_input+0x90>
 801063c:	e000      	b.n	8010640 <udp_input+0x144>
        break;
 801063e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <udp_input+0x15a>
    for_us = 1;
 8010650:	2301      	movs	r3, #1
 8010652:	76fb      	strb	r3, [r7, #27]
 8010654:	e00a      	b.n	801066c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	3304      	adds	r3, #4
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	4b2d      	ldr	r3, [pc, #180]	; (8010714 <udp_input+0x218>)
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	429a      	cmp	r2, r3
 8010662:	bf0c      	ite	eq
 8010664:	2301      	moveq	r3, #1
 8010666:	2300      	movne	r3, #0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801066c:	7efb      	ldrb	r3, [r7, #27]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d041      	beq.n	80106f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010672:	2108      	movs	r1, #8
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7f9 fa09 	bl	8009a8c <pbuf_remove_header>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00a      	beq.n	8010696 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010680:	4b20      	ldr	r3, [pc, #128]	; (8010704 <udp_input+0x208>)
 8010682:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010686:	4925      	ldr	r1, [pc, #148]	; (801071c <udp_input+0x220>)
 8010688:	4820      	ldr	r0, [pc, #128]	; (801070c <udp_input+0x210>)
 801068a:	f002 fcd1 	bl	8013030 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7f9 fa82 	bl	8009b98 <pbuf_free>
      goto end;
 8010694:	e032      	b.n	80106fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010698:	2b00      	cmp	r3, #0
 801069a:	d012      	beq.n	80106c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069e:	699b      	ldr	r3, [r3, #24]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00a      	beq.n	80106ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	699c      	ldr	r4, [r3, #24]
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	69d8      	ldr	r0, [r3, #28]
 80106ac:	8a3b      	ldrh	r3, [r7, #16]
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	4b1b      	ldr	r3, [pc, #108]	; (8010720 <udp_input+0x224>)
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80106b8:	e021      	b.n	80106fe <udp_input+0x202>
        pbuf_free(p);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7f9 fa6c 	bl	8009b98 <pbuf_free>
        goto end;
 80106c0:	e01c      	b.n	80106fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80106c2:	7cfb      	ldrb	r3, [r7, #19]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d112      	bne.n	80106ee <udp_input+0x1f2>
 80106c8:	4b12      	ldr	r3, [pc, #72]	; (8010714 <udp_input+0x218>)
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106d0:	2be0      	cmp	r3, #224	; 0xe0
 80106d2:	d00c      	beq.n	80106ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80106d4:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <udp_input+0x218>)
 80106d6:	899b      	ldrh	r3, [r3, #12]
 80106d8:	3308      	adds	r3, #8
 80106da:	b29b      	uxth	r3, r3
 80106dc:	b21b      	sxth	r3, r3
 80106de:	4619      	mov	r1, r3
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7f9 fa46 	bl	8009b72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80106e6:	2103      	movs	r1, #3
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f001 f89b 	bl	8011824 <icmp_dest_unreach>
      pbuf_free(p);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7f9 fa52 	bl	8009b98 <pbuf_free>
  return;
 80106f4:	e003      	b.n	80106fe <udp_input+0x202>
    pbuf_free(p);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7f9 fa4e 	bl	8009b98 <pbuf_free>
  return;
 80106fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80106fe:	372c      	adds	r7, #44	; 0x2c
 8010700:	46bd      	mov	sp, r7
 8010702:	bd90      	pop	{r4, r7, pc}
 8010704:	08015e74 	.word	0x08015e74
 8010708:	08015f18 	.word	0x08015f18
 801070c:	08015ec8 	.word	0x08015ec8
 8010710:	08015f30 	.word	0x08015f30
 8010714:	200051d8 	.word	0x200051d8
 8010718:	2000a964 	.word	0x2000a964
 801071c:	08015f4c 	.word	0x08015f4c
 8010720:	200051e8 	.word	0x200051e8

08010724 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d01e      	beq.n	8010772 <udp_netif_ip_addr_changed+0x4e>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d01a      	beq.n	8010772 <udp_netif_ip_addr_changed+0x4e>
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d017      	beq.n	8010772 <udp_netif_ip_addr_changed+0x4e>
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d013      	beq.n	8010772 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801074a:	4b0d      	ldr	r3, [pc, #52]	; (8010780 <udp_netif_ip_addr_changed+0x5c>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	60fb      	str	r3, [r7, #12]
 8010750:	e00c      	b.n	801076c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	429a      	cmp	r2, r3
 801075c:	d103      	bne.n	8010766 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	60fb      	str	r3, [r7, #12]
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1ef      	bne.n	8010752 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010772:	bf00      	nop
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop
 8010780:	2000a964 	.word	0x2000a964

08010784 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801078c:	4915      	ldr	r1, [pc, #84]	; (80107e4 <etharp_free_entry+0x60>)
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	4613      	mov	r3, r2
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	4413      	add	r3, r2
 8010796:	00db      	lsls	r3, r3, #3
 8010798:	440b      	add	r3, r1
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d013      	beq.n	80107c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80107a0:	4910      	ldr	r1, [pc, #64]	; (80107e4 <etharp_free_entry+0x60>)
 80107a2:	687a      	ldr	r2, [r7, #4]
 80107a4:	4613      	mov	r3, r2
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	4413      	add	r3, r2
 80107aa:	00db      	lsls	r3, r3, #3
 80107ac:	440b      	add	r3, r1
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4618      	mov	r0, r3
 80107b2:	f7f9 f9f1 	bl	8009b98 <pbuf_free>
    arp_table[i].q = NULL;
 80107b6:	490b      	ldr	r1, [pc, #44]	; (80107e4 <etharp_free_entry+0x60>)
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	4613      	mov	r3, r2
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	4413      	add	r3, r2
 80107c0:	00db      	lsls	r3, r3, #3
 80107c2:	440b      	add	r3, r1
 80107c4:	2200      	movs	r2, #0
 80107c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80107c8:	4906      	ldr	r1, [pc, #24]	; (80107e4 <etharp_free_entry+0x60>)
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	4613      	mov	r3, r2
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	440b      	add	r3, r1
 80107d6:	3314      	adds	r3, #20
 80107d8:	2200      	movs	r2, #0
 80107da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80107dc:	bf00      	nop
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	2000a968 	.word	0x2000a968

080107e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80107ee:	2300      	movs	r3, #0
 80107f0:	607b      	str	r3, [r7, #4]
 80107f2:	e096      	b.n	8010922 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80107f4:	494f      	ldr	r1, [pc, #316]	; (8010934 <etharp_tmr+0x14c>)
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	4613      	mov	r3, r2
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	4413      	add	r3, r2
 80107fe:	00db      	lsls	r3, r3, #3
 8010800:	440b      	add	r3, r1
 8010802:	3314      	adds	r3, #20
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010808:	78fb      	ldrb	r3, [r7, #3]
 801080a:	2b00      	cmp	r3, #0
 801080c:	f000 8086 	beq.w	801091c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010810:	4948      	ldr	r1, [pc, #288]	; (8010934 <etharp_tmr+0x14c>)
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	4613      	mov	r3, r2
 8010816:	005b      	lsls	r3, r3, #1
 8010818:	4413      	add	r3, r2
 801081a:	00db      	lsls	r3, r3, #3
 801081c:	440b      	add	r3, r1
 801081e:	3312      	adds	r3, #18
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	3301      	adds	r3, #1
 8010824:	b298      	uxth	r0, r3
 8010826:	4943      	ldr	r1, [pc, #268]	; (8010934 <etharp_tmr+0x14c>)
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	4613      	mov	r3, r2
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	4413      	add	r3, r2
 8010830:	00db      	lsls	r3, r3, #3
 8010832:	440b      	add	r3, r1
 8010834:	3312      	adds	r3, #18
 8010836:	4602      	mov	r2, r0
 8010838:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801083a:	493e      	ldr	r1, [pc, #248]	; (8010934 <etharp_tmr+0x14c>)
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3312      	adds	r3, #18
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010850:	d215      	bcs.n	801087e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010852:	4938      	ldr	r1, [pc, #224]	; (8010934 <etharp_tmr+0x14c>)
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	4613      	mov	r3, r2
 8010858:	005b      	lsls	r3, r3, #1
 801085a:	4413      	add	r3, r2
 801085c:	00db      	lsls	r3, r3, #3
 801085e:	440b      	add	r3, r1
 8010860:	3314      	adds	r3, #20
 8010862:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010864:	2b01      	cmp	r3, #1
 8010866:	d10e      	bne.n	8010886 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010868:	4932      	ldr	r1, [pc, #200]	; (8010934 <etharp_tmr+0x14c>)
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	4613      	mov	r3, r2
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	00db      	lsls	r3, r3, #3
 8010874:	440b      	add	r3, r1
 8010876:	3312      	adds	r3, #18
 8010878:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801087a:	2b04      	cmp	r3, #4
 801087c:	d903      	bls.n	8010886 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f7ff ff80 	bl	8010784 <etharp_free_entry>
 8010884:	e04a      	b.n	801091c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010886:	492b      	ldr	r1, [pc, #172]	; (8010934 <etharp_tmr+0x14c>)
 8010888:	687a      	ldr	r2, [r7, #4]
 801088a:	4613      	mov	r3, r2
 801088c:	005b      	lsls	r3, r3, #1
 801088e:	4413      	add	r3, r2
 8010890:	00db      	lsls	r3, r3, #3
 8010892:	440b      	add	r3, r1
 8010894:	3314      	adds	r3, #20
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	2b03      	cmp	r3, #3
 801089a:	d10a      	bne.n	80108b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801089c:	4925      	ldr	r1, [pc, #148]	; (8010934 <etharp_tmr+0x14c>)
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	4613      	mov	r3, r2
 80108a2:	005b      	lsls	r3, r3, #1
 80108a4:	4413      	add	r3, r2
 80108a6:	00db      	lsls	r3, r3, #3
 80108a8:	440b      	add	r3, r1
 80108aa:	3314      	adds	r3, #20
 80108ac:	2204      	movs	r2, #4
 80108ae:	701a      	strb	r2, [r3, #0]
 80108b0:	e034      	b.n	801091c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80108b2:	4920      	ldr	r1, [pc, #128]	; (8010934 <etharp_tmr+0x14c>)
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	4613      	mov	r3, r2
 80108b8:	005b      	lsls	r3, r3, #1
 80108ba:	4413      	add	r3, r2
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	440b      	add	r3, r1
 80108c0:	3314      	adds	r3, #20
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	2b04      	cmp	r3, #4
 80108c6:	d10a      	bne.n	80108de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80108c8:	491a      	ldr	r1, [pc, #104]	; (8010934 <etharp_tmr+0x14c>)
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	4613      	mov	r3, r2
 80108ce:	005b      	lsls	r3, r3, #1
 80108d0:	4413      	add	r3, r2
 80108d2:	00db      	lsls	r3, r3, #3
 80108d4:	440b      	add	r3, r1
 80108d6:	3314      	adds	r3, #20
 80108d8:	2202      	movs	r2, #2
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	e01e      	b.n	801091c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80108de:	4915      	ldr	r1, [pc, #84]	; (8010934 <etharp_tmr+0x14c>)
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	005b      	lsls	r3, r3, #1
 80108e6:	4413      	add	r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	440b      	add	r3, r1
 80108ec:	3314      	adds	r3, #20
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d113      	bne.n	801091c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80108f4:	490f      	ldr	r1, [pc, #60]	; (8010934 <etharp_tmr+0x14c>)
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	4613      	mov	r3, r2
 80108fa:	005b      	lsls	r3, r3, #1
 80108fc:	4413      	add	r3, r2
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	440b      	add	r3, r1
 8010902:	3308      	adds	r3, #8
 8010904:	6818      	ldr	r0, [r3, #0]
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	4613      	mov	r3, r2
 801090a:	005b      	lsls	r3, r3, #1
 801090c:	4413      	add	r3, r2
 801090e:	00db      	lsls	r3, r3, #3
 8010910:	4a08      	ldr	r2, [pc, #32]	; (8010934 <etharp_tmr+0x14c>)
 8010912:	4413      	add	r3, r2
 8010914:	3304      	adds	r3, #4
 8010916:	4619      	mov	r1, r3
 8010918:	f000 fe6e 	bl	80115f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	3301      	adds	r3, #1
 8010920:	607b      	str	r3, [r7, #4]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2b09      	cmp	r3, #9
 8010926:	f77f af65 	ble.w	80107f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801092a:	bf00      	nop
 801092c:	bf00      	nop
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}
 8010934:	2000a968 	.word	0x2000a968

08010938 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b08a      	sub	sp, #40	; 0x28
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	460b      	mov	r3, r1
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010946:	230a      	movs	r3, #10
 8010948:	84fb      	strh	r3, [r7, #38]	; 0x26
 801094a:	230a      	movs	r3, #10
 801094c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801094e:	230a      	movs	r3, #10
 8010950:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010956:	230a      	movs	r3, #10
 8010958:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801095a:	2300      	movs	r3, #0
 801095c:	83bb      	strh	r3, [r7, #28]
 801095e:	2300      	movs	r3, #0
 8010960:	837b      	strh	r3, [r7, #26]
 8010962:	2300      	movs	r3, #0
 8010964:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010966:	2300      	movs	r3, #0
 8010968:	843b      	strh	r3, [r7, #32]
 801096a:	e0ae      	b.n	8010aca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801096c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010970:	49a6      	ldr	r1, [pc, #664]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010972:	4613      	mov	r3, r2
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	4413      	add	r3, r2
 8010978:	00db      	lsls	r3, r3, #3
 801097a:	440b      	add	r3, r1
 801097c:	3314      	adds	r3, #20
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010986:	2b0a      	cmp	r3, #10
 8010988:	d105      	bne.n	8010996 <etharp_find_entry+0x5e>
 801098a:	7dfb      	ldrb	r3, [r7, #23]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d102      	bne.n	8010996 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010990:	8c3b      	ldrh	r3, [r7, #32]
 8010992:	847b      	strh	r3, [r7, #34]	; 0x22
 8010994:	e095      	b.n	8010ac2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010996:	7dfb      	ldrb	r3, [r7, #23]
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 8092 	beq.w	8010ac2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d009      	beq.n	80109b8 <etharp_find_entry+0x80>
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	2b01      	cmp	r3, #1
 80109a8:	d806      	bhi.n	80109b8 <etharp_find_entry+0x80>
 80109aa:	4b99      	ldr	r3, [pc, #612]	; (8010c10 <etharp_find_entry+0x2d8>)
 80109ac:	f240 1223 	movw	r2, #291	; 0x123
 80109b0:	4998      	ldr	r1, [pc, #608]	; (8010c14 <etharp_find_entry+0x2dc>)
 80109b2:	4899      	ldr	r0, [pc, #612]	; (8010c18 <etharp_find_entry+0x2e0>)
 80109b4:	f002 fb3c 	bl	8013030 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d020      	beq.n	8010a00 <etharp_find_entry+0xc8>
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6819      	ldr	r1, [r3, #0]
 80109c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109c6:	4891      	ldr	r0, [pc, #580]	; (8010c0c <etharp_find_entry+0x2d4>)
 80109c8:	4613      	mov	r3, r2
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4403      	add	r3, r0
 80109d2:	3304      	adds	r3, #4
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	4299      	cmp	r1, r3
 80109d8:	d112      	bne.n	8010a00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00c      	beq.n	80109fa <etharp_find_entry+0xc2>
 80109e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80109e4:	4989      	ldr	r1, [pc, #548]	; (8010c0c <etharp_find_entry+0x2d4>)
 80109e6:	4613      	mov	r3, r2
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	4413      	add	r3, r2
 80109ec:	00db      	lsls	r3, r3, #3
 80109ee:	440b      	add	r3, r1
 80109f0:	3308      	adds	r3, #8
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d102      	bne.n	8010a00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80109fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80109fe:	e100      	b.n	8010c02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d140      	bne.n	8010a88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a0a:	4980      	ldr	r1, [pc, #512]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	4413      	add	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	440b      	add	r3, r1
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d01a      	beq.n	8010a52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010a1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a20:	497a      	ldr	r1, [pc, #488]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010a22:	4613      	mov	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4413      	add	r3, r2
 8010a28:	00db      	lsls	r3, r3, #3
 8010a2a:	440b      	add	r3, r1
 8010a2c:	3312      	adds	r3, #18
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	8bba      	ldrh	r2, [r7, #28]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d845      	bhi.n	8010ac2 <etharp_find_entry+0x18a>
            old_queue = i;
 8010a36:	8c3b      	ldrh	r3, [r7, #32]
 8010a38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a3e:	4973      	ldr	r1, [pc, #460]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010a40:	4613      	mov	r3, r2
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	440b      	add	r3, r1
 8010a4a:	3312      	adds	r3, #18
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	83bb      	strh	r3, [r7, #28]
 8010a50:	e037      	b.n	8010ac2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a56:	496d      	ldr	r1, [pc, #436]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	440b      	add	r3, r1
 8010a62:	3312      	adds	r3, #18
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	8b7a      	ldrh	r2, [r7, #26]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d82a      	bhi.n	8010ac2 <etharp_find_entry+0x18a>
            old_pending = i;
 8010a6c:	8c3b      	ldrh	r3, [r7, #32]
 8010a6e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a74:	4965      	ldr	r1, [pc, #404]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010a76:	4613      	mov	r3, r2
 8010a78:	005b      	lsls	r3, r3, #1
 8010a7a:	4413      	add	r3, r2
 8010a7c:	00db      	lsls	r3, r3, #3
 8010a7e:	440b      	add	r3, r1
 8010a80:	3312      	adds	r3, #18
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	837b      	strh	r3, [r7, #26]
 8010a86:	e01c      	b.n	8010ac2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010a88:	7dfb      	ldrb	r3, [r7, #23]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d919      	bls.n	8010ac2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010a8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a92:	495e      	ldr	r1, [pc, #376]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010a94:	4613      	mov	r3, r2
 8010a96:	005b      	lsls	r3, r3, #1
 8010a98:	4413      	add	r3, r2
 8010a9a:	00db      	lsls	r3, r3, #3
 8010a9c:	440b      	add	r3, r1
 8010a9e:	3312      	adds	r3, #18
 8010aa0:	881b      	ldrh	r3, [r3, #0]
 8010aa2:	8b3a      	ldrh	r2, [r7, #24]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d80c      	bhi.n	8010ac2 <etharp_find_entry+0x18a>
            old_stable = i;
 8010aa8:	8c3b      	ldrh	r3, [r7, #32]
 8010aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010aac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ab0:	4956      	ldr	r1, [pc, #344]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	005b      	lsls	r3, r3, #1
 8010ab6:	4413      	add	r3, r2
 8010ab8:	00db      	lsls	r3, r3, #3
 8010aba:	440b      	add	r3, r1
 8010abc:	3312      	adds	r3, #18
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ac2:	8c3b      	ldrh	r3, [r7, #32]
 8010ac4:	3301      	adds	r3, #1
 8010ac6:	b29b      	uxth	r3, r3
 8010ac8:	843b      	strh	r3, [r7, #32]
 8010aca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ace:	2b09      	cmp	r3, #9
 8010ad0:	f77f af4c 	ble.w	801096c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010ad4:	7afb      	ldrb	r3, [r7, #11]
 8010ad6:	f003 0302 	and.w	r3, r3, #2
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d108      	bne.n	8010af0 <etharp_find_entry+0x1b8>
 8010ade:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010ae2:	2b0a      	cmp	r3, #10
 8010ae4:	d107      	bne.n	8010af6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010ae6:	7afb      	ldrb	r3, [r7, #11]
 8010ae8:	f003 0301 	and.w	r3, r3, #1
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d102      	bne.n	8010af6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010af0:	f04f 33ff 	mov.w	r3, #4294967295
 8010af4:	e085      	b.n	8010c02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010af6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010afa:	2b09      	cmp	r3, #9
 8010afc:	dc02      	bgt.n	8010b04 <etharp_find_entry+0x1cc>
    i = empty;
 8010afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b00:	843b      	strh	r3, [r7, #32]
 8010b02:	e039      	b.n	8010b78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010b04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010b08:	2b09      	cmp	r3, #9
 8010b0a:	dc14      	bgt.n	8010b36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010b10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b14:	493d      	ldr	r1, [pc, #244]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010b16:	4613      	mov	r3, r2
 8010b18:	005b      	lsls	r3, r3, #1
 8010b1a:	4413      	add	r3, r2
 8010b1c:	00db      	lsls	r3, r3, #3
 8010b1e:	440b      	add	r3, r1
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d018      	beq.n	8010b58 <etharp_find_entry+0x220>
 8010b26:	4b3a      	ldr	r3, [pc, #232]	; (8010c10 <etharp_find_entry+0x2d8>)
 8010b28:	f240 126d 	movw	r2, #365	; 0x16d
 8010b2c:	493b      	ldr	r1, [pc, #236]	; (8010c1c <etharp_find_entry+0x2e4>)
 8010b2e:	483a      	ldr	r0, [pc, #232]	; (8010c18 <etharp_find_entry+0x2e0>)
 8010b30:	f002 fa7e 	bl	8013030 <iprintf>
 8010b34:	e010      	b.n	8010b58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010b36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010b3a:	2b09      	cmp	r3, #9
 8010b3c:	dc02      	bgt.n	8010b44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010b3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010b40:	843b      	strh	r3, [r7, #32]
 8010b42:	e009      	b.n	8010b58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010b44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010b48:	2b09      	cmp	r3, #9
 8010b4a:	dc02      	bgt.n	8010b52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010b4c:	8bfb      	ldrh	r3, [r7, #30]
 8010b4e:	843b      	strh	r3, [r7, #32]
 8010b50:	e002      	b.n	8010b58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010b52:	f04f 33ff 	mov.w	r3, #4294967295
 8010b56:	e054      	b.n	8010c02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010b58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b5c:	2b09      	cmp	r3, #9
 8010b5e:	dd06      	ble.n	8010b6e <etharp_find_entry+0x236>
 8010b60:	4b2b      	ldr	r3, [pc, #172]	; (8010c10 <etharp_find_entry+0x2d8>)
 8010b62:	f240 127f 	movw	r2, #383	; 0x17f
 8010b66:	492e      	ldr	r1, [pc, #184]	; (8010c20 <etharp_find_entry+0x2e8>)
 8010b68:	482b      	ldr	r0, [pc, #172]	; (8010c18 <etharp_find_entry+0x2e0>)
 8010b6a:	f002 fa61 	bl	8013030 <iprintf>
    etharp_free_entry(i);
 8010b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7ff fe06 	bl	8010784 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010b78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b7c:	2b09      	cmp	r3, #9
 8010b7e:	dd06      	ble.n	8010b8e <etharp_find_entry+0x256>
 8010b80:	4b23      	ldr	r3, [pc, #140]	; (8010c10 <etharp_find_entry+0x2d8>)
 8010b82:	f240 1283 	movw	r2, #387	; 0x183
 8010b86:	4926      	ldr	r1, [pc, #152]	; (8010c20 <etharp_find_entry+0x2e8>)
 8010b88:	4823      	ldr	r0, [pc, #140]	; (8010c18 <etharp_find_entry+0x2e0>)
 8010b8a:	f002 fa51 	bl	8013030 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010b8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b92:	491e      	ldr	r1, [pc, #120]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010b94:	4613      	mov	r3, r2
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	440b      	add	r3, r1
 8010b9e:	3314      	adds	r3, #20
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d006      	beq.n	8010bb4 <etharp_find_entry+0x27c>
 8010ba6:	4b1a      	ldr	r3, [pc, #104]	; (8010c10 <etharp_find_entry+0x2d8>)
 8010ba8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010bac:	491d      	ldr	r1, [pc, #116]	; (8010c24 <etharp_find_entry+0x2ec>)
 8010bae:	481a      	ldr	r0, [pc, #104]	; (8010c18 <etharp_find_entry+0x2e0>)
 8010bb0:	f002 fa3e 	bl	8013030 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00b      	beq.n	8010bd2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010bba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6819      	ldr	r1, [r3, #0]
 8010bc2:	4812      	ldr	r0, [pc, #72]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	005b      	lsls	r3, r3, #1
 8010bc8:	4413      	add	r3, r2
 8010bca:	00db      	lsls	r3, r3, #3
 8010bcc:	4403      	add	r3, r0
 8010bce:	3304      	adds	r3, #4
 8010bd0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bd6:	490d      	ldr	r1, [pc, #52]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010bd8:	4613      	mov	r3, r2
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	4413      	add	r3, r2
 8010bde:	00db      	lsls	r3, r3, #3
 8010be0:	440b      	add	r3, r1
 8010be2:	3312      	adds	r3, #18
 8010be4:	2200      	movs	r2, #0
 8010be6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010be8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bec:	4907      	ldr	r1, [pc, #28]	; (8010c0c <etharp_find_entry+0x2d4>)
 8010bee:	4613      	mov	r3, r2
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	00db      	lsls	r3, r3, #3
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3308      	adds	r3, #8
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010bfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3728      	adds	r7, #40	; 0x28
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	2000a968 	.word	0x2000a968
 8010c10:	080161d8 	.word	0x080161d8
 8010c14:	08016210 	.word	0x08016210
 8010c18:	08016250 	.word	0x08016250
 8010c1c:	08016278 	.word	0x08016278
 8010c20:	08016290 	.word	0x08016290
 8010c24:	080162a4 	.word	0x080162a4

08010c28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b088      	sub	sp, #32
 8010c2c:	af02      	add	r7, sp, #8
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
 8010c34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c3c:	2b06      	cmp	r3, #6
 8010c3e:	d006      	beq.n	8010c4e <etharp_update_arp_entry+0x26>
 8010c40:	4b48      	ldr	r3, [pc, #288]	; (8010d64 <etharp_update_arp_entry+0x13c>)
 8010c42:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010c46:	4948      	ldr	r1, [pc, #288]	; (8010d68 <etharp_update_arp_entry+0x140>)
 8010c48:	4848      	ldr	r0, [pc, #288]	; (8010d6c <etharp_update_arp_entry+0x144>)
 8010c4a:	f002 f9f1 	bl	8013030 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d012      	beq.n	8010c7a <etharp_update_arp_entry+0x52>
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d00e      	beq.n	8010c7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	68f9      	ldr	r1, [r7, #12]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f001 f8fe 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8010c68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d105      	bne.n	8010c7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010c76:	2be0      	cmp	r3, #224	; 0xe0
 8010c78:	d102      	bne.n	8010c80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010c7a:	f06f 030f 	mvn.w	r3, #15
 8010c7e:	e06c      	b.n	8010d5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010c80:	78fb      	ldrb	r3, [r7, #3]
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	4619      	mov	r1, r3
 8010c86:	68b8      	ldr	r0, [r7, #8]
 8010c88:	f7ff fe56 	bl	8010938 <etharp_find_entry>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010c90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	da02      	bge.n	8010c9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010c98:	8afb      	ldrh	r3, [r7, #22]
 8010c9a:	b25b      	sxtb	r3, r3
 8010c9c:	e05d      	b.n	8010d5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010c9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ca2:	4933      	ldr	r1, [pc, #204]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	4413      	add	r3, r2
 8010caa:	00db      	lsls	r3, r3, #3
 8010cac:	440b      	add	r3, r1
 8010cae:	3314      	adds	r3, #20
 8010cb0:	2202      	movs	r2, #2
 8010cb2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010cb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010cb8:	492d      	ldr	r1, [pc, #180]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010cba:	4613      	mov	r3, r2
 8010cbc:	005b      	lsls	r3, r3, #1
 8010cbe:	4413      	add	r3, r2
 8010cc0:	00db      	lsls	r3, r3, #3
 8010cc2:	440b      	add	r3, r1
 8010cc4:	3308      	adds	r3, #8
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010cca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010cce:	4613      	mov	r3, r2
 8010cd0:	005b      	lsls	r3, r3, #1
 8010cd2:	4413      	add	r3, r2
 8010cd4:	00db      	lsls	r3, r3, #3
 8010cd6:	3308      	adds	r3, #8
 8010cd8:	4a25      	ldr	r2, [pc, #148]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010cda:	4413      	add	r3, r2
 8010cdc:	3304      	adds	r3, #4
 8010cde:	2206      	movs	r2, #6
 8010ce0:	6879      	ldr	r1, [r7, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f002 fa7f 	bl	80131e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010ce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010cec:	4920      	ldr	r1, [pc, #128]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010cee:	4613      	mov	r3, r2
 8010cf0:	005b      	lsls	r3, r3, #1
 8010cf2:	4413      	add	r3, r2
 8010cf4:	00db      	lsls	r3, r3, #3
 8010cf6:	440b      	add	r3, r1
 8010cf8:	3312      	adds	r3, #18
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010cfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d02:	491b      	ldr	r1, [pc, #108]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010d04:	4613      	mov	r3, r2
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	4413      	add	r3, r2
 8010d0a:	00db      	lsls	r3, r3, #3
 8010d0c:	440b      	add	r3, r1
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d021      	beq.n	8010d58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010d14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d18:	4915      	ldr	r1, [pc, #84]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	4413      	add	r3, r2
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	440b      	add	r3, r1
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d2c:	4910      	ldr	r1, [pc, #64]	; (8010d70 <etharp_update_arp_entry+0x148>)
 8010d2e:	4613      	mov	r3, r2
 8010d30:	005b      	lsls	r3, r3, #1
 8010d32:	4413      	add	r3, r2
 8010d34:	00db      	lsls	r3, r3, #3
 8010d36:	440b      	add	r3, r1
 8010d38:	2200      	movs	r2, #0
 8010d3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010d42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6939      	ldr	r1, [r7, #16]
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f002 f827 	bl	8012da0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010d52:	6938      	ldr	r0, [r7, #16]
 8010d54:	f7f8 ff20 	bl	8009b98 <pbuf_free>
  }
  return ERR_OK;
 8010d58:	2300      	movs	r3, #0
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3718      	adds	r7, #24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	bf00      	nop
 8010d64:	080161d8 	.word	0x080161d8
 8010d68:	080162d0 	.word	0x080162d0
 8010d6c:	08016250 	.word	0x08016250
 8010d70:	2000a968 	.word	0x2000a968

08010d74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	60fb      	str	r3, [r7, #12]
 8010d80:	e01e      	b.n	8010dc0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010d82:	4913      	ldr	r1, [pc, #76]	; (8010dd0 <etharp_cleanup_netif+0x5c>)
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	4613      	mov	r3, r2
 8010d88:	005b      	lsls	r3, r3, #1
 8010d8a:	4413      	add	r3, r2
 8010d8c:	00db      	lsls	r3, r3, #3
 8010d8e:	440b      	add	r3, r1
 8010d90:	3314      	adds	r3, #20
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010d96:	7afb      	ldrb	r3, [r7, #11]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d00e      	beq.n	8010dba <etharp_cleanup_netif+0x46>
 8010d9c:	490c      	ldr	r1, [pc, #48]	; (8010dd0 <etharp_cleanup_netif+0x5c>)
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	4613      	mov	r3, r2
 8010da2:	005b      	lsls	r3, r3, #1
 8010da4:	4413      	add	r3, r2
 8010da6:	00db      	lsls	r3, r3, #3
 8010da8:	440b      	add	r3, r1
 8010daa:	3308      	adds	r3, #8
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d102      	bne.n	8010dba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f7ff fce5 	bl	8010784 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	60fb      	str	r3, [r7, #12]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2b09      	cmp	r3, #9
 8010dc4:	dddd      	ble.n	8010d82 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010dc6:	bf00      	nop
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	2000a968 	.word	0x2000a968

08010dd4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010dd4:	b5b0      	push	{r4, r5, r7, lr}
 8010dd6:	b08a      	sub	sp, #40	; 0x28
 8010dd8:	af04      	add	r7, sp, #16
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d107      	bne.n	8010df4 <etharp_input+0x20>
 8010de4:	4b3d      	ldr	r3, [pc, #244]	; (8010edc <etharp_input+0x108>)
 8010de6:	f240 228a 	movw	r2, #650	; 0x28a
 8010dea:	493d      	ldr	r1, [pc, #244]	; (8010ee0 <etharp_input+0x10c>)
 8010dec:	483d      	ldr	r0, [pc, #244]	; (8010ee4 <etharp_input+0x110>)
 8010dee:	f002 f91f 	bl	8013030 <iprintf>
 8010df2:	e06f      	b.n	8010ed4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e04:	d10c      	bne.n	8010e20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010e0a:	2b06      	cmp	r3, #6
 8010e0c:	d108      	bne.n	8010e20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010e12:	2b04      	cmp	r3, #4
 8010e14:	d104      	bne.n	8010e20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	885b      	ldrh	r3, [r3, #2]
 8010e1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010e1c:	2b08      	cmp	r3, #8
 8010e1e:	d003      	beq.n	8010e28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7f8 feb9 	bl	8009b98 <pbuf_free>
    return;
 8010e26:	e055      	b.n	8010ed4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	330e      	adds	r3, #14
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	3318      	adds	r3, #24
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	3304      	adds	r3, #4
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d102      	bne.n	8010e48 <etharp_input+0x74>
    for_us = 0;
 8010e42:	2300      	movs	r3, #0
 8010e44:	75fb      	strb	r3, [r7, #23]
 8010e46:	e009      	b.n	8010e5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	3304      	adds	r3, #4
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	bf0c      	ite	eq
 8010e54:	2301      	moveq	r3, #1
 8010e56:	2300      	movne	r3, #0
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	f103 0208 	add.w	r2, r3, #8
 8010e62:	7dfb      	ldrb	r3, [r7, #23]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d001      	beq.n	8010e6c <etharp_input+0x98>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e000      	b.n	8010e6e <etharp_input+0x9a>
 8010e6c:	2302      	movs	r3, #2
 8010e6e:	f107 010c 	add.w	r1, r7, #12
 8010e72:	6838      	ldr	r0, [r7, #0]
 8010e74:	f7ff fed8 	bl	8010c28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	88db      	ldrh	r3, [r3, #6]
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e82:	d003      	beq.n	8010e8c <etharp_input+0xb8>
 8010e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e88:	d01e      	beq.n	8010ec8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010e8a:	e020      	b.n	8010ece <etharp_input+0xfa>
      if (for_us) {
 8010e8c:	7dfb      	ldrb	r3, [r7, #23]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d01c      	beq.n	8010ecc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010ea8:	693a      	ldr	r2, [r7, #16]
 8010eaa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010eac:	2102      	movs	r1, #2
 8010eae:	9103      	str	r1, [sp, #12]
 8010eb0:	f107 010c 	add.w	r1, r7, #12
 8010eb4:	9102      	str	r1, [sp, #8]
 8010eb6:	9201      	str	r2, [sp, #4]
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	462b      	mov	r3, r5
 8010ebc:	4622      	mov	r2, r4
 8010ebe:	4601      	mov	r1, r0
 8010ec0:	6838      	ldr	r0, [r7, #0]
 8010ec2:	f000 faeb 	bl	801149c <etharp_raw>
      break;
 8010ec6:	e001      	b.n	8010ecc <etharp_input+0xf8>
      break;
 8010ec8:	bf00      	nop
 8010eca:	e000      	b.n	8010ece <etharp_input+0xfa>
      break;
 8010ecc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7f8 fe62 	bl	8009b98 <pbuf_free>
}
 8010ed4:	3718      	adds	r7, #24
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8010eda:	bf00      	nop
 8010edc:	080161d8 	.word	0x080161d8
 8010ee0:	08016328 	.word	0x08016328
 8010ee4:	08016250 	.word	0x08016250

08010ee8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af02      	add	r7, sp, #8
 8010eee:	60f8      	str	r0, [r7, #12]
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010ef6:	79fa      	ldrb	r2, [r7, #7]
 8010ef8:	4944      	ldr	r1, [pc, #272]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010efa:	4613      	mov	r3, r2
 8010efc:	005b      	lsls	r3, r3, #1
 8010efe:	4413      	add	r3, r2
 8010f00:	00db      	lsls	r3, r3, #3
 8010f02:	440b      	add	r3, r1
 8010f04:	3314      	adds	r3, #20
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	2b01      	cmp	r3, #1
 8010f0a:	d806      	bhi.n	8010f1a <etharp_output_to_arp_index+0x32>
 8010f0c:	4b40      	ldr	r3, [pc, #256]	; (8011010 <etharp_output_to_arp_index+0x128>)
 8010f0e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010f12:	4940      	ldr	r1, [pc, #256]	; (8011014 <etharp_output_to_arp_index+0x12c>)
 8010f14:	4840      	ldr	r0, [pc, #256]	; (8011018 <etharp_output_to_arp_index+0x130>)
 8010f16:	f002 f88b 	bl	8013030 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010f1a:	79fa      	ldrb	r2, [r7, #7]
 8010f1c:	493b      	ldr	r1, [pc, #236]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010f1e:	4613      	mov	r3, r2
 8010f20:	005b      	lsls	r3, r3, #1
 8010f22:	4413      	add	r3, r2
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	440b      	add	r3, r1
 8010f28:	3314      	adds	r3, #20
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d153      	bne.n	8010fd8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010f30:	79fa      	ldrb	r2, [r7, #7]
 8010f32:	4936      	ldr	r1, [pc, #216]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010f34:	4613      	mov	r3, r2
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	4413      	add	r3, r2
 8010f3a:	00db      	lsls	r3, r3, #3
 8010f3c:	440b      	add	r3, r1
 8010f3e:	3312      	adds	r3, #18
 8010f40:	881b      	ldrh	r3, [r3, #0]
 8010f42:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010f46:	d919      	bls.n	8010f7c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010f48:	79fa      	ldrb	r2, [r7, #7]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	4413      	add	r3, r2
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	4a2e      	ldr	r2, [pc, #184]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010f54:	4413      	add	r3, r2
 8010f56:	3304      	adds	r3, #4
 8010f58:	4619      	mov	r1, r3
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	f000 fb4c 	bl	80115f8 <etharp_request>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d138      	bne.n	8010fd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010f66:	79fa      	ldrb	r2, [r7, #7]
 8010f68:	4928      	ldr	r1, [pc, #160]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	4413      	add	r3, r2
 8010f70:	00db      	lsls	r3, r3, #3
 8010f72:	440b      	add	r3, r1
 8010f74:	3314      	adds	r3, #20
 8010f76:	2203      	movs	r2, #3
 8010f78:	701a      	strb	r2, [r3, #0]
 8010f7a:	e02d      	b.n	8010fd8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010f7c:	79fa      	ldrb	r2, [r7, #7]
 8010f7e:	4923      	ldr	r1, [pc, #140]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010f80:	4613      	mov	r3, r2
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	4413      	add	r3, r2
 8010f86:	00db      	lsls	r3, r3, #3
 8010f88:	440b      	add	r3, r1
 8010f8a:	3312      	adds	r3, #18
 8010f8c:	881b      	ldrh	r3, [r3, #0]
 8010f8e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010f92:	d321      	bcc.n	8010fd8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010f94:	79fa      	ldrb	r2, [r7, #7]
 8010f96:	4613      	mov	r3, r2
 8010f98:	005b      	lsls	r3, r3, #1
 8010f9a:	4413      	add	r3, r2
 8010f9c:	00db      	lsls	r3, r3, #3
 8010f9e:	4a1b      	ldr	r2, [pc, #108]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010fa0:	4413      	add	r3, r2
 8010fa2:	1d19      	adds	r1, r3, #4
 8010fa4:	79fa      	ldrb	r2, [r7, #7]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	005b      	lsls	r3, r3, #1
 8010faa:	4413      	add	r3, r2
 8010fac:	00db      	lsls	r3, r3, #3
 8010fae:	3308      	adds	r3, #8
 8010fb0:	4a16      	ldr	r2, [pc, #88]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010fb2:	4413      	add	r3, r2
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f000 fafb 	bl	80115b4 <etharp_request_dst>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d109      	bne.n	8010fd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010fc4:	79fa      	ldrb	r2, [r7, #7]
 8010fc6:	4911      	ldr	r1, [pc, #68]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010fc8:	4613      	mov	r3, r2
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	4413      	add	r3, r2
 8010fce:	00db      	lsls	r3, r3, #3
 8010fd0:	440b      	add	r3, r1
 8010fd2:	3314      	adds	r3, #20
 8010fd4:	2203      	movs	r2, #3
 8010fd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010fde:	79fa      	ldrb	r2, [r7, #7]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	4413      	add	r3, r2
 8010fe6:	00db      	lsls	r3, r3, #3
 8010fe8:	3308      	adds	r3, #8
 8010fea:	4a08      	ldr	r2, [pc, #32]	; (801100c <etharp_output_to_arp_index+0x124>)
 8010fec:	4413      	add	r3, r2
 8010fee:	3304      	adds	r3, #4
 8010ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ff4:	9200      	str	r2, [sp, #0]
 8010ff6:	460a      	mov	r2, r1
 8010ff8:	68b9      	ldr	r1, [r7, #8]
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f001 fed0 	bl	8012da0 <ethernet_output>
 8011000:	4603      	mov	r3, r0
}
 8011002:	4618      	mov	r0, r3
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	2000a968 	.word	0x2000a968
 8011010:	080161d8 	.word	0x080161d8
 8011014:	08016348 	.word	0x08016348
 8011018:	08016250 	.word	0x08016250

0801101c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b08a      	sub	sp, #40	; 0x28
 8011020:	af02      	add	r7, sp, #8
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d106      	bne.n	8011040 <etharp_output+0x24>
 8011032:	4b73      	ldr	r3, [pc, #460]	; (8011200 <etharp_output+0x1e4>)
 8011034:	f240 321e 	movw	r2, #798	; 0x31e
 8011038:	4972      	ldr	r1, [pc, #456]	; (8011204 <etharp_output+0x1e8>)
 801103a:	4873      	ldr	r0, [pc, #460]	; (8011208 <etharp_output+0x1ec>)
 801103c:	f001 fff8 	bl	8013030 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <etharp_output+0x38>
 8011046:	4b6e      	ldr	r3, [pc, #440]	; (8011200 <etharp_output+0x1e4>)
 8011048:	f240 321f 	movw	r2, #799	; 0x31f
 801104c:	496f      	ldr	r1, [pc, #444]	; (801120c <etharp_output+0x1f0>)
 801104e:	486e      	ldr	r0, [pc, #440]	; (8011208 <etharp_output+0x1ec>)
 8011050:	f001 ffee 	bl	8013030 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d106      	bne.n	8011068 <etharp_output+0x4c>
 801105a:	4b69      	ldr	r3, [pc, #420]	; (8011200 <etharp_output+0x1e4>)
 801105c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011060:	496b      	ldr	r1, [pc, #428]	; (8011210 <etharp_output+0x1f4>)
 8011062:	4869      	ldr	r0, [pc, #420]	; (8011208 <etharp_output+0x1ec>)
 8011064:	f001 ffe4 	bl	8013030 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	68f9      	ldr	r1, [r7, #12]
 801106e:	4618      	mov	r0, r3
 8011070:	f000 fef8 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d002      	beq.n	8011080 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801107a:	4b66      	ldr	r3, [pc, #408]	; (8011214 <etharp_output+0x1f8>)
 801107c:	61fb      	str	r3, [r7, #28]
 801107e:	e0af      	b.n	80111e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011088:	2be0      	cmp	r3, #224	; 0xe0
 801108a:	d118      	bne.n	80110be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801108c:	2301      	movs	r3, #1
 801108e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011090:	2300      	movs	r3, #0
 8011092:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011094:	235e      	movs	r3, #94	; 0x5e
 8011096:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	3301      	adds	r3, #1
 801109c:	781b      	ldrb	r3, [r3, #0]
 801109e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	3302      	adds	r3, #2
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	3303      	adds	r3, #3
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80110b6:	f107 0310 	add.w	r3, r7, #16
 80110ba:	61fb      	str	r3, [r7, #28]
 80110bc:	e090      	b.n	80111e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	3304      	adds	r3, #4
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	405a      	eors	r2, r3
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	3308      	adds	r3, #8
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4013      	ands	r3, r2
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d012      	beq.n	80110fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80110dc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d00b      	beq.n	80110fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	330c      	adds	r3, #12
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d003      	beq.n	80110f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	330c      	adds	r3, #12
 80110f2:	61bb      	str	r3, [r7, #24]
 80110f4:	e002      	b.n	80110fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80110f6:	f06f 0303 	mvn.w	r3, #3
 80110fa:	e07d      	b.n	80111f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80110fc:	4b46      	ldr	r3, [pc, #280]	; (8011218 <etharp_output+0x1fc>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	4619      	mov	r1, r3
 8011102:	4a46      	ldr	r2, [pc, #280]	; (801121c <etharp_output+0x200>)
 8011104:	460b      	mov	r3, r1
 8011106:	005b      	lsls	r3, r3, #1
 8011108:	440b      	add	r3, r1
 801110a:	00db      	lsls	r3, r3, #3
 801110c:	4413      	add	r3, r2
 801110e:	3314      	adds	r3, #20
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	2b01      	cmp	r3, #1
 8011114:	d925      	bls.n	8011162 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011116:	4b40      	ldr	r3, [pc, #256]	; (8011218 <etharp_output+0x1fc>)
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	4619      	mov	r1, r3
 801111c:	4a3f      	ldr	r2, [pc, #252]	; (801121c <etharp_output+0x200>)
 801111e:	460b      	mov	r3, r1
 8011120:	005b      	lsls	r3, r3, #1
 8011122:	440b      	add	r3, r1
 8011124:	00db      	lsls	r3, r3, #3
 8011126:	4413      	add	r3, r2
 8011128:	3308      	adds	r3, #8
 801112a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	429a      	cmp	r2, r3
 8011130:	d117      	bne.n	8011162 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	4b38      	ldr	r3, [pc, #224]	; (8011218 <etharp_output+0x1fc>)
 8011138:	781b      	ldrb	r3, [r3, #0]
 801113a:	4618      	mov	r0, r3
 801113c:	4937      	ldr	r1, [pc, #220]	; (801121c <etharp_output+0x200>)
 801113e:	4603      	mov	r3, r0
 8011140:	005b      	lsls	r3, r3, #1
 8011142:	4403      	add	r3, r0
 8011144:	00db      	lsls	r3, r3, #3
 8011146:	440b      	add	r3, r1
 8011148:	3304      	adds	r3, #4
 801114a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801114c:	429a      	cmp	r2, r3
 801114e:	d108      	bne.n	8011162 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011150:	4b31      	ldr	r3, [pc, #196]	; (8011218 <etharp_output+0x1fc>)
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	461a      	mov	r2, r3
 8011156:	68b9      	ldr	r1, [r7, #8]
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f7ff fec5 	bl	8010ee8 <etharp_output_to_arp_index>
 801115e:	4603      	mov	r3, r0
 8011160:	e04a      	b.n	80111f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011162:	2300      	movs	r3, #0
 8011164:	75fb      	strb	r3, [r7, #23]
 8011166:	e031      	b.n	80111cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011168:	7dfa      	ldrb	r2, [r7, #23]
 801116a:	492c      	ldr	r1, [pc, #176]	; (801121c <etharp_output+0x200>)
 801116c:	4613      	mov	r3, r2
 801116e:	005b      	lsls	r3, r3, #1
 8011170:	4413      	add	r3, r2
 8011172:	00db      	lsls	r3, r3, #3
 8011174:	440b      	add	r3, r1
 8011176:	3314      	adds	r3, #20
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d923      	bls.n	80111c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801117e:	7dfa      	ldrb	r2, [r7, #23]
 8011180:	4926      	ldr	r1, [pc, #152]	; (801121c <etharp_output+0x200>)
 8011182:	4613      	mov	r3, r2
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	4413      	add	r3, r2
 8011188:	00db      	lsls	r3, r3, #3
 801118a:	440b      	add	r3, r1
 801118c:	3308      	adds	r3, #8
 801118e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	429a      	cmp	r2, r3
 8011194:	d117      	bne.n	80111c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	6819      	ldr	r1, [r3, #0]
 801119a:	7dfa      	ldrb	r2, [r7, #23]
 801119c:	481f      	ldr	r0, [pc, #124]	; (801121c <etharp_output+0x200>)
 801119e:	4613      	mov	r3, r2
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	4413      	add	r3, r2
 80111a4:	00db      	lsls	r3, r3, #3
 80111a6:	4403      	add	r3, r0
 80111a8:	3304      	adds	r3, #4
 80111aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80111ac:	4299      	cmp	r1, r3
 80111ae:	d10a      	bne.n	80111c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80111b0:	4a19      	ldr	r2, [pc, #100]	; (8011218 <etharp_output+0x1fc>)
 80111b2:	7dfb      	ldrb	r3, [r7, #23]
 80111b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80111b6:	7dfb      	ldrb	r3, [r7, #23]
 80111b8:	461a      	mov	r2, r3
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f7ff fe93 	bl	8010ee8 <etharp_output_to_arp_index>
 80111c2:	4603      	mov	r3, r0
 80111c4:	e018      	b.n	80111f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80111c6:	7dfb      	ldrb	r3, [r7, #23]
 80111c8:	3301      	adds	r3, #1
 80111ca:	75fb      	strb	r3, [r7, #23]
 80111cc:	7dfb      	ldrb	r3, [r7, #23]
 80111ce:	2b09      	cmp	r3, #9
 80111d0:	d9ca      	bls.n	8011168 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	69b9      	ldr	r1, [r7, #24]
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f000 f822 	bl	8011220 <etharp_query>
 80111dc:	4603      	mov	r3, r0
 80111de:	e00b      	b.n	80111f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80111e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	69fb      	ldr	r3, [r7, #28]
 80111ee:	68b9      	ldr	r1, [r7, #8]
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f001 fdd5 	bl	8012da0 <ethernet_output>
 80111f6:	4603      	mov	r3, r0
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3720      	adds	r7, #32
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	080161d8 	.word	0x080161d8
 8011204:	08016328 	.word	0x08016328
 8011208:	08016250 	.word	0x08016250
 801120c:	08016378 	.word	0x08016378
 8011210:	08016318 	.word	0x08016318
 8011214:	08016994 	.word	0x08016994
 8011218:	2000aa58 	.word	0x2000aa58
 801121c:	2000a968 	.word	0x2000a968

08011220 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b08c      	sub	sp, #48	; 0x30
 8011224:	af02      	add	r7, sp, #8
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3326      	adds	r3, #38	; 0x26
 8011230:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011232:	23ff      	movs	r3, #255	; 0xff
 8011234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011238:	2300      	movs	r3, #0
 801123a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	68f9      	ldr	r1, [r7, #12]
 8011242:	4618      	mov	r0, r3
 8011244:	f000 fe0e 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8011248:	4603      	mov	r3, r0
 801124a:	2b00      	cmp	r3, #0
 801124c:	d10c      	bne.n	8011268 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011256:	2be0      	cmp	r3, #224	; 0xe0
 8011258:	d006      	beq.n	8011268 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d003      	beq.n	8011268 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d102      	bne.n	801126e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011268:	f06f 030f 	mvn.w	r3, #15
 801126c:	e101      	b.n	8011472 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801126e:	68fa      	ldr	r2, [r7, #12]
 8011270:	2101      	movs	r1, #1
 8011272:	68b8      	ldr	r0, [r7, #8]
 8011274:	f7ff fb60 	bl	8010938 <etharp_find_entry>
 8011278:	4603      	mov	r3, r0
 801127a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801127c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011280:	2b00      	cmp	r3, #0
 8011282:	da02      	bge.n	801128a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011284:	8a7b      	ldrh	r3, [r7, #18]
 8011286:	b25b      	sxtb	r3, r3
 8011288:	e0f3      	b.n	8011472 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801128a:	8a7b      	ldrh	r3, [r7, #18]
 801128c:	2b7e      	cmp	r3, #126	; 0x7e
 801128e:	d906      	bls.n	801129e <etharp_query+0x7e>
 8011290:	4b7a      	ldr	r3, [pc, #488]	; (801147c <etharp_query+0x25c>)
 8011292:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011296:	497a      	ldr	r1, [pc, #488]	; (8011480 <etharp_query+0x260>)
 8011298:	487a      	ldr	r0, [pc, #488]	; (8011484 <etharp_query+0x264>)
 801129a:	f001 fec9 	bl	8013030 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801129e:	8a7b      	ldrh	r3, [r7, #18]
 80112a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80112a2:	7c7a      	ldrb	r2, [r7, #17]
 80112a4:	4978      	ldr	r1, [pc, #480]	; (8011488 <etharp_query+0x268>)
 80112a6:	4613      	mov	r3, r2
 80112a8:	005b      	lsls	r3, r3, #1
 80112aa:	4413      	add	r3, r2
 80112ac:	00db      	lsls	r3, r3, #3
 80112ae:	440b      	add	r3, r1
 80112b0:	3314      	adds	r3, #20
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d115      	bne.n	80112e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80112b8:	2301      	movs	r3, #1
 80112ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80112bc:	7c7a      	ldrb	r2, [r7, #17]
 80112be:	4972      	ldr	r1, [pc, #456]	; (8011488 <etharp_query+0x268>)
 80112c0:	4613      	mov	r3, r2
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	4413      	add	r3, r2
 80112c6:	00db      	lsls	r3, r3, #3
 80112c8:	440b      	add	r3, r1
 80112ca:	3314      	adds	r3, #20
 80112cc:	2201      	movs	r2, #1
 80112ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80112d0:	7c7a      	ldrb	r2, [r7, #17]
 80112d2:	496d      	ldr	r1, [pc, #436]	; (8011488 <etharp_query+0x268>)
 80112d4:	4613      	mov	r3, r2
 80112d6:	005b      	lsls	r3, r3, #1
 80112d8:	4413      	add	r3, r2
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	440b      	add	r3, r1
 80112de:	3308      	adds	r3, #8
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80112e4:	7c7a      	ldrb	r2, [r7, #17]
 80112e6:	4968      	ldr	r1, [pc, #416]	; (8011488 <etharp_query+0x268>)
 80112e8:	4613      	mov	r3, r2
 80112ea:	005b      	lsls	r3, r3, #1
 80112ec:	4413      	add	r3, r2
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	440b      	add	r3, r1
 80112f2:	3314      	adds	r3, #20
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d011      	beq.n	801131e <etharp_query+0xfe>
 80112fa:	7c7a      	ldrb	r2, [r7, #17]
 80112fc:	4962      	ldr	r1, [pc, #392]	; (8011488 <etharp_query+0x268>)
 80112fe:	4613      	mov	r3, r2
 8011300:	005b      	lsls	r3, r3, #1
 8011302:	4413      	add	r3, r2
 8011304:	00db      	lsls	r3, r3, #3
 8011306:	440b      	add	r3, r1
 8011308:	3314      	adds	r3, #20
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d806      	bhi.n	801131e <etharp_query+0xfe>
 8011310:	4b5a      	ldr	r3, [pc, #360]	; (801147c <etharp_query+0x25c>)
 8011312:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011316:	495d      	ldr	r1, [pc, #372]	; (801148c <etharp_query+0x26c>)
 8011318:	485a      	ldr	r0, [pc, #360]	; (8011484 <etharp_query+0x264>)
 801131a:	f001 fe89 	bl	8013030 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801131e:	6a3b      	ldr	r3, [r7, #32]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d102      	bne.n	801132a <etharp_query+0x10a>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d10c      	bne.n	8011344 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801132a:	68b9      	ldr	r1, [r7, #8]
 801132c:	68f8      	ldr	r0, [r7, #12]
 801132e:	f000 f963 	bl	80115f8 <etharp_request>
 8011332:	4603      	mov	r3, r0
 8011334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d102      	bne.n	8011344 <etharp_query+0x124>
      return result;
 801133e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011342:	e096      	b.n	8011472 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d106      	bne.n	8011358 <etharp_query+0x138>
 801134a:	4b4c      	ldr	r3, [pc, #304]	; (801147c <etharp_query+0x25c>)
 801134c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011350:	494f      	ldr	r1, [pc, #316]	; (8011490 <etharp_query+0x270>)
 8011352:	484c      	ldr	r0, [pc, #304]	; (8011484 <etharp_query+0x264>)
 8011354:	f001 fe6c 	bl	8013030 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011358:	7c7a      	ldrb	r2, [r7, #17]
 801135a:	494b      	ldr	r1, [pc, #300]	; (8011488 <etharp_query+0x268>)
 801135c:	4613      	mov	r3, r2
 801135e:	005b      	lsls	r3, r3, #1
 8011360:	4413      	add	r3, r2
 8011362:	00db      	lsls	r3, r3, #3
 8011364:	440b      	add	r3, r1
 8011366:	3314      	adds	r3, #20
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	2b01      	cmp	r3, #1
 801136c:	d917      	bls.n	801139e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801136e:	4a49      	ldr	r2, [pc, #292]	; (8011494 <etharp_query+0x274>)
 8011370:	7c7b      	ldrb	r3, [r7, #17]
 8011372:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011374:	7c7a      	ldrb	r2, [r7, #17]
 8011376:	4613      	mov	r3, r2
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	4413      	add	r3, r2
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	3308      	adds	r3, #8
 8011380:	4a41      	ldr	r2, [pc, #260]	; (8011488 <etharp_query+0x268>)
 8011382:	4413      	add	r3, r2
 8011384:	3304      	adds	r3, #4
 8011386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801138a:	9200      	str	r2, [sp, #0]
 801138c:	697a      	ldr	r2, [r7, #20]
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f001 fd05 	bl	8012da0 <ethernet_output>
 8011396:	4603      	mov	r3, r0
 8011398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801139c:	e067      	b.n	801146e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801139e:	7c7a      	ldrb	r2, [r7, #17]
 80113a0:	4939      	ldr	r1, [pc, #228]	; (8011488 <etharp_query+0x268>)
 80113a2:	4613      	mov	r3, r2
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	4413      	add	r3, r2
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	440b      	add	r3, r1
 80113ac:	3314      	adds	r3, #20
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d15c      	bne.n	801146e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80113b4:	2300      	movs	r3, #0
 80113b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80113bc:	e01c      	b.n	80113f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80113be:	69fb      	ldr	r3, [r7, #28]
 80113c0:	895a      	ldrh	r2, [r3, #10]
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	891b      	ldrh	r3, [r3, #8]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d10a      	bne.n	80113e0 <etharp_query+0x1c0>
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d006      	beq.n	80113e0 <etharp_query+0x1c0>
 80113d2:	4b2a      	ldr	r3, [pc, #168]	; (801147c <etharp_query+0x25c>)
 80113d4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80113d8:	492f      	ldr	r1, [pc, #188]	; (8011498 <etharp_query+0x278>)
 80113da:	482a      	ldr	r0, [pc, #168]	; (8011484 <etharp_query+0x264>)
 80113dc:	f001 fe28 	bl	8013030 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80113e0:	69fb      	ldr	r3, [r7, #28]
 80113e2:	7b1b      	ldrb	r3, [r3, #12]
 80113e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <etharp_query+0x1d2>
        copy_needed = 1;
 80113ec:	2301      	movs	r3, #1
 80113ee:	61bb      	str	r3, [r7, #24]
        break;
 80113f0:	e005      	b.n	80113fe <etharp_query+0x1de>
      }
      p = p->next;
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d1df      	bne.n	80113be <etharp_query+0x19e>
    }
    if (copy_needed) {
 80113fe:	69bb      	ldr	r3, [r7, #24]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d007      	beq.n	8011414 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	f44f 7120 	mov.w	r1, #640	; 0x280
 801140a:	200e      	movs	r0, #14
 801140c:	f7f8 fe30 	bl	800a070 <pbuf_clone>
 8011410:	61f8      	str	r0, [r7, #28]
 8011412:	e004      	b.n	801141e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011418:	69f8      	ldr	r0, [r7, #28]
 801141a:	f7f8 fc5d 	bl	8009cd8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d021      	beq.n	8011468 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011424:	7c7a      	ldrb	r2, [r7, #17]
 8011426:	4918      	ldr	r1, [pc, #96]	; (8011488 <etharp_query+0x268>)
 8011428:	4613      	mov	r3, r2
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	4413      	add	r3, r2
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	440b      	add	r3, r1
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00a      	beq.n	801144e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011438:	7c7a      	ldrb	r2, [r7, #17]
 801143a:	4913      	ldr	r1, [pc, #76]	; (8011488 <etharp_query+0x268>)
 801143c:	4613      	mov	r3, r2
 801143e:	005b      	lsls	r3, r3, #1
 8011440:	4413      	add	r3, r2
 8011442:	00db      	lsls	r3, r3, #3
 8011444:	440b      	add	r3, r1
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	4618      	mov	r0, r3
 801144a:	f7f8 fba5 	bl	8009b98 <pbuf_free>
      }
      arp_table[i].q = p;
 801144e:	7c7a      	ldrb	r2, [r7, #17]
 8011450:	490d      	ldr	r1, [pc, #52]	; (8011488 <etharp_query+0x268>)
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	440b      	add	r3, r1
 801145c:	69fa      	ldr	r2, [r7, #28]
 801145e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011460:	2300      	movs	r3, #0
 8011462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011466:	e002      	b.n	801146e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011468:	23ff      	movs	r3, #255	; 0xff
 801146a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801146e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011472:	4618      	mov	r0, r3
 8011474:	3728      	adds	r7, #40	; 0x28
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	080161d8 	.word	0x080161d8
 8011480:	08016384 	.word	0x08016384
 8011484:	08016250 	.word	0x08016250
 8011488:	2000a968 	.word	0x2000a968
 801148c:	08016394 	.word	0x08016394
 8011490:	08016378 	.word	0x08016378
 8011494:	2000aa58 	.word	0x2000aa58
 8011498:	080163bc 	.word	0x080163bc

0801149c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b08a      	sub	sp, #40	; 0x28
 80114a0:	af02      	add	r7, sp, #8
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d106      	bne.n	80114c2 <etharp_raw+0x26>
 80114b4:	4b3a      	ldr	r3, [pc, #232]	; (80115a0 <etharp_raw+0x104>)
 80114b6:	f240 4257 	movw	r2, #1111	; 0x457
 80114ba:	493a      	ldr	r1, [pc, #232]	; (80115a4 <etharp_raw+0x108>)
 80114bc:	483a      	ldr	r0, [pc, #232]	; (80115a8 <etharp_raw+0x10c>)
 80114be:	f001 fdb7 	bl	8013030 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80114c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114c6:	211c      	movs	r1, #28
 80114c8:	200e      	movs	r0, #14
 80114ca:	f7f8 f881 	bl	80095d0 <pbuf_alloc>
 80114ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d102      	bne.n	80114dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80114d6:	f04f 33ff 	mov.w	r3, #4294967295
 80114da:	e05d      	b.n	8011598 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	895b      	ldrh	r3, [r3, #10]
 80114e0:	2b1b      	cmp	r3, #27
 80114e2:	d806      	bhi.n	80114f2 <etharp_raw+0x56>
 80114e4:	4b2e      	ldr	r3, [pc, #184]	; (80115a0 <etharp_raw+0x104>)
 80114e6:	f240 4262 	movw	r2, #1122	; 0x462
 80114ea:	4930      	ldr	r1, [pc, #192]	; (80115ac <etharp_raw+0x110>)
 80114ec:	482e      	ldr	r0, [pc, #184]	; (80115a8 <etharp_raw+0x10c>)
 80114ee:	f001 fd9f 	bl	8013030 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80114f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f6 ffee 	bl	80084dc <lwip_htons>
 8011500:	4603      	mov	r3, r0
 8011502:	461a      	mov	r2, r3
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801150e:	2b06      	cmp	r3, #6
 8011510:	d006      	beq.n	8011520 <etharp_raw+0x84>
 8011512:	4b23      	ldr	r3, [pc, #140]	; (80115a0 <etharp_raw+0x104>)
 8011514:	f240 4269 	movw	r2, #1129	; 0x469
 8011518:	4925      	ldr	r1, [pc, #148]	; (80115b0 <etharp_raw+0x114>)
 801151a:	4823      	ldr	r0, [pc, #140]	; (80115a8 <etharp_raw+0x10c>)
 801151c:	f001 fd88 	bl	8013030 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	3308      	adds	r3, #8
 8011524:	2206      	movs	r2, #6
 8011526:	6839      	ldr	r1, [r7, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f001 fe5c 	bl	80131e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	3312      	adds	r3, #18
 8011532:	2206      	movs	r2, #6
 8011534:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011536:	4618      	mov	r0, r3
 8011538:	f001 fe55 	bl	80131e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	330e      	adds	r3, #14
 8011540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011542:	6812      	ldr	r2, [r2, #0]
 8011544:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	3318      	adds	r3, #24
 801154a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801154c:	6812      	ldr	r2, [r2, #0]
 801154e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	2200      	movs	r2, #0
 8011554:	701a      	strb	r2, [r3, #0]
 8011556:	2200      	movs	r2, #0
 8011558:	f042 0201 	orr.w	r2, r2, #1
 801155c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	2200      	movs	r2, #0
 8011562:	f042 0208 	orr.w	r2, r2, #8
 8011566:	709a      	strb	r2, [r3, #2]
 8011568:	2200      	movs	r2, #0
 801156a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	2206      	movs	r2, #6
 8011570:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	2204      	movs	r2, #4
 8011576:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011578:	f640 0306 	movw	r3, #2054	; 0x806
 801157c:	9300      	str	r3, [sp, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	68ba      	ldr	r2, [r7, #8]
 8011582:	69b9      	ldr	r1, [r7, #24]
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f001 fc0b 	bl	8012da0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801158a:	69b8      	ldr	r0, [r7, #24]
 801158c:	f7f8 fb04 	bl	8009b98 <pbuf_free>
  p = NULL;
 8011590:	2300      	movs	r3, #0
 8011592:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011594:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3720      	adds	r7, #32
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	080161d8 	.word	0x080161d8
 80115a4:	08016328 	.word	0x08016328
 80115a8:	08016250 	.word	0x08016250
 80115ac:	080163d8 	.word	0x080163d8
 80115b0:	0801640c 	.word	0x0801640c

080115b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b088      	sub	sp, #32
 80115b8:	af04      	add	r7, sp, #16
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80115d0:	2201      	movs	r2, #1
 80115d2:	9203      	str	r2, [sp, #12]
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	9202      	str	r2, [sp, #8]
 80115d8:	4a06      	ldr	r2, [pc, #24]	; (80115f4 <etharp_request_dst+0x40>)
 80115da:	9201      	str	r2, [sp, #4]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	4603      	mov	r3, r0
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff ff5a 	bl	801149c <etharp_raw>
 80115e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	0801699c 	.word	0x0801699c

080115f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011602:	4a05      	ldr	r2, [pc, #20]	; (8011618 <etharp_request+0x20>)
 8011604:	6839      	ldr	r1, [r7, #0]
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff ffd4 	bl	80115b4 <etharp_request_dst>
 801160c:	4603      	mov	r3, r0
}
 801160e:	4618      	mov	r0, r3
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	08016994 	.word	0x08016994

0801161c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b08e      	sub	sp, #56	; 0x38
 8011620:	af04      	add	r7, sp, #16
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011626:	4b79      	ldr	r3, [pc, #484]	; (801180c <icmp_input+0x1f0>)
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	f003 030f 	and.w	r3, r3, #15
 8011634:	b2db      	uxtb	r3, r3
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	b2db      	uxtb	r3, r3
 801163a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801163c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801163e:	2b13      	cmp	r3, #19
 8011640:	f240 80cd 	bls.w	80117de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	895b      	ldrh	r3, [r3, #10]
 8011648:	2b03      	cmp	r3, #3
 801164a:	f240 80ca 	bls.w	80117e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011658:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801165c:	2b00      	cmp	r3, #0
 801165e:	f000 80b7 	beq.w	80117d0 <icmp_input+0x1b4>
 8011662:	2b08      	cmp	r3, #8
 8011664:	f040 80b7 	bne.w	80117d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011668:	4b69      	ldr	r3, [pc, #420]	; (8011810 <icmp_input+0x1f4>)
 801166a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801166c:	4b67      	ldr	r3, [pc, #412]	; (801180c <icmp_input+0x1f0>)
 801166e:	695b      	ldr	r3, [r3, #20]
 8011670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011674:	2be0      	cmp	r3, #224	; 0xe0
 8011676:	f000 80bb 	beq.w	80117f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801167a:	4b64      	ldr	r3, [pc, #400]	; (801180c <icmp_input+0x1f0>)
 801167c:	695b      	ldr	r3, [r3, #20]
 801167e:	4a63      	ldr	r2, [pc, #396]	; (801180c <icmp_input+0x1f0>)
 8011680:	6812      	ldr	r2, [r2, #0]
 8011682:	4611      	mov	r1, r2
 8011684:	4618      	mov	r0, r3
 8011686:	f000 fbed 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 801168a:	4603      	mov	r3, r0
 801168c:	2b00      	cmp	r3, #0
 801168e:	f040 80b1 	bne.w	80117f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	891b      	ldrh	r3, [r3, #8]
 8011696:	2b07      	cmp	r3, #7
 8011698:	f240 80a5 	bls.w	80117e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801169c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801169e:	330e      	adds	r3, #14
 80116a0:	4619      	mov	r1, r3
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f7f8 f9e2 	bl	8009a6c <pbuf_add_header>
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d04b      	beq.n	8011746 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	891a      	ldrh	r2, [r3, #8]
 80116b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116b4:	4413      	add	r3, r2
 80116b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	891b      	ldrh	r3, [r3, #8]
 80116bc:	8b7a      	ldrh	r2, [r7, #26]
 80116be:	429a      	cmp	r2, r3
 80116c0:	f0c0 809a 	bcc.w	80117f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80116c4:	8b7b      	ldrh	r3, [r7, #26]
 80116c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ca:	4619      	mov	r1, r3
 80116cc:	200e      	movs	r0, #14
 80116ce:	f7f7 ff7f 	bl	80095d0 <pbuf_alloc>
 80116d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f000 8090 	beq.w	80117fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	895b      	ldrh	r3, [r3, #10]
 80116e0:	461a      	mov	r2, r3
 80116e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116e4:	3308      	adds	r3, #8
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d203      	bcs.n	80116f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80116ea:	6978      	ldr	r0, [r7, #20]
 80116ec:	f7f8 fa54 	bl	8009b98 <pbuf_free>
          goto icmperr;
 80116f0:	e085      	b.n	80117fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80116f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116fa:	4618      	mov	r0, r3
 80116fc:	f001 fd73 	bl	80131e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011702:	4619      	mov	r1, r3
 8011704:	6978      	ldr	r0, [r7, #20]
 8011706:	f7f8 f9c1 	bl	8009a8c <pbuf_remove_header>
 801170a:	4603      	mov	r3, r0
 801170c:	2b00      	cmp	r3, #0
 801170e:	d009      	beq.n	8011724 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011710:	4b40      	ldr	r3, [pc, #256]	; (8011814 <icmp_input+0x1f8>)
 8011712:	22b6      	movs	r2, #182	; 0xb6
 8011714:	4940      	ldr	r1, [pc, #256]	; (8011818 <icmp_input+0x1fc>)
 8011716:	4841      	ldr	r0, [pc, #260]	; (801181c <icmp_input+0x200>)
 8011718:	f001 fc8a 	bl	8013030 <iprintf>
          pbuf_free(r);
 801171c:	6978      	ldr	r0, [r7, #20]
 801171e:	f7f8 fa3b 	bl	8009b98 <pbuf_free>
          goto icmperr;
 8011722:	e06c      	b.n	80117fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011724:	6879      	ldr	r1, [r7, #4]
 8011726:	6978      	ldr	r0, [r7, #20]
 8011728:	f7f8 fb5e 	bl	8009de8 <pbuf_copy>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d003      	beq.n	801173a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011732:	6978      	ldr	r0, [r7, #20]
 8011734:	f7f8 fa30 	bl	8009b98 <pbuf_free>
          goto icmperr;
 8011738:	e061      	b.n	80117fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f7f8 fa2c 	bl	8009b98 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	607b      	str	r3, [r7, #4]
 8011744:	e00f      	b.n	8011766 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011748:	330e      	adds	r3, #14
 801174a:	4619      	mov	r1, r3
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7f8 f99d 	bl	8009a8c <pbuf_remove_header>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d006      	beq.n	8011766 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011758:	4b2e      	ldr	r3, [pc, #184]	; (8011814 <icmp_input+0x1f8>)
 801175a:	22c7      	movs	r2, #199	; 0xc7
 801175c:	4930      	ldr	r1, [pc, #192]	; (8011820 <icmp_input+0x204>)
 801175e:	482f      	ldr	r0, [pc, #188]	; (801181c <icmp_input+0x200>)
 8011760:	f001 fc66 	bl	8013030 <iprintf>
          goto icmperr;
 8011764:	e04b      	b.n	80117fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801176c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801176e:	4619      	mov	r1, r3
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7f8 f97b 	bl	8009a6c <pbuf_add_header>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d12b      	bne.n	80117d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801178a:	4b20      	ldr	r3, [pc, #128]	; (801180c <icmp_input+0x1f0>)
 801178c:	691a      	ldr	r2, [r3, #16]
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	2200      	movs	r2, #0
 8011796:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	2200      	movs	r2, #0
 801179c:	709a      	strb	r2, [r3, #2]
 801179e:	2200      	movs	r2, #0
 80117a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	22ff      	movs	r2, #255	; 0xff
 80117a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2200      	movs	r2, #0
 80117ac:	729a      	strb	r2, [r3, #10]
 80117ae:	2200      	movs	r2, #0
 80117b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	9302      	str	r3, [sp, #8]
 80117b6:	2301      	movs	r3, #1
 80117b8:	9301      	str	r3, [sp, #4]
 80117ba:	2300      	movs	r3, #0
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	23ff      	movs	r3, #255	; 0xff
 80117c0:	2200      	movs	r2, #0
 80117c2:	69f9      	ldr	r1, [r7, #28]
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f000 fa75 	bl	8011cb4 <ip4_output_if>
 80117ca:	4603      	mov	r3, r0
 80117cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80117ce:	e001      	b.n	80117d4 <icmp_input+0x1b8>
      break;
 80117d0:	bf00      	nop
 80117d2:	e000      	b.n	80117d6 <icmp_input+0x1ba>
      break;
 80117d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7f8 f9de 	bl	8009b98 <pbuf_free>
  return;
 80117dc:	e013      	b.n	8011806 <icmp_input+0x1ea>
    goto lenerr;
 80117de:	bf00      	nop
 80117e0:	e002      	b.n	80117e8 <icmp_input+0x1cc>
    goto lenerr;
 80117e2:	bf00      	nop
 80117e4:	e000      	b.n	80117e8 <icmp_input+0x1cc>
        goto lenerr;
 80117e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7f8 f9d5 	bl	8009b98 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80117ee:	e00a      	b.n	8011806 <icmp_input+0x1ea>
        goto icmperr;
 80117f0:	bf00      	nop
 80117f2:	e004      	b.n	80117fe <icmp_input+0x1e2>
        goto icmperr;
 80117f4:	bf00      	nop
 80117f6:	e002      	b.n	80117fe <icmp_input+0x1e2>
          goto icmperr;
 80117f8:	bf00      	nop
 80117fa:	e000      	b.n	80117fe <icmp_input+0x1e2>
          goto icmperr;
 80117fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7f8 f9ca 	bl	8009b98 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011804:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011806:	3728      	adds	r7, #40	; 0x28
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	200051d8 	.word	0x200051d8
 8011810:	200051ec 	.word	0x200051ec
 8011814:	08016450 	.word	0x08016450
 8011818:	08016488 	.word	0x08016488
 801181c:	080164c0 	.word	0x080164c0
 8011820:	080164e8 	.word	0x080164e8

08011824 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	460b      	mov	r3, r1
 801182e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011830:	78fb      	ldrb	r3, [r7, #3]
 8011832:	461a      	mov	r2, r3
 8011834:	2103      	movs	r1, #3
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f814 	bl	8011864 <icmp_send_response>
}
 801183c:	bf00      	nop
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b082      	sub	sp, #8
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	460b      	mov	r3, r1
 801184e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011850:	78fb      	ldrb	r3, [r7, #3]
 8011852:	461a      	mov	r2, r3
 8011854:	210b      	movs	r1, #11
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f000 f804 	bl	8011864 <icmp_send_response>
}
 801185c:	bf00      	nop
 801185e:	3708      	adds	r7, #8
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b08c      	sub	sp, #48	; 0x30
 8011868:	af04      	add	r7, sp, #16
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	460b      	mov	r3, r1
 801186e:	70fb      	strb	r3, [r7, #3]
 8011870:	4613      	mov	r3, r2
 8011872:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011874:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011878:	2124      	movs	r1, #36	; 0x24
 801187a:	2022      	movs	r0, #34	; 0x22
 801187c:	f7f7 fea8 	bl	80095d0 <pbuf_alloc>
 8011880:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d04c      	beq.n	8011922 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	895b      	ldrh	r3, [r3, #10]
 801188c:	2b23      	cmp	r3, #35	; 0x23
 801188e:	d806      	bhi.n	801189e <icmp_send_response+0x3a>
 8011890:	4b26      	ldr	r3, [pc, #152]	; (801192c <icmp_send_response+0xc8>)
 8011892:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011896:	4926      	ldr	r1, [pc, #152]	; (8011930 <icmp_send_response+0xcc>)
 8011898:	4826      	ldr	r0, [pc, #152]	; (8011934 <icmp_send_response+0xd0>)
 801189a:	f001 fbc9 	bl	8013030 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	78fa      	ldrb	r2, [r7, #3]
 80118ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	78ba      	ldrb	r2, [r7, #2]
 80118b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	2200      	movs	r2, #0
 80118ba:	711a      	strb	r2, [r3, #4]
 80118bc:	2200      	movs	r2, #0
 80118be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	2200      	movs	r2, #0
 80118c4:	719a      	strb	r2, [r3, #6]
 80118c6:	2200      	movs	r2, #0
 80118c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	f103 0008 	add.w	r0, r3, #8
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	221c      	movs	r2, #28
 80118d8:	4619      	mov	r1, r3
 80118da:	f001 fc84 	bl	80131e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80118de:	69bb      	ldr	r3, [r7, #24]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80118e4:	f107 030c 	add.w	r3, r7, #12
 80118e8:	4618      	mov	r0, r3
 80118ea:	f000 f825 	bl	8011938 <ip4_route>
 80118ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d011      	beq.n	801191a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	2200      	movs	r2, #0
 80118fa:	709a      	strb	r2, [r3, #2]
 80118fc:	2200      	movs	r2, #0
 80118fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011900:	f107 020c 	add.w	r2, r7, #12
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	9302      	str	r3, [sp, #8]
 8011908:	2301      	movs	r3, #1
 801190a:	9301      	str	r3, [sp, #4]
 801190c:	2300      	movs	r3, #0
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	23ff      	movs	r3, #255	; 0xff
 8011912:	2100      	movs	r1, #0
 8011914:	69f8      	ldr	r0, [r7, #28]
 8011916:	f000 f9cd 	bl	8011cb4 <ip4_output_if>
  }
  pbuf_free(q);
 801191a:	69f8      	ldr	r0, [r7, #28]
 801191c:	f7f8 f93c 	bl	8009b98 <pbuf_free>
 8011920:	e000      	b.n	8011924 <icmp_send_response+0xc0>
    return;
 8011922:	bf00      	nop
}
 8011924:	3720      	adds	r7, #32
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	08016450 	.word	0x08016450
 8011930:	0801651c 	.word	0x0801651c
 8011934:	080164c0 	.word	0x080164c0

08011938 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011938:	b480      	push	{r7}
 801193a:	b085      	sub	sp, #20
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011940:	4b33      	ldr	r3, [pc, #204]	; (8011a10 <ip4_route+0xd8>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	60fb      	str	r3, [r7, #12]
 8011946:	e036      	b.n	80119b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801194e:	f003 0301 	and.w	r3, r3, #1
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d02b      	beq.n	80119b0 <ip4_route+0x78>
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801195e:	089b      	lsrs	r3, r3, #2
 8011960:	f003 0301 	and.w	r3, r3, #1
 8011964:	b2db      	uxtb	r3, r3
 8011966:	2b00      	cmp	r3, #0
 8011968:	d022      	beq.n	80119b0 <ip4_route+0x78>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	3304      	adds	r3, #4
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d01d      	beq.n	80119b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	3304      	adds	r3, #4
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	405a      	eors	r2, r3
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	3308      	adds	r3, #8
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4013      	ands	r3, r2
 8011988:	2b00      	cmp	r3, #0
 801198a:	d101      	bne.n	8011990 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	e038      	b.n	8011a02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011996:	f003 0302 	and.w	r3, r3, #2
 801199a:	2b00      	cmp	r3, #0
 801199c:	d108      	bne.n	80119b0 <ip4_route+0x78>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	330c      	adds	r3, #12
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d101      	bne.n	80119b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	e028      	b.n	8011a02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	60fb      	str	r3, [r7, #12]
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d1c5      	bne.n	8011948 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80119bc:	4b15      	ldr	r3, [pc, #84]	; (8011a14 <ip4_route+0xdc>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d01a      	beq.n	80119fa <ip4_route+0xc2>
 80119c4:	4b13      	ldr	r3, [pc, #76]	; (8011a14 <ip4_route+0xdc>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119cc:	f003 0301 	and.w	r3, r3, #1
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d012      	beq.n	80119fa <ip4_route+0xc2>
 80119d4:	4b0f      	ldr	r3, [pc, #60]	; (8011a14 <ip4_route+0xdc>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119dc:	f003 0304 	and.w	r3, r3, #4
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00a      	beq.n	80119fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80119e4:	4b0b      	ldr	r3, [pc, #44]	; (8011a14 <ip4_route+0xdc>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	3304      	adds	r3, #4
 80119ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d004      	beq.n	80119fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	2b7f      	cmp	r3, #127	; 0x7f
 80119f8:	d101      	bne.n	80119fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80119fa:	2300      	movs	r3, #0
 80119fc:	e001      	b.n	8011a02 <ip4_route+0xca>
  }

  return netif_default;
 80119fe:	4b05      	ldr	r3, [pc, #20]	; (8011a14 <ip4_route+0xdc>)
 8011a00:	681b      	ldr	r3, [r3, #0]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3714      	adds	r7, #20
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop
 8011a10:	2000a8fc 	.word	0x2000a8fc
 8011a14:	2000a900 	.word	0x2000a900

08011a18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a26:	f003 0301 	and.w	r3, r3, #1
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d016      	beq.n	8011a5e <ip4_input_accept+0x46>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	3304      	adds	r3, #4
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d011      	beq.n	8011a5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011a3a:	4b0b      	ldr	r3, [pc, #44]	; (8011a68 <ip4_input_accept+0x50>)
 8011a3c:	695a      	ldr	r2, [r3, #20]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3304      	adds	r3, #4
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d008      	beq.n	8011a5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011a48:	4b07      	ldr	r3, [pc, #28]	; (8011a68 <ip4_input_accept+0x50>)
 8011a4a:	695b      	ldr	r3, [r3, #20]
 8011a4c:	6879      	ldr	r1, [r7, #4]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 fa08 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8011a54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d001      	beq.n	8011a5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	e000      	b.n	8011a60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011a5e:	2300      	movs	r3, #0
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	200051d8 	.word	0x200051d8

08011a6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b086      	sub	sp, #24
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	091b      	lsrs	r3, r3, #4
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	2b04      	cmp	r3, #4
 8011a86:	d004      	beq.n	8011a92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7f8 f885 	bl	8009b98 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	e107      	b.n	8011ca2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	f003 030f 	and.w	r3, r3, #15
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	885b      	ldrh	r3, [r3, #2]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7f6 fd17 	bl	80084dc <lwip_htons>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	891b      	ldrh	r3, [r3, #8]
 8011ab6:	89ba      	ldrh	r2, [r7, #12]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d204      	bcs.n	8011ac6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011abc:	89bb      	ldrh	r3, [r7, #12]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7f7 fee3 	bl	800988c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	895b      	ldrh	r3, [r3, #10]
 8011aca:	89fa      	ldrh	r2, [r7, #14]
 8011acc:	429a      	cmp	r2, r3
 8011ace:	d807      	bhi.n	8011ae0 <ip4_input+0x74>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	891b      	ldrh	r3, [r3, #8]
 8011ad4:	89ba      	ldrh	r2, [r7, #12]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d802      	bhi.n	8011ae0 <ip4_input+0x74>
 8011ada:	89fb      	ldrh	r3, [r7, #14]
 8011adc:	2b13      	cmp	r3, #19
 8011ade:	d804      	bhi.n	8011aea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011ae0:	6878      	ldr	r0, [r7, #4]
 8011ae2:	f7f8 f859 	bl	8009b98 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e0db      	b.n	8011ca2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	691b      	ldr	r3, [r3, #16]
 8011aee:	4a6f      	ldr	r2, [pc, #444]	; (8011cac <ip4_input+0x240>)
 8011af0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	4a6d      	ldr	r2, [pc, #436]	; (8011cac <ip4_input+0x240>)
 8011af8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011afa:	4b6c      	ldr	r3, [pc, #432]	; (8011cac <ip4_input+0x240>)
 8011afc:	695b      	ldr	r3, [r3, #20]
 8011afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b02:	2be0      	cmp	r3, #224	; 0xe0
 8011b04:	d112      	bne.n	8011b2c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b0c:	f003 0301 	and.w	r3, r3, #1
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d007      	beq.n	8011b26 <ip4_input+0xba>
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	3304      	adds	r3, #4
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d002      	beq.n	8011b26 <ip4_input+0xba>
      netif = inp;
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	613b      	str	r3, [r7, #16]
 8011b24:	e02a      	b.n	8011b7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011b26:	2300      	movs	r3, #0
 8011b28:	613b      	str	r3, [r7, #16]
 8011b2a:	e027      	b.n	8011b7c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011b2c:	6838      	ldr	r0, [r7, #0]
 8011b2e:	f7ff ff73 	bl	8011a18 <ip4_input_accept>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d002      	beq.n	8011b3e <ip4_input+0xd2>
      netif = inp;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	613b      	str	r3, [r7, #16]
 8011b3c:	e01e      	b.n	8011b7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011b42:	4b5a      	ldr	r3, [pc, #360]	; (8011cac <ip4_input+0x240>)
 8011b44:	695b      	ldr	r3, [r3, #20]
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b7f      	cmp	r3, #127	; 0x7f
 8011b4a:	d017      	beq.n	8011b7c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011b4c:	4b58      	ldr	r3, [pc, #352]	; (8011cb0 <ip4_input+0x244>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	613b      	str	r3, [r7, #16]
 8011b52:	e00e      	b.n	8011b72 <ip4_input+0x106>
          if (netif == inp) {
 8011b54:	693a      	ldr	r2, [r7, #16]
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d006      	beq.n	8011b6a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011b5c:	6938      	ldr	r0, [r7, #16]
 8011b5e:	f7ff ff5b 	bl	8011a18 <ip4_input_accept>
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d108      	bne.n	8011b7a <ip4_input+0x10e>
 8011b68:	e000      	b.n	8011b6c <ip4_input+0x100>
            continue;
 8011b6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	613b      	str	r3, [r7, #16]
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d1ed      	bne.n	8011b54 <ip4_input+0xe8>
 8011b78:	e000      	b.n	8011b7c <ip4_input+0x110>
            break;
 8011b7a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011b7c:	4b4b      	ldr	r3, [pc, #300]	; (8011cac <ip4_input+0x240>)
 8011b7e:	691b      	ldr	r3, [r3, #16]
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f000 f96e 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d105      	bne.n	8011b9a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011b8e:	4b47      	ldr	r3, [pc, #284]	; (8011cac <ip4_input+0x240>)
 8011b90:	691b      	ldr	r3, [r3, #16]
 8011b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011b96:	2be0      	cmp	r3, #224	; 0xe0
 8011b98:	d104      	bne.n	8011ba4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7f7 fffc 	bl	8009b98 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e07e      	b.n	8011ca2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d104      	bne.n	8011bb4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7f7 fff4 	bl	8009b98 <pbuf_free>
    return ERR_OK;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	e076      	b.n	8011ca2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	88db      	ldrh	r3, [r3, #6]
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	461a      	mov	r2, r3
 8011bbc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011bc0:	4013      	ands	r3, r2
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d00b      	beq.n	8011bde <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f000 fd22 	bl	8012610 <ip4_reass>
 8011bcc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d101      	bne.n	8011bd8 <ip4_input+0x16c>
      return ERR_OK;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	e064      	b.n	8011ca2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011bde:	4a33      	ldr	r2, [pc, #204]	; (8011cac <ip4_input+0x240>)
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011be4:	4a31      	ldr	r2, [pc, #196]	; (8011cac <ip4_input+0x240>)
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011bea:	4a30      	ldr	r2, [pc, #192]	; (8011cac <ip4_input+0x240>)
 8011bec:	697b      	ldr	r3, [r7, #20]
 8011bee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f003 030f 	and.w	r3, r3, #15
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	4b2a      	ldr	r3, [pc, #168]	; (8011cac <ip4_input+0x240>)
 8011c02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011c04:	89fb      	ldrh	r3, [r7, #14]
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7f7 ff3f 	bl	8009a8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	7a5b      	ldrb	r3, [r3, #9]
 8011c12:	2b11      	cmp	r3, #17
 8011c14:	d006      	beq.n	8011c24 <ip4_input+0x1b8>
 8011c16:	2b11      	cmp	r3, #17
 8011c18:	dc13      	bgt.n	8011c42 <ip4_input+0x1d6>
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d00c      	beq.n	8011c38 <ip4_input+0x1cc>
 8011c1e:	2b06      	cmp	r3, #6
 8011c20:	d005      	beq.n	8011c2e <ip4_input+0x1c2>
 8011c22:	e00e      	b.n	8011c42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011c24:	6839      	ldr	r1, [r7, #0]
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f7fe fc68 	bl	80104fc <udp_input>
        break;
 8011c2c:	e026      	b.n	8011c7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7fa f889 	bl	800bd48 <tcp_input>
        break;
 8011c36:	e021      	b.n	8011c7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011c38:	6839      	ldr	r1, [r7, #0]
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7ff fcee 	bl	801161c <icmp_input>
        break;
 8011c40:	e01c      	b.n	8011c7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011c42:	4b1a      	ldr	r3, [pc, #104]	; (8011cac <ip4_input+0x240>)
 8011c44:	695b      	ldr	r3, [r3, #20]
 8011c46:	6939      	ldr	r1, [r7, #16]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 f90b 	bl	8011e64 <ip4_addr_isbroadcast_u32>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10f      	bne.n	8011c74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c54:	4b15      	ldr	r3, [pc, #84]	; (8011cac <ip4_input+0x240>)
 8011c56:	695b      	ldr	r3, [r3, #20]
 8011c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011c5c:	2be0      	cmp	r3, #224	; 0xe0
 8011c5e:	d009      	beq.n	8011c74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011c64:	4619      	mov	r1, r3
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7f7 ff83 	bl	8009b72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011c6c:	2102      	movs	r1, #2
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f7ff fdd8 	bl	8011824 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f7f7 ff8f 	bl	8009b98 <pbuf_free>
        break;
 8011c7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011c7c:	4b0b      	ldr	r3, [pc, #44]	; (8011cac <ip4_input+0x240>)
 8011c7e:	2200      	movs	r2, #0
 8011c80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011c82:	4b0a      	ldr	r3, [pc, #40]	; (8011cac <ip4_input+0x240>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011c88:	4b08      	ldr	r3, [pc, #32]	; (8011cac <ip4_input+0x240>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011c8e:	4b07      	ldr	r3, [pc, #28]	; (8011cac <ip4_input+0x240>)
 8011c90:	2200      	movs	r2, #0
 8011c92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011c94:	4b05      	ldr	r3, [pc, #20]	; (8011cac <ip4_input+0x240>)
 8011c96:	2200      	movs	r2, #0
 8011c98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011c9a:	4b04      	ldr	r3, [pc, #16]	; (8011cac <ip4_input+0x240>)
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3718      	adds	r7, #24
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	200051d8 	.word	0x200051d8
 8011cb0:	2000a8fc 	.word	0x2000a8fc

08011cb4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b08a      	sub	sp, #40	; 0x28
 8011cb8:	af04      	add	r7, sp, #16
 8011cba:	60f8      	str	r0, [r7, #12]
 8011cbc:	60b9      	str	r1, [r7, #8]
 8011cbe:	607a      	str	r2, [r7, #4]
 8011cc0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d009      	beq.n	8011ce0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d003      	beq.n	8011cda <ip4_output_if+0x26>
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d102      	bne.n	8011ce0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cdc:	3304      	adds	r3, #4
 8011cde:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011ce0:	78fa      	ldrb	r2, [r7, #3]
 8011ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce4:	9302      	str	r3, [sp, #8]
 8011ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cea:	9301      	str	r3, [sp, #4]
 8011cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011cf0:	9300      	str	r3, [sp, #0]
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	6979      	ldr	r1, [r7, #20]
 8011cf8:	68f8      	ldr	r0, [r7, #12]
 8011cfa:	f000 f805 	bl	8011d08 <ip4_output_if_src>
 8011cfe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3718      	adds	r7, #24
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b088      	sub	sp, #32
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	7b9b      	ldrb	r3, [r3, #14]
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d006      	beq.n	8011d2c <ip4_output_if_src+0x24>
 8011d1e:	4b4b      	ldr	r3, [pc, #300]	; (8011e4c <ip4_output_if_src+0x144>)
 8011d20:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011d24:	494a      	ldr	r1, [pc, #296]	; (8011e50 <ip4_output_if_src+0x148>)
 8011d26:	484b      	ldr	r0, [pc, #300]	; (8011e54 <ip4_output_if_src+0x14c>)
 8011d28:	f001 f982 	bl	8013030 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d060      	beq.n	8011df4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011d32:	2314      	movs	r3, #20
 8011d34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011d36:	2114      	movs	r1, #20
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f7f7 fe97 	bl	8009a6c <pbuf_add_header>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d002      	beq.n	8011d4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011d44:	f06f 0301 	mvn.w	r3, #1
 8011d48:	e07c      	b.n	8011e44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	895b      	ldrh	r3, [r3, #10]
 8011d54:	2b13      	cmp	r3, #19
 8011d56:	d806      	bhi.n	8011d66 <ip4_output_if_src+0x5e>
 8011d58:	4b3c      	ldr	r3, [pc, #240]	; (8011e4c <ip4_output_if_src+0x144>)
 8011d5a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011d5e:	493e      	ldr	r1, [pc, #248]	; (8011e58 <ip4_output_if_src+0x150>)
 8011d60:	483c      	ldr	r0, [pc, #240]	; (8011e54 <ip4_output_if_src+0x14c>)
 8011d62:	f001 f965 	bl	8013030 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	78fa      	ldrb	r2, [r7, #3]
 8011d6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011d72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681a      	ldr	r2, [r3, #0]
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011d7c:	8b7b      	ldrh	r3, [r7, #26]
 8011d7e:	089b      	lsrs	r3, r3, #2
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011d94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	891b      	ldrh	r3, [r3, #8]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7f6 fb9e 	bl	80084dc <lwip_htons>
 8011da0:	4603      	mov	r3, r0
 8011da2:	461a      	mov	r2, r3
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	2200      	movs	r2, #0
 8011dac:	719a      	strb	r2, [r3, #6]
 8011dae:	2200      	movs	r2, #0
 8011db0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011db2:	4b2a      	ldr	r3, [pc, #168]	; (8011e5c <ip4_output_if_src+0x154>)
 8011db4:	881b      	ldrh	r3, [r3, #0]
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7f6 fb90 	bl	80084dc <lwip_htons>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	69fb      	ldr	r3, [r7, #28]
 8011dc2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011dc4:	4b25      	ldr	r3, [pc, #148]	; (8011e5c <ip4_output_if_src+0x154>)
 8011dc6:	881b      	ldrh	r3, [r3, #0]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	b29a      	uxth	r2, r3
 8011dcc:	4b23      	ldr	r3, [pc, #140]	; (8011e5c <ip4_output_if_src+0x154>)
 8011dce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d104      	bne.n	8011de0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011dd6:	4b22      	ldr	r3, [pc, #136]	; (8011e60 <ip4_output_if_src+0x158>)
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	60da      	str	r2, [r3, #12]
 8011dde:	e003      	b.n	8011de8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	2200      	movs	r2, #0
 8011dec:	729a      	strb	r2, [r3, #10]
 8011dee:	2200      	movs	r2, #0
 8011df0:	72da      	strb	r2, [r3, #11]
 8011df2:	e00f      	b.n	8011e14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	895b      	ldrh	r3, [r3, #10]
 8011df8:	2b13      	cmp	r3, #19
 8011dfa:	d802      	bhi.n	8011e02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011dfc:	f06f 0301 	mvn.w	r3, #1
 8011e00:	e020      	b.n	8011e44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	691b      	ldr	r3, [r3, #16]
 8011e0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011e0e:	f107 0314 	add.w	r3, r7, #20
 8011e12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00c      	beq.n	8011e36 <ip4_output_if_src+0x12e>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	891a      	ldrh	r2, [r3, #8]
 8011e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e24:	429a      	cmp	r2, r3
 8011e26:	d906      	bls.n	8011e36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f000 fde3 	bl	80129f8 <ip4_frag>
 8011e32:	4603      	mov	r3, r0
 8011e34:	e006      	b.n	8011e44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	68f9      	ldr	r1, [r7, #12]
 8011e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e40:	4798      	blx	r3
 8011e42:	4603      	mov	r3, r0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3720      	adds	r7, #32
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	08016548 	.word	0x08016548
 8011e50:	0801657c 	.word	0x0801657c
 8011e54:	08016588 	.word	0x08016588
 8011e58:	080165b0 	.word	0x080165b0
 8011e5c:	2000aa5a 	.word	0x2000aa5a
 8011e60:	08016990 	.word	0x08016990

08011e64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b085      	sub	sp, #20
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e78:	d002      	beq.n	8011e80 <ip4_addr_isbroadcast_u32+0x1c>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d101      	bne.n	8011e84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011e80:	2301      	movs	r3, #1
 8011e82:	e02a      	b.n	8011eda <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e8a:	f003 0302 	and.w	r3, r3, #2
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d101      	bne.n	8011e96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011e92:	2300      	movs	r3, #0
 8011e94:	e021      	b.n	8011eda <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	3304      	adds	r3, #4
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	687a      	ldr	r2, [r7, #4]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d101      	bne.n	8011ea6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e019      	b.n	8011eda <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	405a      	eors	r2, r3
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	3308      	adds	r3, #8
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4013      	ands	r3, r2
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10d      	bne.n	8011ed8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	3308      	adds	r3, #8
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	43da      	mvns	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	3308      	adds	r3, #8
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d101      	bne.n	8011ed8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e000      	b.n	8011eda <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011ed8:	2300      	movs	r3, #0
  }
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
	...

08011ee8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8011ef0:	2210      	movs	r2, #16
 8011ef2:	4904      	ldr	r1, [pc, #16]	; (8011f04 <ip4addr_ntoa+0x1c>)
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 f807 	bl	8011f08 <ip4addr_ntoa_r>
 8011efa:	4603      	mov	r3, r0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	2000aa5c 	.word	0x2000aa5c

08011f08 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b08d      	sub	sp, #52	; 0x34
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8011f14:	2300      	movs	r3, #0
 8011f16:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8011f22:	f107 0318 	add.w	r3, r7, #24
 8011f26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011f2e:	e058      	b.n	8011fe2 <ip4addr_ntoa_r+0xda>
    i = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	781a      	ldrb	r2, [r3, #0]
 8011f3a:	4b32      	ldr	r3, [pc, #200]	; (8012004 <ip4addr_ntoa_r+0xfc>)
 8011f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8011f40:	08d9      	lsrs	r1, r3, #3
 8011f42:	460b      	mov	r3, r1
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	440b      	add	r3, r1
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	781b      	ldrb	r3, [r3, #0]
 8011f52:	4a2c      	ldr	r2, [pc, #176]	; (8012004 <ip4addr_ntoa_r+0xfc>)
 8011f54:	fba2 2303 	umull	r2, r3, r2, r3
 8011f58:	08db      	lsrs	r3, r3, #3
 8011f5a:	b2da      	uxtb	r2, r3
 8011f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8011f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011f64:	1c5a      	adds	r2, r3, #1
 8011f66:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	7ffb      	ldrb	r3, [r7, #31]
 8011f6e:	3330      	adds	r3, #48	; 0x30
 8011f70:	b2da      	uxtb	r2, r3
 8011f72:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8011f76:	443b      	add	r3, r7
 8011f78:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8011f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d1d8      	bne.n	8011f36 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8011f84:	e011      	b.n	8011faa <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8011f86:	6a3b      	ldr	r3, [r7, #32]
 8011f88:	1c5a      	adds	r2, r3, #1
 8011f8a:	623a      	str	r2, [r7, #32]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	dc01      	bgt.n	8011f96 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8011f92:	2300      	movs	r3, #0
 8011f94:	e030      	b.n	8011ff8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8011f96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9c:	1c59      	adds	r1, r3, #1
 8011f9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011fa0:	3230      	adds	r2, #48	; 0x30
 8011fa2:	443a      	add	r2, r7
 8011fa4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8011fa8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8011faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011fae:	1e5a      	subs	r2, r3, #1
 8011fb0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d1e6      	bne.n	8011f86 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8011fb8:	6a3b      	ldr	r3, [r7, #32]
 8011fba:	1c5a      	adds	r2, r3, #1
 8011fbc:	623a      	str	r2, [r7, #32]
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	dc01      	bgt.n	8011fc8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	e017      	b.n	8011ff8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8011fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fca:	1c5a      	adds	r2, r3, #1
 8011fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011fce:	222e      	movs	r2, #46	; 0x2e
 8011fd0:	701a      	strb	r2, [r3, #0]
    ap++;
 8011fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8011fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fdc:	3301      	adds	r3, #1
 8011fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	d9a2      	bls.n	8011f30 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	3b01      	subs	r3, #1
 8011fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	701a      	strb	r2, [r3, #0]
  return buf;
 8011ff6:	68bb      	ldr	r3, [r7, #8]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3734      	adds	r7, #52	; 0x34
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr
 8012004:	cccccccd 	.word	0xcccccccd

08012008 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b084      	sub	sp, #16
 801200c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012012:	4b12      	ldr	r3, [pc, #72]	; (801205c <ip_reass_tmr+0x54>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012018:	e018      	b.n	801204c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	7fdb      	ldrb	r3, [r3, #31]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00b      	beq.n	801203a <ip_reass_tmr+0x32>
      r->timer--;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	7fdb      	ldrb	r3, [r3, #31]
 8012026:	3b01      	subs	r3, #1
 8012028:	b2da      	uxtb	r2, r3
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	60fb      	str	r3, [r7, #12]
 8012038:	e008      	b.n	801204c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012044:	68b9      	ldr	r1, [r7, #8]
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 f80a 	bl	8012060 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d1e3      	bne.n	801201a <ip_reass_tmr+0x12>
    }
  }
}
 8012052:	bf00      	nop
 8012054:	bf00      	nop
 8012056:	3710      	adds	r7, #16
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	2000aa6c 	.word	0x2000aa6c

08012060 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801206a:	2300      	movs	r3, #0
 801206c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801206e:	683a      	ldr	r2, [r7, #0]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	429a      	cmp	r2, r3
 8012074:	d105      	bne.n	8012082 <ip_reass_free_complete_datagram+0x22>
 8012076:	4b45      	ldr	r3, [pc, #276]	; (801218c <ip_reass_free_complete_datagram+0x12c>)
 8012078:	22ab      	movs	r2, #171	; 0xab
 801207a:	4945      	ldr	r1, [pc, #276]	; (8012190 <ip_reass_free_complete_datagram+0x130>)
 801207c:	4845      	ldr	r0, [pc, #276]	; (8012194 <ip_reass_free_complete_datagram+0x134>)
 801207e:	f000 ffd7 	bl	8013030 <iprintf>
  if (prev != NULL) {
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d00a      	beq.n	801209e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	429a      	cmp	r2, r3
 8012090:	d005      	beq.n	801209e <ip_reass_free_complete_datagram+0x3e>
 8012092:	4b3e      	ldr	r3, [pc, #248]	; (801218c <ip_reass_free_complete_datagram+0x12c>)
 8012094:	22ad      	movs	r2, #173	; 0xad
 8012096:	4940      	ldr	r1, [pc, #256]	; (8012198 <ip_reass_free_complete_datagram+0x138>)
 8012098:	483e      	ldr	r0, [pc, #248]	; (8012194 <ip_reass_free_complete_datagram+0x134>)
 801209a:	f000 ffc9 	bl	8013030 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	889b      	ldrh	r3, [r3, #4]
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d12a      	bne.n	8012106 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	6858      	ldr	r0, [r3, #4]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	3308      	adds	r3, #8
 80120c6:	2214      	movs	r2, #20
 80120c8:	4619      	mov	r1, r3
 80120ca:	f001 f88c 	bl	80131e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80120ce:	2101      	movs	r1, #1
 80120d0:	69b8      	ldr	r0, [r7, #24]
 80120d2:	f7ff fbb7 	bl	8011844 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80120d6:	69b8      	ldr	r0, [r7, #24]
 80120d8:	f7f7 fde6 	bl	8009ca8 <pbuf_clen>
 80120dc:	4603      	mov	r3, r0
 80120de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80120e0:	8bfa      	ldrh	r2, [r7, #30]
 80120e2:	8a7b      	ldrh	r3, [r7, #18]
 80120e4:	4413      	add	r3, r2
 80120e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120ea:	db05      	blt.n	80120f8 <ip_reass_free_complete_datagram+0x98>
 80120ec:	4b27      	ldr	r3, [pc, #156]	; (801218c <ip_reass_free_complete_datagram+0x12c>)
 80120ee:	22bc      	movs	r2, #188	; 0xbc
 80120f0:	492a      	ldr	r1, [pc, #168]	; (801219c <ip_reass_free_complete_datagram+0x13c>)
 80120f2:	4828      	ldr	r0, [pc, #160]	; (8012194 <ip_reass_free_complete_datagram+0x134>)
 80120f4:	f000 ff9c 	bl	8013030 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80120f8:	8bfa      	ldrh	r2, [r7, #30]
 80120fa:	8a7b      	ldrh	r3, [r7, #18]
 80120fc:	4413      	add	r3, r2
 80120fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012100:	69b8      	ldr	r0, [r7, #24]
 8012102:	f7f7 fd49 	bl	8009b98 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801210c:	e01f      	b.n	801214e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f7f7 fdc2 	bl	8009ca8 <pbuf_clen>
 8012124:	4603      	mov	r3, r0
 8012126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012128:	8bfa      	ldrh	r2, [r7, #30]
 801212a:	8a7b      	ldrh	r3, [r7, #18]
 801212c:	4413      	add	r3, r2
 801212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012132:	db05      	blt.n	8012140 <ip_reass_free_complete_datagram+0xe0>
 8012134:	4b15      	ldr	r3, [pc, #84]	; (801218c <ip_reass_free_complete_datagram+0x12c>)
 8012136:	22cc      	movs	r2, #204	; 0xcc
 8012138:	4918      	ldr	r1, [pc, #96]	; (801219c <ip_reass_free_complete_datagram+0x13c>)
 801213a:	4816      	ldr	r0, [pc, #88]	; (8012194 <ip_reass_free_complete_datagram+0x134>)
 801213c:	f000 ff78 	bl	8013030 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012140:	8bfa      	ldrh	r2, [r7, #30]
 8012142:	8a7b      	ldrh	r3, [r7, #18]
 8012144:	4413      	add	r3, r2
 8012146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012148:	68f8      	ldr	r0, [r7, #12]
 801214a:	f7f7 fd25 	bl	8009b98 <pbuf_free>
  while (p != NULL) {
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d1dc      	bne.n	801210e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012154:	6839      	ldr	r1, [r7, #0]
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 f8c2 	bl	80122e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801215c:	4b10      	ldr	r3, [pc, #64]	; (80121a0 <ip_reass_free_complete_datagram+0x140>)
 801215e:	881b      	ldrh	r3, [r3, #0]
 8012160:	8bfa      	ldrh	r2, [r7, #30]
 8012162:	429a      	cmp	r2, r3
 8012164:	d905      	bls.n	8012172 <ip_reass_free_complete_datagram+0x112>
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <ip_reass_free_complete_datagram+0x12c>)
 8012168:	22d2      	movs	r2, #210	; 0xd2
 801216a:	490e      	ldr	r1, [pc, #56]	; (80121a4 <ip_reass_free_complete_datagram+0x144>)
 801216c:	4809      	ldr	r0, [pc, #36]	; (8012194 <ip_reass_free_complete_datagram+0x134>)
 801216e:	f000 ff5f 	bl	8013030 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012172:	4b0b      	ldr	r3, [pc, #44]	; (80121a0 <ip_reass_free_complete_datagram+0x140>)
 8012174:	881a      	ldrh	r2, [r3, #0]
 8012176:	8bfb      	ldrh	r3, [r7, #30]
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	b29a      	uxth	r2, r3
 801217c:	4b08      	ldr	r3, [pc, #32]	; (80121a0 <ip_reass_free_complete_datagram+0x140>)
 801217e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012180:	8bfb      	ldrh	r3, [r7, #30]
}
 8012182:	4618      	mov	r0, r3
 8012184:	3720      	adds	r7, #32
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop
 801218c:	080165e0 	.word	0x080165e0
 8012190:	0801661c 	.word	0x0801661c
 8012194:	08016628 	.word	0x08016628
 8012198:	08016650 	.word	0x08016650
 801219c:	08016664 	.word	0x08016664
 80121a0:	2000aa70 	.word	0x2000aa70
 80121a4:	08016684 	.word	0x08016684

080121a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b08a      	sub	sp, #40	; 0x28
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80121b2:	2300      	movs	r3, #0
 80121b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80121b6:	2300      	movs	r3, #0
 80121b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80121ba:	2300      	movs	r3, #0
 80121bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80121be:	2300      	movs	r3, #0
 80121c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80121c2:	2300      	movs	r3, #0
 80121c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80121c6:	4b28      	ldr	r3, [pc, #160]	; (8012268 <ip_reass_remove_oldest_datagram+0xc0>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80121cc:	e030      	b.n	8012230 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80121ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d0:	695a      	ldr	r2, [r3, #20]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d10c      	bne.n	80121f4 <ip_reass_remove_oldest_datagram+0x4c>
 80121da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121dc:	699a      	ldr	r2, [r3, #24]
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	691b      	ldr	r3, [r3, #16]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d106      	bne.n	80121f4 <ip_reass_remove_oldest_datagram+0x4c>
 80121e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e8:	899a      	ldrh	r2, [r3, #12]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	889b      	ldrh	r3, [r3, #4]
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d014      	beq.n	801221e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	3301      	adds	r3, #1
 80121f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80121fa:	6a3b      	ldr	r3, [r7, #32]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d104      	bne.n	801220a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012202:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	61bb      	str	r3, [r7, #24]
 8012208:	e009      	b.n	801221e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	7fda      	ldrb	r2, [r3, #31]
 801220e:	6a3b      	ldr	r3, [r7, #32]
 8012210:	7fdb      	ldrb	r3, [r3, #31]
 8012212:	429a      	cmp	r2, r3
 8012214:	d803      	bhi.n	801221e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012218:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d001      	beq.n	801222a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012228:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	2b00      	cmp	r3, #0
 8012234:	d1cb      	bne.n	80121ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012236:	6a3b      	ldr	r3, [r7, #32]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d008      	beq.n	801224e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801223c:	69b9      	ldr	r1, [r7, #24]
 801223e:	6a38      	ldr	r0, [r7, #32]
 8012240:	f7ff ff0e 	bl	8012060 <ip_reass_free_complete_datagram>
 8012244:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012246:	697a      	ldr	r2, [r7, #20]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	4413      	add	r3, r2
 801224c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801224e:	697a      	ldr	r2, [r7, #20]
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	429a      	cmp	r2, r3
 8012254:	da02      	bge.n	801225c <ip_reass_remove_oldest_datagram+0xb4>
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	2b01      	cmp	r3, #1
 801225a:	dcac      	bgt.n	80121b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801225c:	697b      	ldr	r3, [r7, #20]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3728      	adds	r7, #40	; 0x28
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	2000aa6c 	.word	0x2000aa6c

0801226c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012276:	2004      	movs	r0, #4
 8012278:	f7f6 fda8 	bl	8008dcc <memp_malloc>
 801227c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d110      	bne.n	80122a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012284:	6839      	ldr	r1, [r7, #0]
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7ff ff8e 	bl	80121a8 <ip_reass_remove_oldest_datagram>
 801228c:	4602      	mov	r2, r0
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	4293      	cmp	r3, r2
 8012292:	dc03      	bgt.n	801229c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012294:	2004      	movs	r0, #4
 8012296:	f7f6 fd99 	bl	8008dcc <memp_malloc>
 801229a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d101      	bne.n	80122a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80122a2:	2300      	movs	r3, #0
 80122a4:	e016      	b.n	80122d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80122a6:	2220      	movs	r2, #32
 80122a8:	2100      	movs	r1, #0
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f000 ff25 	bl	80130fa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	220f      	movs	r2, #15
 80122b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80122b6:	4b09      	ldr	r3, [pc, #36]	; (80122dc <ip_reass_enqueue_new_datagram+0x70>)
 80122b8:	681a      	ldr	r2, [r3, #0]
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80122be:	4a07      	ldr	r2, [pc, #28]	; (80122dc <ip_reass_enqueue_new_datagram+0x70>)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	3308      	adds	r3, #8
 80122c8:	2214      	movs	r2, #20
 80122ca:	6879      	ldr	r1, [r7, #4]
 80122cc:	4618      	mov	r0, r3
 80122ce:	f000 ff8a 	bl	80131e6 <memcpy>
  return ipr;
 80122d2:	68fb      	ldr	r3, [r7, #12]
}
 80122d4:	4618      	mov	r0, r3
 80122d6:	3710      	adds	r7, #16
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	2000aa6c 	.word	0x2000aa6c

080122e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80122ea:	4b10      	ldr	r3, [pc, #64]	; (801232c <ip_reass_dequeue_datagram+0x4c>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	429a      	cmp	r2, r3
 80122f2:	d104      	bne.n	80122fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	4a0c      	ldr	r2, [pc, #48]	; (801232c <ip_reass_dequeue_datagram+0x4c>)
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	e00d      	b.n	801231a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d106      	bne.n	8012312 <ip_reass_dequeue_datagram+0x32>
 8012304:	4b0a      	ldr	r3, [pc, #40]	; (8012330 <ip_reass_dequeue_datagram+0x50>)
 8012306:	f240 1245 	movw	r2, #325	; 0x145
 801230a:	490a      	ldr	r1, [pc, #40]	; (8012334 <ip_reass_dequeue_datagram+0x54>)
 801230c:	480a      	ldr	r0, [pc, #40]	; (8012338 <ip_reass_dequeue_datagram+0x58>)
 801230e:	f000 fe8f 	bl	8013030 <iprintf>
    prev->next = ipr->next;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801231a:	6879      	ldr	r1, [r7, #4]
 801231c:	2004      	movs	r0, #4
 801231e:	f7f6 fdc5 	bl	8008eac <memp_free>
}
 8012322:	bf00      	nop
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	2000aa6c 	.word	0x2000aa6c
 8012330:	080165e0 	.word	0x080165e0
 8012334:	080166a8 	.word	0x080166a8
 8012338:	08016628 	.word	0x08016628

0801233c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b08c      	sub	sp, #48	; 0x30
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012348:	2300      	movs	r3, #0
 801234a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801234c:	2301      	movs	r3, #1
 801234e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012356:	69fb      	ldr	r3, [r7, #28]
 8012358:	885b      	ldrh	r3, [r3, #2]
 801235a:	b29b      	uxth	r3, r3
 801235c:	4618      	mov	r0, r3
 801235e:	f7f6 f8bd 	bl	80084dc <lwip_htons>
 8012362:	4603      	mov	r3, r0
 8012364:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012366:	69fb      	ldr	r3, [r7, #28]
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	f003 030f 	and.w	r3, r3, #15
 801236e:	b2db      	uxtb	r3, r3
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012374:	7e7b      	ldrb	r3, [r7, #25]
 8012376:	b29b      	uxth	r3, r3
 8012378:	8b7a      	ldrh	r2, [r7, #26]
 801237a:	429a      	cmp	r2, r3
 801237c:	d202      	bcs.n	8012384 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801237e:	f04f 33ff 	mov.w	r3, #4294967295
 8012382:	e135      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012384:	7e7b      	ldrb	r3, [r7, #25]
 8012386:	b29b      	uxth	r3, r3
 8012388:	8b7a      	ldrh	r2, [r7, #26]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	88db      	ldrh	r3, [r3, #6]
 8012392:	b29b      	uxth	r3, r3
 8012394:	4618      	mov	r0, r3
 8012396:	f7f6 f8a1 	bl	80084dc <lwip_htons>
 801239a:	4603      	mov	r3, r0
 801239c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80123ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ae:	2200      	movs	r2, #0
 80123b0:	701a      	strb	r2, [r3, #0]
 80123b2:	2200      	movs	r2, #0
 80123b4:	705a      	strb	r2, [r3, #1]
 80123b6:	2200      	movs	r2, #0
 80123b8:	709a      	strb	r2, [r3, #2]
 80123ba:	2200      	movs	r2, #0
 80123bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80123be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c0:	8afa      	ldrh	r2, [r7, #22]
 80123c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80123c4:	8afa      	ldrh	r2, [r7, #22]
 80123c6:	8b7b      	ldrh	r3, [r7, #26]
 80123c8:	4413      	add	r3, r2
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80123d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d2:	88db      	ldrh	r3, [r3, #6]
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	8afa      	ldrh	r2, [r7, #22]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d902      	bls.n	80123e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123dc:	f04f 33ff 	mov.w	r3, #4294967295
 80123e0:	e106      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	627b      	str	r3, [r7, #36]	; 0x24
 80123e8:	e068      	b.n	80124bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80123ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80123f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f2:	889b      	ldrh	r3, [r3, #4]
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	889b      	ldrh	r3, [r3, #4]
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d235      	bcs.n	801246c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012404:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	2b00      	cmp	r3, #0
 801240a:	d020      	beq.n	801244e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240e:	889b      	ldrh	r3, [r3, #4]
 8012410:	b29a      	uxth	r2, r3
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	88db      	ldrh	r3, [r3, #6]
 8012416:	b29b      	uxth	r3, r3
 8012418:	429a      	cmp	r2, r3
 801241a:	d307      	bcc.n	801242c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241e:	88db      	ldrh	r3, [r3, #6]
 8012420:	b29a      	uxth	r2, r3
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	889b      	ldrh	r3, [r3, #4]
 8012426:	b29b      	uxth	r3, r3
 8012428:	429a      	cmp	r2, r3
 801242a:	d902      	bls.n	8012432 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801242c:	f04f 33ff 	mov.w	r3, #4294967295
 8012430:	e0de      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012434:	68ba      	ldr	r2, [r7, #8]
 8012436:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243a:	88db      	ldrh	r3, [r3, #6]
 801243c:	b29a      	uxth	r2, r3
 801243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012440:	889b      	ldrh	r3, [r3, #4]
 8012442:	b29b      	uxth	r3, r3
 8012444:	429a      	cmp	r2, r3
 8012446:	d03d      	beq.n	80124c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012448:	2300      	movs	r3, #0
 801244a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801244c:	e03a      	b.n	80124c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012450:	88db      	ldrh	r3, [r3, #6]
 8012452:	b29a      	uxth	r2, r3
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	889b      	ldrh	r3, [r3, #4]
 8012458:	b29b      	uxth	r3, r3
 801245a:	429a      	cmp	r2, r3
 801245c:	d902      	bls.n	8012464 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801245e:	f04f 33ff 	mov.w	r3, #4294967295
 8012462:	e0c5      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	68ba      	ldr	r2, [r7, #8]
 8012468:	605a      	str	r2, [r3, #4]
      break;
 801246a:	e02b      	b.n	80124c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246e:	889b      	ldrh	r3, [r3, #4]
 8012470:	b29a      	uxth	r2, r3
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	889b      	ldrh	r3, [r3, #4]
 8012476:	b29b      	uxth	r3, r3
 8012478:	429a      	cmp	r2, r3
 801247a:	d102      	bne.n	8012482 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801247c:	f04f 33ff 	mov.w	r3, #4294967295
 8012480:	e0b6      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012484:	889b      	ldrh	r3, [r3, #4]
 8012486:	b29a      	uxth	r2, r3
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	88db      	ldrh	r3, [r3, #6]
 801248c:	b29b      	uxth	r3, r3
 801248e:	429a      	cmp	r2, r3
 8012490:	d202      	bcs.n	8012498 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012492:	f04f 33ff 	mov.w	r3, #4294967295
 8012496:	e0ab      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	2b00      	cmp	r3, #0
 801249c:	d009      	beq.n	80124b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a0:	88db      	ldrh	r3, [r3, #6]
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	889b      	ldrh	r3, [r3, #4]
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d001      	beq.n	80124b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80124ae:	2300      	movs	r3, #0
 80124b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d193      	bne.n	80123ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80124c2:	e000      	b.n	80124c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80124c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80124c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d12d      	bne.n	8012528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d01c      	beq.n	801250c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80124d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d4:	88db      	ldrh	r3, [r3, #6]
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124da:	889b      	ldrh	r3, [r3, #4]
 80124dc:	b29b      	uxth	r3, r3
 80124de:	429a      	cmp	r2, r3
 80124e0:	d906      	bls.n	80124f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80124e2:	4b45      	ldr	r3, [pc, #276]	; (80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80124e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80124e8:	4944      	ldr	r1, [pc, #272]	; (80125fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80124ea:	4845      	ldr	r0, [pc, #276]	; (8012600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80124ec:	f000 fda0 	bl	8013030 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80124f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f2:	68ba      	ldr	r2, [r7, #8]
 80124f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	88db      	ldrh	r3, [r3, #6]
 80124fa:	b29a      	uxth	r2, r3
 80124fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fe:	889b      	ldrh	r3, [r3, #4]
 8012500:	b29b      	uxth	r3, r3
 8012502:	429a      	cmp	r2, r3
 8012504:	d010      	beq.n	8012528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	623b      	str	r3, [r7, #32]
 801250a:	e00d      	b.n	8012528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d006      	beq.n	8012522 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012514:	4b38      	ldr	r3, [pc, #224]	; (80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012516:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801251a:	493a      	ldr	r1, [pc, #232]	; (8012604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801251c:	4838      	ldr	r0, [pc, #224]	; (8012600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801251e:	f000 fd87 	bl	8013030 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	68ba      	ldr	r2, [r7, #8]
 8012526:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d105      	bne.n	801253a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	7f9b      	ldrb	r3, [r3, #30]
 8012532:	f003 0301 	and.w	r3, r3, #1
 8012536:	2b00      	cmp	r3, #0
 8012538:	d059      	beq.n	80125ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801253a:	6a3b      	ldr	r3, [r7, #32]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d04f      	beq.n	80125e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d006      	beq.n	8012556 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	889b      	ldrh	r3, [r3, #4]
 8012550:	b29b      	uxth	r3, r3
 8012552:	2b00      	cmp	r3, #0
 8012554:	d002      	beq.n	801255c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012556:	2300      	movs	r3, #0
 8012558:	623b      	str	r3, [r7, #32]
 801255a:	e041      	b.n	80125e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012566:	e012      	b.n	801258e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012570:	88db      	ldrh	r3, [r3, #6]
 8012572:	b29a      	uxth	r2, r3
 8012574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012576:	889b      	ldrh	r3, [r3, #4]
 8012578:	b29b      	uxth	r3, r3
 801257a:	429a      	cmp	r2, r3
 801257c:	d002      	beq.n	8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	623b      	str	r3, [r7, #32]
            break;
 8012582:	e007      	b.n	8012594 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012586:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012590:	2b00      	cmp	r3, #0
 8012592:	d1e9      	bne.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d022      	beq.n	80125e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d106      	bne.n	80125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80125a2:	4b15      	ldr	r3, [pc, #84]	; (80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125a4:	f240 12df 	movw	r2, #479	; 0x1df
 80125a8:	4917      	ldr	r1, [pc, #92]	; (8012608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80125aa:	4815      	ldr	r0, [pc, #84]	; (8012600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125ac:	f000 fd40 	bl	8013030 <iprintf>
          LWIP_ASSERT("sanity check",
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125b8:	429a      	cmp	r2, r3
 80125ba:	d106      	bne.n	80125ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80125bc:	4b0e      	ldr	r3, [pc, #56]	; (80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80125c2:	4911      	ldr	r1, [pc, #68]	; (8012608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80125c4:	480e      	ldr	r0, [pc, #56]	; (8012600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125c6:	f000 fd33 	bl	8013030 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80125ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d006      	beq.n	80125e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80125d2:	4b09      	ldr	r3, [pc, #36]	; (80125f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80125d8:	490c      	ldr	r1, [pc, #48]	; (801260c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80125da:	4809      	ldr	r0, [pc, #36]	; (8012600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125dc:	f000 fd28 	bl	8013030 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	bf14      	ite	ne
 80125e6:	2301      	movne	r3, #1
 80125e8:	2300      	moveq	r3, #0
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	e000      	b.n	80125f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80125ee:	2300      	movs	r3, #0
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	3730      	adds	r7, #48	; 0x30
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}
 80125f8:	080165e0 	.word	0x080165e0
 80125fc:	080166c4 	.word	0x080166c4
 8012600:	08016628 	.word	0x08016628
 8012604:	080166e4 	.word	0x080166e4
 8012608:	0801671c 	.word	0x0801671c
 801260c:	0801672c 	.word	0x0801672c

08012610 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b08e      	sub	sp, #56	; 0x38
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	f003 030f 	and.w	r3, r3, #15
 8012626:	b2db      	uxtb	r3, r3
 8012628:	009b      	lsls	r3, r3, #2
 801262a:	b2db      	uxtb	r3, r3
 801262c:	2b14      	cmp	r3, #20
 801262e:	f040 8171 	bne.w	8012914 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012634:	88db      	ldrh	r3, [r3, #6]
 8012636:	b29b      	uxth	r3, r3
 8012638:	4618      	mov	r0, r3
 801263a:	f7f5 ff4f 	bl	80084dc <lwip_htons>
 801263e:	4603      	mov	r3, r0
 8012640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012644:	b29b      	uxth	r3, r3
 8012646:	00db      	lsls	r3, r3, #3
 8012648:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264c:	885b      	ldrh	r3, [r3, #2]
 801264e:	b29b      	uxth	r3, r3
 8012650:	4618      	mov	r0, r3
 8012652:	f7f5 ff43 	bl	80084dc <lwip_htons>
 8012656:	4603      	mov	r3, r0
 8012658:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265c:	781b      	ldrb	r3, [r3, #0]
 801265e:	f003 030f 	and.w	r3, r3, #15
 8012662:	b2db      	uxtb	r3, r3
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801266a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801266e:	b29b      	uxth	r3, r3
 8012670:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012672:	429a      	cmp	r2, r3
 8012674:	f0c0 8150 	bcc.w	8012918 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801267c:	b29b      	uxth	r3, r3
 801267e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7f7 fb0f 	bl	8009ca8 <pbuf_clen>
 801268a:	4603      	mov	r3, r0
 801268c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801268e:	4b8c      	ldr	r3, [pc, #560]	; (80128c0 <ip4_reass+0x2b0>)
 8012690:	881b      	ldrh	r3, [r3, #0]
 8012692:	461a      	mov	r2, r3
 8012694:	8c3b      	ldrh	r3, [r7, #32]
 8012696:	4413      	add	r3, r2
 8012698:	2b0a      	cmp	r3, #10
 801269a:	dd10      	ble.n	80126be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801269c:	8c3b      	ldrh	r3, [r7, #32]
 801269e:	4619      	mov	r1, r3
 80126a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126a2:	f7ff fd81 	bl	80121a8 <ip_reass_remove_oldest_datagram>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	f000 8137 	beq.w	801291c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80126ae:	4b84      	ldr	r3, [pc, #528]	; (80128c0 <ip4_reass+0x2b0>)
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	461a      	mov	r2, r3
 80126b4:	8c3b      	ldrh	r3, [r7, #32]
 80126b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80126b8:	2b0a      	cmp	r3, #10
 80126ba:	f300 812f 	bgt.w	801291c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80126be:	4b81      	ldr	r3, [pc, #516]	; (80128c4 <ip4_reass+0x2b4>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	633b      	str	r3, [r7, #48]	; 0x30
 80126c4:	e015      	b.n	80126f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80126c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c8:	695a      	ldr	r2, [r3, #20]
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d10c      	bne.n	80126ec <ip4_reass+0xdc>
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	699a      	ldr	r2, [r3, #24]
 80126d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d8:	691b      	ldr	r3, [r3, #16]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d106      	bne.n	80126ec <ip4_reass+0xdc>
 80126de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e0:	899a      	ldrh	r2, [r3, #12]
 80126e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e4:	889b      	ldrh	r3, [r3, #4]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d006      	beq.n	80126fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	633b      	str	r3, [r7, #48]	; 0x30
 80126f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d1e6      	bne.n	80126c6 <ip4_reass+0xb6>
 80126f8:	e000      	b.n	80126fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80126fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80126fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d109      	bne.n	8012716 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012702:	8c3b      	ldrh	r3, [r7, #32]
 8012704:	4619      	mov	r1, r3
 8012706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012708:	f7ff fdb0 	bl	801226c <ip_reass_enqueue_new_datagram>
 801270c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012710:	2b00      	cmp	r3, #0
 8012712:	d11c      	bne.n	801274e <ip4_reass+0x13e>
      goto nullreturn;
 8012714:	e105      	b.n	8012922 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012718:	88db      	ldrh	r3, [r3, #6]
 801271a:	b29b      	uxth	r3, r3
 801271c:	4618      	mov	r0, r3
 801271e:	f7f5 fedd 	bl	80084dc <lwip_htons>
 8012722:	4603      	mov	r3, r0
 8012724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012728:	2b00      	cmp	r3, #0
 801272a:	d110      	bne.n	801274e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272e:	89db      	ldrh	r3, [r3, #14]
 8012730:	4618      	mov	r0, r3
 8012732:	f7f5 fed3 	bl	80084dc <lwip_htons>
 8012736:	4603      	mov	r3, r0
 8012738:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801273c:	2b00      	cmp	r3, #0
 801273e:	d006      	beq.n	801274e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012742:	3308      	adds	r3, #8
 8012744:	2214      	movs	r2, #20
 8012746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012748:	4618      	mov	r0, r3
 801274a:	f000 fd4c 	bl	80131e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012750:	88db      	ldrh	r3, [r3, #6]
 8012752:	b29b      	uxth	r3, r3
 8012754:	f003 0320 	and.w	r3, r3, #32
 8012758:	2b00      	cmp	r3, #0
 801275a:	bf0c      	ite	eq
 801275c:	2301      	moveq	r3, #1
 801275e:	2300      	movne	r3, #0
 8012760:	b2db      	uxtb	r3, r3
 8012762:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d00e      	beq.n	8012788 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801276a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801276c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801276e:	4413      	add	r3, r2
 8012770:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012772:	8b7a      	ldrh	r2, [r7, #26]
 8012774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012776:	429a      	cmp	r2, r3
 8012778:	f0c0 80a0 	bcc.w	80128bc <ip4_reass+0x2ac>
 801277c:	8b7b      	ldrh	r3, [r7, #26]
 801277e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012782:	4293      	cmp	r3, r2
 8012784:	f200 809a 	bhi.w	80128bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012788:	69fa      	ldr	r2, [r7, #28]
 801278a:	6879      	ldr	r1, [r7, #4]
 801278c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801278e:	f7ff fdd5 	bl	801233c <ip_reass_chain_frag_into_datagram_and_validate>
 8012792:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801279a:	f000 809b 	beq.w	80128d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801279e:	4b48      	ldr	r3, [pc, #288]	; (80128c0 <ip4_reass+0x2b0>)
 80127a0:	881a      	ldrh	r2, [r3, #0]
 80127a2:	8c3b      	ldrh	r3, [r7, #32]
 80127a4:	4413      	add	r3, r2
 80127a6:	b29a      	uxth	r2, r3
 80127a8:	4b45      	ldr	r3, [pc, #276]	; (80128c0 <ip4_reass+0x2b0>)
 80127aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80127ac:	69fb      	ldr	r3, [r7, #28]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d00d      	beq.n	80127ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80127b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80127b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127b6:	4413      	add	r3, r2
 80127b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	8a7a      	ldrh	r2, [r7, #18]
 80127be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	7f9b      	ldrb	r3, [r3, #30]
 80127c4:	f043 0301 	orr.w	r3, r3, #1
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d171      	bne.n	80128b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80127d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d6:	8b9b      	ldrh	r3, [r3, #28]
 80127d8:	3314      	adds	r3, #20
 80127da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80127dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127de:	685b      	ldr	r3, [r3, #4]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80127e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	3308      	adds	r3, #8
 80127f2:	2214      	movs	r2, #20
 80127f4:	4619      	mov	r1, r3
 80127f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f8:	f000 fcf5 	bl	80131e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80127fc:	8a3b      	ldrh	r3, [r7, #16]
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f5 fe6c 	bl	80084dc <lwip_htons>
 8012804:	4603      	mov	r3, r0
 8012806:	461a      	mov	r2, r3
 8012808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280e:	2200      	movs	r2, #0
 8012810:	719a      	strb	r2, [r3, #6]
 8012812:	2200      	movs	r2, #0
 8012814:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012818:	2200      	movs	r2, #0
 801281a:	729a      	strb	r2, [r3, #10]
 801281c:	2200      	movs	r2, #0
 801281e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012826:	e00d      	b.n	8012844 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801282e:	2114      	movs	r1, #20
 8012830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012832:	f7f7 f92b 	bl	8009a8c <pbuf_remove_header>
      pbuf_cat(p, r);
 8012836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f7f7 fa6f 	bl	8009d1c <pbuf_cat>
      r = iprh->next_pbuf;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012846:	2b00      	cmp	r3, #0
 8012848:	d1ee      	bne.n	8012828 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801284a:	4b1e      	ldr	r3, [pc, #120]	; (80128c4 <ip4_reass+0x2b4>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012850:	429a      	cmp	r2, r3
 8012852:	d102      	bne.n	801285a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012854:	2300      	movs	r3, #0
 8012856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012858:	e010      	b.n	801287c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801285a:	4b1a      	ldr	r3, [pc, #104]	; (80128c4 <ip4_reass+0x2b4>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012860:	e007      	b.n	8012872 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012868:	429a      	cmp	r2, r3
 801286a:	d006      	beq.n	801287a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012874:	2b00      	cmp	r3, #0
 8012876:	d1f4      	bne.n	8012862 <ip4_reass+0x252>
 8012878:	e000      	b.n	801287c <ip4_reass+0x26c>
          break;
 801287a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801287c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801287e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012880:	f7ff fd2e 	bl	80122e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f7f7 fa0f 	bl	8009ca8 <pbuf_clen>
 801288a:	4603      	mov	r3, r0
 801288c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801288e:	4b0c      	ldr	r3, [pc, #48]	; (80128c0 <ip4_reass+0x2b0>)
 8012890:	881b      	ldrh	r3, [r3, #0]
 8012892:	8c3a      	ldrh	r2, [r7, #32]
 8012894:	429a      	cmp	r2, r3
 8012896:	d906      	bls.n	80128a6 <ip4_reass+0x296>
 8012898:	4b0b      	ldr	r3, [pc, #44]	; (80128c8 <ip4_reass+0x2b8>)
 801289a:	f240 229b 	movw	r2, #667	; 0x29b
 801289e:	490b      	ldr	r1, [pc, #44]	; (80128cc <ip4_reass+0x2bc>)
 80128a0:	480b      	ldr	r0, [pc, #44]	; (80128d0 <ip4_reass+0x2c0>)
 80128a2:	f000 fbc5 	bl	8013030 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80128a6:	4b06      	ldr	r3, [pc, #24]	; (80128c0 <ip4_reass+0x2b0>)
 80128a8:	881a      	ldrh	r2, [r3, #0]
 80128aa:	8c3b      	ldrh	r3, [r7, #32]
 80128ac:	1ad3      	subs	r3, r2, r3
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	4b03      	ldr	r3, [pc, #12]	; (80128c0 <ip4_reass+0x2b0>)
 80128b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	e038      	b.n	801292a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80128b8:	2300      	movs	r3, #0
 80128ba:	e036      	b.n	801292a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80128bc:	bf00      	nop
 80128be:	e00a      	b.n	80128d6 <ip4_reass+0x2c6>
 80128c0:	2000aa70 	.word	0x2000aa70
 80128c4:	2000aa6c 	.word	0x2000aa6c
 80128c8:	080165e0 	.word	0x080165e0
 80128cc:	08016750 	.word	0x08016750
 80128d0:	08016628 	.word	0x08016628
    goto nullreturn_ipr;
 80128d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d106      	bne.n	80128ea <ip4_reass+0x2da>
 80128dc:	4b15      	ldr	r3, [pc, #84]	; (8012934 <ip4_reass+0x324>)
 80128de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80128e2:	4915      	ldr	r1, [pc, #84]	; (8012938 <ip4_reass+0x328>)
 80128e4:	4815      	ldr	r0, [pc, #84]	; (801293c <ip4_reass+0x32c>)
 80128e6:	f000 fba3 	bl	8013030 <iprintf>
  if (ipr->p == NULL) {
 80128ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d116      	bne.n	8012920 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80128f2:	4b13      	ldr	r3, [pc, #76]	; (8012940 <ip4_reass+0x330>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d006      	beq.n	801290a <ip4_reass+0x2fa>
 80128fc:	4b0d      	ldr	r3, [pc, #52]	; (8012934 <ip4_reass+0x324>)
 80128fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012902:	4910      	ldr	r1, [pc, #64]	; (8012944 <ip4_reass+0x334>)
 8012904:	480d      	ldr	r0, [pc, #52]	; (801293c <ip4_reass+0x32c>)
 8012906:	f000 fb93 	bl	8013030 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801290a:	2100      	movs	r1, #0
 801290c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801290e:	f7ff fce7 	bl	80122e0 <ip_reass_dequeue_datagram>
 8012912:	e006      	b.n	8012922 <ip4_reass+0x312>
    goto nullreturn;
 8012914:	bf00      	nop
 8012916:	e004      	b.n	8012922 <ip4_reass+0x312>
    goto nullreturn;
 8012918:	bf00      	nop
 801291a:	e002      	b.n	8012922 <ip4_reass+0x312>
      goto nullreturn;
 801291c:	bf00      	nop
 801291e:	e000      	b.n	8012922 <ip4_reass+0x312>
  }

nullreturn:
 8012920:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f7f7 f938 	bl	8009b98 <pbuf_free>
  return NULL;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	3738      	adds	r7, #56	; 0x38
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	080165e0 	.word	0x080165e0
 8012938:	0801676c 	.word	0x0801676c
 801293c:	08016628 	.word	0x08016628
 8012940:	2000aa6c 	.word	0x2000aa6c
 8012944:	08016778 	.word	0x08016778

08012948 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801294c:	2005      	movs	r0, #5
 801294e:	f7f6 fa3d 	bl	8008dcc <memp_malloc>
 8012952:	4603      	mov	r3, r0
}
 8012954:	4618      	mov	r0, r3
 8012956:	bd80      	pop	{r7, pc}

08012958 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d106      	bne.n	8012974 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012966:	4b07      	ldr	r3, [pc, #28]	; (8012984 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012968:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801296c:	4906      	ldr	r1, [pc, #24]	; (8012988 <ip_frag_free_pbuf_custom_ref+0x30>)
 801296e:	4807      	ldr	r0, [pc, #28]	; (801298c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012970:	f000 fb5e 	bl	8013030 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012974:	6879      	ldr	r1, [r7, #4]
 8012976:	2005      	movs	r0, #5
 8012978:	f7f6 fa98 	bl	8008eac <memp_free>
}
 801297c:	bf00      	nop
 801297e:	3708      	adds	r7, #8
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	080165e0 	.word	0x080165e0
 8012988:	08016798 	.word	0x08016798
 801298c:	08016628 	.word	0x08016628

08012990 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d106      	bne.n	80129b0 <ipfrag_free_pbuf_custom+0x20>
 80129a2:	4b11      	ldr	r3, [pc, #68]	; (80129e8 <ipfrag_free_pbuf_custom+0x58>)
 80129a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80129a8:	4910      	ldr	r1, [pc, #64]	; (80129ec <ipfrag_free_pbuf_custom+0x5c>)
 80129aa:	4811      	ldr	r0, [pc, #68]	; (80129f0 <ipfrag_free_pbuf_custom+0x60>)
 80129ac:	f000 fb40 	bl	8013030 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d006      	beq.n	80129c6 <ipfrag_free_pbuf_custom+0x36>
 80129b8:	4b0b      	ldr	r3, [pc, #44]	; (80129e8 <ipfrag_free_pbuf_custom+0x58>)
 80129ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 80129be:	490d      	ldr	r1, [pc, #52]	; (80129f4 <ipfrag_free_pbuf_custom+0x64>)
 80129c0:	480b      	ldr	r0, [pc, #44]	; (80129f0 <ipfrag_free_pbuf_custom+0x60>)
 80129c2:	f000 fb35 	bl	8013030 <iprintf>
  if (pcr->original != NULL) {
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	695b      	ldr	r3, [r3, #20]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d004      	beq.n	80129d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	695b      	ldr	r3, [r3, #20]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7f7 f8e0 	bl	8009b98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80129d8:	68f8      	ldr	r0, [r7, #12]
 80129da:	f7ff ffbd 	bl	8012958 <ip_frag_free_pbuf_custom_ref>
}
 80129de:	bf00      	nop
 80129e0:	3710      	adds	r7, #16
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
 80129e6:	bf00      	nop
 80129e8:	080165e0 	.word	0x080165e0
 80129ec:	080167a4 	.word	0x080167a4
 80129f0:	08016628 	.word	0x08016628
 80129f4:	080167b0 	.word	0x080167b0

080129f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b094      	sub	sp, #80	; 0x50
 80129fc:	af02      	add	r7, sp, #8
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	60b9      	str	r1, [r7, #8]
 8012a02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012a04:	2300      	movs	r3, #0
 8012a06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012a0e:	3b14      	subs	r3, #20
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	da00      	bge.n	8012a16 <ip4_frag+0x1e>
 8012a14:	3307      	adds	r3, #7
 8012a16:	10db      	asrs	r3, r3, #3
 8012a18:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012a1a:	2314      	movs	r3, #20
 8012a1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a26:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	f003 030f 	and.w	r3, r3, #15
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	b2db      	uxtb	r3, r3
 8012a36:	2b14      	cmp	r3, #20
 8012a38:	d002      	beq.n	8012a40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012a3a:	f06f 0305 	mvn.w	r3, #5
 8012a3e:	e110      	b.n	8012c62 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	895b      	ldrh	r3, [r3, #10]
 8012a44:	2b13      	cmp	r3, #19
 8012a46:	d809      	bhi.n	8012a5c <ip4_frag+0x64>
 8012a48:	4b88      	ldr	r3, [pc, #544]	; (8012c6c <ip4_frag+0x274>)
 8012a4a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012a4e:	4988      	ldr	r1, [pc, #544]	; (8012c70 <ip4_frag+0x278>)
 8012a50:	4888      	ldr	r0, [pc, #544]	; (8012c74 <ip4_frag+0x27c>)
 8012a52:	f000 faed 	bl	8013030 <iprintf>
 8012a56:	f06f 0305 	mvn.w	r3, #5
 8012a5a:	e102      	b.n	8012c62 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a5e:	88db      	ldrh	r3, [r3, #6]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7f5 fd3a 	bl	80084dc <lwip_htons>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012a6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012a76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	891b      	ldrh	r3, [r3, #8]
 8012a82:	3b14      	subs	r3, #20
 8012a84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012a88:	e0e1      	b.n	8012c4e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012a8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a8c:	00db      	lsls	r3, r3, #3
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a94:	4293      	cmp	r3, r2
 8012a96:	bf28      	it	cs
 8012a98:	4613      	movcs	r3, r2
 8012a9a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012a9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aa0:	2114      	movs	r1, #20
 8012aa2:	200e      	movs	r0, #14
 8012aa4:	f7f6 fd94 	bl	80095d0 <pbuf_alloc>
 8012aa8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f000 80d5 	beq.w	8012c5c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab4:	895b      	ldrh	r3, [r3, #10]
 8012ab6:	2b13      	cmp	r3, #19
 8012ab8:	d806      	bhi.n	8012ac8 <ip4_frag+0xd0>
 8012aba:	4b6c      	ldr	r3, [pc, #432]	; (8012c6c <ip4_frag+0x274>)
 8012abc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012ac0:	496d      	ldr	r1, [pc, #436]	; (8012c78 <ip4_frag+0x280>)
 8012ac2:	486c      	ldr	r0, [pc, #432]	; (8012c74 <ip4_frag+0x27c>)
 8012ac4:	f000 fab4 	bl	8013030 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	2214      	movs	r2, #20
 8012ace:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f000 fb88 	bl	80131e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012adc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012ade:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012ae2:	e064      	b.n	8012bae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	895a      	ldrh	r2, [r3, #10]
 8012ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	895b      	ldrh	r3, [r3, #10]
 8012af2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d906      	bls.n	8012b06 <ip4_frag+0x10e>
 8012af8:	4b5c      	ldr	r3, [pc, #368]	; (8012c6c <ip4_frag+0x274>)
 8012afa:	f240 322d 	movw	r2, #813	; 0x32d
 8012afe:	495f      	ldr	r1, [pc, #380]	; (8012c7c <ip4_frag+0x284>)
 8012b00:	485c      	ldr	r0, [pc, #368]	; (8012c74 <ip4_frag+0x27c>)
 8012b02:	f000 fa95 	bl	8013030 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012b06:	8bfa      	ldrh	r2, [r7, #30]
 8012b08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	bf28      	it	cs
 8012b10:	4613      	movcs	r3, r2
 8012b12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012b16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d105      	bne.n	8012b2a <ip4_frag+0x132>
        poff = 0;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	60fb      	str	r3, [r7, #12]
        continue;
 8012b28:	e041      	b.n	8012bae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012b2a:	f7ff ff0d 	bl	8012948 <ip_frag_alloc_pbuf_custom_ref>
 8012b2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012b30:	69bb      	ldr	r3, [r7, #24]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d103      	bne.n	8012b3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012b36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b38:	f7f7 f82e 	bl	8009b98 <pbuf_free>
        goto memerr;
 8012b3c:	e08f      	b.n	8012c5e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012b3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012b44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b46:	4413      	add	r3, r2
 8012b48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012b4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012b50:	9201      	str	r2, [sp, #4]
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	4603      	mov	r3, r0
 8012b56:	2241      	movs	r2, #65	; 0x41
 8012b58:	2000      	movs	r0, #0
 8012b5a:	f7f6 fe63 	bl	8009824 <pbuf_alloced_custom>
 8012b5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d106      	bne.n	8012b74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012b66:	69b8      	ldr	r0, [r7, #24]
 8012b68:	f7ff fef6 	bl	8012958 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b6e:	f7f7 f813 	bl	8009b98 <pbuf_free>
        goto memerr;
 8012b72:	e074      	b.n	8012c5e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012b74:	68f8      	ldr	r0, [r7, #12]
 8012b76:	f7f7 f8af 	bl	8009cd8 <pbuf_ref>
      pcr->original = p;
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	68fa      	ldr	r2, [r7, #12]
 8012b7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	4a3f      	ldr	r2, [pc, #252]	; (8012c80 <ip4_frag+0x288>)
 8012b84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012b86:	6979      	ldr	r1, [r7, #20]
 8012b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b8a:	f7f7 f8c7 	bl	8009d1c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012b8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012b92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012b9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d004      	beq.n	8012bae <ip4_frag+0x1b6>
        poff = 0;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012bae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d196      	bne.n	8012ae4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012bb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012bb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012bbc:	4413      	add	r3, r2
 8012bbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012bc4:	f1a3 0213 	sub.w	r2, r3, #19
 8012bc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	bfcc      	ite	gt
 8012bd0:	2301      	movgt	r3, #1
 8012bd2:	2300      	movle	r3, #0
 8012bd4:	b2db      	uxtb	r3, r3
 8012bd6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012bd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012be0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012be2:	6a3b      	ldr	r3, [r7, #32]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d002      	beq.n	8012bee <ip4_frag+0x1f6>
 8012be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d003      	beq.n	8012bf6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012bee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012bf4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012bf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7f5 fc6f 	bl	80084dc <lwip_htons>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	461a      	mov	r2, r3
 8012c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012c06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c08:	3314      	adds	r3, #20
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7f5 fc65 	bl	80084dc <lwip_htons>
 8012c12:	4603      	mov	r3, r0
 8012c14:	461a      	mov	r2, r3
 8012c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	729a      	strb	r2, [r3, #10]
 8012c20:	2200      	movs	r2, #0
 8012c22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	695b      	ldr	r3, [r3, #20]
 8012c28:	687a      	ldr	r2, [r7, #4]
 8012c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c2c:	68b8      	ldr	r0, [r7, #8]
 8012c2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c32:	f7f6 ffb1 	bl	8009b98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012c36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012c42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012c46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c48:	4413      	add	r3, r2
 8012c4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f47f af19 	bne.w	8012a8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	e002      	b.n	8012c62 <ip4_frag+0x26a>
      goto memerr;
 8012c5c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3748      	adds	r7, #72	; 0x48
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	080165e0 	.word	0x080165e0
 8012c70:	080167bc 	.word	0x080167bc
 8012c74:	08016628 	.word	0x08016628
 8012c78:	080167d8 	.word	0x080167d8
 8012c7c:	080167f8 	.word	0x080167f8
 8012c80:	08012991 	.word	0x08012991

08012c84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b086      	sub	sp, #24
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012c8e:	230e      	movs	r3, #14
 8012c90:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	895b      	ldrh	r3, [r3, #10]
 8012c96:	2b0e      	cmp	r3, #14
 8012c98:	d96e      	bls.n	8012d78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	7bdb      	ldrb	r3, [r3, #15]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d106      	bne.n	8012cb0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ca8:	3301      	adds	r3, #1
 8012caa:	b2da      	uxtb	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	7b1a      	ldrb	r2, [r3, #12]
 8012cba:	7b5b      	ldrb	r3, [r3, #13]
 8012cbc:	021b      	lsls	r3, r3, #8
 8012cbe:	4313      	orrs	r3, r2
 8012cc0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012cc2:	693b      	ldr	r3, [r7, #16]
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	f003 0301 	and.w	r3, r3, #1
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d023      	beq.n	8012d16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d10f      	bne.n	8012cf6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012cd6:	693b      	ldr	r3, [r7, #16]
 8012cd8:	785b      	ldrb	r3, [r3, #1]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d11b      	bne.n	8012d16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012ce2:	2b5e      	cmp	r3, #94	; 0x5e
 8012ce4:	d117      	bne.n	8012d16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	7b5b      	ldrb	r3, [r3, #13]
 8012cea:	f043 0310 	orr.w	r3, r3, #16
 8012cee:	b2da      	uxtb	r2, r3
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	735a      	strb	r2, [r3, #13]
 8012cf4:	e00f      	b.n	8012d16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2206      	movs	r2, #6
 8012cfa:	4928      	ldr	r1, [pc, #160]	; (8012d9c <ethernet_input+0x118>)
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f000 f9ec 	bl	80130da <memcmp>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d106      	bne.n	8012d16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	7b5b      	ldrb	r3, [r3, #13]
 8012d0c:	f043 0308 	orr.w	r3, r3, #8
 8012d10:	b2da      	uxtb	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012d16:	89fb      	ldrh	r3, [r7, #14]
 8012d18:	2b08      	cmp	r3, #8
 8012d1a:	d003      	beq.n	8012d24 <ethernet_input+0xa0>
 8012d1c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012d20:	d014      	beq.n	8012d4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012d22:	e032      	b.n	8012d8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d2a:	f003 0308 	and.w	r3, r3, #8
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d024      	beq.n	8012d7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012d32:	8afb      	ldrh	r3, [r7, #22]
 8012d34:	4619      	mov	r1, r3
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7f6 fea8 	bl	8009a8c <pbuf_remove_header>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d11e      	bne.n	8012d80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012d42:	6839      	ldr	r1, [r7, #0]
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7fe fe91 	bl	8011a6c <ip4_input>
      break;
 8012d4a:	e013      	b.n	8012d74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d52:	f003 0308 	and.w	r3, r3, #8
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d014      	beq.n	8012d84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012d5a:	8afb      	ldrh	r3, [r7, #22]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7f6 fe94 	bl	8009a8c <pbuf_remove_header>
 8012d64:	4603      	mov	r3, r0
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d10e      	bne.n	8012d88 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012d6a:	6839      	ldr	r1, [r7, #0]
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f7fe f831 	bl	8010dd4 <etharp_input>
      break;
 8012d72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012d74:	2300      	movs	r3, #0
 8012d76:	e00c      	b.n	8012d92 <ethernet_input+0x10e>
    goto free_and_return;
 8012d78:	bf00      	nop
 8012d7a:	e006      	b.n	8012d8a <ethernet_input+0x106>
        goto free_and_return;
 8012d7c:	bf00      	nop
 8012d7e:	e004      	b.n	8012d8a <ethernet_input+0x106>
        goto free_and_return;
 8012d80:	bf00      	nop
 8012d82:	e002      	b.n	8012d8a <ethernet_input+0x106>
        goto free_and_return;
 8012d84:	bf00      	nop
 8012d86:	e000      	b.n	8012d8a <ethernet_input+0x106>
        goto free_and_return;
 8012d88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7f6 ff04 	bl	8009b98 <pbuf_free>
  return ERR_OK;
 8012d90:	2300      	movs	r3, #0
}
 8012d92:	4618      	mov	r0, r3
 8012d94:	3718      	adds	r7, #24
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	08016994 	.word	0x08016994

08012da0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b086      	sub	sp, #24
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
 8012dac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012dae:	8c3b      	ldrh	r3, [r7, #32]
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7f5 fb93 	bl	80084dc <lwip_htons>
 8012db6:	4603      	mov	r3, r0
 8012db8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012dba:	210e      	movs	r1, #14
 8012dbc:	68b8      	ldr	r0, [r7, #8]
 8012dbe:	f7f6 fe55 	bl	8009a6c <pbuf_add_header>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d125      	bne.n	8012e14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	685b      	ldr	r3, [r3, #4]
 8012dcc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	8afa      	ldrh	r2, [r7, #22]
 8012dd2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	2206      	movs	r2, #6
 8012dd8:	6839      	ldr	r1, [r7, #0]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 fa03 	bl	80131e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	3306      	adds	r3, #6
 8012de4:	2206      	movs	r2, #6
 8012de6:	6879      	ldr	r1, [r7, #4]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 f9fc 	bl	80131e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012df4:	2b06      	cmp	r3, #6
 8012df6:	d006      	beq.n	8012e06 <ethernet_output+0x66>
 8012df8:	4b0a      	ldr	r3, [pc, #40]	; (8012e24 <ethernet_output+0x84>)
 8012dfa:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012dfe:	490a      	ldr	r1, [pc, #40]	; (8012e28 <ethernet_output+0x88>)
 8012e00:	480a      	ldr	r0, [pc, #40]	; (8012e2c <ethernet_output+0x8c>)
 8012e02:	f000 f915 	bl	8013030 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	699b      	ldr	r3, [r3, #24]
 8012e0a:	68b9      	ldr	r1, [r7, #8]
 8012e0c:	68f8      	ldr	r0, [r7, #12]
 8012e0e:	4798      	blx	r3
 8012e10:	4603      	mov	r3, r0
 8012e12:	e002      	b.n	8012e1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012e14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012e16:	f06f 0301 	mvn.w	r3, #1
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3718      	adds	r7, #24
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	08016808 	.word	0x08016808
 8012e28:	08016840 	.word	0x08016840
 8012e2c:	08016874 	.word	0x08016874

08012e30 <rand>:
 8012e30:	4b16      	ldr	r3, [pc, #88]	; (8012e8c <rand+0x5c>)
 8012e32:	b510      	push	{r4, lr}
 8012e34:	681c      	ldr	r4, [r3, #0]
 8012e36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012e38:	b9b3      	cbnz	r3, 8012e68 <rand+0x38>
 8012e3a:	2018      	movs	r0, #24
 8012e3c:	f000 fa4c 	bl	80132d8 <malloc>
 8012e40:	4602      	mov	r2, r0
 8012e42:	6320      	str	r0, [r4, #48]	; 0x30
 8012e44:	b920      	cbnz	r0, 8012e50 <rand+0x20>
 8012e46:	4b12      	ldr	r3, [pc, #72]	; (8012e90 <rand+0x60>)
 8012e48:	4812      	ldr	r0, [pc, #72]	; (8012e94 <rand+0x64>)
 8012e4a:	2152      	movs	r1, #82	; 0x52
 8012e4c:	f000 f9da 	bl	8013204 <__assert_func>
 8012e50:	4911      	ldr	r1, [pc, #68]	; (8012e98 <rand+0x68>)
 8012e52:	4b12      	ldr	r3, [pc, #72]	; (8012e9c <rand+0x6c>)
 8012e54:	e9c0 1300 	strd	r1, r3, [r0]
 8012e58:	4b11      	ldr	r3, [pc, #68]	; (8012ea0 <rand+0x70>)
 8012e5a:	6083      	str	r3, [r0, #8]
 8012e5c:	230b      	movs	r3, #11
 8012e5e:	8183      	strh	r3, [r0, #12]
 8012e60:	2100      	movs	r1, #0
 8012e62:	2001      	movs	r0, #1
 8012e64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012e68:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012e6a:	480e      	ldr	r0, [pc, #56]	; (8012ea4 <rand+0x74>)
 8012e6c:	690b      	ldr	r3, [r1, #16]
 8012e6e:	694c      	ldr	r4, [r1, #20]
 8012e70:	4a0d      	ldr	r2, [pc, #52]	; (8012ea8 <rand+0x78>)
 8012e72:	4358      	muls	r0, r3
 8012e74:	fb02 0004 	mla	r0, r2, r4, r0
 8012e78:	fba3 3202 	umull	r3, r2, r3, r2
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	eb40 0002 	adc.w	r0, r0, r2
 8012e82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012e86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012e8a:	bd10      	pop	{r4, pc}
 8012e8c:	20000088 	.word	0x20000088
 8012e90:	080169a2 	.word	0x080169a2
 8012e94:	080169b9 	.word	0x080169b9
 8012e98:	abcd330e 	.word	0xabcd330e
 8012e9c:	e66d1234 	.word	0xe66d1234
 8012ea0:	0005deec 	.word	0x0005deec
 8012ea4:	5851f42d 	.word	0x5851f42d
 8012ea8:	4c957f2d 	.word	0x4c957f2d

08012eac <std>:
 8012eac:	2300      	movs	r3, #0
 8012eae:	b510      	push	{r4, lr}
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8012eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012eba:	6083      	str	r3, [r0, #8]
 8012ebc:	8181      	strh	r1, [r0, #12]
 8012ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8012ec0:	81c2      	strh	r2, [r0, #14]
 8012ec2:	6183      	str	r3, [r0, #24]
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	2208      	movs	r2, #8
 8012ec8:	305c      	adds	r0, #92	; 0x5c
 8012eca:	f000 f916 	bl	80130fa <memset>
 8012ece:	4b0d      	ldr	r3, [pc, #52]	; (8012f04 <std+0x58>)
 8012ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8012ed2:	4b0d      	ldr	r3, [pc, #52]	; (8012f08 <std+0x5c>)
 8012ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ed6:	4b0d      	ldr	r3, [pc, #52]	; (8012f0c <std+0x60>)
 8012ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012eda:	4b0d      	ldr	r3, [pc, #52]	; (8012f10 <std+0x64>)
 8012edc:	6323      	str	r3, [r4, #48]	; 0x30
 8012ede:	4b0d      	ldr	r3, [pc, #52]	; (8012f14 <std+0x68>)
 8012ee0:	6224      	str	r4, [r4, #32]
 8012ee2:	429c      	cmp	r4, r3
 8012ee4:	d006      	beq.n	8012ef4 <std+0x48>
 8012ee6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012eea:	4294      	cmp	r4, r2
 8012eec:	d002      	beq.n	8012ef4 <std+0x48>
 8012eee:	33d0      	adds	r3, #208	; 0xd0
 8012ef0:	429c      	cmp	r4, r3
 8012ef2:	d105      	bne.n	8012f00 <std+0x54>
 8012ef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012efc:	f000 b970 	b.w	80131e0 <__retarget_lock_init_recursive>
 8012f00:	bd10      	pop	{r4, pc}
 8012f02:	bf00      	nop
 8012f04:	08013055 	.word	0x08013055
 8012f08:	08013077 	.word	0x08013077
 8012f0c:	080130af 	.word	0x080130af
 8012f10:	080130d3 	.word	0x080130d3
 8012f14:	2000aa74 	.word	0x2000aa74

08012f18 <stdio_exit_handler>:
 8012f18:	4a02      	ldr	r2, [pc, #8]	; (8012f24 <stdio_exit_handler+0xc>)
 8012f1a:	4903      	ldr	r1, [pc, #12]	; (8012f28 <stdio_exit_handler+0x10>)
 8012f1c:	4803      	ldr	r0, [pc, #12]	; (8012f2c <stdio_exit_handler+0x14>)
 8012f1e:	f000 b869 	b.w	8012ff4 <_fwalk_sglue>
 8012f22:	bf00      	nop
 8012f24:	20000030 	.word	0x20000030
 8012f28:	08013af5 	.word	0x08013af5
 8012f2c:	2000003c 	.word	0x2000003c

08012f30 <cleanup_stdio>:
 8012f30:	6841      	ldr	r1, [r0, #4]
 8012f32:	4b0c      	ldr	r3, [pc, #48]	; (8012f64 <cleanup_stdio+0x34>)
 8012f34:	4299      	cmp	r1, r3
 8012f36:	b510      	push	{r4, lr}
 8012f38:	4604      	mov	r4, r0
 8012f3a:	d001      	beq.n	8012f40 <cleanup_stdio+0x10>
 8012f3c:	f000 fdda 	bl	8013af4 <_fflush_r>
 8012f40:	68a1      	ldr	r1, [r4, #8]
 8012f42:	4b09      	ldr	r3, [pc, #36]	; (8012f68 <cleanup_stdio+0x38>)
 8012f44:	4299      	cmp	r1, r3
 8012f46:	d002      	beq.n	8012f4e <cleanup_stdio+0x1e>
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f000 fdd3 	bl	8013af4 <_fflush_r>
 8012f4e:	68e1      	ldr	r1, [r4, #12]
 8012f50:	4b06      	ldr	r3, [pc, #24]	; (8012f6c <cleanup_stdio+0x3c>)
 8012f52:	4299      	cmp	r1, r3
 8012f54:	d004      	beq.n	8012f60 <cleanup_stdio+0x30>
 8012f56:	4620      	mov	r0, r4
 8012f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f5c:	f000 bdca 	b.w	8013af4 <_fflush_r>
 8012f60:	bd10      	pop	{r4, pc}
 8012f62:	bf00      	nop
 8012f64:	2000aa74 	.word	0x2000aa74
 8012f68:	2000aadc 	.word	0x2000aadc
 8012f6c:	2000ab44 	.word	0x2000ab44

08012f70 <global_stdio_init.part.0>:
 8012f70:	b510      	push	{r4, lr}
 8012f72:	4b0b      	ldr	r3, [pc, #44]	; (8012fa0 <global_stdio_init.part.0+0x30>)
 8012f74:	4c0b      	ldr	r4, [pc, #44]	; (8012fa4 <global_stdio_init.part.0+0x34>)
 8012f76:	4a0c      	ldr	r2, [pc, #48]	; (8012fa8 <global_stdio_init.part.0+0x38>)
 8012f78:	601a      	str	r2, [r3, #0]
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	2104      	movs	r1, #4
 8012f80:	f7ff ff94 	bl	8012eac <std>
 8012f84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012f88:	2201      	movs	r2, #1
 8012f8a:	2109      	movs	r1, #9
 8012f8c:	f7ff ff8e 	bl	8012eac <std>
 8012f90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012f94:	2202      	movs	r2, #2
 8012f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f9a:	2112      	movs	r1, #18
 8012f9c:	f7ff bf86 	b.w	8012eac <std>
 8012fa0:	2000abac 	.word	0x2000abac
 8012fa4:	2000aa74 	.word	0x2000aa74
 8012fa8:	08012f19 	.word	0x08012f19

08012fac <__sfp_lock_acquire>:
 8012fac:	4801      	ldr	r0, [pc, #4]	; (8012fb4 <__sfp_lock_acquire+0x8>)
 8012fae:	f000 b918 	b.w	80131e2 <__retarget_lock_acquire_recursive>
 8012fb2:	bf00      	nop
 8012fb4:	2000abb5 	.word	0x2000abb5

08012fb8 <__sfp_lock_release>:
 8012fb8:	4801      	ldr	r0, [pc, #4]	; (8012fc0 <__sfp_lock_release+0x8>)
 8012fba:	f000 b913 	b.w	80131e4 <__retarget_lock_release_recursive>
 8012fbe:	bf00      	nop
 8012fc0:	2000abb5 	.word	0x2000abb5

08012fc4 <__sinit>:
 8012fc4:	b510      	push	{r4, lr}
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	f7ff fff0 	bl	8012fac <__sfp_lock_acquire>
 8012fcc:	6a23      	ldr	r3, [r4, #32]
 8012fce:	b11b      	cbz	r3, 8012fd8 <__sinit+0x14>
 8012fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fd4:	f7ff bff0 	b.w	8012fb8 <__sfp_lock_release>
 8012fd8:	4b04      	ldr	r3, [pc, #16]	; (8012fec <__sinit+0x28>)
 8012fda:	6223      	str	r3, [r4, #32]
 8012fdc:	4b04      	ldr	r3, [pc, #16]	; (8012ff0 <__sinit+0x2c>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d1f5      	bne.n	8012fd0 <__sinit+0xc>
 8012fe4:	f7ff ffc4 	bl	8012f70 <global_stdio_init.part.0>
 8012fe8:	e7f2      	b.n	8012fd0 <__sinit+0xc>
 8012fea:	bf00      	nop
 8012fec:	08012f31 	.word	0x08012f31
 8012ff0:	2000abac 	.word	0x2000abac

08012ff4 <_fwalk_sglue>:
 8012ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ff8:	4607      	mov	r7, r0
 8012ffa:	4688      	mov	r8, r1
 8012ffc:	4614      	mov	r4, r2
 8012ffe:	2600      	movs	r6, #0
 8013000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013004:	f1b9 0901 	subs.w	r9, r9, #1
 8013008:	d505      	bpl.n	8013016 <_fwalk_sglue+0x22>
 801300a:	6824      	ldr	r4, [r4, #0]
 801300c:	2c00      	cmp	r4, #0
 801300e:	d1f7      	bne.n	8013000 <_fwalk_sglue+0xc>
 8013010:	4630      	mov	r0, r6
 8013012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013016:	89ab      	ldrh	r3, [r5, #12]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d907      	bls.n	801302c <_fwalk_sglue+0x38>
 801301c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013020:	3301      	adds	r3, #1
 8013022:	d003      	beq.n	801302c <_fwalk_sglue+0x38>
 8013024:	4629      	mov	r1, r5
 8013026:	4638      	mov	r0, r7
 8013028:	47c0      	blx	r8
 801302a:	4306      	orrs	r6, r0
 801302c:	3568      	adds	r5, #104	; 0x68
 801302e:	e7e9      	b.n	8013004 <_fwalk_sglue+0x10>

08013030 <iprintf>:
 8013030:	b40f      	push	{r0, r1, r2, r3}
 8013032:	b507      	push	{r0, r1, r2, lr}
 8013034:	4906      	ldr	r1, [pc, #24]	; (8013050 <iprintf+0x20>)
 8013036:	ab04      	add	r3, sp, #16
 8013038:	6808      	ldr	r0, [r1, #0]
 801303a:	f853 2b04 	ldr.w	r2, [r3], #4
 801303e:	6881      	ldr	r1, [r0, #8]
 8013040:	9301      	str	r3, [sp, #4]
 8013042:	f000 fa27 	bl	8013494 <_vfiprintf_r>
 8013046:	b003      	add	sp, #12
 8013048:	f85d eb04 	ldr.w	lr, [sp], #4
 801304c:	b004      	add	sp, #16
 801304e:	4770      	bx	lr
 8013050:	20000088 	.word	0x20000088

08013054 <__sread>:
 8013054:	b510      	push	{r4, lr}
 8013056:	460c      	mov	r4, r1
 8013058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801305c:	f000 f878 	bl	8013150 <_read_r>
 8013060:	2800      	cmp	r0, #0
 8013062:	bfab      	itete	ge
 8013064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013066:	89a3      	ldrhlt	r3, [r4, #12]
 8013068:	181b      	addge	r3, r3, r0
 801306a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801306e:	bfac      	ite	ge
 8013070:	6563      	strge	r3, [r4, #84]	; 0x54
 8013072:	81a3      	strhlt	r3, [r4, #12]
 8013074:	bd10      	pop	{r4, pc}

08013076 <__swrite>:
 8013076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801307a:	461f      	mov	r7, r3
 801307c:	898b      	ldrh	r3, [r1, #12]
 801307e:	05db      	lsls	r3, r3, #23
 8013080:	4605      	mov	r5, r0
 8013082:	460c      	mov	r4, r1
 8013084:	4616      	mov	r6, r2
 8013086:	d505      	bpl.n	8013094 <__swrite+0x1e>
 8013088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801308c:	2302      	movs	r3, #2
 801308e:	2200      	movs	r2, #0
 8013090:	f000 f84c 	bl	801312c <_lseek_r>
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801309a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801309e:	81a3      	strh	r3, [r4, #12]
 80130a0:	4632      	mov	r2, r6
 80130a2:	463b      	mov	r3, r7
 80130a4:	4628      	mov	r0, r5
 80130a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130aa:	f000 b863 	b.w	8013174 <_write_r>

080130ae <__sseek>:
 80130ae:	b510      	push	{r4, lr}
 80130b0:	460c      	mov	r4, r1
 80130b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130b6:	f000 f839 	bl	801312c <_lseek_r>
 80130ba:	1c43      	adds	r3, r0, #1
 80130bc:	89a3      	ldrh	r3, [r4, #12]
 80130be:	bf15      	itete	ne
 80130c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80130c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80130c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80130ca:	81a3      	strheq	r3, [r4, #12]
 80130cc:	bf18      	it	ne
 80130ce:	81a3      	strhne	r3, [r4, #12]
 80130d0:	bd10      	pop	{r4, pc}

080130d2 <__sclose>:
 80130d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130d6:	f000 b819 	b.w	801310c <_close_r>

080130da <memcmp>:
 80130da:	b510      	push	{r4, lr}
 80130dc:	3901      	subs	r1, #1
 80130de:	4402      	add	r2, r0
 80130e0:	4290      	cmp	r0, r2
 80130e2:	d101      	bne.n	80130e8 <memcmp+0xe>
 80130e4:	2000      	movs	r0, #0
 80130e6:	e005      	b.n	80130f4 <memcmp+0x1a>
 80130e8:	7803      	ldrb	r3, [r0, #0]
 80130ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80130ee:	42a3      	cmp	r3, r4
 80130f0:	d001      	beq.n	80130f6 <memcmp+0x1c>
 80130f2:	1b18      	subs	r0, r3, r4
 80130f4:	bd10      	pop	{r4, pc}
 80130f6:	3001      	adds	r0, #1
 80130f8:	e7f2      	b.n	80130e0 <memcmp+0x6>

080130fa <memset>:
 80130fa:	4402      	add	r2, r0
 80130fc:	4603      	mov	r3, r0
 80130fe:	4293      	cmp	r3, r2
 8013100:	d100      	bne.n	8013104 <memset+0xa>
 8013102:	4770      	bx	lr
 8013104:	f803 1b01 	strb.w	r1, [r3], #1
 8013108:	e7f9      	b.n	80130fe <memset+0x4>
	...

0801310c <_close_r>:
 801310c:	b538      	push	{r3, r4, r5, lr}
 801310e:	4d06      	ldr	r5, [pc, #24]	; (8013128 <_close_r+0x1c>)
 8013110:	2300      	movs	r3, #0
 8013112:	4604      	mov	r4, r0
 8013114:	4608      	mov	r0, r1
 8013116:	602b      	str	r3, [r5, #0]
 8013118:	f7f0 f8e9 	bl	80032ee <_close>
 801311c:	1c43      	adds	r3, r0, #1
 801311e:	d102      	bne.n	8013126 <_close_r+0x1a>
 8013120:	682b      	ldr	r3, [r5, #0]
 8013122:	b103      	cbz	r3, 8013126 <_close_r+0x1a>
 8013124:	6023      	str	r3, [r4, #0]
 8013126:	bd38      	pop	{r3, r4, r5, pc}
 8013128:	2000abb0 	.word	0x2000abb0

0801312c <_lseek_r>:
 801312c:	b538      	push	{r3, r4, r5, lr}
 801312e:	4d07      	ldr	r5, [pc, #28]	; (801314c <_lseek_r+0x20>)
 8013130:	4604      	mov	r4, r0
 8013132:	4608      	mov	r0, r1
 8013134:	4611      	mov	r1, r2
 8013136:	2200      	movs	r2, #0
 8013138:	602a      	str	r2, [r5, #0]
 801313a:	461a      	mov	r2, r3
 801313c:	f7f0 f8fe 	bl	800333c <_lseek>
 8013140:	1c43      	adds	r3, r0, #1
 8013142:	d102      	bne.n	801314a <_lseek_r+0x1e>
 8013144:	682b      	ldr	r3, [r5, #0]
 8013146:	b103      	cbz	r3, 801314a <_lseek_r+0x1e>
 8013148:	6023      	str	r3, [r4, #0]
 801314a:	bd38      	pop	{r3, r4, r5, pc}
 801314c:	2000abb0 	.word	0x2000abb0

08013150 <_read_r>:
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	4d07      	ldr	r5, [pc, #28]	; (8013170 <_read_r+0x20>)
 8013154:	4604      	mov	r4, r0
 8013156:	4608      	mov	r0, r1
 8013158:	4611      	mov	r1, r2
 801315a:	2200      	movs	r2, #0
 801315c:	602a      	str	r2, [r5, #0]
 801315e:	461a      	mov	r2, r3
 8013160:	f7f0 f88c 	bl	800327c <_read>
 8013164:	1c43      	adds	r3, r0, #1
 8013166:	d102      	bne.n	801316e <_read_r+0x1e>
 8013168:	682b      	ldr	r3, [r5, #0]
 801316a:	b103      	cbz	r3, 801316e <_read_r+0x1e>
 801316c:	6023      	str	r3, [r4, #0]
 801316e:	bd38      	pop	{r3, r4, r5, pc}
 8013170:	2000abb0 	.word	0x2000abb0

08013174 <_write_r>:
 8013174:	b538      	push	{r3, r4, r5, lr}
 8013176:	4d07      	ldr	r5, [pc, #28]	; (8013194 <_write_r+0x20>)
 8013178:	4604      	mov	r4, r0
 801317a:	4608      	mov	r0, r1
 801317c:	4611      	mov	r1, r2
 801317e:	2200      	movs	r2, #0
 8013180:	602a      	str	r2, [r5, #0]
 8013182:	461a      	mov	r2, r3
 8013184:	f7f0 f897 	bl	80032b6 <_write>
 8013188:	1c43      	adds	r3, r0, #1
 801318a:	d102      	bne.n	8013192 <_write_r+0x1e>
 801318c:	682b      	ldr	r3, [r5, #0]
 801318e:	b103      	cbz	r3, 8013192 <_write_r+0x1e>
 8013190:	6023      	str	r3, [r4, #0]
 8013192:	bd38      	pop	{r3, r4, r5, pc}
 8013194:	2000abb0 	.word	0x2000abb0

08013198 <__libc_init_array>:
 8013198:	b570      	push	{r4, r5, r6, lr}
 801319a:	4d0d      	ldr	r5, [pc, #52]	; (80131d0 <__libc_init_array+0x38>)
 801319c:	4c0d      	ldr	r4, [pc, #52]	; (80131d4 <__libc_init_array+0x3c>)
 801319e:	1b64      	subs	r4, r4, r5
 80131a0:	10a4      	asrs	r4, r4, #2
 80131a2:	2600      	movs	r6, #0
 80131a4:	42a6      	cmp	r6, r4
 80131a6:	d109      	bne.n	80131bc <__libc_init_array+0x24>
 80131a8:	4d0b      	ldr	r5, [pc, #44]	; (80131d8 <__libc_init_array+0x40>)
 80131aa:	4c0c      	ldr	r4, [pc, #48]	; (80131dc <__libc_init_array+0x44>)
 80131ac:	f000 fe52 	bl	8013e54 <_init>
 80131b0:	1b64      	subs	r4, r4, r5
 80131b2:	10a4      	asrs	r4, r4, #2
 80131b4:	2600      	movs	r6, #0
 80131b6:	42a6      	cmp	r6, r4
 80131b8:	d105      	bne.n	80131c6 <__libc_init_array+0x2e>
 80131ba:	bd70      	pop	{r4, r5, r6, pc}
 80131bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80131c0:	4798      	blx	r3
 80131c2:	3601      	adds	r6, #1
 80131c4:	e7ee      	b.n	80131a4 <__libc_init_array+0xc>
 80131c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ca:	4798      	blx	r3
 80131cc:	3601      	adds	r6, #1
 80131ce:	e7f2      	b.n	80131b6 <__libc_init_array+0x1e>
 80131d0:	08016a88 	.word	0x08016a88
 80131d4:	08016a88 	.word	0x08016a88
 80131d8:	08016a88 	.word	0x08016a88
 80131dc:	08016a8c 	.word	0x08016a8c

080131e0 <__retarget_lock_init_recursive>:
 80131e0:	4770      	bx	lr

080131e2 <__retarget_lock_acquire_recursive>:
 80131e2:	4770      	bx	lr

080131e4 <__retarget_lock_release_recursive>:
 80131e4:	4770      	bx	lr

080131e6 <memcpy>:
 80131e6:	440a      	add	r2, r1
 80131e8:	4291      	cmp	r1, r2
 80131ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80131ee:	d100      	bne.n	80131f2 <memcpy+0xc>
 80131f0:	4770      	bx	lr
 80131f2:	b510      	push	{r4, lr}
 80131f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131fc:	4291      	cmp	r1, r2
 80131fe:	d1f9      	bne.n	80131f4 <memcpy+0xe>
 8013200:	bd10      	pop	{r4, pc}
	...

08013204 <__assert_func>:
 8013204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013206:	4614      	mov	r4, r2
 8013208:	461a      	mov	r2, r3
 801320a:	4b09      	ldr	r3, [pc, #36]	; (8013230 <__assert_func+0x2c>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4605      	mov	r5, r0
 8013210:	68d8      	ldr	r0, [r3, #12]
 8013212:	b14c      	cbz	r4, 8013228 <__assert_func+0x24>
 8013214:	4b07      	ldr	r3, [pc, #28]	; (8013234 <__assert_func+0x30>)
 8013216:	9100      	str	r1, [sp, #0]
 8013218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801321c:	4906      	ldr	r1, [pc, #24]	; (8013238 <__assert_func+0x34>)
 801321e:	462b      	mov	r3, r5
 8013220:	f000 fc90 	bl	8013b44 <fiprintf>
 8013224:	f000 fd46 	bl	8013cb4 <abort>
 8013228:	4b04      	ldr	r3, [pc, #16]	; (801323c <__assert_func+0x38>)
 801322a:	461c      	mov	r4, r3
 801322c:	e7f3      	b.n	8013216 <__assert_func+0x12>
 801322e:	bf00      	nop
 8013230:	20000088 	.word	0x20000088
 8013234:	08016a11 	.word	0x08016a11
 8013238:	08016a1e 	.word	0x08016a1e
 801323c:	08016a4c 	.word	0x08016a4c

08013240 <_free_r>:
 8013240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013242:	2900      	cmp	r1, #0
 8013244:	d044      	beq.n	80132d0 <_free_r+0x90>
 8013246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801324a:	9001      	str	r0, [sp, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f1a1 0404 	sub.w	r4, r1, #4
 8013252:	bfb8      	it	lt
 8013254:	18e4      	addlt	r4, r4, r3
 8013256:	f000 f8e7 	bl	8013428 <__malloc_lock>
 801325a:	4a1e      	ldr	r2, [pc, #120]	; (80132d4 <_free_r+0x94>)
 801325c:	9801      	ldr	r0, [sp, #4]
 801325e:	6813      	ldr	r3, [r2, #0]
 8013260:	b933      	cbnz	r3, 8013270 <_free_r+0x30>
 8013262:	6063      	str	r3, [r4, #4]
 8013264:	6014      	str	r4, [r2, #0]
 8013266:	b003      	add	sp, #12
 8013268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801326c:	f000 b8e2 	b.w	8013434 <__malloc_unlock>
 8013270:	42a3      	cmp	r3, r4
 8013272:	d908      	bls.n	8013286 <_free_r+0x46>
 8013274:	6825      	ldr	r5, [r4, #0]
 8013276:	1961      	adds	r1, r4, r5
 8013278:	428b      	cmp	r3, r1
 801327a:	bf01      	itttt	eq
 801327c:	6819      	ldreq	r1, [r3, #0]
 801327e:	685b      	ldreq	r3, [r3, #4]
 8013280:	1949      	addeq	r1, r1, r5
 8013282:	6021      	streq	r1, [r4, #0]
 8013284:	e7ed      	b.n	8013262 <_free_r+0x22>
 8013286:	461a      	mov	r2, r3
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	b10b      	cbz	r3, 8013290 <_free_r+0x50>
 801328c:	42a3      	cmp	r3, r4
 801328e:	d9fa      	bls.n	8013286 <_free_r+0x46>
 8013290:	6811      	ldr	r1, [r2, #0]
 8013292:	1855      	adds	r5, r2, r1
 8013294:	42a5      	cmp	r5, r4
 8013296:	d10b      	bne.n	80132b0 <_free_r+0x70>
 8013298:	6824      	ldr	r4, [r4, #0]
 801329a:	4421      	add	r1, r4
 801329c:	1854      	adds	r4, r2, r1
 801329e:	42a3      	cmp	r3, r4
 80132a0:	6011      	str	r1, [r2, #0]
 80132a2:	d1e0      	bne.n	8013266 <_free_r+0x26>
 80132a4:	681c      	ldr	r4, [r3, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	6053      	str	r3, [r2, #4]
 80132aa:	440c      	add	r4, r1
 80132ac:	6014      	str	r4, [r2, #0]
 80132ae:	e7da      	b.n	8013266 <_free_r+0x26>
 80132b0:	d902      	bls.n	80132b8 <_free_r+0x78>
 80132b2:	230c      	movs	r3, #12
 80132b4:	6003      	str	r3, [r0, #0]
 80132b6:	e7d6      	b.n	8013266 <_free_r+0x26>
 80132b8:	6825      	ldr	r5, [r4, #0]
 80132ba:	1961      	adds	r1, r4, r5
 80132bc:	428b      	cmp	r3, r1
 80132be:	bf04      	itt	eq
 80132c0:	6819      	ldreq	r1, [r3, #0]
 80132c2:	685b      	ldreq	r3, [r3, #4]
 80132c4:	6063      	str	r3, [r4, #4]
 80132c6:	bf04      	itt	eq
 80132c8:	1949      	addeq	r1, r1, r5
 80132ca:	6021      	streq	r1, [r4, #0]
 80132cc:	6054      	str	r4, [r2, #4]
 80132ce:	e7ca      	b.n	8013266 <_free_r+0x26>
 80132d0:	b003      	add	sp, #12
 80132d2:	bd30      	pop	{r4, r5, pc}
 80132d4:	2000abb8 	.word	0x2000abb8

080132d8 <malloc>:
 80132d8:	4b02      	ldr	r3, [pc, #8]	; (80132e4 <malloc+0xc>)
 80132da:	4601      	mov	r1, r0
 80132dc:	6818      	ldr	r0, [r3, #0]
 80132de:	f000 b823 	b.w	8013328 <_malloc_r>
 80132e2:	bf00      	nop
 80132e4:	20000088 	.word	0x20000088

080132e8 <sbrk_aligned>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	4e0e      	ldr	r6, [pc, #56]	; (8013324 <sbrk_aligned+0x3c>)
 80132ec:	460c      	mov	r4, r1
 80132ee:	6831      	ldr	r1, [r6, #0]
 80132f0:	4605      	mov	r5, r0
 80132f2:	b911      	cbnz	r1, 80132fa <sbrk_aligned+0x12>
 80132f4:	f000 fcce 	bl	8013c94 <_sbrk_r>
 80132f8:	6030      	str	r0, [r6, #0]
 80132fa:	4621      	mov	r1, r4
 80132fc:	4628      	mov	r0, r5
 80132fe:	f000 fcc9 	bl	8013c94 <_sbrk_r>
 8013302:	1c43      	adds	r3, r0, #1
 8013304:	d00a      	beq.n	801331c <sbrk_aligned+0x34>
 8013306:	1cc4      	adds	r4, r0, #3
 8013308:	f024 0403 	bic.w	r4, r4, #3
 801330c:	42a0      	cmp	r0, r4
 801330e:	d007      	beq.n	8013320 <sbrk_aligned+0x38>
 8013310:	1a21      	subs	r1, r4, r0
 8013312:	4628      	mov	r0, r5
 8013314:	f000 fcbe 	bl	8013c94 <_sbrk_r>
 8013318:	3001      	adds	r0, #1
 801331a:	d101      	bne.n	8013320 <sbrk_aligned+0x38>
 801331c:	f04f 34ff 	mov.w	r4, #4294967295
 8013320:	4620      	mov	r0, r4
 8013322:	bd70      	pop	{r4, r5, r6, pc}
 8013324:	2000abbc 	.word	0x2000abbc

08013328 <_malloc_r>:
 8013328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801332c:	1ccd      	adds	r5, r1, #3
 801332e:	f025 0503 	bic.w	r5, r5, #3
 8013332:	3508      	adds	r5, #8
 8013334:	2d0c      	cmp	r5, #12
 8013336:	bf38      	it	cc
 8013338:	250c      	movcc	r5, #12
 801333a:	2d00      	cmp	r5, #0
 801333c:	4607      	mov	r7, r0
 801333e:	db01      	blt.n	8013344 <_malloc_r+0x1c>
 8013340:	42a9      	cmp	r1, r5
 8013342:	d905      	bls.n	8013350 <_malloc_r+0x28>
 8013344:	230c      	movs	r3, #12
 8013346:	603b      	str	r3, [r7, #0]
 8013348:	2600      	movs	r6, #0
 801334a:	4630      	mov	r0, r6
 801334c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013350:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013424 <_malloc_r+0xfc>
 8013354:	f000 f868 	bl	8013428 <__malloc_lock>
 8013358:	f8d8 3000 	ldr.w	r3, [r8]
 801335c:	461c      	mov	r4, r3
 801335e:	bb5c      	cbnz	r4, 80133b8 <_malloc_r+0x90>
 8013360:	4629      	mov	r1, r5
 8013362:	4638      	mov	r0, r7
 8013364:	f7ff ffc0 	bl	80132e8 <sbrk_aligned>
 8013368:	1c43      	adds	r3, r0, #1
 801336a:	4604      	mov	r4, r0
 801336c:	d155      	bne.n	801341a <_malloc_r+0xf2>
 801336e:	f8d8 4000 	ldr.w	r4, [r8]
 8013372:	4626      	mov	r6, r4
 8013374:	2e00      	cmp	r6, #0
 8013376:	d145      	bne.n	8013404 <_malloc_r+0xdc>
 8013378:	2c00      	cmp	r4, #0
 801337a:	d048      	beq.n	801340e <_malloc_r+0xe6>
 801337c:	6823      	ldr	r3, [r4, #0]
 801337e:	4631      	mov	r1, r6
 8013380:	4638      	mov	r0, r7
 8013382:	eb04 0903 	add.w	r9, r4, r3
 8013386:	f000 fc85 	bl	8013c94 <_sbrk_r>
 801338a:	4581      	cmp	r9, r0
 801338c:	d13f      	bne.n	801340e <_malloc_r+0xe6>
 801338e:	6821      	ldr	r1, [r4, #0]
 8013390:	1a6d      	subs	r5, r5, r1
 8013392:	4629      	mov	r1, r5
 8013394:	4638      	mov	r0, r7
 8013396:	f7ff ffa7 	bl	80132e8 <sbrk_aligned>
 801339a:	3001      	adds	r0, #1
 801339c:	d037      	beq.n	801340e <_malloc_r+0xe6>
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	442b      	add	r3, r5
 80133a2:	6023      	str	r3, [r4, #0]
 80133a4:	f8d8 3000 	ldr.w	r3, [r8]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d038      	beq.n	801341e <_malloc_r+0xf6>
 80133ac:	685a      	ldr	r2, [r3, #4]
 80133ae:	42a2      	cmp	r2, r4
 80133b0:	d12b      	bne.n	801340a <_malloc_r+0xe2>
 80133b2:	2200      	movs	r2, #0
 80133b4:	605a      	str	r2, [r3, #4]
 80133b6:	e00f      	b.n	80133d8 <_malloc_r+0xb0>
 80133b8:	6822      	ldr	r2, [r4, #0]
 80133ba:	1b52      	subs	r2, r2, r5
 80133bc:	d41f      	bmi.n	80133fe <_malloc_r+0xd6>
 80133be:	2a0b      	cmp	r2, #11
 80133c0:	d917      	bls.n	80133f2 <_malloc_r+0xca>
 80133c2:	1961      	adds	r1, r4, r5
 80133c4:	42a3      	cmp	r3, r4
 80133c6:	6025      	str	r5, [r4, #0]
 80133c8:	bf18      	it	ne
 80133ca:	6059      	strne	r1, [r3, #4]
 80133cc:	6863      	ldr	r3, [r4, #4]
 80133ce:	bf08      	it	eq
 80133d0:	f8c8 1000 	streq.w	r1, [r8]
 80133d4:	5162      	str	r2, [r4, r5]
 80133d6:	604b      	str	r3, [r1, #4]
 80133d8:	4638      	mov	r0, r7
 80133da:	f104 060b 	add.w	r6, r4, #11
 80133de:	f000 f829 	bl	8013434 <__malloc_unlock>
 80133e2:	f026 0607 	bic.w	r6, r6, #7
 80133e6:	1d23      	adds	r3, r4, #4
 80133e8:	1af2      	subs	r2, r6, r3
 80133ea:	d0ae      	beq.n	801334a <_malloc_r+0x22>
 80133ec:	1b9b      	subs	r3, r3, r6
 80133ee:	50a3      	str	r3, [r4, r2]
 80133f0:	e7ab      	b.n	801334a <_malloc_r+0x22>
 80133f2:	42a3      	cmp	r3, r4
 80133f4:	6862      	ldr	r2, [r4, #4]
 80133f6:	d1dd      	bne.n	80133b4 <_malloc_r+0x8c>
 80133f8:	f8c8 2000 	str.w	r2, [r8]
 80133fc:	e7ec      	b.n	80133d8 <_malloc_r+0xb0>
 80133fe:	4623      	mov	r3, r4
 8013400:	6864      	ldr	r4, [r4, #4]
 8013402:	e7ac      	b.n	801335e <_malloc_r+0x36>
 8013404:	4634      	mov	r4, r6
 8013406:	6876      	ldr	r6, [r6, #4]
 8013408:	e7b4      	b.n	8013374 <_malloc_r+0x4c>
 801340a:	4613      	mov	r3, r2
 801340c:	e7cc      	b.n	80133a8 <_malloc_r+0x80>
 801340e:	230c      	movs	r3, #12
 8013410:	603b      	str	r3, [r7, #0]
 8013412:	4638      	mov	r0, r7
 8013414:	f000 f80e 	bl	8013434 <__malloc_unlock>
 8013418:	e797      	b.n	801334a <_malloc_r+0x22>
 801341a:	6025      	str	r5, [r4, #0]
 801341c:	e7dc      	b.n	80133d8 <_malloc_r+0xb0>
 801341e:	605b      	str	r3, [r3, #4]
 8013420:	deff      	udf	#255	; 0xff
 8013422:	bf00      	nop
 8013424:	2000abb8 	.word	0x2000abb8

08013428 <__malloc_lock>:
 8013428:	4801      	ldr	r0, [pc, #4]	; (8013430 <__malloc_lock+0x8>)
 801342a:	f7ff beda 	b.w	80131e2 <__retarget_lock_acquire_recursive>
 801342e:	bf00      	nop
 8013430:	2000abb4 	.word	0x2000abb4

08013434 <__malloc_unlock>:
 8013434:	4801      	ldr	r0, [pc, #4]	; (801343c <__malloc_unlock+0x8>)
 8013436:	f7ff bed5 	b.w	80131e4 <__retarget_lock_release_recursive>
 801343a:	bf00      	nop
 801343c:	2000abb4 	.word	0x2000abb4

08013440 <__sfputc_r>:
 8013440:	6893      	ldr	r3, [r2, #8]
 8013442:	3b01      	subs	r3, #1
 8013444:	2b00      	cmp	r3, #0
 8013446:	b410      	push	{r4}
 8013448:	6093      	str	r3, [r2, #8]
 801344a:	da08      	bge.n	801345e <__sfputc_r+0x1e>
 801344c:	6994      	ldr	r4, [r2, #24]
 801344e:	42a3      	cmp	r3, r4
 8013450:	db01      	blt.n	8013456 <__sfputc_r+0x16>
 8013452:	290a      	cmp	r1, #10
 8013454:	d103      	bne.n	801345e <__sfputc_r+0x1e>
 8013456:	f85d 4b04 	ldr.w	r4, [sp], #4
 801345a:	f000 bb85 	b.w	8013b68 <__swbuf_r>
 801345e:	6813      	ldr	r3, [r2, #0]
 8013460:	1c58      	adds	r0, r3, #1
 8013462:	6010      	str	r0, [r2, #0]
 8013464:	7019      	strb	r1, [r3, #0]
 8013466:	4608      	mov	r0, r1
 8013468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801346c:	4770      	bx	lr

0801346e <__sfputs_r>:
 801346e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013470:	4606      	mov	r6, r0
 8013472:	460f      	mov	r7, r1
 8013474:	4614      	mov	r4, r2
 8013476:	18d5      	adds	r5, r2, r3
 8013478:	42ac      	cmp	r4, r5
 801347a:	d101      	bne.n	8013480 <__sfputs_r+0x12>
 801347c:	2000      	movs	r0, #0
 801347e:	e007      	b.n	8013490 <__sfputs_r+0x22>
 8013480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013484:	463a      	mov	r2, r7
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff ffda 	bl	8013440 <__sfputc_r>
 801348c:	1c43      	adds	r3, r0, #1
 801348e:	d1f3      	bne.n	8013478 <__sfputs_r+0xa>
 8013490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013494 <_vfiprintf_r>:
 8013494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	460d      	mov	r5, r1
 801349a:	b09d      	sub	sp, #116	; 0x74
 801349c:	4614      	mov	r4, r2
 801349e:	4698      	mov	r8, r3
 80134a0:	4606      	mov	r6, r0
 80134a2:	b118      	cbz	r0, 80134ac <_vfiprintf_r+0x18>
 80134a4:	6a03      	ldr	r3, [r0, #32]
 80134a6:	b90b      	cbnz	r3, 80134ac <_vfiprintf_r+0x18>
 80134a8:	f7ff fd8c 	bl	8012fc4 <__sinit>
 80134ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134ae:	07d9      	lsls	r1, r3, #31
 80134b0:	d405      	bmi.n	80134be <_vfiprintf_r+0x2a>
 80134b2:	89ab      	ldrh	r3, [r5, #12]
 80134b4:	059a      	lsls	r2, r3, #22
 80134b6:	d402      	bmi.n	80134be <_vfiprintf_r+0x2a>
 80134b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134ba:	f7ff fe92 	bl	80131e2 <__retarget_lock_acquire_recursive>
 80134be:	89ab      	ldrh	r3, [r5, #12]
 80134c0:	071b      	lsls	r3, r3, #28
 80134c2:	d501      	bpl.n	80134c8 <_vfiprintf_r+0x34>
 80134c4:	692b      	ldr	r3, [r5, #16]
 80134c6:	b99b      	cbnz	r3, 80134f0 <_vfiprintf_r+0x5c>
 80134c8:	4629      	mov	r1, r5
 80134ca:	4630      	mov	r0, r6
 80134cc:	f000 fb8a 	bl	8013be4 <__swsetup_r>
 80134d0:	b170      	cbz	r0, 80134f0 <_vfiprintf_r+0x5c>
 80134d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134d4:	07dc      	lsls	r4, r3, #31
 80134d6:	d504      	bpl.n	80134e2 <_vfiprintf_r+0x4e>
 80134d8:	f04f 30ff 	mov.w	r0, #4294967295
 80134dc:	b01d      	add	sp, #116	; 0x74
 80134de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e2:	89ab      	ldrh	r3, [r5, #12]
 80134e4:	0598      	lsls	r0, r3, #22
 80134e6:	d4f7      	bmi.n	80134d8 <_vfiprintf_r+0x44>
 80134e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134ea:	f7ff fe7b 	bl	80131e4 <__retarget_lock_release_recursive>
 80134ee:	e7f3      	b.n	80134d8 <_vfiprintf_r+0x44>
 80134f0:	2300      	movs	r3, #0
 80134f2:	9309      	str	r3, [sp, #36]	; 0x24
 80134f4:	2320      	movs	r3, #32
 80134f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80134fe:	2330      	movs	r3, #48	; 0x30
 8013500:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80136b4 <_vfiprintf_r+0x220>
 8013504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013508:	f04f 0901 	mov.w	r9, #1
 801350c:	4623      	mov	r3, r4
 801350e:	469a      	mov	sl, r3
 8013510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013514:	b10a      	cbz	r2, 801351a <_vfiprintf_r+0x86>
 8013516:	2a25      	cmp	r2, #37	; 0x25
 8013518:	d1f9      	bne.n	801350e <_vfiprintf_r+0x7a>
 801351a:	ebba 0b04 	subs.w	fp, sl, r4
 801351e:	d00b      	beq.n	8013538 <_vfiprintf_r+0xa4>
 8013520:	465b      	mov	r3, fp
 8013522:	4622      	mov	r2, r4
 8013524:	4629      	mov	r1, r5
 8013526:	4630      	mov	r0, r6
 8013528:	f7ff ffa1 	bl	801346e <__sfputs_r>
 801352c:	3001      	adds	r0, #1
 801352e:	f000 80a9 	beq.w	8013684 <_vfiprintf_r+0x1f0>
 8013532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013534:	445a      	add	r2, fp
 8013536:	9209      	str	r2, [sp, #36]	; 0x24
 8013538:	f89a 3000 	ldrb.w	r3, [sl]
 801353c:	2b00      	cmp	r3, #0
 801353e:	f000 80a1 	beq.w	8013684 <_vfiprintf_r+0x1f0>
 8013542:	2300      	movs	r3, #0
 8013544:	f04f 32ff 	mov.w	r2, #4294967295
 8013548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801354c:	f10a 0a01 	add.w	sl, sl, #1
 8013550:	9304      	str	r3, [sp, #16]
 8013552:	9307      	str	r3, [sp, #28]
 8013554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013558:	931a      	str	r3, [sp, #104]	; 0x68
 801355a:	4654      	mov	r4, sl
 801355c:	2205      	movs	r2, #5
 801355e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013562:	4854      	ldr	r0, [pc, #336]	; (80136b4 <_vfiprintf_r+0x220>)
 8013564:	f7ec fe44 	bl	80001f0 <memchr>
 8013568:	9a04      	ldr	r2, [sp, #16]
 801356a:	b9d8      	cbnz	r0, 80135a4 <_vfiprintf_r+0x110>
 801356c:	06d1      	lsls	r1, r2, #27
 801356e:	bf44      	itt	mi
 8013570:	2320      	movmi	r3, #32
 8013572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013576:	0713      	lsls	r3, r2, #28
 8013578:	bf44      	itt	mi
 801357a:	232b      	movmi	r3, #43	; 0x2b
 801357c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013580:	f89a 3000 	ldrb.w	r3, [sl]
 8013584:	2b2a      	cmp	r3, #42	; 0x2a
 8013586:	d015      	beq.n	80135b4 <_vfiprintf_r+0x120>
 8013588:	9a07      	ldr	r2, [sp, #28]
 801358a:	4654      	mov	r4, sl
 801358c:	2000      	movs	r0, #0
 801358e:	f04f 0c0a 	mov.w	ip, #10
 8013592:	4621      	mov	r1, r4
 8013594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013598:	3b30      	subs	r3, #48	; 0x30
 801359a:	2b09      	cmp	r3, #9
 801359c:	d94d      	bls.n	801363a <_vfiprintf_r+0x1a6>
 801359e:	b1b0      	cbz	r0, 80135ce <_vfiprintf_r+0x13a>
 80135a0:	9207      	str	r2, [sp, #28]
 80135a2:	e014      	b.n	80135ce <_vfiprintf_r+0x13a>
 80135a4:	eba0 0308 	sub.w	r3, r0, r8
 80135a8:	fa09 f303 	lsl.w	r3, r9, r3
 80135ac:	4313      	orrs	r3, r2
 80135ae:	9304      	str	r3, [sp, #16]
 80135b0:	46a2      	mov	sl, r4
 80135b2:	e7d2      	b.n	801355a <_vfiprintf_r+0xc6>
 80135b4:	9b03      	ldr	r3, [sp, #12]
 80135b6:	1d19      	adds	r1, r3, #4
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	9103      	str	r1, [sp, #12]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	bfbb      	ittet	lt
 80135c0:	425b      	neglt	r3, r3
 80135c2:	f042 0202 	orrlt.w	r2, r2, #2
 80135c6:	9307      	strge	r3, [sp, #28]
 80135c8:	9307      	strlt	r3, [sp, #28]
 80135ca:	bfb8      	it	lt
 80135cc:	9204      	strlt	r2, [sp, #16]
 80135ce:	7823      	ldrb	r3, [r4, #0]
 80135d0:	2b2e      	cmp	r3, #46	; 0x2e
 80135d2:	d10c      	bne.n	80135ee <_vfiprintf_r+0x15a>
 80135d4:	7863      	ldrb	r3, [r4, #1]
 80135d6:	2b2a      	cmp	r3, #42	; 0x2a
 80135d8:	d134      	bne.n	8013644 <_vfiprintf_r+0x1b0>
 80135da:	9b03      	ldr	r3, [sp, #12]
 80135dc:	1d1a      	adds	r2, r3, #4
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	9203      	str	r2, [sp, #12]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	bfb8      	it	lt
 80135e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80135ea:	3402      	adds	r4, #2
 80135ec:	9305      	str	r3, [sp, #20]
 80135ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80136c4 <_vfiprintf_r+0x230>
 80135f2:	7821      	ldrb	r1, [r4, #0]
 80135f4:	2203      	movs	r2, #3
 80135f6:	4650      	mov	r0, sl
 80135f8:	f7ec fdfa 	bl	80001f0 <memchr>
 80135fc:	b138      	cbz	r0, 801360e <_vfiprintf_r+0x17a>
 80135fe:	9b04      	ldr	r3, [sp, #16]
 8013600:	eba0 000a 	sub.w	r0, r0, sl
 8013604:	2240      	movs	r2, #64	; 0x40
 8013606:	4082      	lsls	r2, r0
 8013608:	4313      	orrs	r3, r2
 801360a:	3401      	adds	r4, #1
 801360c:	9304      	str	r3, [sp, #16]
 801360e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013612:	4829      	ldr	r0, [pc, #164]	; (80136b8 <_vfiprintf_r+0x224>)
 8013614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013618:	2206      	movs	r2, #6
 801361a:	f7ec fde9 	bl	80001f0 <memchr>
 801361e:	2800      	cmp	r0, #0
 8013620:	d03f      	beq.n	80136a2 <_vfiprintf_r+0x20e>
 8013622:	4b26      	ldr	r3, [pc, #152]	; (80136bc <_vfiprintf_r+0x228>)
 8013624:	bb1b      	cbnz	r3, 801366e <_vfiprintf_r+0x1da>
 8013626:	9b03      	ldr	r3, [sp, #12]
 8013628:	3307      	adds	r3, #7
 801362a:	f023 0307 	bic.w	r3, r3, #7
 801362e:	3308      	adds	r3, #8
 8013630:	9303      	str	r3, [sp, #12]
 8013632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013634:	443b      	add	r3, r7
 8013636:	9309      	str	r3, [sp, #36]	; 0x24
 8013638:	e768      	b.n	801350c <_vfiprintf_r+0x78>
 801363a:	fb0c 3202 	mla	r2, ip, r2, r3
 801363e:	460c      	mov	r4, r1
 8013640:	2001      	movs	r0, #1
 8013642:	e7a6      	b.n	8013592 <_vfiprintf_r+0xfe>
 8013644:	2300      	movs	r3, #0
 8013646:	3401      	adds	r4, #1
 8013648:	9305      	str	r3, [sp, #20]
 801364a:	4619      	mov	r1, r3
 801364c:	f04f 0c0a 	mov.w	ip, #10
 8013650:	4620      	mov	r0, r4
 8013652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013656:	3a30      	subs	r2, #48	; 0x30
 8013658:	2a09      	cmp	r2, #9
 801365a:	d903      	bls.n	8013664 <_vfiprintf_r+0x1d0>
 801365c:	2b00      	cmp	r3, #0
 801365e:	d0c6      	beq.n	80135ee <_vfiprintf_r+0x15a>
 8013660:	9105      	str	r1, [sp, #20]
 8013662:	e7c4      	b.n	80135ee <_vfiprintf_r+0x15a>
 8013664:	fb0c 2101 	mla	r1, ip, r1, r2
 8013668:	4604      	mov	r4, r0
 801366a:	2301      	movs	r3, #1
 801366c:	e7f0      	b.n	8013650 <_vfiprintf_r+0x1bc>
 801366e:	ab03      	add	r3, sp, #12
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	462a      	mov	r2, r5
 8013674:	4b12      	ldr	r3, [pc, #72]	; (80136c0 <_vfiprintf_r+0x22c>)
 8013676:	a904      	add	r1, sp, #16
 8013678:	4630      	mov	r0, r6
 801367a:	f3af 8000 	nop.w
 801367e:	4607      	mov	r7, r0
 8013680:	1c78      	adds	r0, r7, #1
 8013682:	d1d6      	bne.n	8013632 <_vfiprintf_r+0x19e>
 8013684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013686:	07d9      	lsls	r1, r3, #31
 8013688:	d405      	bmi.n	8013696 <_vfiprintf_r+0x202>
 801368a:	89ab      	ldrh	r3, [r5, #12]
 801368c:	059a      	lsls	r2, r3, #22
 801368e:	d402      	bmi.n	8013696 <_vfiprintf_r+0x202>
 8013690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013692:	f7ff fda7 	bl	80131e4 <__retarget_lock_release_recursive>
 8013696:	89ab      	ldrh	r3, [r5, #12]
 8013698:	065b      	lsls	r3, r3, #25
 801369a:	f53f af1d 	bmi.w	80134d8 <_vfiprintf_r+0x44>
 801369e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80136a0:	e71c      	b.n	80134dc <_vfiprintf_r+0x48>
 80136a2:	ab03      	add	r3, sp, #12
 80136a4:	9300      	str	r3, [sp, #0]
 80136a6:	462a      	mov	r2, r5
 80136a8:	4b05      	ldr	r3, [pc, #20]	; (80136c0 <_vfiprintf_r+0x22c>)
 80136aa:	a904      	add	r1, sp, #16
 80136ac:	4630      	mov	r0, r6
 80136ae:	f000 f879 	bl	80137a4 <_printf_i>
 80136b2:	e7e4      	b.n	801367e <_vfiprintf_r+0x1ea>
 80136b4:	08016a4d 	.word	0x08016a4d
 80136b8:	08016a57 	.word	0x08016a57
 80136bc:	00000000 	.word	0x00000000
 80136c0:	0801346f 	.word	0x0801346f
 80136c4:	08016a53 	.word	0x08016a53

080136c8 <_printf_common>:
 80136c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136cc:	4616      	mov	r6, r2
 80136ce:	4699      	mov	r9, r3
 80136d0:	688a      	ldr	r2, [r1, #8]
 80136d2:	690b      	ldr	r3, [r1, #16]
 80136d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136d8:	4293      	cmp	r3, r2
 80136da:	bfb8      	it	lt
 80136dc:	4613      	movlt	r3, r2
 80136de:	6033      	str	r3, [r6, #0]
 80136e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80136e4:	4607      	mov	r7, r0
 80136e6:	460c      	mov	r4, r1
 80136e8:	b10a      	cbz	r2, 80136ee <_printf_common+0x26>
 80136ea:	3301      	adds	r3, #1
 80136ec:	6033      	str	r3, [r6, #0]
 80136ee:	6823      	ldr	r3, [r4, #0]
 80136f0:	0699      	lsls	r1, r3, #26
 80136f2:	bf42      	ittt	mi
 80136f4:	6833      	ldrmi	r3, [r6, #0]
 80136f6:	3302      	addmi	r3, #2
 80136f8:	6033      	strmi	r3, [r6, #0]
 80136fa:	6825      	ldr	r5, [r4, #0]
 80136fc:	f015 0506 	ands.w	r5, r5, #6
 8013700:	d106      	bne.n	8013710 <_printf_common+0x48>
 8013702:	f104 0a19 	add.w	sl, r4, #25
 8013706:	68e3      	ldr	r3, [r4, #12]
 8013708:	6832      	ldr	r2, [r6, #0]
 801370a:	1a9b      	subs	r3, r3, r2
 801370c:	42ab      	cmp	r3, r5
 801370e:	dc26      	bgt.n	801375e <_printf_common+0x96>
 8013710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013714:	1e13      	subs	r3, r2, #0
 8013716:	6822      	ldr	r2, [r4, #0]
 8013718:	bf18      	it	ne
 801371a:	2301      	movne	r3, #1
 801371c:	0692      	lsls	r2, r2, #26
 801371e:	d42b      	bmi.n	8013778 <_printf_common+0xb0>
 8013720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013724:	4649      	mov	r1, r9
 8013726:	4638      	mov	r0, r7
 8013728:	47c0      	blx	r8
 801372a:	3001      	adds	r0, #1
 801372c:	d01e      	beq.n	801376c <_printf_common+0xa4>
 801372e:	6823      	ldr	r3, [r4, #0]
 8013730:	6922      	ldr	r2, [r4, #16]
 8013732:	f003 0306 	and.w	r3, r3, #6
 8013736:	2b04      	cmp	r3, #4
 8013738:	bf02      	ittt	eq
 801373a:	68e5      	ldreq	r5, [r4, #12]
 801373c:	6833      	ldreq	r3, [r6, #0]
 801373e:	1aed      	subeq	r5, r5, r3
 8013740:	68a3      	ldr	r3, [r4, #8]
 8013742:	bf0c      	ite	eq
 8013744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013748:	2500      	movne	r5, #0
 801374a:	4293      	cmp	r3, r2
 801374c:	bfc4      	itt	gt
 801374e:	1a9b      	subgt	r3, r3, r2
 8013750:	18ed      	addgt	r5, r5, r3
 8013752:	2600      	movs	r6, #0
 8013754:	341a      	adds	r4, #26
 8013756:	42b5      	cmp	r5, r6
 8013758:	d11a      	bne.n	8013790 <_printf_common+0xc8>
 801375a:	2000      	movs	r0, #0
 801375c:	e008      	b.n	8013770 <_printf_common+0xa8>
 801375e:	2301      	movs	r3, #1
 8013760:	4652      	mov	r2, sl
 8013762:	4649      	mov	r1, r9
 8013764:	4638      	mov	r0, r7
 8013766:	47c0      	blx	r8
 8013768:	3001      	adds	r0, #1
 801376a:	d103      	bne.n	8013774 <_printf_common+0xac>
 801376c:	f04f 30ff 	mov.w	r0, #4294967295
 8013770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013774:	3501      	adds	r5, #1
 8013776:	e7c6      	b.n	8013706 <_printf_common+0x3e>
 8013778:	18e1      	adds	r1, r4, r3
 801377a:	1c5a      	adds	r2, r3, #1
 801377c:	2030      	movs	r0, #48	; 0x30
 801377e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013782:	4422      	add	r2, r4
 8013784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801378c:	3302      	adds	r3, #2
 801378e:	e7c7      	b.n	8013720 <_printf_common+0x58>
 8013790:	2301      	movs	r3, #1
 8013792:	4622      	mov	r2, r4
 8013794:	4649      	mov	r1, r9
 8013796:	4638      	mov	r0, r7
 8013798:	47c0      	blx	r8
 801379a:	3001      	adds	r0, #1
 801379c:	d0e6      	beq.n	801376c <_printf_common+0xa4>
 801379e:	3601      	adds	r6, #1
 80137a0:	e7d9      	b.n	8013756 <_printf_common+0x8e>
	...

080137a4 <_printf_i>:
 80137a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137a8:	7e0f      	ldrb	r7, [r1, #24]
 80137aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80137ac:	2f78      	cmp	r7, #120	; 0x78
 80137ae:	4691      	mov	r9, r2
 80137b0:	4680      	mov	r8, r0
 80137b2:	460c      	mov	r4, r1
 80137b4:	469a      	mov	sl, r3
 80137b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80137ba:	d807      	bhi.n	80137cc <_printf_i+0x28>
 80137bc:	2f62      	cmp	r7, #98	; 0x62
 80137be:	d80a      	bhi.n	80137d6 <_printf_i+0x32>
 80137c0:	2f00      	cmp	r7, #0
 80137c2:	f000 80d4 	beq.w	801396e <_printf_i+0x1ca>
 80137c6:	2f58      	cmp	r7, #88	; 0x58
 80137c8:	f000 80c0 	beq.w	801394c <_printf_i+0x1a8>
 80137cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80137d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137d4:	e03a      	b.n	801384c <_printf_i+0xa8>
 80137d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137da:	2b15      	cmp	r3, #21
 80137dc:	d8f6      	bhi.n	80137cc <_printf_i+0x28>
 80137de:	a101      	add	r1, pc, #4	; (adr r1, 80137e4 <_printf_i+0x40>)
 80137e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137e4:	0801383d 	.word	0x0801383d
 80137e8:	08013851 	.word	0x08013851
 80137ec:	080137cd 	.word	0x080137cd
 80137f0:	080137cd 	.word	0x080137cd
 80137f4:	080137cd 	.word	0x080137cd
 80137f8:	080137cd 	.word	0x080137cd
 80137fc:	08013851 	.word	0x08013851
 8013800:	080137cd 	.word	0x080137cd
 8013804:	080137cd 	.word	0x080137cd
 8013808:	080137cd 	.word	0x080137cd
 801380c:	080137cd 	.word	0x080137cd
 8013810:	08013955 	.word	0x08013955
 8013814:	0801387d 	.word	0x0801387d
 8013818:	0801390f 	.word	0x0801390f
 801381c:	080137cd 	.word	0x080137cd
 8013820:	080137cd 	.word	0x080137cd
 8013824:	08013977 	.word	0x08013977
 8013828:	080137cd 	.word	0x080137cd
 801382c:	0801387d 	.word	0x0801387d
 8013830:	080137cd 	.word	0x080137cd
 8013834:	080137cd 	.word	0x080137cd
 8013838:	08013917 	.word	0x08013917
 801383c:	682b      	ldr	r3, [r5, #0]
 801383e:	1d1a      	adds	r2, r3, #4
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	602a      	str	r2, [r5, #0]
 8013844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801384c:	2301      	movs	r3, #1
 801384e:	e09f      	b.n	8013990 <_printf_i+0x1ec>
 8013850:	6820      	ldr	r0, [r4, #0]
 8013852:	682b      	ldr	r3, [r5, #0]
 8013854:	0607      	lsls	r7, r0, #24
 8013856:	f103 0104 	add.w	r1, r3, #4
 801385a:	6029      	str	r1, [r5, #0]
 801385c:	d501      	bpl.n	8013862 <_printf_i+0xbe>
 801385e:	681e      	ldr	r6, [r3, #0]
 8013860:	e003      	b.n	801386a <_printf_i+0xc6>
 8013862:	0646      	lsls	r6, r0, #25
 8013864:	d5fb      	bpl.n	801385e <_printf_i+0xba>
 8013866:	f9b3 6000 	ldrsh.w	r6, [r3]
 801386a:	2e00      	cmp	r6, #0
 801386c:	da03      	bge.n	8013876 <_printf_i+0xd2>
 801386e:	232d      	movs	r3, #45	; 0x2d
 8013870:	4276      	negs	r6, r6
 8013872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013876:	485a      	ldr	r0, [pc, #360]	; (80139e0 <_printf_i+0x23c>)
 8013878:	230a      	movs	r3, #10
 801387a:	e012      	b.n	80138a2 <_printf_i+0xfe>
 801387c:	682b      	ldr	r3, [r5, #0]
 801387e:	6820      	ldr	r0, [r4, #0]
 8013880:	1d19      	adds	r1, r3, #4
 8013882:	6029      	str	r1, [r5, #0]
 8013884:	0605      	lsls	r5, r0, #24
 8013886:	d501      	bpl.n	801388c <_printf_i+0xe8>
 8013888:	681e      	ldr	r6, [r3, #0]
 801388a:	e002      	b.n	8013892 <_printf_i+0xee>
 801388c:	0641      	lsls	r1, r0, #25
 801388e:	d5fb      	bpl.n	8013888 <_printf_i+0xe4>
 8013890:	881e      	ldrh	r6, [r3, #0]
 8013892:	4853      	ldr	r0, [pc, #332]	; (80139e0 <_printf_i+0x23c>)
 8013894:	2f6f      	cmp	r7, #111	; 0x6f
 8013896:	bf0c      	ite	eq
 8013898:	2308      	moveq	r3, #8
 801389a:	230a      	movne	r3, #10
 801389c:	2100      	movs	r1, #0
 801389e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80138a2:	6865      	ldr	r5, [r4, #4]
 80138a4:	60a5      	str	r5, [r4, #8]
 80138a6:	2d00      	cmp	r5, #0
 80138a8:	bfa2      	ittt	ge
 80138aa:	6821      	ldrge	r1, [r4, #0]
 80138ac:	f021 0104 	bicge.w	r1, r1, #4
 80138b0:	6021      	strge	r1, [r4, #0]
 80138b2:	b90e      	cbnz	r6, 80138b8 <_printf_i+0x114>
 80138b4:	2d00      	cmp	r5, #0
 80138b6:	d04b      	beq.n	8013950 <_printf_i+0x1ac>
 80138b8:	4615      	mov	r5, r2
 80138ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80138be:	fb03 6711 	mls	r7, r3, r1, r6
 80138c2:	5dc7      	ldrb	r7, [r0, r7]
 80138c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80138c8:	4637      	mov	r7, r6
 80138ca:	42bb      	cmp	r3, r7
 80138cc:	460e      	mov	r6, r1
 80138ce:	d9f4      	bls.n	80138ba <_printf_i+0x116>
 80138d0:	2b08      	cmp	r3, #8
 80138d2:	d10b      	bne.n	80138ec <_printf_i+0x148>
 80138d4:	6823      	ldr	r3, [r4, #0]
 80138d6:	07de      	lsls	r6, r3, #31
 80138d8:	d508      	bpl.n	80138ec <_printf_i+0x148>
 80138da:	6923      	ldr	r3, [r4, #16]
 80138dc:	6861      	ldr	r1, [r4, #4]
 80138de:	4299      	cmp	r1, r3
 80138e0:	bfde      	ittt	le
 80138e2:	2330      	movle	r3, #48	; 0x30
 80138e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80138e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80138ec:	1b52      	subs	r2, r2, r5
 80138ee:	6122      	str	r2, [r4, #16]
 80138f0:	f8cd a000 	str.w	sl, [sp]
 80138f4:	464b      	mov	r3, r9
 80138f6:	aa03      	add	r2, sp, #12
 80138f8:	4621      	mov	r1, r4
 80138fa:	4640      	mov	r0, r8
 80138fc:	f7ff fee4 	bl	80136c8 <_printf_common>
 8013900:	3001      	adds	r0, #1
 8013902:	d14a      	bne.n	801399a <_printf_i+0x1f6>
 8013904:	f04f 30ff 	mov.w	r0, #4294967295
 8013908:	b004      	add	sp, #16
 801390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801390e:	6823      	ldr	r3, [r4, #0]
 8013910:	f043 0320 	orr.w	r3, r3, #32
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	4833      	ldr	r0, [pc, #204]	; (80139e4 <_printf_i+0x240>)
 8013918:	2778      	movs	r7, #120	; 0x78
 801391a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801391e:	6823      	ldr	r3, [r4, #0]
 8013920:	6829      	ldr	r1, [r5, #0]
 8013922:	061f      	lsls	r7, r3, #24
 8013924:	f851 6b04 	ldr.w	r6, [r1], #4
 8013928:	d402      	bmi.n	8013930 <_printf_i+0x18c>
 801392a:	065f      	lsls	r7, r3, #25
 801392c:	bf48      	it	mi
 801392e:	b2b6      	uxthmi	r6, r6
 8013930:	07df      	lsls	r7, r3, #31
 8013932:	bf48      	it	mi
 8013934:	f043 0320 	orrmi.w	r3, r3, #32
 8013938:	6029      	str	r1, [r5, #0]
 801393a:	bf48      	it	mi
 801393c:	6023      	strmi	r3, [r4, #0]
 801393e:	b91e      	cbnz	r6, 8013948 <_printf_i+0x1a4>
 8013940:	6823      	ldr	r3, [r4, #0]
 8013942:	f023 0320 	bic.w	r3, r3, #32
 8013946:	6023      	str	r3, [r4, #0]
 8013948:	2310      	movs	r3, #16
 801394a:	e7a7      	b.n	801389c <_printf_i+0xf8>
 801394c:	4824      	ldr	r0, [pc, #144]	; (80139e0 <_printf_i+0x23c>)
 801394e:	e7e4      	b.n	801391a <_printf_i+0x176>
 8013950:	4615      	mov	r5, r2
 8013952:	e7bd      	b.n	80138d0 <_printf_i+0x12c>
 8013954:	682b      	ldr	r3, [r5, #0]
 8013956:	6826      	ldr	r6, [r4, #0]
 8013958:	6961      	ldr	r1, [r4, #20]
 801395a:	1d18      	adds	r0, r3, #4
 801395c:	6028      	str	r0, [r5, #0]
 801395e:	0635      	lsls	r5, r6, #24
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	d501      	bpl.n	8013968 <_printf_i+0x1c4>
 8013964:	6019      	str	r1, [r3, #0]
 8013966:	e002      	b.n	801396e <_printf_i+0x1ca>
 8013968:	0670      	lsls	r0, r6, #25
 801396a:	d5fb      	bpl.n	8013964 <_printf_i+0x1c0>
 801396c:	8019      	strh	r1, [r3, #0]
 801396e:	2300      	movs	r3, #0
 8013970:	6123      	str	r3, [r4, #16]
 8013972:	4615      	mov	r5, r2
 8013974:	e7bc      	b.n	80138f0 <_printf_i+0x14c>
 8013976:	682b      	ldr	r3, [r5, #0]
 8013978:	1d1a      	adds	r2, r3, #4
 801397a:	602a      	str	r2, [r5, #0]
 801397c:	681d      	ldr	r5, [r3, #0]
 801397e:	6862      	ldr	r2, [r4, #4]
 8013980:	2100      	movs	r1, #0
 8013982:	4628      	mov	r0, r5
 8013984:	f7ec fc34 	bl	80001f0 <memchr>
 8013988:	b108      	cbz	r0, 801398e <_printf_i+0x1ea>
 801398a:	1b40      	subs	r0, r0, r5
 801398c:	6060      	str	r0, [r4, #4]
 801398e:	6863      	ldr	r3, [r4, #4]
 8013990:	6123      	str	r3, [r4, #16]
 8013992:	2300      	movs	r3, #0
 8013994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013998:	e7aa      	b.n	80138f0 <_printf_i+0x14c>
 801399a:	6923      	ldr	r3, [r4, #16]
 801399c:	462a      	mov	r2, r5
 801399e:	4649      	mov	r1, r9
 80139a0:	4640      	mov	r0, r8
 80139a2:	47d0      	blx	sl
 80139a4:	3001      	adds	r0, #1
 80139a6:	d0ad      	beq.n	8013904 <_printf_i+0x160>
 80139a8:	6823      	ldr	r3, [r4, #0]
 80139aa:	079b      	lsls	r3, r3, #30
 80139ac:	d413      	bmi.n	80139d6 <_printf_i+0x232>
 80139ae:	68e0      	ldr	r0, [r4, #12]
 80139b0:	9b03      	ldr	r3, [sp, #12]
 80139b2:	4298      	cmp	r0, r3
 80139b4:	bfb8      	it	lt
 80139b6:	4618      	movlt	r0, r3
 80139b8:	e7a6      	b.n	8013908 <_printf_i+0x164>
 80139ba:	2301      	movs	r3, #1
 80139bc:	4632      	mov	r2, r6
 80139be:	4649      	mov	r1, r9
 80139c0:	4640      	mov	r0, r8
 80139c2:	47d0      	blx	sl
 80139c4:	3001      	adds	r0, #1
 80139c6:	d09d      	beq.n	8013904 <_printf_i+0x160>
 80139c8:	3501      	adds	r5, #1
 80139ca:	68e3      	ldr	r3, [r4, #12]
 80139cc:	9903      	ldr	r1, [sp, #12]
 80139ce:	1a5b      	subs	r3, r3, r1
 80139d0:	42ab      	cmp	r3, r5
 80139d2:	dcf2      	bgt.n	80139ba <_printf_i+0x216>
 80139d4:	e7eb      	b.n	80139ae <_printf_i+0x20a>
 80139d6:	2500      	movs	r5, #0
 80139d8:	f104 0619 	add.w	r6, r4, #25
 80139dc:	e7f5      	b.n	80139ca <_printf_i+0x226>
 80139de:	bf00      	nop
 80139e0:	08016a5e 	.word	0x08016a5e
 80139e4:	08016a6f 	.word	0x08016a6f

080139e8 <__sflush_r>:
 80139e8:	898a      	ldrh	r2, [r1, #12]
 80139ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ee:	4605      	mov	r5, r0
 80139f0:	0710      	lsls	r0, r2, #28
 80139f2:	460c      	mov	r4, r1
 80139f4:	d458      	bmi.n	8013aa8 <__sflush_r+0xc0>
 80139f6:	684b      	ldr	r3, [r1, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	dc05      	bgt.n	8013a08 <__sflush_r+0x20>
 80139fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	dc02      	bgt.n	8013a08 <__sflush_r+0x20>
 8013a02:	2000      	movs	r0, #0
 8013a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a0a:	2e00      	cmp	r6, #0
 8013a0c:	d0f9      	beq.n	8013a02 <__sflush_r+0x1a>
 8013a0e:	2300      	movs	r3, #0
 8013a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a14:	682f      	ldr	r7, [r5, #0]
 8013a16:	6a21      	ldr	r1, [r4, #32]
 8013a18:	602b      	str	r3, [r5, #0]
 8013a1a:	d032      	beq.n	8013a82 <__sflush_r+0x9a>
 8013a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a1e:	89a3      	ldrh	r3, [r4, #12]
 8013a20:	075a      	lsls	r2, r3, #29
 8013a22:	d505      	bpl.n	8013a30 <__sflush_r+0x48>
 8013a24:	6863      	ldr	r3, [r4, #4]
 8013a26:	1ac0      	subs	r0, r0, r3
 8013a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a2a:	b10b      	cbz	r3, 8013a30 <__sflush_r+0x48>
 8013a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a2e:	1ac0      	subs	r0, r0, r3
 8013a30:	2300      	movs	r3, #0
 8013a32:	4602      	mov	r2, r0
 8013a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a36:	6a21      	ldr	r1, [r4, #32]
 8013a38:	4628      	mov	r0, r5
 8013a3a:	47b0      	blx	r6
 8013a3c:	1c43      	adds	r3, r0, #1
 8013a3e:	89a3      	ldrh	r3, [r4, #12]
 8013a40:	d106      	bne.n	8013a50 <__sflush_r+0x68>
 8013a42:	6829      	ldr	r1, [r5, #0]
 8013a44:	291d      	cmp	r1, #29
 8013a46:	d82b      	bhi.n	8013aa0 <__sflush_r+0xb8>
 8013a48:	4a29      	ldr	r2, [pc, #164]	; (8013af0 <__sflush_r+0x108>)
 8013a4a:	410a      	asrs	r2, r1
 8013a4c:	07d6      	lsls	r6, r2, #31
 8013a4e:	d427      	bmi.n	8013aa0 <__sflush_r+0xb8>
 8013a50:	2200      	movs	r2, #0
 8013a52:	6062      	str	r2, [r4, #4]
 8013a54:	04d9      	lsls	r1, r3, #19
 8013a56:	6922      	ldr	r2, [r4, #16]
 8013a58:	6022      	str	r2, [r4, #0]
 8013a5a:	d504      	bpl.n	8013a66 <__sflush_r+0x7e>
 8013a5c:	1c42      	adds	r2, r0, #1
 8013a5e:	d101      	bne.n	8013a64 <__sflush_r+0x7c>
 8013a60:	682b      	ldr	r3, [r5, #0]
 8013a62:	b903      	cbnz	r3, 8013a66 <__sflush_r+0x7e>
 8013a64:	6560      	str	r0, [r4, #84]	; 0x54
 8013a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a68:	602f      	str	r7, [r5, #0]
 8013a6a:	2900      	cmp	r1, #0
 8013a6c:	d0c9      	beq.n	8013a02 <__sflush_r+0x1a>
 8013a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a72:	4299      	cmp	r1, r3
 8013a74:	d002      	beq.n	8013a7c <__sflush_r+0x94>
 8013a76:	4628      	mov	r0, r5
 8013a78:	f7ff fbe2 	bl	8013240 <_free_r>
 8013a7c:	2000      	movs	r0, #0
 8013a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8013a80:	e7c0      	b.n	8013a04 <__sflush_r+0x1c>
 8013a82:	2301      	movs	r3, #1
 8013a84:	4628      	mov	r0, r5
 8013a86:	47b0      	blx	r6
 8013a88:	1c41      	adds	r1, r0, #1
 8013a8a:	d1c8      	bne.n	8013a1e <__sflush_r+0x36>
 8013a8c:	682b      	ldr	r3, [r5, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d0c5      	beq.n	8013a1e <__sflush_r+0x36>
 8013a92:	2b1d      	cmp	r3, #29
 8013a94:	d001      	beq.n	8013a9a <__sflush_r+0xb2>
 8013a96:	2b16      	cmp	r3, #22
 8013a98:	d101      	bne.n	8013a9e <__sflush_r+0xb6>
 8013a9a:	602f      	str	r7, [r5, #0]
 8013a9c:	e7b1      	b.n	8013a02 <__sflush_r+0x1a>
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aa4:	81a3      	strh	r3, [r4, #12]
 8013aa6:	e7ad      	b.n	8013a04 <__sflush_r+0x1c>
 8013aa8:	690f      	ldr	r7, [r1, #16]
 8013aaa:	2f00      	cmp	r7, #0
 8013aac:	d0a9      	beq.n	8013a02 <__sflush_r+0x1a>
 8013aae:	0793      	lsls	r3, r2, #30
 8013ab0:	680e      	ldr	r6, [r1, #0]
 8013ab2:	bf08      	it	eq
 8013ab4:	694b      	ldreq	r3, [r1, #20]
 8013ab6:	600f      	str	r7, [r1, #0]
 8013ab8:	bf18      	it	ne
 8013aba:	2300      	movne	r3, #0
 8013abc:	eba6 0807 	sub.w	r8, r6, r7
 8013ac0:	608b      	str	r3, [r1, #8]
 8013ac2:	f1b8 0f00 	cmp.w	r8, #0
 8013ac6:	dd9c      	ble.n	8013a02 <__sflush_r+0x1a>
 8013ac8:	6a21      	ldr	r1, [r4, #32]
 8013aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013acc:	4643      	mov	r3, r8
 8013ace:	463a      	mov	r2, r7
 8013ad0:	4628      	mov	r0, r5
 8013ad2:	47b0      	blx	r6
 8013ad4:	2800      	cmp	r0, #0
 8013ad6:	dc06      	bgt.n	8013ae6 <__sflush_r+0xfe>
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ade:	81a3      	strh	r3, [r4, #12]
 8013ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae4:	e78e      	b.n	8013a04 <__sflush_r+0x1c>
 8013ae6:	4407      	add	r7, r0
 8013ae8:	eba8 0800 	sub.w	r8, r8, r0
 8013aec:	e7e9      	b.n	8013ac2 <__sflush_r+0xda>
 8013aee:	bf00      	nop
 8013af0:	dfbffffe 	.word	0xdfbffffe

08013af4 <_fflush_r>:
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	690b      	ldr	r3, [r1, #16]
 8013af8:	4605      	mov	r5, r0
 8013afa:	460c      	mov	r4, r1
 8013afc:	b913      	cbnz	r3, 8013b04 <_fflush_r+0x10>
 8013afe:	2500      	movs	r5, #0
 8013b00:	4628      	mov	r0, r5
 8013b02:	bd38      	pop	{r3, r4, r5, pc}
 8013b04:	b118      	cbz	r0, 8013b0e <_fflush_r+0x1a>
 8013b06:	6a03      	ldr	r3, [r0, #32]
 8013b08:	b90b      	cbnz	r3, 8013b0e <_fflush_r+0x1a>
 8013b0a:	f7ff fa5b 	bl	8012fc4 <__sinit>
 8013b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d0f3      	beq.n	8013afe <_fflush_r+0xa>
 8013b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b18:	07d0      	lsls	r0, r2, #31
 8013b1a:	d404      	bmi.n	8013b26 <_fflush_r+0x32>
 8013b1c:	0599      	lsls	r1, r3, #22
 8013b1e:	d402      	bmi.n	8013b26 <_fflush_r+0x32>
 8013b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b22:	f7ff fb5e 	bl	80131e2 <__retarget_lock_acquire_recursive>
 8013b26:	4628      	mov	r0, r5
 8013b28:	4621      	mov	r1, r4
 8013b2a:	f7ff ff5d 	bl	80139e8 <__sflush_r>
 8013b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b30:	07da      	lsls	r2, r3, #31
 8013b32:	4605      	mov	r5, r0
 8013b34:	d4e4      	bmi.n	8013b00 <_fflush_r+0xc>
 8013b36:	89a3      	ldrh	r3, [r4, #12]
 8013b38:	059b      	lsls	r3, r3, #22
 8013b3a:	d4e1      	bmi.n	8013b00 <_fflush_r+0xc>
 8013b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b3e:	f7ff fb51 	bl	80131e4 <__retarget_lock_release_recursive>
 8013b42:	e7dd      	b.n	8013b00 <_fflush_r+0xc>

08013b44 <fiprintf>:
 8013b44:	b40e      	push	{r1, r2, r3}
 8013b46:	b503      	push	{r0, r1, lr}
 8013b48:	4601      	mov	r1, r0
 8013b4a:	ab03      	add	r3, sp, #12
 8013b4c:	4805      	ldr	r0, [pc, #20]	; (8013b64 <fiprintf+0x20>)
 8013b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b52:	6800      	ldr	r0, [r0, #0]
 8013b54:	9301      	str	r3, [sp, #4]
 8013b56:	f7ff fc9d 	bl	8013494 <_vfiprintf_r>
 8013b5a:	b002      	add	sp, #8
 8013b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b60:	b003      	add	sp, #12
 8013b62:	4770      	bx	lr
 8013b64:	20000088 	.word	0x20000088

08013b68 <__swbuf_r>:
 8013b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6a:	460e      	mov	r6, r1
 8013b6c:	4614      	mov	r4, r2
 8013b6e:	4605      	mov	r5, r0
 8013b70:	b118      	cbz	r0, 8013b7a <__swbuf_r+0x12>
 8013b72:	6a03      	ldr	r3, [r0, #32]
 8013b74:	b90b      	cbnz	r3, 8013b7a <__swbuf_r+0x12>
 8013b76:	f7ff fa25 	bl	8012fc4 <__sinit>
 8013b7a:	69a3      	ldr	r3, [r4, #24]
 8013b7c:	60a3      	str	r3, [r4, #8]
 8013b7e:	89a3      	ldrh	r3, [r4, #12]
 8013b80:	071a      	lsls	r2, r3, #28
 8013b82:	d525      	bpl.n	8013bd0 <__swbuf_r+0x68>
 8013b84:	6923      	ldr	r3, [r4, #16]
 8013b86:	b31b      	cbz	r3, 8013bd0 <__swbuf_r+0x68>
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	6922      	ldr	r2, [r4, #16]
 8013b8c:	1a98      	subs	r0, r3, r2
 8013b8e:	6963      	ldr	r3, [r4, #20]
 8013b90:	b2f6      	uxtb	r6, r6
 8013b92:	4283      	cmp	r3, r0
 8013b94:	4637      	mov	r7, r6
 8013b96:	dc04      	bgt.n	8013ba2 <__swbuf_r+0x3a>
 8013b98:	4621      	mov	r1, r4
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	f7ff ffaa 	bl	8013af4 <_fflush_r>
 8013ba0:	b9e0      	cbnz	r0, 8013bdc <__swbuf_r+0x74>
 8013ba2:	68a3      	ldr	r3, [r4, #8]
 8013ba4:	3b01      	subs	r3, #1
 8013ba6:	60a3      	str	r3, [r4, #8]
 8013ba8:	6823      	ldr	r3, [r4, #0]
 8013baa:	1c5a      	adds	r2, r3, #1
 8013bac:	6022      	str	r2, [r4, #0]
 8013bae:	701e      	strb	r6, [r3, #0]
 8013bb0:	6962      	ldr	r2, [r4, #20]
 8013bb2:	1c43      	adds	r3, r0, #1
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d004      	beq.n	8013bc2 <__swbuf_r+0x5a>
 8013bb8:	89a3      	ldrh	r3, [r4, #12]
 8013bba:	07db      	lsls	r3, r3, #31
 8013bbc:	d506      	bpl.n	8013bcc <__swbuf_r+0x64>
 8013bbe:	2e0a      	cmp	r6, #10
 8013bc0:	d104      	bne.n	8013bcc <__swbuf_r+0x64>
 8013bc2:	4621      	mov	r1, r4
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	f7ff ff95 	bl	8013af4 <_fflush_r>
 8013bca:	b938      	cbnz	r0, 8013bdc <__swbuf_r+0x74>
 8013bcc:	4638      	mov	r0, r7
 8013bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f000 f806 	bl	8013be4 <__swsetup_r>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d0d5      	beq.n	8013b88 <__swbuf_r+0x20>
 8013bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8013be0:	e7f4      	b.n	8013bcc <__swbuf_r+0x64>
	...

08013be4 <__swsetup_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4b2a      	ldr	r3, [pc, #168]	; (8013c90 <__swsetup_r+0xac>)
 8013be8:	4605      	mov	r5, r0
 8013bea:	6818      	ldr	r0, [r3, #0]
 8013bec:	460c      	mov	r4, r1
 8013bee:	b118      	cbz	r0, 8013bf8 <__swsetup_r+0x14>
 8013bf0:	6a03      	ldr	r3, [r0, #32]
 8013bf2:	b90b      	cbnz	r3, 8013bf8 <__swsetup_r+0x14>
 8013bf4:	f7ff f9e6 	bl	8012fc4 <__sinit>
 8013bf8:	89a3      	ldrh	r3, [r4, #12]
 8013bfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013bfe:	0718      	lsls	r0, r3, #28
 8013c00:	d422      	bmi.n	8013c48 <__swsetup_r+0x64>
 8013c02:	06d9      	lsls	r1, r3, #27
 8013c04:	d407      	bmi.n	8013c16 <__swsetup_r+0x32>
 8013c06:	2309      	movs	r3, #9
 8013c08:	602b      	str	r3, [r5, #0]
 8013c0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c0e:	81a3      	strh	r3, [r4, #12]
 8013c10:	f04f 30ff 	mov.w	r0, #4294967295
 8013c14:	e034      	b.n	8013c80 <__swsetup_r+0x9c>
 8013c16:	0758      	lsls	r0, r3, #29
 8013c18:	d512      	bpl.n	8013c40 <__swsetup_r+0x5c>
 8013c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c1c:	b141      	cbz	r1, 8013c30 <__swsetup_r+0x4c>
 8013c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c22:	4299      	cmp	r1, r3
 8013c24:	d002      	beq.n	8013c2c <__swsetup_r+0x48>
 8013c26:	4628      	mov	r0, r5
 8013c28:	f7ff fb0a 	bl	8013240 <_free_r>
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8013c30:	89a3      	ldrh	r3, [r4, #12]
 8013c32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c36:	81a3      	strh	r3, [r4, #12]
 8013c38:	2300      	movs	r3, #0
 8013c3a:	6063      	str	r3, [r4, #4]
 8013c3c:	6923      	ldr	r3, [r4, #16]
 8013c3e:	6023      	str	r3, [r4, #0]
 8013c40:	89a3      	ldrh	r3, [r4, #12]
 8013c42:	f043 0308 	orr.w	r3, r3, #8
 8013c46:	81a3      	strh	r3, [r4, #12]
 8013c48:	6923      	ldr	r3, [r4, #16]
 8013c4a:	b94b      	cbnz	r3, 8013c60 <__swsetup_r+0x7c>
 8013c4c:	89a3      	ldrh	r3, [r4, #12]
 8013c4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c56:	d003      	beq.n	8013c60 <__swsetup_r+0x7c>
 8013c58:	4621      	mov	r1, r4
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	f000 f857 	bl	8013d0e <__smakebuf_r>
 8013c60:	89a0      	ldrh	r0, [r4, #12]
 8013c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c66:	f010 0301 	ands.w	r3, r0, #1
 8013c6a:	d00a      	beq.n	8013c82 <__swsetup_r+0x9e>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	60a3      	str	r3, [r4, #8]
 8013c70:	6963      	ldr	r3, [r4, #20]
 8013c72:	425b      	negs	r3, r3
 8013c74:	61a3      	str	r3, [r4, #24]
 8013c76:	6923      	ldr	r3, [r4, #16]
 8013c78:	b943      	cbnz	r3, 8013c8c <__swsetup_r+0xa8>
 8013c7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013c7e:	d1c4      	bne.n	8013c0a <__swsetup_r+0x26>
 8013c80:	bd38      	pop	{r3, r4, r5, pc}
 8013c82:	0781      	lsls	r1, r0, #30
 8013c84:	bf58      	it	pl
 8013c86:	6963      	ldrpl	r3, [r4, #20]
 8013c88:	60a3      	str	r3, [r4, #8]
 8013c8a:	e7f4      	b.n	8013c76 <__swsetup_r+0x92>
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	e7f7      	b.n	8013c80 <__swsetup_r+0x9c>
 8013c90:	20000088 	.word	0x20000088

08013c94 <_sbrk_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d06      	ldr	r5, [pc, #24]	; (8013cb0 <_sbrk_r+0x1c>)
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	4608      	mov	r0, r1
 8013c9e:	602b      	str	r3, [r5, #0]
 8013ca0:	f7ef fb5a 	bl	8003358 <_sbrk>
 8013ca4:	1c43      	adds	r3, r0, #1
 8013ca6:	d102      	bne.n	8013cae <_sbrk_r+0x1a>
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	b103      	cbz	r3, 8013cae <_sbrk_r+0x1a>
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	bd38      	pop	{r3, r4, r5, pc}
 8013cb0:	2000abb0 	.word	0x2000abb0

08013cb4 <abort>:
 8013cb4:	b508      	push	{r3, lr}
 8013cb6:	2006      	movs	r0, #6
 8013cb8:	f000 f88e 	bl	8013dd8 <raise>
 8013cbc:	2001      	movs	r0, #1
 8013cbe:	f7ef fad3 	bl	8003268 <_exit>

08013cc2 <__swhatbuf_r>:
 8013cc2:	b570      	push	{r4, r5, r6, lr}
 8013cc4:	460c      	mov	r4, r1
 8013cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cca:	2900      	cmp	r1, #0
 8013ccc:	b096      	sub	sp, #88	; 0x58
 8013cce:	4615      	mov	r5, r2
 8013cd0:	461e      	mov	r6, r3
 8013cd2:	da0d      	bge.n	8013cf0 <__swhatbuf_r+0x2e>
 8013cd4:	89a3      	ldrh	r3, [r4, #12]
 8013cd6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013cda:	f04f 0100 	mov.w	r1, #0
 8013cde:	bf0c      	ite	eq
 8013ce0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013ce4:	2340      	movne	r3, #64	; 0x40
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	6031      	str	r1, [r6, #0]
 8013cea:	602b      	str	r3, [r5, #0]
 8013cec:	b016      	add	sp, #88	; 0x58
 8013cee:	bd70      	pop	{r4, r5, r6, pc}
 8013cf0:	466a      	mov	r2, sp
 8013cf2:	f000 f879 	bl	8013de8 <_fstat_r>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	dbec      	blt.n	8013cd4 <__swhatbuf_r+0x12>
 8013cfa:	9901      	ldr	r1, [sp, #4]
 8013cfc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013d00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013d04:	4259      	negs	r1, r3
 8013d06:	4159      	adcs	r1, r3
 8013d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d0c:	e7eb      	b.n	8013ce6 <__swhatbuf_r+0x24>

08013d0e <__smakebuf_r>:
 8013d0e:	898b      	ldrh	r3, [r1, #12]
 8013d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d12:	079d      	lsls	r5, r3, #30
 8013d14:	4606      	mov	r6, r0
 8013d16:	460c      	mov	r4, r1
 8013d18:	d507      	bpl.n	8013d2a <__smakebuf_r+0x1c>
 8013d1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d1e:	6023      	str	r3, [r4, #0]
 8013d20:	6123      	str	r3, [r4, #16]
 8013d22:	2301      	movs	r3, #1
 8013d24:	6163      	str	r3, [r4, #20]
 8013d26:	b002      	add	sp, #8
 8013d28:	bd70      	pop	{r4, r5, r6, pc}
 8013d2a:	ab01      	add	r3, sp, #4
 8013d2c:	466a      	mov	r2, sp
 8013d2e:	f7ff ffc8 	bl	8013cc2 <__swhatbuf_r>
 8013d32:	9900      	ldr	r1, [sp, #0]
 8013d34:	4605      	mov	r5, r0
 8013d36:	4630      	mov	r0, r6
 8013d38:	f7ff faf6 	bl	8013328 <_malloc_r>
 8013d3c:	b948      	cbnz	r0, 8013d52 <__smakebuf_r+0x44>
 8013d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d42:	059a      	lsls	r2, r3, #22
 8013d44:	d4ef      	bmi.n	8013d26 <__smakebuf_r+0x18>
 8013d46:	f023 0303 	bic.w	r3, r3, #3
 8013d4a:	f043 0302 	orr.w	r3, r3, #2
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	e7e3      	b.n	8013d1a <__smakebuf_r+0xc>
 8013d52:	89a3      	ldrh	r3, [r4, #12]
 8013d54:	6020      	str	r0, [r4, #0]
 8013d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d5a:	81a3      	strh	r3, [r4, #12]
 8013d5c:	9b00      	ldr	r3, [sp, #0]
 8013d5e:	6163      	str	r3, [r4, #20]
 8013d60:	9b01      	ldr	r3, [sp, #4]
 8013d62:	6120      	str	r0, [r4, #16]
 8013d64:	b15b      	cbz	r3, 8013d7e <__smakebuf_r+0x70>
 8013d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	f000 f84e 	bl	8013e0c <_isatty_r>
 8013d70:	b128      	cbz	r0, 8013d7e <__smakebuf_r+0x70>
 8013d72:	89a3      	ldrh	r3, [r4, #12]
 8013d74:	f023 0303 	bic.w	r3, r3, #3
 8013d78:	f043 0301 	orr.w	r3, r3, #1
 8013d7c:	81a3      	strh	r3, [r4, #12]
 8013d7e:	89a3      	ldrh	r3, [r4, #12]
 8013d80:	431d      	orrs	r5, r3
 8013d82:	81a5      	strh	r5, [r4, #12]
 8013d84:	e7cf      	b.n	8013d26 <__smakebuf_r+0x18>

08013d86 <_raise_r>:
 8013d86:	291f      	cmp	r1, #31
 8013d88:	b538      	push	{r3, r4, r5, lr}
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	460d      	mov	r5, r1
 8013d8e:	d904      	bls.n	8013d9a <_raise_r+0x14>
 8013d90:	2316      	movs	r3, #22
 8013d92:	6003      	str	r3, [r0, #0]
 8013d94:	f04f 30ff 	mov.w	r0, #4294967295
 8013d98:	bd38      	pop	{r3, r4, r5, pc}
 8013d9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013d9c:	b112      	cbz	r2, 8013da4 <_raise_r+0x1e>
 8013d9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013da2:	b94b      	cbnz	r3, 8013db8 <_raise_r+0x32>
 8013da4:	4620      	mov	r0, r4
 8013da6:	f000 f853 	bl	8013e50 <_getpid_r>
 8013daa:	462a      	mov	r2, r5
 8013dac:	4601      	mov	r1, r0
 8013dae:	4620      	mov	r0, r4
 8013db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013db4:	f000 b83a 	b.w	8013e2c <_kill_r>
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d00a      	beq.n	8013dd2 <_raise_r+0x4c>
 8013dbc:	1c59      	adds	r1, r3, #1
 8013dbe:	d103      	bne.n	8013dc8 <_raise_r+0x42>
 8013dc0:	2316      	movs	r3, #22
 8013dc2:	6003      	str	r3, [r0, #0]
 8013dc4:	2001      	movs	r0, #1
 8013dc6:	e7e7      	b.n	8013d98 <_raise_r+0x12>
 8013dc8:	2400      	movs	r4, #0
 8013dca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013dce:	4628      	mov	r0, r5
 8013dd0:	4798      	blx	r3
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	e7e0      	b.n	8013d98 <_raise_r+0x12>
	...

08013dd8 <raise>:
 8013dd8:	4b02      	ldr	r3, [pc, #8]	; (8013de4 <raise+0xc>)
 8013dda:	4601      	mov	r1, r0
 8013ddc:	6818      	ldr	r0, [r3, #0]
 8013dde:	f7ff bfd2 	b.w	8013d86 <_raise_r>
 8013de2:	bf00      	nop
 8013de4:	20000088 	.word	0x20000088

08013de8 <_fstat_r>:
 8013de8:	b538      	push	{r3, r4, r5, lr}
 8013dea:	4d07      	ldr	r5, [pc, #28]	; (8013e08 <_fstat_r+0x20>)
 8013dec:	2300      	movs	r3, #0
 8013dee:	4604      	mov	r4, r0
 8013df0:	4608      	mov	r0, r1
 8013df2:	4611      	mov	r1, r2
 8013df4:	602b      	str	r3, [r5, #0]
 8013df6:	f7ef fa86 	bl	8003306 <_fstat>
 8013dfa:	1c43      	adds	r3, r0, #1
 8013dfc:	d102      	bne.n	8013e04 <_fstat_r+0x1c>
 8013dfe:	682b      	ldr	r3, [r5, #0]
 8013e00:	b103      	cbz	r3, 8013e04 <_fstat_r+0x1c>
 8013e02:	6023      	str	r3, [r4, #0]
 8013e04:	bd38      	pop	{r3, r4, r5, pc}
 8013e06:	bf00      	nop
 8013e08:	2000abb0 	.word	0x2000abb0

08013e0c <_isatty_r>:
 8013e0c:	b538      	push	{r3, r4, r5, lr}
 8013e0e:	4d06      	ldr	r5, [pc, #24]	; (8013e28 <_isatty_r+0x1c>)
 8013e10:	2300      	movs	r3, #0
 8013e12:	4604      	mov	r4, r0
 8013e14:	4608      	mov	r0, r1
 8013e16:	602b      	str	r3, [r5, #0]
 8013e18:	f7ef fa85 	bl	8003326 <_isatty>
 8013e1c:	1c43      	adds	r3, r0, #1
 8013e1e:	d102      	bne.n	8013e26 <_isatty_r+0x1a>
 8013e20:	682b      	ldr	r3, [r5, #0]
 8013e22:	b103      	cbz	r3, 8013e26 <_isatty_r+0x1a>
 8013e24:	6023      	str	r3, [r4, #0]
 8013e26:	bd38      	pop	{r3, r4, r5, pc}
 8013e28:	2000abb0 	.word	0x2000abb0

08013e2c <_kill_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	4d07      	ldr	r5, [pc, #28]	; (8013e4c <_kill_r+0x20>)
 8013e30:	2300      	movs	r3, #0
 8013e32:	4604      	mov	r4, r0
 8013e34:	4608      	mov	r0, r1
 8013e36:	4611      	mov	r1, r2
 8013e38:	602b      	str	r3, [r5, #0]
 8013e3a:	f7ef fa03 	bl	8003244 <_kill>
 8013e3e:	1c43      	adds	r3, r0, #1
 8013e40:	d102      	bne.n	8013e48 <_kill_r+0x1c>
 8013e42:	682b      	ldr	r3, [r5, #0]
 8013e44:	b103      	cbz	r3, 8013e48 <_kill_r+0x1c>
 8013e46:	6023      	str	r3, [r4, #0]
 8013e48:	bd38      	pop	{r3, r4, r5, pc}
 8013e4a:	bf00      	nop
 8013e4c:	2000abb0 	.word	0x2000abb0

08013e50 <_getpid_r>:
 8013e50:	f7ef b9f0 	b.w	8003234 <_getpid>

08013e54 <_init>:
 8013e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e56:	bf00      	nop
 8013e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e5a:	bc08      	pop	{r3}
 8013e5c:	469e      	mov	lr, r3
 8013e5e:	4770      	bx	lr

08013e60 <_fini>:
 8013e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e62:	bf00      	nop
 8013e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e66:	bc08      	pop	{r3}
 8013e68:	469e      	mov	lr, r3
 8013e6a:	4770      	bx	lr
