
phy-test-UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010520  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f70  080106d0  080106d0  000206d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013640  08013640  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08013640  08013640  00023640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013648  08013648  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013648  08013648  00023648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801364c  0801364c  0002364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08013650  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000a69c  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a728  2000a728  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018e0e  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004e21  00000000  00000000  00048f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012f8  00000000  00000000  0004dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f10  00000000  00000000  0004f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f679  00000000  00000000  0004ff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022b28  00000000  00000000  0007f5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9a50  00000000  00000000  000a20d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000541c  00000000  00000000  0018bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  00190f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080106b8 	.word	0x080106b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	080106b8 	.word	0x080106b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b598      	push	{r3, r4, r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fc96 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f906 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f974 	bl	8000884 <MX_GPIO_Init>
  MX_LWIP_Init();
 800059c:	f002 fd3a 	bl	8003014 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */


 /// DP83848

  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, DP83848_PHYI1R, &phy_reg_val[0]);
 80005a0:	4b77      	ldr	r3, [pc, #476]	; (8000780 <main+0x1f4>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a76      	ldr	r2, [pc, #472]	; (8000780 <main+0x1f4>)
 80005a6:	6810      	ldr	r0, [r2, #0]
 80005a8:	4a76      	ldr	r2, [pc, #472]	; (8000784 <main+0x1f8>)
 80005aa:	6814      	ldr	r4, [r2, #0]
 80005ac:	4a76      	ldr	r2, [pc, #472]	; (8000788 <main+0x1fc>)
 80005ae:	2102      	movs	r1, #2
 80005b0:	4798      	blx	r3
 80005b2:	4603      	mov	r3, r0
 80005b4:	6023      	str	r3, [r4, #0]
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, DP83848_PHYI2R, &phy_reg_val[1]);
 80005b6:	4b72      	ldr	r3, [pc, #456]	; (8000780 <main+0x1f4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a71      	ldr	r2, [pc, #452]	; (8000780 <main+0x1f4>)
 80005bc:	6810      	ldr	r0, [r2, #0]
 80005be:	4a71      	ldr	r2, [pc, #452]	; (8000784 <main+0x1f8>)
 80005c0:	6814      	ldr	r4, [r2, #0]
 80005c2:	4a72      	ldr	r2, [pc, #456]	; (800078c <main+0x200>)
 80005c4:	2103      	movs	r1, #3
 80005c6:	4798      	blx	r3
 80005c8:	4603      	mov	r3, r0
 80005ca:	6023      	str	r3, [r4, #0]

  //BIST START
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[2]);
 80005cc:	4b6c      	ldr	r3, [pc, #432]	; (8000780 <main+0x1f4>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a6b      	ldr	r2, [pc, #428]	; (8000780 <main+0x1f4>)
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	4a6b      	ldr	r2, [pc, #428]	; (8000784 <main+0x1f8>)
 80005d6:	6814      	ldr	r4, [r2, #0]
 80005d8:	4a6d      	ldr	r2, [pc, #436]	; (8000790 <main+0x204>)
 80005da:	2119      	movs	r1, #25
 80005dc:	4798      	blx	r3
 80005de:	4603      	mov	r3, r0
 80005e0:	6023      	str	r3, [r4, #0]
  phy_reg_val[3] = phy_reg_val[2] | 0x0100; //BIST START
 80005e2:	4b69      	ldr	r3, [pc, #420]	; (8000788 <main+0x1fc>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ea:	4a67      	ldr	r2, [pc, #412]	; (8000788 <main+0x1fc>)
 80005ec:	60d3      	str	r3, [r2, #12]
  *write_reg = DP83848.IO.WriteReg(DP83848.DevAddr, 0x19, phy_reg_val[3]);
 80005ee:	4b64      	ldr	r3, [pc, #400]	; (8000780 <main+0x1f4>)
 80005f0:	691b      	ldr	r3, [r3, #16]
 80005f2:	4a63      	ldr	r2, [pc, #396]	; (8000780 <main+0x1f4>)
 80005f4:	6810      	ldr	r0, [r2, #0]
 80005f6:	4a64      	ldr	r2, [pc, #400]	; (8000788 <main+0x1fc>)
 80005f8:	68d2      	ldr	r2, [r2, #12]
 80005fa:	4966      	ldr	r1, [pc, #408]	; (8000794 <main+0x208>)
 80005fc:	680c      	ldr	r4, [r1, #0]
 80005fe:	2119      	movs	r1, #25
 8000600:	4798      	blx	r3
 8000602:	4603      	mov	r3, r0
 8000604:	6023      	str	r3, [r4, #0]
  HAL_Delay(10);
 8000606:	200a      	movs	r0, #10
 8000608:	f000 fccc 	bl	8000fa4 <HAL_Delay>
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[4]);
 800060c:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <main+0x1f4>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a5b      	ldr	r2, [pc, #364]	; (8000780 <main+0x1f4>)
 8000612:	6810      	ldr	r0, [r2, #0]
 8000614:	4a5b      	ldr	r2, [pc, #364]	; (8000784 <main+0x1f8>)
 8000616:	6814      	ldr	r4, [r2, #0]
 8000618:	4a5f      	ldr	r2, [pc, #380]	; (8000798 <main+0x20c>)
 800061a:	2119      	movs	r1, #25
 800061c:	4798      	blx	r3
 800061e:	4603      	mov	r3, r0
 8000620:	6023      	str	r3, [r4, #0]

  //BIST STop
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[2]);
 8000622:	4b57      	ldr	r3, [pc, #348]	; (8000780 <main+0x1f4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a56      	ldr	r2, [pc, #344]	; (8000780 <main+0x1f4>)
 8000628:	6810      	ldr	r0, [r2, #0]
 800062a:	4a56      	ldr	r2, [pc, #344]	; (8000784 <main+0x1f8>)
 800062c:	6814      	ldr	r4, [r2, #0]
 800062e:	4a58      	ldr	r2, [pc, #352]	; (8000790 <main+0x204>)
 8000630:	2119      	movs	r1, #25
 8000632:	4798      	blx	r3
 8000634:	4603      	mov	r3, r0
 8000636:	6023      	str	r3, [r4, #0]
  phy_reg_val[3] = phy_reg_val[2] & ~(0x0100); //BIST STop
 8000638:	4b53      	ldr	r3, [pc, #332]	; (8000788 <main+0x1fc>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000640:	4a51      	ldr	r2, [pc, #324]	; (8000788 <main+0x1fc>)
 8000642:	60d3      	str	r3, [r2, #12]
  *write_reg = DP83848.IO.WriteReg(DP83848.DevAddr, 0x19, phy_reg_val[3]);
 8000644:	4b4e      	ldr	r3, [pc, #312]	; (8000780 <main+0x1f4>)
 8000646:	691b      	ldr	r3, [r3, #16]
 8000648:	4a4d      	ldr	r2, [pc, #308]	; (8000780 <main+0x1f4>)
 800064a:	6810      	ldr	r0, [r2, #0]
 800064c:	4a4e      	ldr	r2, [pc, #312]	; (8000788 <main+0x1fc>)
 800064e:	68d2      	ldr	r2, [r2, #12]
 8000650:	4950      	ldr	r1, [pc, #320]	; (8000794 <main+0x208>)
 8000652:	680c      	ldr	r4, [r1, #0]
 8000654:	2119      	movs	r1, #25
 8000656:	4798      	blx	r3
 8000658:	4603      	mov	r3, r0
 800065a:	6023      	str	r3, [r4, #0]
  HAL_Delay(10);
 800065c:	200a      	movs	r0, #10
 800065e:	f000 fca1 	bl	8000fa4 <HAL_Delay>
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[4]);
 8000662:	4b47      	ldr	r3, [pc, #284]	; (8000780 <main+0x1f4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a46      	ldr	r2, [pc, #280]	; (8000780 <main+0x1f4>)
 8000668:	6810      	ldr	r0, [r2, #0]
 800066a:	4a46      	ldr	r2, [pc, #280]	; (8000784 <main+0x1f8>)
 800066c:	6814      	ldr	r4, [r2, #0]
 800066e:	4a4a      	ldr	r2, [pc, #296]	; (8000798 <main+0x20c>)
 8000670:	2119      	movs	r1, #25
 8000672:	4798      	blx	r3
 8000674:	4603      	mov	r3, r0
 8000676:	6023      	str	r3, [r4, #0]

  //loopback enable
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x00, &phy_reg_val[5]);
 8000678:	4b41      	ldr	r3, [pc, #260]	; (8000780 <main+0x1f4>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a40      	ldr	r2, [pc, #256]	; (8000780 <main+0x1f4>)
 800067e:	6810      	ldr	r0, [r2, #0]
 8000680:	4a40      	ldr	r2, [pc, #256]	; (8000784 <main+0x1f8>)
 8000682:	6814      	ldr	r4, [r2, #0]
 8000684:	4a45      	ldr	r2, [pc, #276]	; (800079c <main+0x210>)
 8000686:	2100      	movs	r1, #0
 8000688:	4798      	blx	r3
 800068a:	4603      	mov	r3, r0
 800068c:	6023      	str	r3, [r4, #0]
  phy_reg_val[6] = phy_reg_val[5] | 0x4000; //loopback enable
 800068e:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <main+0x1fc>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <main+0x1fc>)
 8000698:	6193      	str	r3, [r2, #24]
  *write_reg = DP83848.IO.WriteReg(DP83848.DevAddr, 0x00, phy_reg_val[6]);
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <main+0x1f4>)
 800069c:	691b      	ldr	r3, [r3, #16]
 800069e:	4a38      	ldr	r2, [pc, #224]	; (8000780 <main+0x1f4>)
 80006a0:	6810      	ldr	r0, [r2, #0]
 80006a2:	4a39      	ldr	r2, [pc, #228]	; (8000788 <main+0x1fc>)
 80006a4:	6992      	ldr	r2, [r2, #24]
 80006a6:	493b      	ldr	r1, [pc, #236]	; (8000794 <main+0x208>)
 80006a8:	680c      	ldr	r4, [r1, #0]
 80006aa:	2100      	movs	r1, #0
 80006ac:	4798      	blx	r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	6023      	str	r3, [r4, #0]
  HAL_Delay(10);
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 fc76 	bl	8000fa4 <HAL_Delay>
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x00, &phy_reg_val[7]);
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <main+0x1f4>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <main+0x1f4>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	; (8000784 <main+0x1f8>)
 80006c2:	6814      	ldr	r4, [r2, #0]
 80006c4:	4a36      	ldr	r2, [pc, #216]	; (80007a0 <main+0x214>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4798      	blx	r3
 80006ca:	4603      	mov	r3, r0
 80006cc:	6023      	str	r3, [r4, #0]

  //BIST START
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[2]);
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <main+0x1f4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <main+0x1f4>)
 80006d4:	6810      	ldr	r0, [r2, #0]
 80006d6:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <main+0x1f8>)
 80006d8:	6814      	ldr	r4, [r2, #0]
 80006da:	4a2d      	ldr	r2, [pc, #180]	; (8000790 <main+0x204>)
 80006dc:	2119      	movs	r1, #25
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	6023      	str	r3, [r4, #0]
  phy_reg_val[3] = phy_reg_val[2] | 0x0100; //BIST START
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <main+0x1fc>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <main+0x1fc>)
 80006ee:	60d3      	str	r3, [r2, #12]
  *write_reg = DP83848.IO.WriteReg(DP83848.DevAddr, 0x19, phy_reg_val[3]);
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <main+0x1f4>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a22      	ldr	r2, [pc, #136]	; (8000780 <main+0x1f4>)
 80006f6:	6810      	ldr	r0, [r2, #0]
 80006f8:	4a23      	ldr	r2, [pc, #140]	; (8000788 <main+0x1fc>)
 80006fa:	68d2      	ldr	r2, [r2, #12]
 80006fc:	4925      	ldr	r1, [pc, #148]	; (8000794 <main+0x208>)
 80006fe:	680c      	ldr	r4, [r1, #0]
 8000700:	2119      	movs	r1, #25
 8000702:	4798      	blx	r3
 8000704:	4603      	mov	r3, r0
 8000706:	6023      	str	r3, [r4, #0]
  HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f000 fc4b 	bl	8000fa4 <HAL_Delay>
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[4]);
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <main+0x1f4>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <main+0x1f4>)
 8000714:	6810      	ldr	r0, [r2, #0]
 8000716:	4a1b      	ldr	r2, [pc, #108]	; (8000784 <main+0x1f8>)
 8000718:	6814      	ldr	r4, [r2, #0]
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <main+0x20c>)
 800071c:	2119      	movs	r1, #25
 800071e:	4798      	blx	r3
 8000720:	4603      	mov	r3, r0
 8000722:	6023      	str	r3, [r4, #0]

  //BIST STop
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[2]);
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0x1f4>)
 8000726:	695b      	ldr	r3, [r3, #20]
 8000728:	4a15      	ldr	r2, [pc, #84]	; (8000780 <main+0x1f4>)
 800072a:	6810      	ldr	r0, [r2, #0]
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <main+0x1f8>)
 800072e:	6814      	ldr	r4, [r2, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <main+0x204>)
 8000732:	2119      	movs	r1, #25
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	6023      	str	r3, [r4, #0]
  phy_reg_val[3] = phy_reg_val[2] & ~(0x0100); //BIST STop
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <main+0x1fc>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <main+0x1fc>)
 8000744:	60d3      	str	r3, [r2, #12]
  *write_reg = DP83848.IO.WriteReg(DP83848.DevAddr, 0x19, phy_reg_val[3]);
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <main+0x1f4>)
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <main+0x1f4>)
 800074c:	6810      	ldr	r0, [r2, #0]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <main+0x1fc>)
 8000750:	68d2      	ldr	r2, [r2, #12]
 8000752:	4910      	ldr	r1, [pc, #64]	; (8000794 <main+0x208>)
 8000754:	680c      	ldr	r4, [r1, #0]
 8000756:	2119      	movs	r1, #25
 8000758:	4798      	blx	r3
 800075a:	4603      	mov	r3, r0
 800075c:	6023      	str	r3, [r4, #0]
  HAL_Delay(10);
 800075e:	200a      	movs	r0, #10
 8000760:	f000 fc20 	bl	8000fa4 <HAL_Delay>
  *read_reg = DP83848.IO.ReadReg(DP83848.DevAddr, 0x19, &phy_reg_val[4]);
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <main+0x1f4>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4a05      	ldr	r2, [pc, #20]	; (8000780 <main+0x1f4>)
 800076a:	6810      	ldr	r0, [r2, #0]
 800076c:	4a05      	ldr	r2, [pc, #20]	; (8000784 <main+0x1f8>)
 800076e:	6814      	ldr	r4, [r2, #0]
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <main+0x20c>)
 8000772:	2119      	movs	r1, #25
 8000774:	4798      	blx	r3
 8000776:	4603      	mov	r3, r0
 8000778:	6023      	str	r3, [r4, #0]
  while (1)
  {

	  //HAL_I2C_Master_Receive(&hi2c2, (0x80 <<1), i2c_data, 5, 100);

	  MX_LWIP_Process();
 800077a:	f002 fc9d 	bl	80030b8 <MX_LWIP_Process>
 800077e:	e7fc      	b.n	800077a <main+0x1ee>
 8000780:	20004cdc 	.word	0x20004cdc
 8000784:	200000d0 	.word	0x200000d0
 8000788:	200000a8 	.word	0x200000a8
 800078c:	200000ac 	.word	0x200000ac
 8000790:	200000b0 	.word	0x200000b0
 8000794:	200000d4 	.word	0x200000d4
 8000798:	200000b8 	.word	0x200000b8
 800079c:	200000bc 	.word	0x200000bc
 80007a0:	200000c4 	.word	0x200000c4

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f00f f8d3 	bl	800f95e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <SystemClock_Config+0xd8>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a2a      	ldr	r2, [pc, #168]	; (800087c <SystemClock_Config+0xd8>)
 80007d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xd8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xdc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <SystemClock_Config+0xdc>)
 80007ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xdc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000808:	2310      	movs	r3, #16
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000814:	2308      	movs	r3, #8
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000818:	23b4      	movs	r3, #180	; 0xb4
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f001 ffc3 	bl	80027b4 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000834:	f000 f886 	bl	8000944 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000838:	f001 ff6c 	bl	8002714 <HAL_PWREx_EnableOverDrive>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000842:	f000 f87f 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000852:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2105      	movs	r1, #5
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fa1d 	bl	8002ca4 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000870:	f000 f868 	bl	8000944 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3750      	adds	r7, #80	; 0x50
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0xbc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <MX_GPIO_Init+0xbc>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0xbc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a24      	ldr	r2, [pc, #144]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_GPIO_Init+0xbc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_GPIO_Init+0xbc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <MX_GPIO_Init+0xbc>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_GPIO_Init+0xbc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_GPIO_Init+0xbc>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <MX_GPIO_Init+0xbc>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_GPIO_Init+0xbc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	371c      	adds	r7, #28
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_MspInit+0x4c>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 faba 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return 1;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_kill>:

int _kill(int pid, int sig)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <_kill+0x20>)
 8000a10:	2216      	movs	r2, #22
 8000a12:	601a      	str	r2, [r3, #0]
  return -1;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	2000a718 	.word	0x2000a718

08000a28 <_exit>:

void _exit (int status)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ffe5 	bl	8000a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a3a:	e7fe      	b.n	8000a3a <_exit+0x12>

08000a3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
  }

  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
  }
  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_isatty>:

int _isatty(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d205      	bcs.n	8000b54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <_sbrk+0x6c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20030000 	.word	0x20030000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200000d8 	.word	0x200000d8
 8000b80:	2000a728 	.word	0x2000a728
 8000b84:	2000a718 	.word	0x2000a718

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb0:	f7ff ffea 	bl	8000b88 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bda:	f00e ff0f 	bl	800f9fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fcd5 	bl	800058c <main>
  bx  lr    
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000be4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bec:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000bf0:	08013650 	.word	0x08013650
  ldr r2, =_sbss
 8000bf4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000bf8:	2000a728 	.word	0x2000a728

08000bfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC_IRQHandler>

08000bfe <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <DP83848_RegisterBusIO+0x28>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <DP83848_RegisterBusIO+0x28>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <DP83848_RegisterBusIO+0x28>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e014      	b.n	8000c56 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d17c      	bne.n	8000d7c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2220      	movs	r2, #32
 8000c94:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e01c      	b.n	8000cd6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	f107 0208 	add.w	r2, r7, #8
 8000ca4:	2119      	movs	r1, #25
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	4798      	blx	r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	da03      	bge.n	8000cb8 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000cb0:	f06f 0304 	mvn.w	r3, #4
 8000cb4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000cb6:	e00b      	b.n	8000cd0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d105      	bne.n	8000cd0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
         break;
 8000cce:	e005      	b.n	8000cdc <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b1f      	cmp	r3, #31
 8000cda:	d9df      	bls.n	8000c9c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b1f      	cmp	r3, #31
 8000ce2:	d902      	bls.n	8000cea <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000ce4:	f06f 0302 	mvn.w	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d145      	bne.n	8000d7c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6810      	ldr	r0, [r2, #0]
 8000cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4798      	blx	r3
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db37      	blt.n	8000d76 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6810      	ldr	r0, [r2, #0]
 8000d0e:	f107 0208 	add.w	r2, r7, #8
 8000d12:	2100      	movs	r1, #0
 8000d14:	4798      	blx	r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db28      	blt.n	8000d6e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4798      	blx	r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000d26:	e01c      	b.n	8000d62 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4798      	blx	r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d3a:	d80e      	bhi.n	8000d5a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6810      	ldr	r0, [r2, #0]
 8000d44:	f107 0208 	add.w	r2, r7, #8
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4798      	blx	r3
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da07      	bge.n	8000d62 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000d52:	f06f 0304 	mvn.w	r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
                 break;
 8000d58:	e010      	b.n	8000d7c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000d5a:	f06f 0301 	mvn.w	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
               break;
 8000d60:	e00c      	b.n	8000d7c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1dd      	bne.n	8000d28 <DP83848_Init+0xc6>
 8000d6c:	e006      	b.n	8000d7c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000d6e:	f06f 0304 	mvn.w	r3, #4
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	e002      	b.n	8000d7c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000d76:	f06f 0303 	mvn.w	r3, #3
 8000d7a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d112      	bne.n	8000da8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4798      	blx	r3
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000d8c:	bf00      	nop
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4798      	blx	r3
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000da0:	d9f5      	bls.n	8000d8e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000da8:	693b      	ldr	r3, [r7, #16]
 }
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6810      	ldr	r0, [r2, #0]
 8000dc6:	f107 020c 	add.w	r2, r7, #12
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da02      	bge.n	8000dda <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000dd4:	f06f 0304 	mvn.w	r3, #4
 8000dd8:	e06e      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6810      	ldr	r0, [r2, #0]
 8000de2:	f107 020c 	add.w	r2, r7, #12
 8000de6:	2101      	movs	r1, #1
 8000de8:	4798      	blx	r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da02      	bge.n	8000df6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000df0:	f06f 0304 	mvn.w	r3, #4
 8000df4:	e060      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e059      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6810      	ldr	r0, [r2, #0]
 8000e0c:	f107 020c 	add.w	r2, r7, #12
 8000e10:	2100      	movs	r1, #0
 8000e12:	4798      	blx	r3
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da02      	bge.n	8000e20 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000e1a:	f06f 0304 	mvn.w	r3, #4
 8000e1e:	e04b      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d11b      	bne.n	8000e62 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <DP83848_GetLinkState+0x90>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e03a      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e033      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e02c      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	e02a      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6810      	ldr	r0, [r2, #0]
 8000e6a:	f107 020c 	add.w	r2, r7, #12
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4798      	blx	r3
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da02      	bge.n	8000e7e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000e78:	f06f 0304 	mvn.w	r3, #4
 8000e7c:	e01c      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000e88:	2306      	movs	r3, #6
 8000e8a:	e015      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0306 	and.w	r3, r3, #6
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d101      	bne.n	8000e9a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000e96:	2302      	movs	r3, #2
 8000e98:	e00e      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f003 0306 	and.w	r3, r3, #6
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e007      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0306 	and.w	r3, r3, #6
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d101      	bne.n	8000eb6 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e000      	b.n	8000eb8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000eb6:	2305      	movs	r3, #5
    }
  }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f931 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fd2c 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93b 	bl	800119e <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f911 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	200000dc 	.word	0x200000dc

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200000dc 	.word	0x200000dc

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff47 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff5c 	bl	8001034 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffb0 	bl	800110c <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e06c      	b.n	80012a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d106      	bne.n	80011e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2223      	movs	r2, #35	; 0x23
 80011d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f002 f925 	bl	800342c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <HAL_ETH_Init+0xf4>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a30      	ldr	r2, [pc, #192]	; (80012ac <HAL_ETH_Init+0xf4>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <HAL_ETH_Init+0xf4>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_ETH_Init+0xf8>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4a2b      	ldr	r2, [pc, #172]	; (80012b0 <HAL_ETH_Init+0xf8>)
 8001204:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001208:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_ETH_Init+0xf8>)
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	4927      	ldr	r1, [pc, #156]	; (80012b0 <HAL_ETH_Init+0xf8>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_ETH_Init+0xf8>)
 800121a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001232:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff feaa 	bl	8000f8c <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800123a:	e011      	b.n	8001260 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800123c:	f7ff fea6 	bl	8000f8c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800124a:	d909      	bls.n	8001260 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	22e0      	movs	r2, #224	; 0xe0
 8001258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e021      	b.n	80012a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e4      	bne.n	800123c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fdfc 	bl	8001e70 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 fea3 	bl	8001fc4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fef9 	bl	8002076 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	461a      	mov	r2, r3
 800128a:	2100      	movs	r1, #0
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fe61 	bl	8001f54 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2210      	movs	r2, #16
 800129e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800

080012b4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d150      	bne.n	8001368 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2223      	movs	r2, #35	; 0x23
 80012ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2204      	movs	r2, #4
 80012d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f9fd 	bl	80016d4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0208 	orr.w	r2, r2, #8
 80012e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7ff fe56 	bl	8000fa4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0204 	orr.w	r2, r2, #4
 800130e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fe43 	bl	8000fa4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fc42 	bl	8001bb0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001342:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2223      	movs	r2, #35	; 0x23
 8001360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e000      	b.n	800136a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
  }
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001380:	2b23      	cmp	r3, #35	; 0x23
 8001382:	d14a      	bne.n	800141a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2223      	movs	r2, #35	; 0x23
 8001388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800139e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	f023 0302 	bic.w	r3, r3, #2
 80013b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ba:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0204 	bic.w	r2, r2, #4
 80013ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff fde5 	bl	8000fa4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fbe4 	bl	8001bb0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0208 	bic.w	r2, r2, #8
 80013f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fdcf 	bl	8000fa4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2210      	movs	r2, #16
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
  }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e07c      	b.n	8001544 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001450:	2b23      	cmp	r3, #35	; 0x23
 8001452:	d176      	bne.n	8001542 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001454:	2200      	movs	r2, #0
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 fe79 	bl	8002150 <ETH_Prepare_Tx_Descriptors>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d009      	beq.n	8001478 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146a:	f043 0202 	orr.w	r2, r3, #2
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e065      	b.n	8001544 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001478:	f3bf 8f4f 	dsb	sy
}
 800147c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3206      	adds	r2, #6
 8001486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	2b03      	cmp	r3, #3
 800149c:	d904      	bls.n	80014a8 <HAL_ETH_Transmit+0x84>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	1f1a      	subs	r2, r3, #4
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3106      	adds	r1, #6
 80014b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014bc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014be:	f7ff fd65 	bl	8000f8c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014c4:	e037      	b.n	8001536 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d011      	beq.n	80014fc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	f043 0208 	orr.w	r2, r3, #8
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e023      	b.n	8001544 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001502:	d018      	beq.n	8001536 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001504:	f7ff fd42 	bl	8000f8c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	d302      	bcc.n	800151a <HAL_ETH_Transmit+0xf6>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001520:	f043 0204 	orr.w	r2, r3, #4
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001530:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e006      	b.n	8001544 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	dbc3      	blt.n	80014c6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d109      	bne.n	8001578 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	f043 0201 	orr.w	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0a8      	b.n	80016ca <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800157e:	2b23      	cmp	r3, #35	; 0x23
 8001580:	d001      	beq.n	8001586 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0a1      	b.n	80016ca <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	3212      	adds	r2, #18
 8001592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001596:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800159c:	f1c3 0304 	rsb	r3, r3, #4
 80015a0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015a2:	e06a      	b.n	800167a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	69da      	ldr	r2, [r3, #28]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <HAL_ETH_ReadData+0x88>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d040      	beq.n	8001656 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001608:	3b04      	subs	r3, #4
 800160a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001630:	461a      	mov	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	b29b      	uxth	r3, r3
 8001636:	f002 f909 	bl	800384c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	441a      	add	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d902      	bls.n	8001668 <HAL_ETH_ReadData+0x11c>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b04      	subs	r3, #4
 8001666:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	3212      	adds	r2, #18
 800166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800167e:	2b00      	cmp	r3, #0
 8001680:	db06      	blt.n	8001690 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	d202      	bcs.n	8001690 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d089      	beq.n	80015a4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	441a      	add	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f815 	bl	80016d4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e000      	b.n	80016ca <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80016e0:	2301      	movs	r3, #1
 80016e2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016e8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	3212      	adds	r2, #18
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016fa:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80016fc:	e03d      	b.n	800177a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d112      	bne.n	800172c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4618      	mov	r0, r3
 800170c:	f002 f86e 	bl	80037ec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	74fb      	strb	r3, [r7, #19]
 800171a:	e007      	b.n	800172c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	461a      	mov	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	461a      	mov	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d023      	beq.n	800177a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <ETH_UpdateDescriptor+0xfc>)
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	e003      	b.n	800174a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001748:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3301      	adds	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d902      	bls.n	8001768 <ETH_UpdateDescriptor+0x94>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b04      	subs	r3, #4
 8001766:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	3212      	adds	r2, #18
 800176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001772:	617b      	str	r3, [r7, #20]
      desccount--;
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	3b01      	subs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <ETH_UpdateDescriptor+0xb2>
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1bb      	bne.n	80016fe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	429a      	cmp	r2, r3
 800178e:	d01a      	beq.n	80017c6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800179a:	f3bf 8f5f 	dmb	sy
}
 800179e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	18ca      	adds	r2, r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	80004600 	.word	0x80004600

080017d4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 031c 	and.w	r3, r3, #28
 80017f0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	02db      	lsls	r3, r3, #11
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001824:	f7ff fbb2 	bl	8000f8c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800182a:	e00d      	b.n	8001848 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800182c:	f7ff fbae 	bl	8000f8c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d301      	bcc.n	8001840 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e010      	b.n	8001862 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ec      	bne.n	800182c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 031c 	and.w	r3, r3, #28
 8001886:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	02db      	lsls	r3, r3, #11
 800188c:	b29b      	uxth	r3, r3
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4313      	orrs	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	019b      	lsls	r3, r3, #6
 8001898:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c4:	f7ff fb62 	bl	8000f8c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ca:	e00d      	b.n	80018e8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80018cc:	f7ff fb5e 	bl	8000f8c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018da:	d301      	bcc.n	80018e0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e009      	b.n	80018f4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ec      	bne.n	80018cc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0d9      	b.n	8001ac4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf0c      	ite	eq
 80019ce:	2301      	moveq	r3, #1
 80019d0:	2300      	movne	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	0c1b      	lsrs	r3, r3, #16
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e00b      	b.n	8001afc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d105      	bne.n	8001afa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f883 	bl	8001bfc <ETH_SetMACConfig>

    return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e000      	b.n	8001afc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
  }
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 031c 	bic.w	r3, r3, #28
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b1c:	f001 fa6e 	bl	8002ffc <HAL_RCC_GetHCLKFreq>
 8001b20:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d908      	bls.n	8001b3c <HAL_ETH_SetMDIOClockRange+0x38>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ba0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d804      	bhi.n	8001b3c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e027      	b.n	8001b8c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d908      	bls.n	8001b56 <HAL_ETH_SetMDIOClockRange+0x52>
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d204      	bcs.n	8001b56 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f043 030c 	orr.w	r3, r3, #12
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	e01a      	b.n	8001b8c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d303      	bcc.n	8001b66 <HAL_ETH_SetMDIOClockRange+0x62>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d911      	bls.n	8001b8a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d908      	bls.n	8001b80 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d804      	bhi.n	8001b80 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e005      	b.n	8001b8c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e000      	b.n	8001b8c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b8a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	01312cff 	.word	0x01312cff
 8001ba0:	02160ebf 	.word	0x02160ebf
 8001ba4:	03938700 	.word	0x03938700
 8001ba8:	05f5e0ff 	.word	0x05f5e0ff
 8001bac:	08f0d17f 	.word	0x08f0d17f

08001bb0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff f9df 	bl	8000fa4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf0:	6193      	str	r3, [r2, #24]
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4b51      	ldr	r3, [pc, #324]	; (8001d58 <ETH_SetMACConfig+0x15c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	7c1b      	ldrb	r3, [r3, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <ETH_SetMACConfig+0x28>
 8001c1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c22:	e000      	b.n	8001c26 <ETH_SetMACConfig+0x2a>
 8001c24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7c5b      	ldrb	r3, [r3, #17]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <ETH_SetMACConfig+0x38>
 8001c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c32:	e000      	b.n	8001c36 <ETH_SetMACConfig+0x3a>
 8001c34:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c36:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7fdb      	ldrb	r3, [r3, #31]
 8001c42:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c44:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	7f92      	ldrb	r2, [r2, #30]
 8001c50:	2a00      	cmp	r2, #0
 8001c52:	d102      	bne.n	8001c5a <ETH_SetMACConfig+0x5e>
 8001c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c58:	e000      	b.n	8001c5c <ETH_SetMACConfig+0x60>
 8001c5a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	7f1b      	ldrb	r3, [r3, #28]
 8001c62:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c64:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d102      	bne.n	8001c84 <ETH_SetMACConfig+0x88>
 8001c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c82:	e000      	b.n	8001c86 <ETH_SetMACConfig+0x8a>
 8001c84:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	7bdb      	ldrb	r3, [r3, #15]
 8001c8c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c8e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c9c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff f974 	bl	8000fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cda:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d101      	bne.n	8001cea <ETH_SetMACConfig+0xee>
 8001ce6:	2280      	movs	r2, #128	; 0x80
 8001ce8:	e000      	b.n	8001cec <ETH_SetMACConfig+0xf0>
 8001cea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001cec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001cf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001cfa:	2a01      	cmp	r2, #1
 8001cfc:	d101      	bne.n	8001d02 <ETH_SetMACConfig+0x106>
 8001cfe:	2208      	movs	r2, #8
 8001d00:	e000      	b.n	8001d04 <ETH_SetMACConfig+0x108>
 8001d02:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d04:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d0c:	2a01      	cmp	r2, #1
 8001d0e:	d101      	bne.n	8001d14 <ETH_SetMACConfig+0x118>
 8001d10:	2204      	movs	r2, #4
 8001d12:	e000      	b.n	8001d16 <ETH_SetMACConfig+0x11a>
 8001d14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d101      	bne.n	8001d26 <ETH_SetMACConfig+0x12a>
 8001d22:	2202      	movs	r2, #2
 8001d24:	e000      	b.n	8001d28 <ETH_SetMACConfig+0x12c>
 8001d26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff f92f 	bl	8000fa4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	ff20810f 	.word	0xff20810f

08001d5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <ETH_SetDMAConfig+0x110>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	7b1b      	ldrb	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <ETH_SetDMAConfig+0x2c>
 8001d82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d86:	e000      	b.n	8001d8a <ETH_SetDMAConfig+0x2e>
 8001d88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7b5b      	ldrb	r3, [r3, #13]
 8001d8e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d90:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	7f52      	ldrb	r2, [r2, #29]
 8001d96:	2a00      	cmp	r2, #0
 8001d98:	d102      	bne.n	8001da0 <ETH_SetDMAConfig+0x44>
 8001d9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d9e:	e000      	b.n	8001da2 <ETH_SetDMAConfig+0x46>
 8001da0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001da2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7b9b      	ldrb	r3, [r3, #14]
 8001da8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001daa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001db0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	7f1b      	ldrb	r3, [r3, #28]
 8001db6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001db8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	7f9b      	ldrb	r3, [r3, #30]
 8001dbe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dc0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001dc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de0:	461a      	mov	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7ff f8d6 	bl	8000fa4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e00:	461a      	mov	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	791b      	ldrb	r3, [r3, #4]
 8001e0a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e10:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e16:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e1c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e24:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e26:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e2e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e34:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e42:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff f8a7 	bl	8000fa4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	f8de3f23 	.word	0xf8de3f23

08001e70 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0a6      	sub	sp, #152	; 0x98
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001eac:	2300      	movs	r3, #0
 8001eae:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ed8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fe86 	bl	8001bfc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f24:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff08 	bl	8001d5c <ETH_SetDMAConfig>
}
 8001f4c:	bf00      	nop
 8001f4e:	3798      	adds	r7, #152	; 0x98
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3305      	adds	r3, #5
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	3204      	adds	r2, #4
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <ETH_MACAddressConfig+0x68>)
 8001f76:	4413      	add	r3, r2
 8001f78:	461a      	mov	r2, r3
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3303      	adds	r3, #3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	061a      	lsls	r2, r3, #24
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3302      	adds	r3, #2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <ETH_MACAddressConfig+0x6c>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	6013      	str	r3, [r2, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40028040 	.word	0x40028040
 8001fc0:	40028044 	.word	0x40028044

08001fc4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	e03e      	b.n	8002050 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68d9      	ldr	r1, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	3206      	adds	r2, #6
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d80c      	bhi.n	8002034 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68d9      	ldr	r1, [r3, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	461a      	mov	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	e004      	b.n	800203e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d9bd      	bls.n	8001fd2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	611a      	str	r2, [r3, #16]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e046      	b.n	8002112 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6919      	ldr	r1, [r3, #16]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2200      	movs	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020c0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80020c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	3212      	adds	r2, #18
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d80c      	bhi.n	8002102 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	e004      	b.n	800210c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3301      	adds	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d9b5      	bls.n	8002084 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	60da      	str	r2, [r3, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002150:	b480      	push	{r7}
 8002152:	b08d      	sub	sp, #52	; 0x34
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	3318      	adds	r3, #24
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800218e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002192:	d007      	beq.n	80021a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	3304      	adds	r3, #4
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80021a4:	2302      	movs	r3, #2
 80021a6:	e103      	b.n	80023b0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3301      	adds	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80021c0:	f023 031f 	bic.w	r3, r3, #31
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	6852      	ldr	r2, [r2, #4]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	431a      	orrs	r2, r3
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800222e:	f3bf 8f5f 	dmb	sy
}
 8002232:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002240:	e084      	b.n	800234c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e005      	b.n	800226e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	3301      	adds	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	2b03      	cmp	r3, #3
 8002278:	d902      	bls.n	8002280 <ETH_Prepare_Tx_Descriptors+0x130>
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	3b04      	subs	r3, #4
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002288:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800229e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022a2:	d007      	beq.n	80022b4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	3304      	adds	r3, #4
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d029      	beq.n	8002308 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c6:	e019      	b.n	80022fc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80022c8:	f3bf 8f5f 	dmb	sy
}
 80022cc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	3301      	adds	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d902      	bls.n	80022ec <ETH_Prepare_Tx_Descriptors+0x19c>
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	3b04      	subs	r3, #4
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	3301      	adds	r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80022fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	429a      	cmp	r2, r3
 8002302:	d3e1      	bcc.n	80022c8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002304:	2302      	movs	r3, #2
 8002306:	e053      	b.n	80023b0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002326:	f023 031f 	bic.w	r3, r3, #31
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	6852      	ldr	r2, [r2, #4]
 800232e:	431a      	orrs	r2, r3
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	3301      	adds	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800233a:	f3bf 8f5f 	dmb	sy
}
 800233e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f af76 	bne.w	8002242 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e005      	b.n	8002376 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002386:	6979      	ldr	r1, [r7, #20]
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	3304      	adds	r3, #4
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002396:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	4413      	add	r3, r2
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80023aa:	b662      	cpsie	i
}
 80023ac:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3734      	adds	r7, #52	; 0x34
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e177      	b.n	80026c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 8166 	bne.w	80026c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d005      	beq.n	800240e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240a:	2b02      	cmp	r3, #2
 800240c:	d130      	bne.n	8002470 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	2203      	movs	r2, #3
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 0201 	and.w	r2, r3, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d017      	beq.n	80024ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80c0 	beq.w	80026c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b66      	ldr	r3, [pc, #408]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_GPIO_Init+0x324>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a61      	ldr	r2, [pc, #388]	; (80026e4 <HAL_GPIO_Init+0x328>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d037      	beq.n	80025fa <HAL_GPIO_Init+0x23e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_GPIO_Init+0x330>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0x23a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_GPIO_Init+0x334>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x236>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a55      	ldr	r2, [pc, #340]	; (80026f4 <HAL_GPIO_Init+0x338>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x232>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_GPIO_Init+0x33c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a53      	ldr	r2, [pc, #332]	; (80026fc <HAL_GPIO_Init+0x340>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x22a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_GPIO_Init+0x344>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a51      	ldr	r2, [pc, #324]	; (8002704 <HAL_GPIO_Init+0x348>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a50      	ldr	r2, [pc, #320]	; (8002708 <HAL_GPIO_Init+0x34c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	; (800270c <HAL_GPIO_Init+0x350>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x21a>
 80025d2:	2309      	movs	r3, #9
 80025d4:	e012      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025d6:	230a      	movs	r3, #10
 80025d8:	e010      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025da:	2308      	movs	r3, #8
 80025dc:	e00e      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025de:	2307      	movs	r3, #7
 80025e0:	e00c      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e00a      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e008      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e006      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e004      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e002      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x240>
 80025fa:	2300      	movs	r3, #0
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	f002 0203 	and.w	r2, r2, #3
 8002602:	0092      	lsls	r2, r2, #2
 8002604:	4093      	lsls	r3, r2
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800260c:	4935      	ldr	r1, [pc, #212]	; (80026e4 <HAL_GPIO_Init+0x328>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <HAL_GPIO_Init+0x354>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_GPIO_Init+0x354>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266e:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_GPIO_Init+0x354>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_GPIO_Init+0x354>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_GPIO_Init+0x354>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	f67f ae84 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40013800 	.word	0x40013800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40021400 	.word	0x40021400
 8002700:	40021800 	.word	0x40021800
 8002704:	40021c00 	.word	0x40021c00
 8002708:	40022000 	.word	0x40022000
 800270c:	40022400 	.word	0x40022400
 8002710:	40013c00 	.word	0x40013c00

08002714 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7fe fc24 	bl	8000f8c <HAL_GetTick>
 8002744:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002746:	e009      	b.n	800275c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002748:	f7fe fc20 	bl	8000f8c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002756:	d901      	bls.n	800275c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e01f      	b.n	800279c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_PWREx_EnableOverDrive+0x98>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d1ee      	bne.n	8002748 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002770:	f7fe fc0c 	bl	8000f8c <HAL_GetTick>
 8002774:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002776:	e009      	b.n	800278c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002778:	f7fe fc08 	bl	8000f8c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002786:	d901      	bls.n	800278c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e007      	b.n	800279c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_PWREx_EnableOverDrive+0x98>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002794:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002798:	d1ee      	bne.n	8002778 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	420e0040 	.word	0x420e0040
 80027ac:	40007000 	.word	0x40007000
 80027b0:	420e0044 	.word	0x420e0044

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e267      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d075      	beq.n	80028be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d2:	4b88      	ldr	r3, [pc, #544]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027de:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d112      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f6:	d10b      	bne.n	8002810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	4b7e      	ldr	r3, [pc, #504]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05b      	beq.n	80028bc <HAL_RCC_OscConfig+0x108>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d157      	bne.n	80028bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e242      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002818:	d106      	bne.n	8002828 <HAL_RCC_OscConfig+0x74>
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a75      	ldr	r2, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e01d      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x98>
 8002832:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6f      	ldr	r2, [pc, #444]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b6d      	ldr	r3, [pc, #436]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6c      	ldr	r2, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e00b      	b.n	8002864 <HAL_RCC_OscConfig+0xb0>
 800284c:	4b69      	ldr	r3, [pc, #420]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a68      	ldr	r2, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a65      	ldr	r2, [pc, #404]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fb8e 	bl	8000f8c <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fb8a 	bl	8000f8c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e207      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0xc0>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe fb7a 	bl	8000f8c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe fb76 	bl	8000f8c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1f3      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ae:	4b51      	ldr	r3, [pc, #324]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0xe8>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d063      	beq.n	8002992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ca:	4b4a      	ldr	r3, [pc, #296]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d11c      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ee:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e1c7      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4937      	ldr	r1, [pc, #220]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e03a      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002924:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002926:	2201      	movs	r2, #1
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe fb2f 	bl	8000f8c <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fb2b 	bl	8000f8c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1a8      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002944:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4925      	ldr	r1, [pc, #148]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_OscConfig+0x244>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fb0e 	bl	8000f8c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002974:	f7fe fb0a 	bl	8000f8c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e187      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002986:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d036      	beq.n	8002a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x248>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe faee 	bl	8000f8c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b4:	f7fe faea 	bl	8000f8c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e167      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x240>)
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x200>
 80029d2:	e01b      	b.n	8002a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_OscConfig+0x248>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029da:	f7fe fad7 	bl	8000f8c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e00e      	b.n	8002a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e2:	f7fe fad3 	bl	8000f8c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d907      	bls.n	8002a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e150      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 80029f4:	40023800 	.word	0x40023800
 80029f8:	42470000 	.word	0x42470000
 80029fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ea      	bne.n	80029e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8097 	beq.w	8002b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b81      	ldr	r3, [pc, #516]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a7c      	ldr	r2, [pc, #496]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b77      	ldr	r3, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a56:	4b74      	ldr	r3, [pc, #464]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a73      	ldr	r2, [pc, #460]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fa93 	bl	8000f8c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7fe fa8f 	bl	8000f8c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e10c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x474>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2ea>
 8002a90:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a63      	ldr	r2, [pc, #396]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e01c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x30c>
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	4a5e      	ldr	r2, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab2:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x324>
 8002ac0:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	4b55      	ldr	r3, [pc, #340]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d015      	beq.n	8002b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fa54 	bl	8000f8c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fa50 	bl	8000f8c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0cb      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x334>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0c:	f7fe fa3e 	bl	8000f8c <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b14:	f7fe fa3a 	bl	8000f8c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0b5      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1ee      	bne.n	8002b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4a38      	ldr	r2, [pc, #224]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a1 	beq.w	8002c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b52:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d05c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d141      	bne.n	8002bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fa0e 	bl	8000f8c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fa0a 	bl	8000f8c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e087      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	3b01      	subs	r3, #1
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe f9e3 	bl	8000f8c <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe f9df 	bl	8000f8c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e05c      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x416>
 8002be8:	e054      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_OscConfig+0x478>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f9cc 	bl	8000f8c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe f9c8 	bl	8000f8c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e045      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x444>
 8002c16:	e03d      	b.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e038      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x4ec>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d028      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d121      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d11a      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d111      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cc      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b68      	ldr	r3, [pc, #416]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d90c      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b65      	ldr	r3, [pc, #404]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b63      	ldr	r3, [pc, #396]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0b8      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	494d      	ldr	r1, [pc, #308]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d119      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b3f      	ldr	r3, [pc, #252]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e067      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d82:	4b37      	ldr	r3, [pc, #220]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4934      	ldr	r1, [pc, #208]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d94:	f7fe f8fa 	bl	8000f8c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	e00a      	b.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d9c:	f7fe f8f6 	bl	8000f8c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e04f      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db2:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 020c 	and.w	r2, r3, #12
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d1eb      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20c      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b22      	ldr	r3, [pc, #136]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e032      	b.n	8002e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4916      	ldr	r1, [pc, #88]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	490e      	ldr	r1, [pc, #56]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e2a:	f000 f821 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	490a      	ldr	r1, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	5ccb      	ldrb	r3, [r1, r3]
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f85a 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00
 8002e60:	40023800 	.word	0x40023800
 8002e64:	08013450 	.word	0x08013450
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e74:	b090      	sub	sp, #64	; 0x40
 8002e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e80:	2300      	movs	r3, #0
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d00d      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	f200 80a1 	bhi.w	8002fdc <HAL_RCC_GetSysClockFreq+0x16c>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea2:	e09b      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ea8:	e09b      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eaa:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eae:	e098      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b4f      	ldr	r3, [pc, #316]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eba:	4b4d      	ldr	r3, [pc, #308]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d028      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	2200      	movs	r2, #0
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002edc:	fb03 f201 	mul.w	r2, r3, r1
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	fb00 f303 	mul.w	r3, r0, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002eea:	fba0 1202 	umull	r1, r2, r0, r2
 8002eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef6:	4413      	add	r3, r2
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efc:	2200      	movs	r2, #0
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	61fa      	str	r2, [r7, #28]
 8002f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f0a:	f7fd f9c1 	bl	8000290 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4613      	mov	r3, r2
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f16:	e053      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	2200      	movs	r2, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	617a      	str	r2, [r7, #20]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f2a:	f04f 0b00 	mov.w	fp, #0
 8002f2e:	4652      	mov	r2, sl
 8002f30:	465b      	mov	r3, fp
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f04f 0100 	mov.w	r1, #0
 8002f3a:	0159      	lsls	r1, r3, #5
 8002f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f40:	0150      	lsls	r0, r2, #5
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	ebb2 080a 	subs.w	r8, r2, sl
 8002f4a:	eb63 090b 	sbc.w	r9, r3, fp
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f62:	ebb2 0408 	subs.w	r4, r2, r8
 8002f66:	eb63 0509 	sbc.w	r5, r3, r9
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	00eb      	lsls	r3, r5, #3
 8002f74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f78:	00e2      	lsls	r2, r4, #3
 8002f7a:	4614      	mov	r4, r2
 8002f7c:	461d      	mov	r5, r3
 8002f7e:	eb14 030a 	adds.w	r3, r4, sl
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	eb45 030b 	adc.w	r3, r5, fp
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f96:	4629      	mov	r1, r5
 8002f98:	028b      	lsls	r3, r1, #10
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	028a      	lsls	r2, r1, #10
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	2200      	movs	r2, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	60fa      	str	r2, [r7, #12]
 8002fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fb4:	f7fd f96c 	bl	8000290 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	3301      	adds	r3, #1
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fda:	e002      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3740      	adds	r7, #64	; 0x40
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	00f42400 	.word	0x00f42400
 8002ff8:	017d7840 	.word	0x017d7840

08002ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_GetHCLKFreq+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20000000 	.word	0x20000000

08003014 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800301a:	f000 fc85 	bl	8003928 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <MX_LWIP_Init+0x54>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <MX_LWIP_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_LWIP_Init+0x5c>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <MX_LWIP_Init+0x60>)
 8003032:	9302      	str	r3, [sp, #8]
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <MX_LWIP_Init+0x64>)
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2300      	movs	r3, #0
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <MX_LWIP_Init+0x5c>)
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <MX_LWIP_Init+0x58>)
 8003040:	4909      	ldr	r1, [pc, #36]	; (8003068 <MX_LWIP_Init+0x54>)
 8003042:	480e      	ldr	r0, [pc, #56]	; (800307c <MX_LWIP_Init+0x68>)
 8003044:	f001 f95c 	bl	8004300 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003048:	480c      	ldr	r0, [pc, #48]	; (800307c <MX_LWIP_Init+0x68>)
 800304a:	f001 fb13 	bl	8004674 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800304e:	480b      	ldr	r0, [pc, #44]	; (800307c <MX_LWIP_Init+0x68>)
 8003050:	f001 fb20 	bl	8004694 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003054:	490a      	ldr	r1, [pc, #40]	; (8003080 <MX_LWIP_Init+0x6c>)
 8003056:	4809      	ldr	r0, [pc, #36]	; (800307c <MX_LWIP_Init+0x68>)
 8003058:	f001 fc22 	bl	80048a0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800305c:	4807      	ldr	r0, [pc, #28]	; (800307c <MX_LWIP_Init+0x68>)
 800305e:	f008 fd1b 	bl	800ba98 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	2000011c 	.word	0x2000011c
 800306c:	20000120 	.word	0x20000120
 8003070:	20000124 	.word	0x20000124
 8003074:	0800f4e9 	.word	0x0800f4e9
 8003078:	0800338d 	.word	0x0800338d
 800307c:	200000e4 	.word	0x200000e4
 8003080:	080030d5 	.word	0x080030d5

08003084 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800308c:	f7fd ff7e 	bl	8000f8c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <Ethernet_Link_Periodic_Handle+0x30>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b63      	cmp	r3, #99	; 0x63
 800309a:	d907      	bls.n	80030ac <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800309c:	f7fd ff76 	bl	8000f8c <HAL_GetTick>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <Ethernet_Link_Periodic_Handle+0x30>)
 80030a4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fb14 	bl	80036d4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	200000e0 	.word	0x200000e0

080030b8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <MX_LWIP_Process+0x18>)
 80030be:	f000 f945 	bl	800334c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80030c2:	f007 fc6f 	bl	800a9a4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80030c6:	4802      	ldr	r0, [pc, #8]	; (80030d0 <MX_LWIP_Process+0x18>)
 80030c8:	f7ff ffdc 	bl	8003084 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200000e4 	.word	0x200000e4

080030d4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80030f4:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <low_level_init+0x10c>)
 80030f6:	4a40      	ldr	r2, [pc, #256]	; (80031f8 <low_level_init+0x110>)
 80030f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003102:	23e1      	movs	r3, #225	; 0xe1
 8003104:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003106:	2300      	movs	r3, #0
 8003108:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800310a:	2300      	movs	r3, #0
 800310c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800310e:	2300      	movs	r3, #0
 8003110:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003112:	4a38      	ldr	r2, [pc, #224]	; (80031f4 <low_level_init+0x10c>)
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <low_level_init+0x10c>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003120:	4b34      	ldr	r3, [pc, #208]	; (80031f4 <low_level_init+0x10c>)
 8003122:	4a36      	ldr	r2, [pc, #216]	; (80031fc <low_level_init+0x114>)
 8003124:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003126:	4b33      	ldr	r3, [pc, #204]	; (80031f4 <low_level_init+0x10c>)
 8003128:	4a35      	ldr	r2, [pc, #212]	; (8003200 <low_level_init+0x118>)
 800312a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <low_level_init+0x10c>)
 800312e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003132:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003134:	482f      	ldr	r0, [pc, #188]	; (80031f4 <low_level_init+0x10c>)
 8003136:	f7fe f83f 	bl	80011b8 <HAL_ETH_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800313e:	2238      	movs	r2, #56	; 0x38
 8003140:	2100      	movs	r1, #0
 8003142:	4830      	ldr	r0, [pc, #192]	; (8003204 <low_level_init+0x11c>)
 8003144:	f00c fc0b 	bl	800f95e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <low_level_init+0x11c>)
 800314a:	2221      	movs	r2, #33	; 0x21
 800314c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <low_level_init+0x11c>)
 8003150:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003154:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003156:	4b2b      	ldr	r3, [pc, #172]	; (8003204 <low_level_init+0x11c>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800315c:	482a      	ldr	r0, [pc, #168]	; (8003208 <low_level_init+0x120>)
 800315e:	f000 ff97 	bl	8004090 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2206      	movs	r2, #6
 8003166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <low_level_init+0x10c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <low_level_init+0x10c>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	785a      	ldrb	r2, [r3, #1]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <low_level_init+0x10c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	789a      	ldrb	r2, [r3, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <low_level_init+0x10c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	78da      	ldrb	r2, [r3, #3]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <low_level_init+0x10c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	791a      	ldrb	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <low_level_init+0x10c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	795a      	ldrb	r2, [r3, #5]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031c0:	f043 030a 	orr.w	r3, r3, #10
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80031cc:	490f      	ldr	r1, [pc, #60]	; (800320c <low_level_init+0x124>)
 80031ce:	4810      	ldr	r0, [pc, #64]	; (8003210 <low_level_init+0x128>)
 80031d0:	f7fd fd15 	bl	8000bfe <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80031d4:	480e      	ldr	r0, [pc, #56]	; (8003210 <low_level_init+0x128>)
 80031d6:	f7fd fd44 	bl	8000c62 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d103      	bne.n	80031e8 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fa77 	bl	80036d4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80031e6:	e001      	b.n	80031ec <low_level_init+0x104>
    Error_Handler();
 80031e8:	f7fd fbac 	bl	8000944 <Error_Handler>
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20004bf4 	.word	0x20004bf4
 80031f8:	40028000 	.word	0x40028000
 80031fc:	20004b54 	.word	0x20004b54
 8003200:	20004ab4 	.word	0x20004ab4
 8003204:	20004ca4 	.word	0x20004ca4
 8003208:	08013460 	.word	0x08013460
 800320c:	2000000c 	.word	0x2000000c
 8003210:	20004cdc 	.word	0x20004cdc

08003214 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b092      	sub	sp, #72	; 0x48
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	2230      	movs	r2, #48	; 0x30
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f00c fb92 	bl	800f95e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	2230      	movs	r2, #48	; 0x30
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f00c fb8b 	bl	800f95e <memset>

  for(q = p; q != NULL; q = q->next)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
 800324c:	e045      	b.n	80032da <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	2b03      	cmp	r3, #3
 8003252:	d902      	bls.n	800325a <low_level_output+0x46>
      return ERR_IF;
 8003254:	f06f 030b 	mvn.w	r3, #11
 8003258:	e055      	b.n	8003306 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800325a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	3348      	adds	r3, #72	; 0x48
 800326a:	443b      	add	r3, r7
 800326c:	3b3c      	subs	r3, #60	; 0x3c
 800326e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003272:	895b      	ldrh	r3, [r3, #10]
 8003274:	4619      	mov	r1, r3
 8003276:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3348      	adds	r3, #72	; 0x48
 8003282:	443b      	add	r3, r7
 8003284:	3b38      	subs	r3, #56	; 0x38
 8003286:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800328a:	2b00      	cmp	r3, #0
 800328c:	d011      	beq.n	80032b2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800328e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	f107 000c 	add.w	r0, r7, #12
 8003296:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003298:	460b      	mov	r3, r1
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	440b      	add	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	18c1      	adds	r1, r0, r3
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3348      	adds	r3, #72	; 0x48
 80032ac:	443b      	add	r3, r7
 80032ae:	3b34      	subs	r3, #52	; 0x34
 80032b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80032b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80032ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	3348      	adds	r3, #72	; 0x48
 80032c6:	443b      	add	r3, r7
 80032c8:	3b34      	subs	r3, #52	; 0x34
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80032ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d0:	3301      	adds	r3, #1
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80032d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	643b      	str	r3, [r7, #64]	; 0x40
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1b6      	bne.n	800324e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	891b      	ldrh	r3, [r3, #8]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <low_level_output+0xfc>)
 80032e8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <low_level_output+0xfc>)
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <low_level_output+0xfc>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80032f8:	2214      	movs	r2, #20
 80032fa:	4905      	ldr	r1, [pc, #20]	; (8003310 <low_level_output+0xfc>)
 80032fc:	4805      	ldr	r0, [pc, #20]	; (8003314 <low_level_output+0x100>)
 80032fe:	f7fe f891 	bl	8001424 <HAL_ETH_Transmit>

  return errval;
 8003302:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003306:	4618      	mov	r0, r3
 8003308:	3748      	adds	r7, #72	; 0x48
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20004ca4 	.word	0x20004ca4
 8003314:	20004bf4 	.word	0x20004bf4

08003318 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <low_level_input+0x2c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	4619      	mov	r1, r3
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <low_level_input+0x30>)
 8003334:	f7fe f90a 	bl	800154c <HAL_ETH_ReadData>
  }

  return p;
 8003338:	68fb      	ldr	r3, [r7, #12]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20004ab0 	.word	0x20004ab0
 8003348:	20004bf4 	.word	0x20004bf4

0800334c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ffdd 	bl	8003318 <low_level_input>
 800335e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	4798      	blx	r3
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f001 fe12 	bl	8004fa0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ea      	bne.n	8003358 <ethernetif_input+0xc>
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <ethernetif_init+0x1c>
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <ethernetif_init+0x48>)
 800339c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80033a0:	490d      	ldr	r1, [pc, #52]	; (80033d8 <ethernetif_init+0x4c>)
 80033a2:	480e      	ldr	r0, [pc, #56]	; (80033dc <ethernetif_init+0x50>)
 80033a4:	f00c fa76 	bl	800f894 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2273      	movs	r2, #115	; 0x73
 80033ac:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2274      	movs	r2, #116	; 0x74
 80033b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <ethernetif_init+0x54>)
 80033bc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <ethernetif_init+0x58>)
 80033c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fe8f 	bl	80030e8 <low_level_init>

  return ERR_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	080106d0 	.word	0x080106d0
 80033d8:	080106ec 	.word	0x080106ec
 80033dc:	080106fc 	.word	0x080106fc
 80033e0:	0800d965 	.word	0x0800d965
 80033e4:	08003215 	.word	0x08003215

080033e8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80033f4:	68f9      	ldr	r1, [r7, #12]
 80033f6:	4807      	ldr	r0, [pc, #28]	; (8003414 <pbuf_free_custom+0x2c>)
 80033f8:	f000 ff2c 	bl	8004254 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <pbuf_free_custom+0x30>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d102      	bne.n	800340a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <pbuf_free_custom+0x30>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
  }
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	08013460 	.word	0x08013460
 8003418:	20004ab0 	.word	0x20004ab0

0800341c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003420:	f7fd fdb4 	bl	8000f8c <HAL_GetTick>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b090      	sub	sp, #64	; 0x40
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a73      	ldr	r2, [pc, #460]	; (8003618 <HAL_ETH_MspInit+0x1ec>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f040 80e0 	bne.w	8003610 <HAL_ETH_MspInit+0x1e4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003450:	2300      	movs	r3, #0
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 8003454:	4b71      	ldr	r3, [pc, #452]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	4a70      	ldr	r2, [pc, #448]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800345a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800345e:	6313      	str	r3, [r2, #48]	; 0x30
 8003460:	4b6e      	ldr	r3, [pc, #440]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	4a69      	ldr	r2, [pc, #420]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800347a:	6313      	str	r3, [r2, #48]	; 0x30
 800347c:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003490:	4a62      	ldr	r2, [pc, #392]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003492:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003496:	6313      	str	r3, [r2, #48]	; 0x30
 8003498:	4b60      	ldr	r3, [pc, #384]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4a5b      	ldr	r2, [pc, #364]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034ae:	f043 0310 	orr.w	r3, r3, #16
 80034b2:	6313      	str	r3, [r2, #48]	; 0x30
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	4b55      	ldr	r3, [pc, #340]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6313      	str	r3, [r2, #48]	; 0x30
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	4b4e      	ldr	r3, [pc, #312]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	4a4d      	ldr	r2, [pc, #308]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034e6:	f043 0304 	orr.w	r3, r3, #4
 80034ea:	6313      	str	r3, [r2, #48]	; 0x30
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	4a46      	ldr	r2, [pc, #280]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6313      	str	r3, [r2, #48]	; 0x30
 8003508:	4b44      	ldr	r3, [pc, #272]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	4b40      	ldr	r3, [pc, #256]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	4a3f      	ldr	r2, [pc, #252]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800351e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003522:	6313      	str	r3, [r2, #48]	; 0x30
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4a38      	ldr	r2, [pc, #224]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 800353a:	f043 0302 	orr.w	r3, r3, #2
 800353e:	6313      	str	r3, [r2, #48]	; 0x30
 8003540:	4b36      	ldr	r3, [pc, #216]	; (800361c <HAL_ETH_MspInit+0x1f0>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800354c:	2304      	movs	r3, #4
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003558:	2303      	movs	r3, #3
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800355c:	230b      	movs	r3, #11
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003564:	4619      	mov	r1, r3
 8003566:	482e      	ldr	r0, [pc, #184]	; (8003620 <HAL_ETH_MspInit+0x1f4>)
 8003568:	f7fe ff28 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800356c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357a:	2303      	movs	r3, #3
 800357c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800357e:	230b      	movs	r3, #11
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	4826      	ldr	r0, [pc, #152]	; (8003624 <HAL_ETH_MspInit+0x1f8>)
 800358a:	f7fe ff17 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800358e:	233e      	movs	r3, #62	; 0x3e
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800359e:	230b      	movs	r3, #11
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a6:	4619      	mov	r1, r3
 80035a8:	481f      	ldr	r0, [pc, #124]	; (8003628 <HAL_ETH_MspInit+0x1fc>)
 80035aa:	f7fe ff07 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80035ae:	2387      	movs	r3, #135	; 0x87
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035be:	230b      	movs	r3, #11
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c6:	4619      	mov	r1, r3
 80035c8:	4818      	ldr	r0, [pc, #96]	; (800362c <HAL_ETH_MspInit+0x200>)
 80035ca:	f7fe fef7 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035ce:	2308      	movs	r3, #8
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035de:	230b      	movs	r3, #11
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80035e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e6:	4619      	mov	r1, r3
 80035e8:	4811      	ldr	r0, [pc, #68]	; (8003630 <HAL_ETH_MspInit+0x204>)
 80035ea:	f7fe fee7 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 80035ee:	f643 0303 	movw	r3, #14339	; 0x3803
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fc:	2303      	movs	r3, #3
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003600:	230b      	movs	r3, #11
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003608:	4619      	mov	r1, r3
 800360a:	480a      	ldr	r0, [pc, #40]	; (8003634 <HAL_ETH_MspInit+0x208>)
 800360c:	f7fe fed6 	bl	80023bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003610:	bf00      	nop
 8003612:	3740      	adds	r7, #64	; 0x40
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40028000 	.word	0x40028000
 800361c:	40023800 	.word	0x40023800
 8003620:	40021000 	.word	0x40021000
 8003624:	40022000 	.word	0x40022000
 8003628:	40020800 	.word	0x40020800
 800362c:	40020000 	.word	0x40020000
 8003630:	40021c00 	.word	0x40021c00
 8003634:	40020400 	.word	0x40020400

08003638 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <ETH_PHY_IO_Init+0x10>)
 800363e:	f7fe fa61 	bl	8001b04 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20004bf4 	.word	0x20004bf4

0800364c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return 0;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	4807      	ldr	r0, [pc, #28]	; (800368c <ETH_PHY_IO_ReadReg+0x30>)
 8003670:	f7fe f8b0 	bl	80017d4 <HAL_ETH_ReadPHYRegister>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
 800367e:	e000      	b.n	8003682 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20004bf4 	.word	0x20004bf4

08003690 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	68f9      	ldr	r1, [r7, #12]
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <ETH_PHY_IO_WriteReg+0x30>)
 80036a4:	f7fe f8e1 	bl	800186a <HAL_ETH_WritePHYRegister>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	e000      	b.n	80036b6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20004bf4 	.word	0x20004bf4

080036c4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036c8:	f7fd fc60 	bl	8000f8c <HAL_GetTick>
 80036cc:	4603      	mov	r3, r0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b0a0      	sub	sp, #128	; 0x80
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	2264      	movs	r2, #100	; 0x64
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f00c f93a 	bl	800f95e <memset>
  int32_t PHYLinkState = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036f2:	2300      	movs	r3, #0
 80036f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80036f6:	2300      	movs	r3, #0
 80036f8:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80036fa:	483a      	ldr	r0, [pc, #232]	; (80037e4 <ethernet_link_check_state+0x110>)
 80036fc:	f7fd fb59 	bl	8000db2 <DP83848_GetLinkState>
 8003700:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00c      	beq.n	800372e <ethernet_link_check_state+0x5a>
 8003714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003716:	2b01      	cmp	r3, #1
 8003718:	dc09      	bgt.n	800372e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800371a:	4833      	ldr	r0, [pc, #204]	; (80037e8 <ethernet_link_check_state+0x114>)
 800371c:	f7fd fe29 	bl	8001372 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 f823 	bl	800476c <netif_set_down>
    netif_set_link_down(netif);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f001 f88a 	bl	8004840 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800372c:	e055      	b.n	80037da <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d14e      	bne.n	80037da <ethernet_link_check_state+0x106>
 800373c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800373e:	2b01      	cmp	r3, #1
 8003740:	dd4b      	ble.n	80037da <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003744:	3b02      	subs	r3, #2
 8003746:	2b03      	cmp	r3, #3
 8003748:	d82a      	bhi.n	80037a0 <ethernet_link_check_state+0xcc>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <ethernet_link_check_state+0x7c>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003761 	.word	0x08003761
 8003754:	08003773 	.word	0x08003773
 8003758:	08003783 	.word	0x08003783
 800375c:	08003793 	.word	0x08003793
      duplex = ETH_FULLDUPLEX_MODE;
 8003760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800376a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800376c:	2301      	movs	r3, #1
 800376e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003770:	e017      	b.n	80037a2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003772:	2300      	movs	r3, #0
 8003774:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800377a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800377c:	2301      	movs	r3, #1
 800377e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003780:	e00f      	b.n	80037a2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003786:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003788:	2300      	movs	r3, #0
 800378a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800378c:	2301      	movs	r3, #1
 800378e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003790:	e007      	b.n	80037a2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003792:	2300      	movs	r3, #0
 8003794:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003796:	2300      	movs	r3, #0
 8003798:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800379e:	e000      	b.n	80037a2 <ethernet_link_check_state+0xce>
      break;
 80037a0:	bf00      	nop
    if(linkchanged)
 80037a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d018      	beq.n	80037da <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	4619      	mov	r1, r3
 80037ae:	480e      	ldr	r0, [pc, #56]	; (80037e8 <ethernet_link_check_state+0x114>)
 80037b0:	f7fe f8a4 	bl	80018fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80037b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80037b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ba:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4619      	mov	r1, r3
 80037c2:	4809      	ldr	r0, [pc, #36]	; (80037e8 <ethernet_link_check_state+0x114>)
 80037c4:	f7fe f984 	bl	8001ad0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80037c8:	4807      	ldr	r0, [pc, #28]	; (80037e8 <ethernet_link_check_state+0x114>)
 80037ca:	f7fd fd73 	bl	80012b4 <HAL_ETH_Start>
      netif_set_up(netif);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 ff60 	bl	8004694 <netif_set_up>
      netif_set_link_up(netif);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fffb 	bl	80047d0 <netif_set_link_up>
}
 80037da:	bf00      	nop
 80037dc:	3780      	adds	r7, #128	; 0x80
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20004cdc 	.word	0x20004cdc
 80037e8:	20004bf4 	.word	0x20004bf4

080037ec <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80037f4:	4812      	ldr	r0, [pc, #72]	; (8003840 <HAL_ETH_RxAllocateCallback+0x54>)
 80037f6:	f000 fcbf 	bl	8004178 <memp_malloc_pool>
 80037fa:	60f8      	str	r0, [r7, #12]
  if (p)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d014      	beq.n	800382c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f103 0220 	add.w	r2, r3, #32
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a0d      	ldr	r2, [pc, #52]	; (8003844 <HAL_ETH_RxAllocateCallback+0x58>)
 8003810:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800381a:	9201      	str	r2, [sp, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2241      	movs	r2, #65	; 0x41
 8003822:	2100      	movs	r1, #0
 8003824:	2000      	movs	r0, #0
 8003826:	f001 fa01 	bl	8004c2c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800382a:	e005      	b.n	8003838 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_ETH_RxAllocateCallback+0x5c>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08013460 	.word	0x08013460
 8003844:	080033e9 	.word	0x080033e9
 8003848:	20004ab0 	.word	0x20004ab0

0800384c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3b20      	subs	r3, #32
 800386a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2200      	movs	r2, #0
 8003876:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e003      	b.n	8003896 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	e009      	b.n	80038b8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	891a      	ldrh	r2, [r3, #8]
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	4413      	add	r3, r2
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f2      	bne.n	80038a4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	b21a      	sxth	r2, r3
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	b29b      	uxth	r3, r3
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	061a      	lsls	r2, r3, #24
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0e1b      	lsrs	r3, r3, #24
 800391a:	4313      	orrs	r3, r2
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003932:	f000 f8d5 	bl	8003ae0 <mem_init>
  memp_init();
 8003936:	f000 fbdb 	bl	80040f0 <memp_init>
  pbuf_init();
  netif_init();
 800393a:	f000 fcd9 	bl	80042f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800393e:	f007 f873 	bl	800aa28 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003942:	f001 fdcb 	bl	80054dc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003946:	f006 ffe5 	bl	800a914 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <ptr_to_mem+0x20>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	4413      	add	r3, r2
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20007528 	.word	0x20007528

08003978 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <mem_to_ptr+0x20>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	b29b      	uxth	r3, r3
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20007528 	.word	0x20007528

0800399c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <plug_holes+0x120>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d206      	bcs.n	80039bc <plug_holes+0x20>
 80039ae:	4b44      	ldr	r3, [pc, #272]	; (8003ac0 <plug_holes+0x124>)
 80039b0:	f240 12df 	movw	r2, #479	; 0x1df
 80039b4:	4943      	ldr	r1, [pc, #268]	; (8003ac4 <plug_holes+0x128>)
 80039b6:	4844      	ldr	r0, [pc, #272]	; (8003ac8 <plug_holes+0x12c>)
 80039b8:	f00b ff6c 	bl	800f894 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <plug_holes+0x130>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d306      	bcc.n	80039d4 <plug_holes+0x38>
 80039c6:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <plug_holes+0x124>)
 80039c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80039cc:	4940      	ldr	r1, [pc, #256]	; (8003ad0 <plug_holes+0x134>)
 80039ce:	483e      	ldr	r0, [pc, #248]	; (8003ac8 <plug_holes+0x12c>)
 80039d0:	f00b ff60 	bl	800f894 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <plug_holes+0x4e>
 80039dc:	4b38      	ldr	r3, [pc, #224]	; (8003ac0 <plug_holes+0x124>)
 80039de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80039e2:	493c      	ldr	r1, [pc, #240]	; (8003ad4 <plug_holes+0x138>)
 80039e4:	4838      	ldr	r0, [pc, #224]	; (8003ac8 <plug_holes+0x12c>)
 80039e6:	f00b ff55 	bl	800f894 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80039f2:	d906      	bls.n	8003a02 <plug_holes+0x66>
 80039f4:	4b32      	ldr	r3, [pc, #200]	; (8003ac0 <plug_holes+0x124>)
 80039f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80039fa:	4937      	ldr	r1, [pc, #220]	; (8003ad8 <plug_holes+0x13c>)
 80039fc:	4832      	ldr	r0, [pc, #200]	; (8003ac8 <plug_holes+0x12c>)
 80039fe:	f00b ff49 	bl	800f894 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ffa4 	bl	8003954 <ptr_to_mem>
 8003a0c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d024      	beq.n	8003a60 <plug_holes+0xc4>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	791b      	ldrb	r3, [r3, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d120      	bne.n	8003a60 <plug_holes+0xc4>
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <plug_holes+0x130>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d01b      	beq.n	8003a60 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <plug_holes+0x140>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d102      	bne.n	8003a38 <plug_holes+0x9c>
      lfree = mem;
 8003a32:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <plug_holes+0x140>)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003a48:	d00a      	beq.n	8003a60 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ff80 	bl	8003954 <ptr_to_mem>
 8003a54:	4604      	mov	r4, r0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ff8e 	bl	8003978 <mem_to_ptr>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	885b      	ldrh	r3, [r3, #2]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff75 	bl	8003954 <ptr_to_mem>
 8003a6a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d01f      	beq.n	8003ab4 <plug_holes+0x118>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	791b      	ldrb	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11b      	bne.n	8003ab4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <plug_holes+0x140>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d102      	bne.n	8003a8c <plug_holes+0xf0>
      lfree = pmem;
 8003a86:	4a15      	ldr	r2, [pc, #84]	; (8003adc <plug_holes+0x140>)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	881a      	ldrh	r2, [r3, #0]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003a9c:	d00a      	beq.n	8003ab4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff56 	bl	8003954 <ptr_to_mem>
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	68b8      	ldr	r0, [r7, #8]
 8003aac:	f7ff ff64 	bl	8003978 <mem_to_ptr>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	20007528 	.word	0x20007528
 8003ac0:	08010724 	.word	0x08010724
 8003ac4:	08010754 	.word	0x08010754
 8003ac8:	0801076c 	.word	0x0801076c
 8003acc:	2000752c 	.word	0x2000752c
 8003ad0:	08010794 	.word	0x08010794
 8003ad4:	080107b0 	.word	0x080107b0
 8003ad8:	080107cc 	.word	0x080107cc
 8003adc:	20007530 	.word	0x20007530

08003ae0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <mem_init+0x68>)
 8003ae8:	3303      	adds	r3, #3
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	461a      	mov	r2, r3
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <mem_init+0x6c>)
 8003af2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003af4:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <mem_init+0x6c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003b00:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003b0e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8003b12:	f7ff ff1f 	bl	8003954 <ptr_to_mem>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <mem_init+0x70>)
 8003b1a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <mem_init+0x70>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <mem_init+0x70>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003b2c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <mem_init+0x70>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003b36:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <mem_init+0x6c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a05      	ldr	r2, [pc, #20]	; (8003b54 <mem_init+0x74>)
 8003b3e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20004d14 	.word	0x20004d14
 8003b4c:	20007528 	.word	0x20007528
 8003b50:	2000752c 	.word	0x2000752c
 8003b54:	20007530 	.word	0x20007530

08003b58 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ff09 	bl	8003978 <mem_to_ptr>
 8003b66:	4603      	mov	r3, r0
 8003b68:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fef0 	bl	8003954 <ptr_to_mem>
 8003b74:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	885b      	ldrh	r3, [r3, #2]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff feea 	bl	8003954 <ptr_to_mem>
 8003b80:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b8a:	d818      	bhi.n	8003bbe <mem_link_valid+0x66>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	885b      	ldrh	r3, [r3, #2]
 8003b90:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003b94:	d813      	bhi.n	8003bbe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003b9a:	8afa      	ldrh	r2, [r7, #22]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d004      	beq.n	8003baa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	8afa      	ldrh	r2, [r7, #22]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d109      	bne.n	8003bbe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <mem_link_valid+0x74>)
 8003bac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d006      	beq.n	8003bc2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	885b      	ldrh	r3, [r3, #2]
 8003bb8:	8afa      	ldrh	r2, [r7, #22]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d001      	beq.n	8003bc2 <mem_link_valid+0x6a>
    return 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <mem_link_valid+0x6c>
  }
  return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	2000752c 	.word	0x2000752c

08003bd0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d04c      	beq.n	8003c78 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <mem_free+0xb0>)
 8003bea:	f240 2273 	movw	r2, #627	; 0x273
 8003bee:	4925      	ldr	r1, [pc, #148]	; (8003c84 <mem_free+0xb4>)
 8003bf0:	4825      	ldr	r0, [pc, #148]	; (8003c88 <mem_free+0xb8>)
 8003bf2:	f00b fe4f 	bl	800f894 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003bf6:	e040      	b.n	8003c7a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b08      	subs	r3, #8
 8003bfc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003bfe:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <mem_free+0xbc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d306      	bcc.n	8003c16 <mem_free+0x46>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f103 020c 	add.w	r2, r3, #12
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <mem_free+0xc0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d907      	bls.n	8003c26 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <mem_free+0xb0>)
 8003c18:	f240 227f 	movw	r2, #639	; 0x27f
 8003c1c:	491d      	ldr	r1, [pc, #116]	; (8003c94 <mem_free+0xc4>)
 8003c1e:	481a      	ldr	r0, [pc, #104]	; (8003c88 <mem_free+0xb8>)
 8003c20:	f00b fe38 	bl	800f894 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c24:	e029      	b.n	8003c7a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	791b      	ldrb	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <mem_free+0xb0>)
 8003c30:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003c34:	4918      	ldr	r1, [pc, #96]	; (8003c98 <mem_free+0xc8>)
 8003c36:	4814      	ldr	r0, [pc, #80]	; (8003c88 <mem_free+0xb8>)
 8003c38:	f00b fe2c 	bl	800f894 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c3c:	e01d      	b.n	8003c7a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ff8a 	bl	8003b58 <mem_link_valid>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d107      	bne.n	8003c5a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <mem_free+0xb0>)
 8003c4c:	f240 2295 	movw	r2, #661	; 0x295
 8003c50:	4912      	ldr	r1, [pc, #72]	; (8003c9c <mem_free+0xcc>)
 8003c52:	480d      	ldr	r0, [pc, #52]	; (8003c88 <mem_free+0xb8>)
 8003c54:	f00b fe1e 	bl	800f894 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003c58:	e00f      	b.n	8003c7a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003c60:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <mem_free+0xd0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d202      	bcs.n	8003c70 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003c6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <mem_free+0xd0>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fe93 	bl	800399c <plug_holes>
 8003c76:	e000      	b.n	8003c7a <mem_free+0xaa>
    return;
 8003c78:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08010724 	.word	0x08010724
 8003c84:	080107f8 	.word	0x080107f8
 8003c88:	0801076c 	.word	0x0801076c
 8003c8c:	20007528 	.word	0x20007528
 8003c90:	2000752c 	.word	0x2000752c
 8003c94:	0801081c 	.word	0x0801081c
 8003c98:	08010838 	.word	0x08010838
 8003c9c:	08010860 	.word	0x08010860
 8003ca0:	20007530 	.word	0x20007530

08003ca4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	3303      	adds	r3, #3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f023 0303 	bic.w	r3, r3, #3
 8003cba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003cbc:	8bfb      	ldrh	r3, [r7, #30]
 8003cbe:	2b0b      	cmp	r3, #11
 8003cc0:	d801      	bhi.n	8003cc6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003cc6:	8bfb      	ldrh	r3, [r7, #30]
 8003cc8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ccc:	d803      	bhi.n	8003cd6 <mem_trim+0x32>
 8003cce:	8bfa      	ldrh	r2, [r7, #30]
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d201      	bcs.n	8003cda <mem_trim+0x36>
    return NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e0cc      	b.n	8003e74 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003cda:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <mem_trim+0x1d8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d304      	bcc.n	8003cee <mem_trim+0x4a>
 8003ce4:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <mem_trim+0x1dc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d306      	bcc.n	8003cfc <mem_trim+0x58>
 8003cee:	4b65      	ldr	r3, [pc, #404]	; (8003e84 <mem_trim+0x1e0>)
 8003cf0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8003cf4:	4964      	ldr	r1, [pc, #400]	; (8003e88 <mem_trim+0x1e4>)
 8003cf6:	4865      	ldr	r0, [pc, #404]	; (8003e8c <mem_trim+0x1e8>)
 8003cf8:	f00b fdcc 	bl	800f894 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003cfc:	4b5f      	ldr	r3, [pc, #380]	; (8003e7c <mem_trim+0x1d8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d304      	bcc.n	8003d10 <mem_trim+0x6c>
 8003d06:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <mem_trim+0x1dc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d301      	bcc.n	8003d14 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	e0af      	b.n	8003e74 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b08      	subs	r3, #8
 8003d18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003d1a:	69b8      	ldr	r0, [r7, #24]
 8003d1c:	f7ff fe2c 	bl	8003978 <mem_to_ptr>
 8003d20:	4603      	mov	r3, r0
 8003d22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	8afb      	ldrh	r3, [r7, #22]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b08      	subs	r3, #8
 8003d30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d32:	8bfa      	ldrh	r2, [r7, #30]
 8003d34:	8abb      	ldrh	r3, [r7, #20]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d906      	bls.n	8003d48 <mem_trim+0xa4>
 8003d3a:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <mem_trim+0x1e0>)
 8003d3c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003d40:	4953      	ldr	r1, [pc, #332]	; (8003e90 <mem_trim+0x1ec>)
 8003d42:	4852      	ldr	r0, [pc, #328]	; (8003e8c <mem_trim+0x1e8>)
 8003d44:	f00b fda6 	bl	800f894 <iprintf>
  if (newsize > size) {
 8003d48:	8bfa      	ldrh	r2, [r7, #30]
 8003d4a:	8abb      	ldrh	r3, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d901      	bls.n	8003d54 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e08f      	b.n	8003e74 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003d54:	8bfa      	ldrh	r2, [r7, #30]
 8003d56:	8abb      	ldrh	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d101      	bne.n	8003d60 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	e089      	b.n	8003e74 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fdf5 	bl	8003954 <ptr_to_mem>
 8003d6a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	791b      	ldrb	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d13f      	bne.n	8003df4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003d7c:	d106      	bne.n	8003d8c <mem_trim+0xe8>
 8003d7e:	4b41      	ldr	r3, [pc, #260]	; (8003e84 <mem_trim+0x1e0>)
 8003d80:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003d84:	4943      	ldr	r1, [pc, #268]	; (8003e94 <mem_trim+0x1f0>)
 8003d86:	4841      	ldr	r0, [pc, #260]	; (8003e8c <mem_trim+0x1e8>)
 8003d88:	f00b fd84 	bl	800f894 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003d92:	8afa      	ldrh	r2, [r7, #22]
 8003d94:	8bfb      	ldrh	r3, [r7, #30]
 8003d96:	4413      	add	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <mem_trim+0x1f4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d106      	bne.n	8003db6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003da8:	89fb      	ldrh	r3, [r7, #14]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fdd2 	bl	8003954 <ptr_to_mem>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a39      	ldr	r2, [pc, #228]	; (8003e98 <mem_trim+0x1f4>)
 8003db4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003db6:	89fb      	ldrh	r3, [r7, #14]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fdcb 	bl	8003954 <ptr_to_mem>
 8003dbe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	89ba      	ldrh	r2, [r7, #12]
 8003dca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	8afa      	ldrh	r2, [r7, #22]
 8003dd0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	89fa      	ldrh	r2, [r7, #14]
 8003dd6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003de0:	d047      	beq.n	8003e72 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fdb4 	bl	8003954 <ptr_to_mem>
 8003dec:	4602      	mov	r2, r0
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	8053      	strh	r3, [r2, #2]
 8003df2:	e03e      	b.n	8003e72 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003df4:	8bfb      	ldrh	r3, [r7, #30]
 8003df6:	f103 0214 	add.w	r2, r3, #20
 8003dfa:	8abb      	ldrh	r3, [r7, #20]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d838      	bhi.n	8003e72 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003e00:	8afa      	ldrh	r2, [r7, #22]
 8003e02:	8bfb      	ldrh	r3, [r7, #30]
 8003e04:	4413      	add	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3308      	adds	r3, #8
 8003e0a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e14:	d106      	bne.n	8003e24 <mem_trim+0x180>
 8003e16:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <mem_trim+0x1e0>)
 8003e18:	f240 3216 	movw	r2, #790	; 0x316
 8003e1c:	491d      	ldr	r1, [pc, #116]	; (8003e94 <mem_trim+0x1f0>)
 8003e1e:	481b      	ldr	r0, [pc, #108]	; (8003e8c <mem_trim+0x1e8>)
 8003e20:	f00b fd38 	bl	800f894 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003e24:	89fb      	ldrh	r3, [r7, #14]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fd94 	bl	8003954 <ptr_to_mem>
 8003e2c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003e2e:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <mem_trim+0x1f4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d202      	bcs.n	8003e3e <mem_trim+0x19a>
      lfree = mem2;
 8003e38:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <mem_trim+0x1f4>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2200      	movs	r2, #0
 8003e42:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	8afa      	ldrh	r2, [r7, #22]
 8003e50:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	89fa      	ldrh	r2, [r7, #14]
 8003e56:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003e60:	d007      	beq.n	8003e72 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fd74 	bl	8003954 <ptr_to_mem>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003e72:	687b      	ldr	r3, [r7, #4]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20007528 	.word	0x20007528
 8003e80:	2000752c 	.word	0x2000752c
 8003e84:	08010724 	.word	0x08010724
 8003e88:	08010894 	.word	0x08010894
 8003e8c:	0801076c 	.word	0x0801076c
 8003e90:	080108ac 	.word	0x080108ac
 8003e94:	080108cc 	.word	0x080108cc
 8003e98:	20007530 	.word	0x20007530

08003e9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <mem_malloc+0x14>
    return NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e0d9      	b.n	8004064 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	3303      	adds	r3, #3
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003ebc:	8bbb      	ldrh	r3, [r7, #28]
 8003ebe:	2b0b      	cmp	r3, #11
 8003ec0:	d801      	bhi.n	8003ec6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003ec6:	8bbb      	ldrh	r3, [r7, #28]
 8003ec8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003ecc:	d803      	bhi.n	8003ed6 <mem_malloc+0x3a>
 8003ece:	8bba      	ldrh	r2, [r7, #28]
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d201      	bcs.n	8003eda <mem_malloc+0x3e>
    return NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e0c4      	b.n	8004064 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003eda:	4b64      	ldr	r3, [pc, #400]	; (800406c <mem_malloc+0x1d0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fd4a 	bl	8003978 <mem_to_ptr>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	83fb      	strh	r3, [r7, #30]
 8003ee8:	e0b4      	b.n	8004054 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003eea:	8bfb      	ldrh	r3, [r7, #30]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fd31 	bl	8003954 <ptr_to_mem>
 8003ef2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	791b      	ldrb	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 80a4 	bne.w	8004046 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	8bfb      	ldrh	r3, [r7, #30]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f1a3 0208 	sub.w	r2, r3, #8
 8003f0c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f0c0 8099 	bcc.w	8004046 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	8bfb      	ldrh	r3, [r7, #30]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f1a3 0208 	sub.w	r2, r3, #8
 8003f22:	8bbb      	ldrh	r3, [r7, #28]
 8003f24:	3314      	adds	r3, #20
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d333      	bcc.n	8003f92 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003f2a:	8bfa      	ldrh	r2, [r7, #30]
 8003f2c:	8bbb      	ldrh	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3308      	adds	r3, #8
 8003f34:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003f36:	8a7b      	ldrh	r3, [r7, #18]
 8003f38:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f3c:	d106      	bne.n	8003f4c <mem_malloc+0xb0>
 8003f3e:	4b4c      	ldr	r3, [pc, #304]	; (8004070 <mem_malloc+0x1d4>)
 8003f40:	f240 3287 	movw	r2, #903	; 0x387
 8003f44:	494b      	ldr	r1, [pc, #300]	; (8004074 <mem_malloc+0x1d8>)
 8003f46:	484c      	ldr	r0, [pc, #304]	; (8004078 <mem_malloc+0x1dc>)
 8003f48:	f00b fca4 	bl	800f894 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003f4c:	8a7b      	ldrh	r3, [r7, #18]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fd00 	bl	8003954 <ptr_to_mem>
 8003f54:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	881a      	ldrh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8bfa      	ldrh	r2, [r7, #30]
 8003f68:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	8a7a      	ldrh	r2, [r7, #18]
 8003f6e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2201      	movs	r2, #1
 8003f74:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8003f7e:	d00b      	beq.n	8003f98 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fce5 	bl	8003954 <ptr_to_mem>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	8a7b      	ldrh	r3, [r7, #18]
 8003f8e:	8053      	strh	r3, [r2, #2]
 8003f90:	e002      	b.n	8003f98 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2201      	movs	r2, #1
 8003f96:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003f98:	4b34      	ldr	r3, [pc, #208]	; (800406c <mem_malloc+0x1d0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d127      	bne.n	8003ff2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003fa2:	4b32      	ldr	r3, [pc, #200]	; (800406c <mem_malloc+0x1d0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003fa8:	e005      	b.n	8003fb6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fcd0 	bl	8003954 <ptr_to_mem>
 8003fb4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	791b      	ldrb	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <mem_malloc+0x12c>
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <mem_malloc+0x1e0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1f0      	bne.n	8003faa <mem_malloc+0x10e>
          }
          lfree = cur;
 8003fc8:	4a28      	ldr	r2, [pc, #160]	; (800406c <mem_malloc+0x1d0>)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <mem_malloc+0x1d0>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	; (800407c <mem_malloc+0x1e0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d00b      	beq.n	8003ff2 <mem_malloc+0x156>
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <mem_malloc+0x1d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	791b      	ldrb	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d006      	beq.n	8003ff2 <mem_malloc+0x156>
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <mem_malloc+0x1d4>)
 8003fe6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003fea:	4925      	ldr	r1, [pc, #148]	; (8004080 <mem_malloc+0x1e4>)
 8003fec:	4822      	ldr	r0, [pc, #136]	; (8004078 <mem_malloc+0x1dc>)
 8003fee:	f00b fc51 	bl	800f894 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ff2:	8bba      	ldrh	r2, [r7, #28]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <mem_malloc+0x1e0>)
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d906      	bls.n	8004010 <mem_malloc+0x174>
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <mem_malloc+0x1d4>)
 8004004:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004008:	491e      	ldr	r1, [pc, #120]	; (8004084 <mem_malloc+0x1e8>)
 800400a:	481b      	ldr	r0, [pc, #108]	; (8004078 <mem_malloc+0x1dc>)
 800400c:	f00b fc42 	bl	800f894 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <mem_malloc+0x18c>
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <mem_malloc+0x1d4>)
 800401c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004020:	4919      	ldr	r1, [pc, #100]	; (8004088 <mem_malloc+0x1ec>)
 8004022:	4815      	ldr	r0, [pc, #84]	; (8004078 <mem_malloc+0x1dc>)
 8004024:	f00b fc36 	bl	800f894 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <mem_malloc+0x1a4>
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <mem_malloc+0x1d4>)
 8004034:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004038:	4914      	ldr	r1, [pc, #80]	; (800408c <mem_malloc+0x1f0>)
 800403a:	480f      	ldr	r0, [pc, #60]	; (8004078 <mem_malloc+0x1dc>)
 800403c:	f00b fc2a 	bl	800f894 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3308      	adds	r3, #8
 8004044:	e00e      	b.n	8004064 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004046:	8bfb      	ldrh	r3, [r7, #30]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fc83 	bl	8003954 <ptr_to_mem>
 800404e:	4603      	mov	r3, r0
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004054:	8bfa      	ldrh	r2, [r7, #30]
 8004056:	8bbb      	ldrh	r3, [r7, #28]
 8004058:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800405c:	429a      	cmp	r2, r3
 800405e:	f4ff af44 	bcc.w	8003eea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20007530 	.word	0x20007530
 8004070:	08010724 	.word	0x08010724
 8004074:	080108cc 	.word	0x080108cc
 8004078:	0801076c 	.word	0x0801076c
 800407c:	2000752c 	.word	0x2000752c
 8004080:	080108e0 	.word	0x080108e0
 8004084:	080108fc 	.word	0x080108fc
 8004088:	0801092c 	.word	0x0801092c
 800408c:	0801095c 	.word	0x0801095c

08004090 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	3303      	adds	r3, #3
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e011      	b.n	80040d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4413      	add	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3301      	adds	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4293      	cmp	r3, r2
 80040e0:	dbe7      	blt.n	80040b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80040f6:	2300      	movs	r3, #0
 80040f8:	80fb      	strh	r3, [r7, #6]
 80040fa:	e009      	b.n	8004110 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <memp_init+0x30>)
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ffc3 	bl	8004090 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	3301      	adds	r3, #1
 800410e:	80fb      	strh	r3, [r7, #6]
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d9f2      	bls.n	80040fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	080134d8 	.word	0x080134d8

08004124 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d012      	beq.n	8004160 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <do_memp_malloc_pool+0x38>
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <do_memp_malloc_pool+0x48>)
 8004150:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004154:	4906      	ldr	r1, [pc, #24]	; (8004170 <do_memp_malloc_pool+0x4c>)
 8004156:	4807      	ldr	r0, [pc, #28]	; (8004174 <do_memp_malloc_pool+0x50>)
 8004158:	f00b fb9c 	bl	800f894 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e000      	b.n	8004162 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	08010980 	.word	0x08010980
 8004170:	080109b0 	.word	0x080109b0
 8004174:	080109d4 	.word	0x080109d4

08004178 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <memp_malloc_pool+0x1c>
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <memp_malloc_pool+0x38>)
 8004188:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800418c:	4909      	ldr	r1, [pc, #36]	; (80041b4 <memp_malloc_pool+0x3c>)
 800418e:	480a      	ldr	r0, [pc, #40]	; (80041b8 <memp_malloc_pool+0x40>)
 8004190:	f00b fb80 	bl	800f894 <iprintf>
  if (desc == NULL) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <memp_malloc_pool+0x26>
    return NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	e003      	b.n	80041a6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ffc0 	bl	8004124 <do_memp_malloc_pool>
 80041a4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	08010980 	.word	0x08010980
 80041b4:	080109fc 	.word	0x080109fc
 80041b8:	080109d4 	.word	0x080109d4

080041bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d908      	bls.n	80041de <memp_malloc+0x22>
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <memp_malloc+0x3c>)
 80041ce:	f240 1257 	movw	r2, #343	; 0x157
 80041d2:	490a      	ldr	r1, [pc, #40]	; (80041fc <memp_malloc+0x40>)
 80041d4:	480a      	ldr	r0, [pc, #40]	; (8004200 <memp_malloc+0x44>)
 80041d6:	f00b fb5d 	bl	800f894 <iprintf>
 80041da:	2300      	movs	r3, #0
 80041dc:	e008      	b.n	80041f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	4a08      	ldr	r2, [pc, #32]	; (8004204 <memp_malloc+0x48>)
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ff9c 	bl	8004124 <do_memp_malloc_pool>
 80041ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	08010980 	.word	0x08010980
 80041fc:	08010a10 	.word	0x08010a10
 8004200:	080109d4 	.word	0x080109d4
 8004204:	080134d8 	.word	0x080134d8

08004208 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d006      	beq.n	800422a <do_memp_free_pool+0x22>
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <do_memp_free_pool+0x40>)
 800421e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004222:	490a      	ldr	r1, [pc, #40]	; (800424c <do_memp_free_pool+0x44>)
 8004224:	480a      	ldr	r0, [pc, #40]	; (8004250 <do_memp_free_pool+0x48>)
 8004226:	f00b fb35 	bl	800f894 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	08010980 	.word	0x08010980
 800424c:	08010a30 	.word	0x08010a30
 8004250:	080109d4 	.word	0x080109d4

08004254 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <memp_free_pool+0x1e>
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <memp_free_pool+0x3c>)
 8004266:	f240 1295 	movw	r2, #405	; 0x195
 800426a:	490a      	ldr	r1, [pc, #40]	; (8004294 <memp_free_pool+0x40>)
 800426c:	480a      	ldr	r0, [pc, #40]	; (8004298 <memp_free_pool+0x44>)
 800426e:	f00b fb11 	bl	800f894 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <memp_free_pool+0x34>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800427e:	6839      	ldr	r1, [r7, #0]
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ffc1 	bl	8004208 <do_memp_free_pool>
 8004286:	e000      	b.n	800428a <memp_free_pool+0x36>
    return;
 8004288:	bf00      	nop
}
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08010980 	.word	0x08010980
 8004294:	080109fc 	.word	0x080109fc
 8004298:	080109d4 	.word	0x080109d4

0800429c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d907      	bls.n	80042be <memp_free+0x22>
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <memp_free+0x44>)
 80042b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80042b4:	490b      	ldr	r1, [pc, #44]	; (80042e4 <memp_free+0x48>)
 80042b6:	480c      	ldr	r0, [pc, #48]	; (80042e8 <memp_free+0x4c>)
 80042b8:	f00b faec 	bl	800f894 <iprintf>
 80042bc:	e00c      	b.n	80042d8 <memp_free+0x3c>

  if (mem == NULL) {
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <memp_free+0x50>)
 80042c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff ff9a 	bl	8004208 <do_memp_free_pool>
 80042d4:	e000      	b.n	80042d8 <memp_free+0x3c>
    return;
 80042d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	08010980 	.word	0x08010980
 80042e4:	08010a50 	.word	0x08010a50
 80042e8:	080109d4 	.word	0x080109d4
 80042ec:	080134d8 	.word	0x080134d8

080042f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <netif_add+0x26>
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <netif_add+0x184>)
 8004316:	f240 1227 	movw	r2, #295	; 0x127
 800431a:	495b      	ldr	r1, [pc, #364]	; (8004488 <netif_add+0x188>)
 800431c:	485b      	ldr	r0, [pc, #364]	; (800448c <netif_add+0x18c>)
 800431e:	f00b fab9 	bl	800f894 <iprintf>
 8004322:	2300      	movs	r3, #0
 8004324:	e0a9      	b.n	800447a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <netif_add+0x3e>
 800432c:	4b55      	ldr	r3, [pc, #340]	; (8004484 <netif_add+0x184>)
 800432e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004332:	4957      	ldr	r1, [pc, #348]	; (8004490 <netif_add+0x190>)
 8004334:	4855      	ldr	r0, [pc, #340]	; (800448c <netif_add+0x18c>)
 8004336:	f00b faad 	bl	800f894 <iprintf>
 800433a:	2300      	movs	r3, #0
 800433c:	e09d      	b.n	800447a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <netif_add+0x194>)
 8004346:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800434e:	4b51      	ldr	r3, [pc, #324]	; (8004494 <netif_add+0x194>)
 8004350:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004358:	4b4e      	ldr	r3, [pc, #312]	; (8004494 <netif_add+0x194>)
 800435a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a49      	ldr	r2, [pc, #292]	; (8004498 <netif_add+0x198>)
 8004372:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3324      	adds	r3, #36	; 0x24
 8004386:	2204      	movs	r2, #4
 8004388:	2100      	movs	r1, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f00b fae7 	bl	800f95e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800439c:	4b3f      	ldr	r3, [pc, #252]	; (800449c <netif_add+0x19c>)
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043aa:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f914 	bl	80045e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	4798      	blx	r3
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <netif_add+0xc8>
    return NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e058      	b.n	800447a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ce:	2bff      	cmp	r3, #255	; 0xff
 80043d0:	d103      	bne.n	80043da <netif_add+0xda>
        netif->num = 0;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80043de:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <netif_add+0x1a0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e02b      	b.n	800443e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d106      	bne.n	80043fc <netif_add+0xfc>
 80043ee:	4b25      	ldr	r3, [pc, #148]	; (8004484 <netif_add+0x184>)
 80043f0:	f240 128b 	movw	r2, #395	; 0x18b
 80043f4:	492b      	ldr	r1, [pc, #172]	; (80044a4 <netif_add+0x1a4>)
 80043f6:	4825      	ldr	r0, [pc, #148]	; (800448c <netif_add+0x18c>)
 80043f8:	f00b fa4c 	bl	800f894 <iprintf>
        num_netifs++;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3301      	adds	r3, #1
 8004400:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2bff      	cmp	r3, #255	; 0xff
 8004406:	dd06      	ble.n	8004416 <netif_add+0x116>
 8004408:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <netif_add+0x184>)
 800440a:	f240 128d 	movw	r2, #397	; 0x18d
 800440e:	4926      	ldr	r1, [pc, #152]	; (80044a8 <netif_add+0x1a8>)
 8004410:	481e      	ldr	r0, [pc, #120]	; (800448c <netif_add+0x18c>)
 8004412:	f00b fa3f 	bl	800f894 <iprintf>
        if (netif2->num == netif->num) {
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004422:	429a      	cmp	r2, r3
 8004424:	d108      	bne.n	8004438 <netif_add+0x138>
          netif->num++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800442c:	3301      	adds	r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8004436:	e005      	b.n	8004444 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1d0      	bne.n	80043e6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1be      	bne.n	80043c8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004450:	2bfe      	cmp	r3, #254	; 0xfe
 8004452:	d103      	bne.n	800445c <netif_add+0x15c>
    netif_num = 0;
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <netif_add+0x19c>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e006      	b.n	800446a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004462:	3301      	adds	r3, #1
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <netif_add+0x19c>)
 8004468:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <netif_add+0x1a0>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <netif_add+0x1a0>)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	08010a6c 	.word	0x08010a6c
 8004488:	08010b00 	.word	0x08010b00
 800448c:	08010abc 	.word	0x08010abc
 8004490:	08010b1c 	.word	0x08010b1c
 8004494:	0801354c 	.word	0x0801354c
 8004498:	080048c3 	.word	0x080048c3
 800449c:	2000a448 	.word	0x2000a448
 80044a0:	2000a440 	.word	0x2000a440
 80044a4:	08010b40 	.word	0x08010b40
 80044a8:	08010b54 	.word	0x08010b54

080044ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f002 fb57 	bl	8006b6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f006 ff3d 	bl	800b340 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <netif_do_set_ipaddr+0x20>
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <netif_do_set_ipaddr+0x88>)
 80044e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80044e8:	491c      	ldr	r1, [pc, #112]	; (800455c <netif_do_set_ipaddr+0x8c>)
 80044ea:	481d      	ldr	r0, [pc, #116]	; (8004560 <netif_do_set_ipaddr+0x90>)
 80044ec:	f00b f9d2 	bl	800f894 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <netif_do_set_ipaddr+0x34>
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <netif_do_set_ipaddr+0x88>)
 80044f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80044fc:	4917      	ldr	r1, [pc, #92]	; (800455c <netif_do_set_ipaddr+0x8c>)
 80044fe:	4818      	ldr	r0, [pc, #96]	; (8004560 <netif_do_set_ipaddr+0x90>)
 8004500:	f00b f9c8 	bl	800f894 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3304      	adds	r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d01c      	beq.n	800454c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3304      	adds	r3, #4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004522:	f107 0314 	add.w	r3, r7, #20
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffbf 	bl	80044ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <netif_do_set_ipaddr+0x6a>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	e000      	b.n	800453c <netif_do_set_ipaddr+0x6c>
 800453a:	2300      	movs	r3, #0
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004540:	2101      	movs	r1, #1
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f8d2 	bl	80046ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	08010a6c 	.word	0x08010a6c
 800455c:	08010b84 	.word	0x08010b84
 8004560:	08010abc 	.word	0x08010abc

08004564 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3308      	adds	r3, #8
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d00a      	beq.n	8004594 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <netif_do_set_netmask+0x26>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	e000      	b.n	800458c <netif_do_set_netmask+0x28>
 800458a:	2300      	movs	r3, #0
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	330c      	adds	r3, #12
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d00a      	beq.n	80045d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <netif_do_set_gw+0x26>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	e000      	b.n	80045ca <netif_do_set_gw+0x28>
 80045c8:	2300      	movs	r3, #0
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <netif_set_addr+0x90>)
 80045fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <netif_set_addr+0x90>)
 8004608:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <netif_set_addr+0x90>)
 8004612:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <netif_set_addr+0x42>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <netif_set_addr+0x46>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <netif_set_addr+0x48>
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
  if (remove) {
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d006      	beq.n	800463e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004630:	f107 0310 	add.w	r3, r7, #16
 8004634:	461a      	mov	r2, r3
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff ff49 	bl	80044d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff ff8e 	bl	8004564 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	6839      	ldr	r1, [r7, #0]
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ffa8 	bl	80045a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004658:	f107 0310 	add.w	r3, r7, #16
 800465c:	461a      	mov	r2, r3
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff ff35 	bl	80044d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004666:	bf00      	nop
 8004668:	3720      	adds	r7, #32
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	0801354c 	.word	0x0801354c

08004674 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800467c:	4a04      	ldr	r2, [pc, #16]	; (8004690 <netif_set_default+0x1c>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	2000a444 	.word	0x2000a444

08004694 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <netif_set_up+0x1e>
 80046a2:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <netif_set_up+0x4c>)
 80046a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <netif_set_up+0x50>)
 80046aa:	480f      	ldr	r0, [pc, #60]	; (80046e8 <netif_set_up+0x54>)
 80046ac:	f00b f8f2 	bl	800f894 <iprintf>
 80046b0:	e013      	b.n	80046da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10c      	bne.n	80046da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80046d2:	2103      	movs	r1, #3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f809 	bl	80046ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	08010a6c 	.word	0x08010a6c
 80046e4:	08010bf4 	.word	0x08010bf4
 80046e8:	08010abc 	.word	0x08010abc

080046ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <netif_issue_reports+0x20>
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <netif_issue_reports+0x74>)
 8004700:	f240 326d 	movw	r2, #877	; 0x36d
 8004704:	4917      	ldr	r1, [pc, #92]	; (8004764 <netif_issue_reports+0x78>)
 8004706:	4818      	ldr	r0, [pc, #96]	; (8004768 <netif_issue_reports+0x7c>)
 8004708:	f00b f8c4 	bl	800f894 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01e      	beq.n	8004758 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004720:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004724:	2b00      	cmp	r3, #0
 8004726:	d017      	beq.n	8004758 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d013      	beq.n	800475a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f009 fbf5 	bl	800df40 <etharp_request>
 8004756:	e000      	b.n	800475a <netif_issue_reports+0x6e>
    return;
 8004758:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08010a6c 	.word	0x08010a6c
 8004764:	08010c10 	.word	0x08010c10
 8004768:	08010abc 	.word	0x08010abc

0800476c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <netif_set_down+0x1e>
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <netif_set_down+0x58>)
 800477c:	f240 329b 	movw	r2, #923	; 0x39b
 8004780:	4911      	ldr	r1, [pc, #68]	; (80047c8 <netif_set_down+0x5c>)
 8004782:	4812      	ldr	r0, [pc, #72]	; (80047cc <netif_set_down+0x60>)
 8004784:	f00b f886 	bl	800f894 <iprintf>
 8004788:	e019      	b.n	80047be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d012      	beq.n	80047be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f008 ff7b 	bl	800d6b4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	08010a6c 	.word	0x08010a6c
 80047c8:	08010c34 	.word	0x08010c34
 80047cc:	08010abc 	.word	0x08010abc

080047d0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d107      	bne.n	80047ee <netif_set_link_up+0x1e>
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <netif_set_link_up+0x64>)
 80047e0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80047e4:	4914      	ldr	r1, [pc, #80]	; (8004838 <netif_set_link_up+0x68>)
 80047e6:	4815      	ldr	r0, [pc, #84]	; (800483c <netif_set_link_up+0x6c>)
 80047e8:	f00b f854 	bl	800f894 <iprintf>
 80047ec:	e01e      	b.n	800482c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d117      	bne.n	800482c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f007 f9c0 	bl	800bb94 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004814:	2103      	movs	r1, #3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ff68 	bl	80046ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <netif_set_link_up+0x5c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	08010a6c 	.word	0x08010a6c
 8004838:	08010c54 	.word	0x08010c54
 800483c:	08010abc 	.word	0x08010abc

08004840 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d107      	bne.n	800485e <netif_set_link_down+0x1e>
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <netif_set_link_down+0x54>)
 8004850:	f240 4206 	movw	r2, #1030	; 0x406
 8004854:	4910      	ldr	r1, [pc, #64]	; (8004898 <netif_set_link_down+0x58>)
 8004856:	4811      	ldr	r0, [pc, #68]	; (800489c <netif_set_link_down+0x5c>)
 8004858:	f00b f81c 	bl	800f894 <iprintf>
 800485c:	e017      	b.n	800488e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <netif_set_link_down+0x4e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	08010a6c 	.word	0x08010a6c
 8004898:	08010c78 	.word	0x08010c78
 800489c:	08010abc 	.word	0x08010abc

080048a0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	61da      	str	r2, [r3, #28]
  }
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80048ce:	f06f 030b 	mvn.w	r3, #11
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d013      	beq.n	8004918 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <netif_get_by_index+0x48>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e00c      	b.n	8004912 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048fe:	3301      	adds	r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	79fa      	ldrb	r2, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d101      	bne.n	800490c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	e006      	b.n	800491a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ef      	bne.n	80048f8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	2000a440 	.word	0x2000a440

0800492c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <pbuf_free_ooseq+0x38>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <pbuf_free_ooseq+0x3c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e00a      	b.n	8004956 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f002 f94d 	bl	8006be8 <tcp_free_ooseq>
      return;
 800494e:	e005      	b.n	800495c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	607b      	str	r3, [r7, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f1      	bne.n	8004940 <pbuf_free_ooseq+0x14>
    }
  }
}
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	2000a449 	.word	0x2000a449
 8004968:	2000a458 	.word	0x2000a458

0800496c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <pbuf_pool_is_empty+0x14>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004976:	bf00      	nop
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	2000a449 	.word	0x2000a449

08004984 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	460b      	mov	r3, r1
 8004994:	80fb      	strh	r3, [r7, #6]
 8004996:	4613      	mov	r3, r2
 8004998:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88ba      	ldrh	r2, [r7, #4]
 80049b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80049b2:	8b3b      	ldrh	r3, [r7, #24]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	7f3a      	ldrb	r2, [r7, #28]
 80049be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	73da      	strb	r2, [r3, #15]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af02      	add	r7, sp, #8
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
 80049e2:	460b      	mov	r3, r1
 80049e4:	80bb      	strh	r3, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80049f4:	d07f      	beq.n	8004af6 <pbuf_alloc+0x11e>
 80049f6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80049fa:	f300 80c8 	bgt.w	8004b8e <pbuf_alloc+0x1b6>
 80049fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004a02:	d010      	beq.n	8004a26 <pbuf_alloc+0x4e>
 8004a04:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004a08:	f300 80c1 	bgt.w	8004b8e <pbuf_alloc+0x1b6>
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d002      	beq.n	8004a16 <pbuf_alloc+0x3e>
 8004a10:	2b41      	cmp	r3, #65	; 0x41
 8004a12:	f040 80bc 	bne.w	8004b8e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	88bb      	ldrh	r3, [r7, #4]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f000 f8d1 	bl	8004bc4 <pbuf_alloc_reference>
 8004a22:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004a24:	e0bd      	b.n	8004ba2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004a2e:	88bb      	ldrh	r3, [r7, #4]
 8004a30:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004a32:	2008      	movs	r0, #8
 8004a34:	f7ff fbc2 	bl	80041bc <memp_malloc>
 8004a38:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004a40:	f7ff ff94 	bl	800496c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004a4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a4c:	f000 faa8 	bl	8004fa0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e0a7      	b.n	8004ba4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a56:	3303      	adds	r3, #3
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	8b7a      	ldrh	r2, [r7, #26]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bf28      	it	cs
 8004a6c:	4613      	movcs	r3, r2
 8004a6e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004a70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a72:	3310      	adds	r3, #16
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	3303      	adds	r3, #3
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	4618      	mov	r0, r3
 8004a80:	89f9      	ldrh	r1, [r7, #14]
 8004a82:	8b7a      	ldrh	r2, [r7, #26]
 8004a84:	2300      	movs	r3, #0
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4601      	mov	r1, r0
 8004a90:	6938      	ldr	r0, [r7, #16]
 8004a92:	f7ff ff77 	bl	8004984 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <pbuf_alloc+0xd8>
 8004aa2:	4b42      	ldr	r3, [pc, #264]	; (8004bac <pbuf_alloc+0x1d4>)
 8004aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa8:	4941      	ldr	r1, [pc, #260]	; (8004bb0 <pbuf_alloc+0x1d8>)
 8004aaa:	4842      	ldr	r0, [pc, #264]	; (8004bb4 <pbuf_alloc+0x1dc>)
 8004aac:	f00a fef2 	bl	800f894 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ab2:	3303      	adds	r3, #3
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004abc:	d106      	bne.n	8004acc <pbuf_alloc+0xf4>
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <pbuf_alloc+0x1d4>)
 8004ac0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8004ac4:	493c      	ldr	r1, [pc, #240]	; (8004bb8 <pbuf_alloc+0x1e0>)
 8004ac6:	483b      	ldr	r0, [pc, #236]	; (8004bb4 <pbuf_alloc+0x1dc>)
 8004ac8:	f00a fee4 	bl	800f894 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	e002      	b.n	8004ade <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004ae2:	8b7a      	ldrh	r2, [r7, #26]
 8004ae4:	89fb      	ldrh	r3, [r7, #14]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004aee:	8b7b      	ldrh	r3, [r7, #26]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d19e      	bne.n	8004a32 <pbuf_alloc+0x5a>
      break;
 8004af4:	e055      	b.n	8004ba2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004af8:	3303      	adds	r3, #3
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f023 0303 	bic.w	r3, r3, #3
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	88bb      	ldrh	r3, [r7, #4]
 8004b04:	3303      	adds	r3, #3
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f023 0303 	bic.w	r3, r3, #3
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004b12:	8b3b      	ldrh	r3, [r7, #24]
 8004b14:	3310      	adds	r3, #16
 8004b16:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004b18:	8b3a      	ldrh	r2, [r7, #24]
 8004b1a:	88bb      	ldrh	r3, [r7, #4]
 8004b1c:	3303      	adds	r3, #3
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d306      	bcc.n	8004b34 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004b26:	8afa      	ldrh	r2, [r7, #22]
 8004b28:	88bb      	ldrh	r3, [r7, #4]
 8004b2a:	3303      	adds	r3, #3
 8004b2c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d201      	bcs.n	8004b38 <pbuf_alloc+0x160>
        return NULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e035      	b.n	8004ba4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004b38:	8afb      	ldrh	r3, [r7, #22]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff f9ae 	bl	8003e9c <mem_malloc>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <pbuf_alloc+0x174>
        return NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e02b      	b.n	8004ba4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b4e:	3310      	adds	r3, #16
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	4413      	add	r3, r2
 8004b54:	3303      	adds	r3, #3
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	88b9      	ldrh	r1, [r7, #4]
 8004b5e:	88ba      	ldrh	r2, [r7, #4]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9301      	str	r3, [sp, #4]
 8004b64:	887b      	ldrh	r3, [r7, #2]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b6e:	f7ff ff09 	bl	8004984 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <pbuf_alloc+0x1c8>
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <pbuf_alloc+0x1d4>)
 8004b80:	f44f 7291 	mov.w	r2, #290	; 0x122
 8004b84:	490d      	ldr	r1, [pc, #52]	; (8004bbc <pbuf_alloc+0x1e4>)
 8004b86:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <pbuf_alloc+0x1dc>)
 8004b88:	f00a fe84 	bl	800f894 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004b8c:	e008      	b.n	8004ba0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <pbuf_alloc+0x1d4>)
 8004b90:	f240 1227 	movw	r2, #295	; 0x127
 8004b94:	490a      	ldr	r1, [pc, #40]	; (8004bc0 <pbuf_alloc+0x1e8>)
 8004b96:	4807      	ldr	r0, [pc, #28]	; (8004bb4 <pbuf_alloc+0x1dc>)
 8004b98:	f00a fe7c 	bl	800f894 <iprintf>
      return NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e001      	b.n	8004ba4 <pbuf_alloc+0x1cc>
      break;
 8004ba0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08010c9c 	.word	0x08010c9c
 8004bb0:	08010ccc 	.word	0x08010ccc
 8004bb4:	08010cfc 	.word	0x08010cfc
 8004bb8:	08010d24 	.word	0x08010d24
 8004bbc:	08010d58 	.word	0x08010d58
 8004bc0:	08010d84 	.word	0x08010d84

08004bc4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004bd4:	883b      	ldrh	r3, [r7, #0]
 8004bd6:	2b41      	cmp	r3, #65	; 0x41
 8004bd8:	d009      	beq.n	8004bee <pbuf_alloc_reference+0x2a>
 8004bda:	883b      	ldrh	r3, [r7, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d006      	beq.n	8004bee <pbuf_alloc_reference+0x2a>
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <pbuf_alloc_reference+0x5c>)
 8004be2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004be6:	490f      	ldr	r1, [pc, #60]	; (8004c24 <pbuf_alloc_reference+0x60>)
 8004be8:	480f      	ldr	r0, [pc, #60]	; (8004c28 <pbuf_alloc_reference+0x64>)
 8004bea:	f00a fe53 	bl	800f894 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004bee:	2007      	movs	r0, #7
 8004bf0:	f7ff fae4 	bl	80041bc <memp_malloc>
 8004bf4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e00b      	b.n	8004c18 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004c00:	8879      	ldrh	r1, [r7, #2]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	883b      	ldrh	r3, [r7, #0]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7ff feb7 	bl	8004984 <pbuf_init_alloced_pbuf>
  return p;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	08010c9c 	.word	0x08010c9c
 8004c24:	08010da0 	.word	0x08010da0
 8004c28:	08010cfc 	.word	0x08010cfc

08004c2c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	4603      	mov	r3, r0
 8004c36:	73fb      	strb	r3, [r7, #15]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	81bb      	strh	r3, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004c44:	8a7b      	ldrh	r3, [r7, #18]
 8004c46:	3303      	adds	r3, #3
 8004c48:	f023 0203 	bic.w	r2, r3, #3
 8004c4c:	89bb      	ldrh	r3, [r7, #12]
 8004c4e:	441a      	add	r2, r3
 8004c50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d901      	bls.n	8004c5a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e018      	b.n	8004c8c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004c60:	8a7b      	ldrh	r3, [r7, #18]
 8004c62:	3303      	adds	r3, #3
 8004c64:	f023 0303 	bic.w	r3, r3, #3
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	e001      	b.n	8004c74 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	89b9      	ldrh	r1, [r7, #12]
 8004c78:	89ba      	ldrh	r2, [r7, #12]
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	897b      	ldrh	r3, [r7, #10]
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	460b      	mov	r3, r1
 8004c84:	6979      	ldr	r1, [r7, #20]
 8004c86:	f7ff fe7d 	bl	8004984 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004c8a:	687b      	ldr	r3, [r7, #4]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <pbuf_realloc+0x20>
 8004ca6:	4b3a      	ldr	r3, [pc, #232]	; (8004d90 <pbuf_realloc+0xfc>)
 8004ca8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004cac:	4939      	ldr	r1, [pc, #228]	; (8004d94 <pbuf_realloc+0x100>)
 8004cae:	483a      	ldr	r0, [pc, #232]	; (8004d98 <pbuf_realloc+0x104>)
 8004cb0:	f00a fdf0 	bl	800f894 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	891b      	ldrh	r3, [r3, #8]
 8004cb8:	887a      	ldrh	r2, [r7, #2]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d263      	bcs.n	8004d86 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	891a      	ldrh	r2, [r3, #8]
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	817b      	strh	r3, [r7, #10]
  q = p;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004cd0:	e018      	b.n	8004d04 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	895b      	ldrh	r3, [r3, #10]
 8004cd6:	897a      	ldrh	r2, [r7, #10]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	891a      	ldrh	r2, [r3, #8]
 8004ce0:	893b      	ldrh	r3, [r7, #8]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <pbuf_realloc+0x70>
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <pbuf_realloc+0xfc>)
 8004cf8:	f240 12af 	movw	r2, #431	; 0x1af
 8004cfc:	4927      	ldr	r1, [pc, #156]	; (8004d9c <pbuf_realloc+0x108>)
 8004cfe:	4826      	ldr	r0, [pc, #152]	; (8004d98 <pbuf_realloc+0x104>)
 8004d00:	f00a fdc8 	bl	800f894 <iprintf>
  while (rem_len > q->len) {
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	895b      	ldrh	r3, [r3, #10]
 8004d08:	897a      	ldrh	r2, [r7, #10]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d8e1      	bhi.n	8004cd2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	7b1b      	ldrb	r3, [r3, #12]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d121      	bne.n	8004d5e <pbuf_realloc+0xca>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	895b      	ldrh	r3, [r3, #10]
 8004d1e:	897a      	ldrh	r2, [r7, #10]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d01c      	beq.n	8004d5e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	7b5b      	ldrb	r3, [r3, #13]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	897b      	ldrh	r3, [r7, #10]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	4619      	mov	r1, r3
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7fe ffae 	bl	8003ca4 <mem_trim>
 8004d48:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <pbuf_realloc+0xca>
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <pbuf_realloc+0xfc>)
 8004d52:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004d56:	4912      	ldr	r1, [pc, #72]	; (8004da0 <pbuf_realloc+0x10c>)
 8004d58:	480f      	ldr	r0, [pc, #60]	; (8004d98 <pbuf_realloc+0x104>)
 8004d5a:	f00a fd9b 	bl	800f894 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	897a      	ldrh	r2, [r7, #10]
 8004d62:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	895a      	ldrh	r2, [r3, #10]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d004      	beq.n	8004d7e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f911 	bl	8004fa0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e000      	b.n	8004d88 <pbuf_realloc+0xf4>
    return;
 8004d86:	bf00      	nop

}
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	08010c9c 	.word	0x08010c9c
 8004d94:	08010db4 	.word	0x08010db4
 8004d98:	08010cfc 	.word	0x08010cfc
 8004d9c:	08010dcc 	.word	0x08010dcc
 8004da0:	08010de4 	.word	0x08010de4

08004da4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <pbuf_add_header_impl+0x22>
 8004db8:	4b2b      	ldr	r3, [pc, #172]	; (8004e68 <pbuf_add_header_impl+0xc4>)
 8004dba:	f240 12df 	movw	r2, #479	; 0x1df
 8004dbe:	492b      	ldr	r1, [pc, #172]	; (8004e6c <pbuf_add_header_impl+0xc8>)
 8004dc0:	482b      	ldr	r0, [pc, #172]	; (8004e70 <pbuf_add_header_impl+0xcc>)
 8004dc2:	f00a fd67 	bl	800f894 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <pbuf_add_header_impl+0x30>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d301      	bcc.n	8004dd8 <pbuf_add_header_impl+0x34>
    return 1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e043      	b.n	8004e60 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <pbuf_add_header_impl+0x3e>
    return 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e03e      	b.n	8004e60 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	891a      	ldrh	r2, [r3, #8]
 8004dea:	8a7b      	ldrh	r3, [r7, #18]
 8004dec:	4413      	add	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8a7a      	ldrh	r2, [r7, #18]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d901      	bls.n	8004dfa <pbuf_add_header_impl+0x56>
    return 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e032      	b.n	8004e60 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004e00:	8a3b      	ldrh	r3, [r7, #16]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00c      	beq.n	8004e24 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	425b      	negs	r3, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3310      	adds	r3, #16
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d20d      	bcs.n	8004e3c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e01d      	b.n	8004e60 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	425b      	negs	r3, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	e001      	b.n	8004e3c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e011      	b.n	8004e60 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	895a      	ldrh	r2, [r3, #10]
 8004e46:	8a7b      	ldrh	r3, [r7, #18]
 8004e48:	4413      	add	r3, r2
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	891a      	ldrh	r2, [r3, #8]
 8004e54:	8a7b      	ldrh	r3, [r7, #18]
 8004e56:	4413      	add	r3, r2
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	811a      	strh	r2, [r3, #8]


  return 0;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08010c9c 	.word	0x08010c9c
 8004e6c:	08010e00 	.word	0x08010e00
 8004e70:	08010cfc 	.word	0x08010cfc

08004e74 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff ff8e 	bl	8004da4 <pbuf_add_header_impl>
 8004e88:	4603      	mov	r3, r0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <pbuf_remove_header+0x1e>
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <pbuf_remove_header+0x94>)
 8004ea6:	f240 224b 	movw	r2, #587	; 0x24b
 8004eaa:	4920      	ldr	r1, [pc, #128]	; (8004f2c <pbuf_remove_header+0x98>)
 8004eac:	4820      	ldr	r0, [pc, #128]	; (8004f30 <pbuf_remove_header+0x9c>)
 8004eae:	f00a fcf1 	bl	800f894 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <pbuf_remove_header+0x2c>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebe:	d301      	bcc.n	8004ec4 <pbuf_remove_header+0x30>
    return 1;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e02c      	b.n	8004f1e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <pbuf_remove_header+0x3a>
    return 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	e027      	b.n	8004f1e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	895b      	ldrh	r3, [r3, #10]
 8004ed6:	89fa      	ldrh	r2, [r7, #14]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d908      	bls.n	8004eee <pbuf_remove_header+0x5a>
 8004edc:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <pbuf_remove_header+0x94>)
 8004ede:	f240 2255 	movw	r2, #597	; 0x255
 8004ee2:	4914      	ldr	r1, [pc, #80]	; (8004f34 <pbuf_remove_header+0xa0>)
 8004ee4:	4812      	ldr	r0, [pc, #72]	; (8004f30 <pbuf_remove_header+0x9c>)
 8004ee6:	f00a fcd5 	bl	800f894 <iprintf>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e017      	b.n	8004f1e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	441a      	add	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	895a      	ldrh	r2, [r3, #10]
 8004f04:	89fb      	ldrh	r3, [r7, #14]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	891a      	ldrh	r2, [r3, #8]
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	08010c9c 	.word	0x08010c9c
 8004f2c:	08010e00 	.word	0x08010e00
 8004f30:	08010cfc 	.word	0x08010cfc
 8004f34:	08010e0c 	.word	0x08010e0c

08004f38 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	807b      	strh	r3, [r7, #2]
 8004f44:	4613      	mov	r3, r2
 8004f46:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004f48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da08      	bge.n	8004f62 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004f50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f54:	425b      	negs	r3, r3
 8004f56:	4619      	mov	r1, r3
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff9b 	bl	8004e94 <pbuf_remove_header>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	e007      	b.n	8004f72 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004f62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f66:	787a      	ldrb	r2, [r7, #1]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff ff1a 	bl	8004da4 <pbuf_add_header_impl>
 8004f70:	4603      	mov	r3, r0
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004f86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff ffd2 	bl	8004f38 <pbuf_header_impl>
 8004f94:	4603      	mov	r3, r0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <pbuf_free+0x22>
 8004fb4:	4b38      	ldr	r3, [pc, #224]	; (8005098 <pbuf_free+0xf8>)
 8004fb6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004fba:	4938      	ldr	r1, [pc, #224]	; (800509c <pbuf_free+0xfc>)
 8004fbc:	4838      	ldr	r0, [pc, #224]	; (80050a0 <pbuf_free+0x100>)
 8004fbe:	f00a fc69 	bl	800f894 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e063      	b.n	800508e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004fca:	e05c      	b.n	8005086 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	7b9b      	ldrb	r3, [r3, #14]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <pbuf_free+0x42>
 8004fd4:	4b30      	ldr	r3, [pc, #192]	; (8005098 <pbuf_free+0xf8>)
 8004fd6:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004fda:	4932      	ldr	r1, [pc, #200]	; (80050a4 <pbuf_free+0x104>)
 8004fdc:	4830      	ldr	r0, [pc, #192]	; (80050a0 <pbuf_free+0x100>)
 8004fde:	f00a fc59 	bl	800f894 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7b9b      	ldrb	r3, [r3, #14]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	739a      	strb	r2, [r3, #14]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	7b9b      	ldrb	r3, [r3, #14]
 8004ff2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004ff4:	7dbb      	ldrb	r3, [r7, #22]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d143      	bne.n	8005082 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	7b1b      	ldrb	r3, [r3, #12]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	7b5b      	ldrb	r3, [r3, #13]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <pbuf_free+0x90>
 8005022:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <pbuf_free+0xf8>)
 8005024:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005028:	491f      	ldr	r1, [pc, #124]	; (80050a8 <pbuf_free+0x108>)
 800502a:	481d      	ldr	r0, [pc, #116]	; (80050a0 <pbuf_free+0x100>)
 800502c:	f00a fc32 	bl	800f894 <iprintf>
        pc->custom_free_function(p);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
 8005038:	e01d      	b.n	8005076 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d104      	bne.n	800504a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	2008      	movs	r0, #8
 8005044:	f7ff f92a 	bl	800429c <memp_free>
 8005048:	e015      	b.n	8005076 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d104      	bne.n	800505a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	2007      	movs	r0, #7
 8005054:	f7ff f922 	bl	800429c <memp_free>
 8005058:	e00d      	b.n	8005076 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <pbuf_free+0xc8>
          mem_free(p);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fe fdb5 	bl	8003bd0 <mem_free>
 8005066:	e006      	b.n	8005076 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <pbuf_free+0xf8>)
 800506a:	f240 320f 	movw	r2, #783	; 0x30f
 800506e:	490f      	ldr	r1, [pc, #60]	; (80050ac <pbuf_free+0x10c>)
 8005070:	480b      	ldr	r0, [pc, #44]	; (80050a0 <pbuf_free+0x100>)
 8005072:	f00a fc0f 	bl	800f894 <iprintf>
        }
      }
      count++;
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	3301      	adds	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	e001      	b.n	8005086 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d19f      	bne.n	8004fcc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	08010c9c 	.word	0x08010c9c
 800509c:	08010e00 	.word	0x08010e00
 80050a0:	08010cfc 	.word	0x08010cfc
 80050a4:	08010e2c 	.word	0x08010e2c
 80050a8:	08010e44 	.word	0x08010e44
 80050ac:	08010e68 	.word	0x08010e68

080050b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80050bc:	e005      	b.n	80050ca <pbuf_clen+0x1a>
    ++len;
 80050be:	89fb      	ldrh	r3, [r7, #14]
 80050c0:	3301      	adds	r3, #1
 80050c2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f6      	bne.n	80050be <pbuf_clen+0xe>
  }
  return len;
 80050d0:	89fb      	ldrh	r3, [r7, #14]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
	...

080050e0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d010      	beq.n	8005110 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	7b9b      	ldrb	r3, [r3, #14]
 80050f2:	3301      	adds	r3, #1
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	7b9b      	ldrb	r3, [r3, #14]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <pbuf_ref+0x30>
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <pbuf_ref+0x38>)
 8005104:	f240 3242 	movw	r2, #834	; 0x342
 8005108:	4904      	ldr	r1, [pc, #16]	; (800511c <pbuf_ref+0x3c>)
 800510a:	4805      	ldr	r0, [pc, #20]	; (8005120 <pbuf_ref+0x40>)
 800510c:	f00a fbc2 	bl	800f894 <iprintf>
  }
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08010c9c 	.word	0x08010c9c
 800511c:	08010e7c 	.word	0x08010e7c
 8005120:	08010cfc 	.word	0x08010cfc

08005124 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <pbuf_cat+0x16>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <pbuf_cat+0x26>
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <pbuf_cat+0x98>)
 800513c:	f240 3259 	movw	r2, #857	; 0x359
 8005140:	491f      	ldr	r1, [pc, #124]	; (80051c0 <pbuf_cat+0x9c>)
 8005142:	4820      	ldr	r0, [pc, #128]	; (80051c4 <pbuf_cat+0xa0>)
 8005144:	f00a fba6 	bl	800f894 <iprintf>
 8005148:	e034      	b.n	80051b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e00a      	b.n	8005166 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	891a      	ldrh	r2, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	891b      	ldrh	r3, [r3, #8]
 8005158:	4413      	add	r3, r2
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	891a      	ldrh	r2, [r3, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	895b      	ldrh	r3, [r3, #10]
 8005176:	429a      	cmp	r2, r3
 8005178:	d006      	beq.n	8005188 <pbuf_cat+0x64>
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <pbuf_cat+0x98>)
 800517c:	f240 3262 	movw	r2, #866	; 0x362
 8005180:	4911      	ldr	r1, [pc, #68]	; (80051c8 <pbuf_cat+0xa4>)
 8005182:	4810      	ldr	r0, [pc, #64]	; (80051c4 <pbuf_cat+0xa0>)
 8005184:	f00a fb86 	bl	800f894 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d006      	beq.n	800519e <pbuf_cat+0x7a>
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <pbuf_cat+0x98>)
 8005192:	f240 3263 	movw	r2, #867	; 0x363
 8005196:	490d      	ldr	r1, [pc, #52]	; (80051cc <pbuf_cat+0xa8>)
 8005198:	480a      	ldr	r0, [pc, #40]	; (80051c4 <pbuf_cat+0xa0>)
 800519a:	f00a fb7b 	bl	800f894 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	891a      	ldrh	r2, [r3, #8]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	891b      	ldrh	r3, [r3, #8]
 80051a6:	4413      	add	r3, r2
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	08010c9c 	.word	0x08010c9c
 80051c0:	08010e90 	.word	0x08010e90
 80051c4:	08010cfc 	.word	0x08010cfc
 80051c8:	08010ec8 	.word	0x08010ec8
 80051cc:	08010ef8 	.word	0x08010ef8

080051d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80051da:	6839      	ldr	r1, [r7, #0]
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff ffa1 	bl	8005124 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80051e2:	6838      	ldr	r0, [r7, #0]
 80051e4:	f7ff ff7c 	bl	80050e0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <pbuf_copy+0x2a>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <pbuf_copy+0x2a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	891a      	ldrh	r2, [r3, #8]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	891b      	ldrh	r3, [r3, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d209      	bcs.n	800522e <pbuf_copy+0x3e>
 800521a:	4b57      	ldr	r3, [pc, #348]	; (8005378 <pbuf_copy+0x188>)
 800521c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005220:	4956      	ldr	r1, [pc, #344]	; (800537c <pbuf_copy+0x18c>)
 8005222:	4857      	ldr	r0, [pc, #348]	; (8005380 <pbuf_copy+0x190>)
 8005224:	f00a fb36 	bl	800f894 <iprintf>
 8005228:	f06f 030f 	mvn.w	r3, #15
 800522c:	e09f      	b.n	800536e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	895b      	ldrh	r3, [r3, #10]
 8005232:	461a      	mov	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	895b      	ldrh	r3, [r3, #10]
 800523c:	4619      	mov	r1, r3
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1acb      	subs	r3, r1, r3
 8005242:	429a      	cmp	r2, r3
 8005244:	d306      	bcc.n	8005254 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	895b      	ldrh	r3, [r3, #10]
 800524a:	461a      	mov	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e005      	b.n	8005260 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	895b      	ldrh	r3, [r3, #10]
 8005258:	461a      	mov	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	18d0      	adds	r0, r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4619      	mov	r1, r3
 8005274:	f00a fbe9 	bl	800fa4a <memcpy>
    offset_to += len;
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	895b      	ldrh	r3, [r3, #10]
 800528c:	461a      	mov	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4293      	cmp	r3, r2
 8005292:	d906      	bls.n	80052a2 <pbuf_copy+0xb2>
 8005294:	4b38      	ldr	r3, [pc, #224]	; (8005378 <pbuf_copy+0x188>)
 8005296:	f240 32d9 	movw	r2, #985	; 0x3d9
 800529a:	493a      	ldr	r1, [pc, #232]	; (8005384 <pbuf_copy+0x194>)
 800529c:	4838      	ldr	r0, [pc, #224]	; (8005380 <pbuf_copy+0x190>)
 800529e:	f00a faf9 	bl	800f894 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	895b      	ldrh	r3, [r3, #10]
 80052a6:	461a      	mov	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d906      	bls.n	80052bc <pbuf_copy+0xcc>
 80052ae:	4b32      	ldr	r3, [pc, #200]	; (8005378 <pbuf_copy+0x188>)
 80052b0:	f240 32da 	movw	r2, #986	; 0x3da
 80052b4:	4934      	ldr	r1, [pc, #208]	; (8005388 <pbuf_copy+0x198>)
 80052b6:	4832      	ldr	r0, [pc, #200]	; (8005380 <pbuf_copy+0x190>)
 80052b8:	f00a faec 	bl	800f894 <iprintf>
    if (offset_from >= p_from->len) {
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	895b      	ldrh	r3, [r3, #10]
 80052c0:	461a      	mov	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d304      	bcc.n	80052d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	895b      	ldrh	r3, [r3, #10]
 80052d6:	461a      	mov	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4293      	cmp	r3, r2
 80052dc:	d114      	bne.n	8005308 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10c      	bne.n	8005308 <pbuf_copy+0x118>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d009      	beq.n	8005308 <pbuf_copy+0x118>
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <pbuf_copy+0x188>)
 80052f6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80052fa:	4924      	ldr	r1, [pc, #144]	; (800538c <pbuf_copy+0x19c>)
 80052fc:	4820      	ldr	r0, [pc, #128]	; (8005380 <pbuf_copy+0x190>)
 80052fe:	f00a fac9 	bl	800f894 <iprintf>
 8005302:	f06f 030f 	mvn.w	r3, #15
 8005306:	e032      	b.n	800536e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d013      	beq.n	8005336 <pbuf_copy+0x146>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	895a      	ldrh	r2, [r3, #10]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	891b      	ldrh	r3, [r3, #8]
 8005316:	429a      	cmp	r2, r3
 8005318:	d10d      	bne.n	8005336 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <pbuf_copy+0x146>
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <pbuf_copy+0x188>)
 8005324:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005328:	4919      	ldr	r1, [pc, #100]	; (8005390 <pbuf_copy+0x1a0>)
 800532a:	4815      	ldr	r0, [pc, #84]	; (8005380 <pbuf_copy+0x190>)
 800532c:	f00a fab2 	bl	800f894 <iprintf>
 8005330:	f06f 0305 	mvn.w	r3, #5
 8005334:	e01b      	b.n	800536e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <pbuf_copy+0x174>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	895a      	ldrh	r2, [r3, #10]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	891b      	ldrh	r3, [r3, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	d10d      	bne.n	8005364 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <pbuf_copy+0x174>
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <pbuf_copy+0x188>)
 8005352:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005356:	490e      	ldr	r1, [pc, #56]	; (8005390 <pbuf_copy+0x1a0>)
 8005358:	4809      	ldr	r0, [pc, #36]	; (8005380 <pbuf_copy+0x190>)
 800535a:	f00a fa9b 	bl	800f894 <iprintf>
 800535e:	f06f 0305 	mvn.w	r3, #5
 8005362:	e004      	b.n	800536e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f47f af61 	bne.w	800522e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	08010c9c 	.word	0x08010c9c
 800537c:	08010f44 	.word	0x08010f44
 8005380:	08010cfc 	.word	0x08010cfc
 8005384:	08010f74 	.word	0x08010f74
 8005388:	08010f8c 	.word	0x08010f8c
 800538c:	08010fa8 	.word	0x08010fa8
 8005390:	08010fb8 	.word	0x08010fb8

08005394 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4611      	mov	r1, r2
 80053a0:	461a      	mov	r2, r3
 80053a2:	460b      	mov	r3, r1
 80053a4:	80fb      	strh	r3, [r7, #6]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d108      	bne.n	80053ca <pbuf_copy_partial+0x36>
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <pbuf_copy_partial+0xd4>)
 80053ba:	f240 420a 	movw	r2, #1034	; 0x40a
 80053be:	492b      	ldr	r1, [pc, #172]	; (800546c <pbuf_copy_partial+0xd8>)
 80053c0:	482b      	ldr	r0, [pc, #172]	; (8005470 <pbuf_copy_partial+0xdc>)
 80053c2:	f00a fa67 	bl	800f894 <iprintf>
 80053c6:	2300      	movs	r3, #0
 80053c8:	e04a      	b.n	8005460 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d108      	bne.n	80053e2 <pbuf_copy_partial+0x4e>
 80053d0:	4b25      	ldr	r3, [pc, #148]	; (8005468 <pbuf_copy_partial+0xd4>)
 80053d2:	f240 420b 	movw	r2, #1035	; 0x40b
 80053d6:	4927      	ldr	r1, [pc, #156]	; (8005474 <pbuf_copy_partial+0xe0>)
 80053d8:	4825      	ldr	r0, [pc, #148]	; (8005470 <pbuf_copy_partial+0xdc>)
 80053da:	f00a fa5b 	bl	800f894 <iprintf>
 80053de:	2300      	movs	r3, #0
 80053e0:	e03e      	b.n	8005460 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	e034      	b.n	8005452 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80053e8:	88bb      	ldrh	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <pbuf_copy_partial+0x70>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	895b      	ldrh	r3, [r3, #10]
 80053f2:	88ba      	ldrh	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d305      	bcc.n	8005404 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	895b      	ldrh	r3, [r3, #10]
 80053fc:	88ba      	ldrh	r2, [r7, #4]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	80bb      	strh	r3, [r7, #4]
 8005402:	e023      	b.n	800544c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	895a      	ldrh	r2, [r3, #10]
 8005408:	88bb      	ldrh	r3, [r7, #4]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800540e:	8b3a      	ldrh	r2, [r7, #24]
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	429a      	cmp	r2, r3
 8005414:	d901      	bls.n	800541a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800541a:	8b7b      	ldrh	r3, [r7, #26]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	18d0      	adds	r0, r2, r3
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	88bb      	ldrh	r3, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	8b3a      	ldrh	r2, [r7, #24]
 800542a:	4619      	mov	r1, r3
 800542c:	f00a fb0d 	bl	800fa4a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005430:	8afa      	ldrh	r2, [r7, #22]
 8005432:	8b3b      	ldrh	r3, [r7, #24]
 8005434:	4413      	add	r3, r2
 8005436:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005438:	8b7a      	ldrh	r2, [r7, #26]
 800543a:	8b3b      	ldrh	r3, [r7, #24]
 800543c:	4413      	add	r3, r2
 800543e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	8b3b      	ldrh	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <pbuf_copy_partial+0xca>
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1c4      	bne.n	80053e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800545e:	8afb      	ldrh	r3, [r7, #22]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	08010c9c 	.word	0x08010c9c
 800546c:	08010fe4 	.word	0x08010fe4
 8005470:	08010cfc 	.word	0x08010cfc
 8005474:	08011004 	.word	0x08011004

08005478 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	603a      	str	r2, [r7, #0]
 8005482:	71fb      	strb	r3, [r7, #7]
 8005484:	460b      	mov	r3, r1
 8005486:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	8919      	ldrh	r1, [r3, #8]
 800548c:	88ba      	ldrh	r2, [r7, #4]
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff faa1 	bl	80049d8 <pbuf_alloc>
 8005496:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <pbuf_clone+0x2a>
    return NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	e011      	b.n	80054c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fea3 	bl	80051f0 <pbuf_copy>
 80054aa:	4603      	mov	r3, r0
 80054ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80054ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <pbuf_clone+0x4c>
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <pbuf_clone+0x58>)
 80054b8:	f240 5224 	movw	r2, #1316	; 0x524
 80054bc:	4905      	ldr	r1, [pc, #20]	; (80054d4 <pbuf_clone+0x5c>)
 80054be:	4806      	ldr	r0, [pc, #24]	; (80054d8 <pbuf_clone+0x60>)
 80054c0:	f00a f9e8 	bl	800f894 <iprintf>
  return q;
 80054c4:	68fb      	ldr	r3, [r7, #12]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	08010c9c 	.word	0x08010c9c
 80054d4:	08011110 	.word	0x08011110
 80054d8:	08010cfc 	.word	0x08010cfc

080054dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80054e0:	f00a f8d8 	bl	800f694 <rand>
 80054e4:	4603      	mov	r3, r0
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	4b01      	ldr	r3, [pc, #4]	; (80054fc <tcp_init+0x20>)
 80054f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000020 	.word	0x20000020

08005500 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7d1b      	ldrb	r3, [r3, #20]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d105      	bne.n	800551c <tcp_free+0x1c>
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <tcp_free+0x2c>)
 8005512:	22d4      	movs	r2, #212	; 0xd4
 8005514:	4906      	ldr	r1, [pc, #24]	; (8005530 <tcp_free+0x30>)
 8005516:	4807      	ldr	r0, [pc, #28]	; (8005534 <tcp_free+0x34>)
 8005518:	f00a f9bc 	bl	800f894 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	2001      	movs	r0, #1
 8005520:	f7fe febc 	bl	800429c <memp_free>
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	0801119c 	.word	0x0801119c
 8005530:	080111cc 	.word	0x080111cc
 8005534:	080111e0 	.word	0x080111e0

08005538 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7d1b      	ldrb	r3, [r3, #20]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <tcp_free_listen+0x1c>
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <tcp_free_listen+0x2c>)
 800554a:	22df      	movs	r2, #223	; 0xdf
 800554c:	4906      	ldr	r1, [pc, #24]	; (8005568 <tcp_free_listen+0x30>)
 800554e:	4807      	ldr	r0, [pc, #28]	; (800556c <tcp_free_listen+0x34>)
 8005550:	f00a f9a0 	bl	800f894 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	2002      	movs	r0, #2
 8005558:	f7fe fea0 	bl	800429c <memp_free>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	0801119c 	.word	0x0801119c
 8005568:	08011208 	.word	0x08011208
 800556c:	080111e0 	.word	0x080111e0

08005570 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005574:	f000 fea2 	bl	80062bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <tcp_tmr+0x28>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	b2da      	uxtb	r2, r3
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <tcp_tmr+0x28>)
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <tcp_tmr+0x28>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005590:	f000 fb54 	bl	8005c3c <tcp_slowtmr>
  }
}
 8005594:	bf00      	nop
 8005596:	bd80      	pop	{r7, pc}
 8005598:	2000a461 	.word	0x2000a461

0800559c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <tcp_remove_listener+0x1c>
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <tcp_remove_listener+0x48>)
 80055ae:	22ff      	movs	r2, #255	; 0xff
 80055b0:	490d      	ldr	r1, [pc, #52]	; (80055e8 <tcp_remove_listener+0x4c>)
 80055b2:	480e      	ldr	r0, [pc, #56]	; (80055ec <tcp_remove_listener+0x50>)
 80055b4:	f00a f96e 	bl	800f894 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e00a      	b.n	80055d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d102      	bne.n	80055ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f1      	bne.n	80055be <tcp_remove_listener+0x22>
    }
  }
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0801119c 	.word	0x0801119c
 80055e8:	08011224 	.word	0x08011224
 80055ec:	080111e0 	.word	0x080111e0

080055f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <tcp_listen_closed+0x1c>
 80055fe:	4b14      	ldr	r3, [pc, #80]	; (8005650 <tcp_listen_closed+0x60>)
 8005600:	f240 1211 	movw	r2, #273	; 0x111
 8005604:	4913      	ldr	r1, [pc, #76]	; (8005654 <tcp_listen_closed+0x64>)
 8005606:	4814      	ldr	r0, [pc, #80]	; (8005658 <tcp_listen_closed+0x68>)
 8005608:	f00a f944 	bl	800f894 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	7d1b      	ldrb	r3, [r3, #20]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d006      	beq.n	8005622 <tcp_listen_closed+0x32>
 8005614:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <tcp_listen_closed+0x60>)
 8005616:	f44f 7289 	mov.w	r2, #274	; 0x112
 800561a:	4910      	ldr	r1, [pc, #64]	; (800565c <tcp_listen_closed+0x6c>)
 800561c:	480e      	ldr	r0, [pc, #56]	; (8005658 <tcp_listen_closed+0x68>)
 800561e:	f00a f939 	bl	800f894 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005622:	2301      	movs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e00b      	b.n	8005640 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005628:	4a0d      	ldr	r2, [pc, #52]	; (8005660 <tcp_listen_closed+0x70>)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff ffb1 	bl	800559c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3301      	adds	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b03      	cmp	r3, #3
 8005644:	d9f0      	bls.n	8005628 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	0801119c 	.word	0x0801119c
 8005654:	0801124c 	.word	0x0801124c
 8005658:	080111e0 	.word	0x080111e0
 800565c:	08011258 	.word	0x08011258
 8005660:	08013514 	.word	0x08013514

08005664 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005664:	b5b0      	push	{r4, r5, r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af04      	add	r7, sp, #16
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <tcp_close_shutdown+0x20>
 8005676:	4b63      	ldr	r3, [pc, #396]	; (8005804 <tcp_close_shutdown+0x1a0>)
 8005678:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800567c:	4962      	ldr	r1, [pc, #392]	; (8005808 <tcp_close_shutdown+0x1a4>)
 800567e:	4863      	ldr	r0, [pc, #396]	; (800580c <tcp_close_shutdown+0x1a8>)
 8005680:	f00a f908 	bl	800f894 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d066      	beq.n	8005758 <tcp_close_shutdown+0xf4>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	7d1b      	ldrb	r3, [r3, #20]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d003      	beq.n	800569a <tcp_close_shutdown+0x36>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7d1b      	ldrb	r3, [r3, #20]
 8005696:	2b07      	cmp	r3, #7
 8005698:	d15e      	bne.n	8005758 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <tcp_close_shutdown+0x48>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80056aa:	d055      	beq.n	8005758 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8b5b      	ldrh	r3, [r3, #26]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <tcp_close_shutdown+0x62>
 80056b8:	4b52      	ldr	r3, [pc, #328]	; (8005804 <tcp_close_shutdown+0x1a0>)
 80056ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80056be:	4954      	ldr	r1, [pc, #336]	; (8005810 <tcp_close_shutdown+0x1ac>)
 80056c0:	4852      	ldr	r0, [pc, #328]	; (800580c <tcp_close_shutdown+0x1a8>)
 80056c2:	f00a f8e7 	bl	800f894 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80056ce:	687d      	ldr	r5, [r7, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3304      	adds	r3, #4
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	8ad2      	ldrh	r2, [r2, #22]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	8b09      	ldrh	r1, [r1, #24]
 80056dc:	9102      	str	r1, [sp, #8]
 80056de:	9201      	str	r2, [sp, #4]
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	462b      	mov	r3, r5
 80056e4:	4622      	mov	r2, r4
 80056e6:	4601      	mov	r1, r0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f004 fe91 	bl	800a410 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 f8c6 	bl	8006880 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80056f4:	4b47      	ldr	r3, [pc, #284]	; (8005814 <tcp_close_shutdown+0x1b0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d105      	bne.n	800570a <tcp_close_shutdown+0xa6>
 80056fe:	4b45      	ldr	r3, [pc, #276]	; (8005814 <tcp_close_shutdown+0x1b0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a43      	ldr	r2, [pc, #268]	; (8005814 <tcp_close_shutdown+0x1b0>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	e013      	b.n	8005732 <tcp_close_shutdown+0xce>
 800570a:	4b42      	ldr	r3, [pc, #264]	; (8005814 <tcp_close_shutdown+0x1b0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e00c      	b.n	800572c <tcp_close_shutdown+0xc8>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	429a      	cmp	r2, r3
 800571a:	d104      	bne.n	8005726 <tcp_close_shutdown+0xc2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	60da      	str	r2, [r3, #12]
 8005724:	e005      	b.n	8005732 <tcp_close_shutdown+0xce>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1ef      	bne.n	8005712 <tcp_close_shutdown+0xae>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	4b37      	ldr	r3, [pc, #220]	; (8005818 <tcp_close_shutdown+0x1b4>)
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <tcp_close_shutdown+0x1b8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d102      	bne.n	800574e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005748:	f003 fd5e 	bl	8009208 <tcp_trigger_input_pcb_close>
 800574c:	e002      	b.n	8005754 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fed6 	bl	8005500 <tcp_free>
      }
      return ERR_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e050      	b.n	80057fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7d1b      	ldrb	r3, [r3, #20]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d03b      	beq.n	80057d8 <tcp_close_shutdown+0x174>
 8005760:	2b02      	cmp	r3, #2
 8005762:	dc44      	bgt.n	80057ee <tcp_close_shutdown+0x18a>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <tcp_close_shutdown+0x10a>
 8005768:	2b01      	cmp	r3, #1
 800576a:	d02a      	beq.n	80057c2 <tcp_close_shutdown+0x15e>
 800576c:	e03f      	b.n	80057ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	8adb      	ldrh	r3, [r3, #22]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d021      	beq.n	80057ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <tcp_close_shutdown+0x1bc>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d105      	bne.n	800578c <tcp_close_shutdown+0x128>
 8005780:	4b27      	ldr	r3, [pc, #156]	; (8005820 <tcp_close_shutdown+0x1bc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	4a26      	ldr	r2, [pc, #152]	; (8005820 <tcp_close_shutdown+0x1bc>)
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e013      	b.n	80057b4 <tcp_close_shutdown+0x150>
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <tcp_close_shutdown+0x1bc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	e00c      	b.n	80057ae <tcp_close_shutdown+0x14a>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d104      	bne.n	80057a8 <tcp_close_shutdown+0x144>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	e005      	b.n	80057b4 <tcp_close_shutdown+0x150>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ef      	bne.n	8005794 <tcp_close_shutdown+0x130>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fea0 	bl	8005500 <tcp_free>
      break;
 80057c0:	e01a      	b.n	80057f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ff14 	bl	80055f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4816      	ldr	r0, [pc, #88]	; (8005824 <tcp_close_shutdown+0x1c0>)
 80057cc:	f001 f8a8 	bl	8006920 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff feb1 	bl	8005538 <tcp_free_listen>
      break;
 80057d6:	e00f      	b.n	80057f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	480e      	ldr	r0, [pc, #56]	; (8005814 <tcp_close_shutdown+0x1b0>)
 80057dc:	f001 f8a0 	bl	8006920 <tcp_pcb_remove>
 80057e0:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <tcp_close_shutdown+0x1b4>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fe8a 	bl	8005500 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80057ec:	e004      	b.n	80057f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f81a 	bl	8005828 <tcp_close_shutdown_fin>
 80057f4:	4603      	mov	r3, r0
 80057f6:	e000      	b.n	80057fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bdb0      	pop	{r4, r5, r7, pc}
 8005802:	bf00      	nop
 8005804:	0801119c 	.word	0x0801119c
 8005808:	08011270 	.word	0x08011270
 800580c:	080111e0 	.word	0x080111e0
 8005810:	08011290 	.word	0x08011290
 8005814:	2000a458 	.word	0x2000a458
 8005818:	2000a460 	.word	0x2000a460
 800581c:	2000a498 	.word	0x2000a498
 8005820:	2000a450 	.word	0x2000a450
 8005824:	2000a454 	.word	0x2000a454

08005828 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <tcp_close_shutdown_fin+0x1c>
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <tcp_close_shutdown_fin+0xc8>)
 8005838:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800583c:	492d      	ldr	r1, [pc, #180]	; (80058f4 <tcp_close_shutdown_fin+0xcc>)
 800583e:	482e      	ldr	r0, [pc, #184]	; (80058f8 <tcp_close_shutdown_fin+0xd0>)
 8005840:	f00a f828 	bl	800f894 <iprintf>

  switch (pcb->state) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	7d1b      	ldrb	r3, [r3, #20]
 8005848:	2b07      	cmp	r3, #7
 800584a:	d020      	beq.n	800588e <tcp_close_shutdown_fin+0x66>
 800584c:	2b07      	cmp	r3, #7
 800584e:	dc2b      	bgt.n	80058a8 <tcp_close_shutdown_fin+0x80>
 8005850:	2b03      	cmp	r3, #3
 8005852:	d002      	beq.n	800585a <tcp_close_shutdown_fin+0x32>
 8005854:	2b04      	cmp	r3, #4
 8005856:	d00d      	beq.n	8005874 <tcp_close_shutdown_fin+0x4c>
 8005858:	e026      	b.n	80058a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f003 fee6 	bl	800962c <tcp_send_fin>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11f      	bne.n	80058ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2205      	movs	r2, #5
 8005870:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005872:	e01b      	b.n	80058ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f003 fed9 	bl	800962c <tcp_send_fin>
 800587a:	4603      	mov	r3, r0
 800587c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800587e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d114      	bne.n	80058b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2205      	movs	r2, #5
 800588a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800588c:	e010      	b.n	80058b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f003 fecc 	bl	800962c <tcp_send_fin>
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d109      	bne.n	80058b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2209      	movs	r2, #9
 80058a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80058a6:	e005      	b.n	80058b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e01c      	b.n	80058e6 <tcp_close_shutdown_fin+0xbe>
      break;
 80058ac:	bf00      	nop
 80058ae:	e002      	b.n	80058b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <tcp_close_shutdown_fin+0x8e>
      break;
 80058b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80058b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f003 fff2 	bl	80098a8 <tcp_output>
 80058c4:	e00d      	b.n	80058e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80058c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d108      	bne.n	80058e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8b5b      	ldrh	r3, [r3, #26]
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e001      	b.n	80058e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80058e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	0801119c 	.word	0x0801119c
 80058f4:	0801124c 	.word	0x0801124c
 80058f8:	080111e0 	.word	0x080111e0

080058fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <tcp_close+0x22>
 800590a:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <tcp_close+0x4c>)
 800590c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005910:	490e      	ldr	r1, [pc, #56]	; (800594c <tcp_close+0x50>)
 8005912:	480f      	ldr	r0, [pc, #60]	; (8005950 <tcp_close+0x54>)
 8005914:	f009 ffbe 	bl	800f894 <iprintf>
 8005918:	f06f 030f 	mvn.w	r3, #15
 800591c:	e00f      	b.n	800593e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7d1b      	ldrb	r3, [r3, #20]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d006      	beq.n	8005934 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8b5b      	ldrh	r3, [r3, #26]
 800592a:	f043 0310 	orr.w	r3, r3, #16
 800592e:	b29a      	uxth	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005934:	2101      	movs	r1, #1
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff fe94 	bl	8005664 <tcp_close_shutdown>
 800593c:	4603      	mov	r3, r0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	0801119c 	.word	0x0801119c
 800594c:	080112ac 	.word	0x080112ac
 8005950:	080111e0 	.word	0x080111e0

08005954 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	; 0x38
 8005958:	af04      	add	r7, sp, #16
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d107      	bne.n	8005974 <tcp_abandon+0x20>
 8005964:	4b52      	ldr	r3, [pc, #328]	; (8005ab0 <tcp_abandon+0x15c>)
 8005966:	f240 223d 	movw	r2, #573	; 0x23d
 800596a:	4952      	ldr	r1, [pc, #328]	; (8005ab4 <tcp_abandon+0x160>)
 800596c:	4852      	ldr	r0, [pc, #328]	; (8005ab8 <tcp_abandon+0x164>)
 800596e:	f009 ff91 	bl	800f894 <iprintf>
 8005972:	e099      	b.n	8005aa8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7d1b      	ldrb	r3, [r3, #20]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d106      	bne.n	800598a <tcp_abandon+0x36>
 800597c:	4b4c      	ldr	r3, [pc, #304]	; (8005ab0 <tcp_abandon+0x15c>)
 800597e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005982:	494e      	ldr	r1, [pc, #312]	; (8005abc <tcp_abandon+0x168>)
 8005984:	484c      	ldr	r0, [pc, #304]	; (8005ab8 <tcp_abandon+0x164>)
 8005986:	f009 ff85 	bl	800f894 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7d1b      	ldrb	r3, [r3, #20]
 800598e:	2b0a      	cmp	r3, #10
 8005990:	d107      	bne.n	80059a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	484a      	ldr	r0, [pc, #296]	; (8005ac0 <tcp_abandon+0x16c>)
 8005996:	f000 ffc3 	bl	8006920 <tcp_pcb_remove>
    tcp_free(pcb);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fdb0 	bl	8005500 <tcp_free>
 80059a0:	e082      	b.n	8005aa8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	7d1b      	ldrb	r3, [r3, #20]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d126      	bne.n	8005a1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8adb      	ldrh	r3, [r3, #22]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d02e      	beq.n	8005a32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80059d4:	4b3b      	ldr	r3, [pc, #236]	; (8005ac4 <tcp_abandon+0x170>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d105      	bne.n	80059ea <tcp_abandon+0x96>
 80059de:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <tcp_abandon+0x170>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4a37      	ldr	r2, [pc, #220]	; (8005ac4 <tcp_abandon+0x170>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e013      	b.n	8005a12 <tcp_abandon+0xbe>
 80059ea:	4b36      	ldr	r3, [pc, #216]	; (8005ac4 <tcp_abandon+0x170>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e00c      	b.n	8005a0c <tcp_abandon+0xb8>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d104      	bne.n	8005a06 <tcp_abandon+0xb2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	e005      	b.n	8005a12 <tcp_abandon+0xbe>
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1ef      	bne.n	80059f2 <tcp_abandon+0x9e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	60da      	str	r2, [r3, #12]
 8005a18:	e00b      	b.n	8005a32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8adb      	ldrh	r3, [r3, #22]
 8005a22:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4828      	ldr	r0, [pc, #160]	; (8005ac8 <tcp_abandon+0x174>)
 8005a28:	f000 ff7a 	bl	8006920 <tcp_pcb_remove>
 8005a2c:	4b27      	ldr	r3, [pc, #156]	; (8005acc <tcp_abandon+0x178>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fd1c 	bl	800647c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fd13 	bl	800647c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fd0a 	bl	800647c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	8b12      	ldrh	r2, [r2, #24]
 8005a78:	9202      	str	r2, [sp, #8]
 8005a7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a7c:	9201      	str	r2, [sp, #4]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	460b      	mov	r3, r1
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f004 fcc2 	bl	800a410 <tcp_rst>
    }
    last_state = pcb->state;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7d1b      	ldrb	r3, [r3, #20]
 8005a90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fd34 	bl	8005500 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <tcp_abandon+0x154>
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f06f 010c 	mvn.w	r1, #12
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	4798      	blx	r3
  }
}
 8005aa8:	3728      	adds	r7, #40	; 0x28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	0801119c 	.word	0x0801119c
 8005ab4:	080112e0 	.word	0x080112e0
 8005ab8:	080111e0 	.word	0x080111e0
 8005abc:	080112fc 	.word	0x080112fc
 8005ac0:	2000a45c 	.word	0x2000a45c
 8005ac4:	2000a450 	.word	0x2000a450
 8005ac8:	2000a458 	.word	0x2000a458
 8005acc:	2000a460 	.word	0x2000a460

08005ad0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005ad8:	2101      	movs	r1, #1
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ff3a 	bl	8005954 <tcp_abandon>
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <tcp_update_rcv_ann_wnd+0x1c>
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <tcp_update_rcv_ann_wnd+0xa4>)
 8005af8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005afc:	4924      	ldr	r1, [pc, #144]	; (8005b90 <tcp_update_rcv_ann_wnd+0xa8>)
 8005afe:	4825      	ldr	r0, [pc, #148]	; (8005b94 <tcp_update_rcv_ann_wnd+0xac>)
 8005b00:	f009 fec8 	bl	800f894 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005b18:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005b1c:	bf28      	it	cs
 8005b1e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005b22:	b292      	uxth	r2, r2
 8005b24:	4413      	add	r3, r2
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	db08      	blt.n	8005b40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	e020      	b.n	8005b82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	dd03      	ble.n	8005b56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b54:	e014      	b.n	8005b80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b68:	d306      	bcc.n	8005b78 <tcp_update_rcv_ann_wnd+0x90>
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <tcp_update_rcv_ann_wnd+0xa4>)
 8005b6c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005b70:	4909      	ldr	r1, [pc, #36]	; (8005b98 <tcp_update_rcv_ann_wnd+0xb0>)
 8005b72:	4808      	ldr	r0, [pc, #32]	; (8005b94 <tcp_update_rcv_ann_wnd+0xac>)
 8005b74:	f009 fe8e 	bl	800f894 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005b80:	2300      	movs	r3, #0
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	0801119c 	.word	0x0801119c
 8005b90:	080113f8 	.word	0x080113f8
 8005b94:	080111e0 	.word	0x080111e0
 8005b98:	0801141c 	.word	0x0801141c

08005b9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d107      	bne.n	8005bbe <tcp_recved+0x22>
 8005bae:	4b1f      	ldr	r3, [pc, #124]	; (8005c2c <tcp_recved+0x90>)
 8005bb0:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005bb4:	491e      	ldr	r1, [pc, #120]	; (8005c30 <tcp_recved+0x94>)
 8005bb6:	481f      	ldr	r0, [pc, #124]	; (8005c34 <tcp_recved+0x98>)
 8005bb8:	f009 fe6c 	bl	800f894 <iprintf>
 8005bbc:	e032      	b.n	8005c24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	7d1b      	ldrb	r3, [r3, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d106      	bne.n	8005bd4 <tcp_recved+0x38>
 8005bc6:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <tcp_recved+0x90>)
 8005bc8:	f240 32d2 	movw	r2, #978	; 0x3d2
 8005bcc:	491a      	ldr	r1, [pc, #104]	; (8005c38 <tcp_recved+0x9c>)
 8005bce:	4819      	ldr	r0, [pc, #100]	; (8005c34 <tcp_recved+0x98>)
 8005bd0:	f009 fe60 	bl	800f894 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005bd8:	887b      	ldrh	r3, [r7, #2]
 8005bda:	4413      	add	r3, r2
 8005bdc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005bde:	89fb      	ldrh	r3, [r7, #14]
 8005be0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005be4:	d804      	bhi.n	8005bf0 <tcp_recved+0x54>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	89fa      	ldrh	r2, [r7, #14]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d204      	bcs.n	8005bfa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005bf6:	851a      	strh	r2, [r3, #40]	; 0x28
 8005bf8:	e002      	b.n	8005c00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	89fa      	ldrh	r2, [r7, #14]
 8005bfe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff71 	bl	8005ae8 <tcp_update_rcv_ann_wnd>
 8005c06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005c0e:	d309      	bcc.n	8005c24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8b5b      	ldrh	r3, [r3, #26]
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f003 fe42 	bl	80098a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	0801119c 	.word	0x0801119c
 8005c30:	08011438 	.word	0x08011438
 8005c34:	080111e0 	.word	0x080111e0
 8005c38:	08011450 	.word	0x08011450

08005c3c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b090      	sub	sp, #64	; 0x40
 8005c40:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005c48:	4b94      	ldr	r3, [pc, #592]	; (8005e9c <tcp_slowtmr+0x260>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a93      	ldr	r2, [pc, #588]	; (8005e9c <tcp_slowtmr+0x260>)
 8005c50:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005c52:	4b93      	ldr	r3, [pc, #588]	; (8005ea0 <tcp_slowtmr+0x264>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	3301      	adds	r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	4b91      	ldr	r3, [pc, #580]	; (8005ea0 <tcp_slowtmr+0x264>)
 8005c5c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005c62:	4b90      	ldr	r3, [pc, #576]	; (8005ea4 <tcp_slowtmr+0x268>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005c68:	e29f      	b.n	80061aa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	7d1b      	ldrb	r3, [r3, #20]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <tcp_slowtmr+0x44>
 8005c72:	4b8d      	ldr	r3, [pc, #564]	; (8005ea8 <tcp_slowtmr+0x26c>)
 8005c74:	f240 42be 	movw	r2, #1214	; 0x4be
 8005c78:	498c      	ldr	r1, [pc, #560]	; (8005eac <tcp_slowtmr+0x270>)
 8005c7a:	488d      	ldr	r0, [pc, #564]	; (8005eb0 <tcp_slowtmr+0x274>)
 8005c7c:	f009 fe0a 	bl	800f894 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	7d1b      	ldrb	r3, [r3, #20]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d106      	bne.n	8005c96 <tcp_slowtmr+0x5a>
 8005c88:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <tcp_slowtmr+0x26c>)
 8005c8a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005c8e:	4989      	ldr	r1, [pc, #548]	; (8005eb4 <tcp_slowtmr+0x278>)
 8005c90:	4887      	ldr	r0, [pc, #540]	; (8005eb0 <tcp_slowtmr+0x274>)
 8005c92:	f009 fdff 	bl	800f894 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	7d1b      	ldrb	r3, [r3, #20]
 8005c9a:	2b0a      	cmp	r3, #10
 8005c9c:	d106      	bne.n	8005cac <tcp_slowtmr+0x70>
 8005c9e:	4b82      	ldr	r3, [pc, #520]	; (8005ea8 <tcp_slowtmr+0x26c>)
 8005ca0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005ca4:	4984      	ldr	r1, [pc, #528]	; (8005eb8 <tcp_slowtmr+0x27c>)
 8005ca6:	4882      	ldr	r0, [pc, #520]	; (8005eb0 <tcp_slowtmr+0x274>)
 8005ca8:	f009 fdf4 	bl	800f894 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	7f9a      	ldrb	r2, [r3, #30]
 8005cb0:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <tcp_slowtmr+0x264>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d105      	bne.n	8005cc4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005cc2:	e272      	b.n	80061aa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005cc4:	4b76      	ldr	r3, [pc, #472]	; (8005ea0 <tcp_slowtmr+0x264>)
 8005cc6:	781a      	ldrb	r2, [r3, #0]
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cda:	7d1b      	ldrb	r3, [r3, #20]
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d10a      	bne.n	8005cf6 <tcp_slowtmr+0xba>
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ce6:	2b05      	cmp	r3, #5
 8005ce8:	d905      	bls.n	8005cf6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005cf4:	e11e      	b.n	8005f34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cfc:	2b0b      	cmp	r3, #11
 8005cfe:	d905      	bls.n	8005d0c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d04:	3301      	adds	r3, #1
 8005d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d0a:	e113      	b.n	8005f34 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d075      	beq.n	8005e02 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <tcp_slowtmr+0xf0>
 8005d1e:	4b62      	ldr	r3, [pc, #392]	; (8005ea8 <tcp_slowtmr+0x26c>)
 8005d20:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005d24:	4965      	ldr	r1, [pc, #404]	; (8005ebc <tcp_slowtmr+0x280>)
 8005d26:	4862      	ldr	r0, [pc, #392]	; (8005eb0 <tcp_slowtmr+0x274>)
 8005d28:	f009 fdb4 	bl	800f894 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <tcp_slowtmr+0x106>
 8005d34:	4b5c      	ldr	r3, [pc, #368]	; (8005ea8 <tcp_slowtmr+0x26c>)
 8005d36:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005d3a:	4961      	ldr	r1, [pc, #388]	; (8005ec0 <tcp_slowtmr+0x284>)
 8005d3c:	485c      	ldr	r0, [pc, #368]	; (8005eb0 <tcp_slowtmr+0x274>)
 8005d3e:	f009 fda9 	bl	800f894 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005d48:	2b0b      	cmp	r3, #11
 8005d4a:	d905      	bls.n	8005d58 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d50:	3301      	adds	r3, #1
 8005d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d56:	e0ed      	b.n	8005f34 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	4a58      	ldr	r2, [pc, #352]	; (8005ec4 <tcp_slowtmr+0x288>)
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d6c:	7c7a      	ldrb	r2, [r7, #17]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d907      	bls.n	8005d82 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d78:	3301      	adds	r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005d88:	7c7a      	ldrb	r2, [r7, #17]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f200 80d2 	bhi.w	8005f34 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005d90:	2301      	movs	r3, #1
 8005d92:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005da0:	f004 fc2a 	bl	800a5f8 <tcp_zero_window_probe>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d014      	beq.n	8005dd4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005daa:	2300      	movs	r3, #0
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	e011      	b.n	8005dd4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005db6:	4619      	mov	r1, r3
 8005db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dba:	f003 faef 	bl	800939c <tcp_split_unsent_seg>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dc6:	f003 fd6f 	bl	80098a8 <tcp_output>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80ac 	beq.w	8005f34 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	f200 80a2 	bhi.w	8005f34 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005df6:	3301      	adds	r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005e00:	e098      	b.n	8005f34 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	db0f      	blt.n	8005e2c <tcp_slowtmr+0x1f0>
 8005e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005e12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d008      	beq.n	8005e2c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3301      	adds	r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b21a      	sxth	r2, r3
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	db7b      	blt.n	8005f34 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e3e:	f004 f827 	bl	8009e90 <tcp_rexmit_rto_prepare>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <tcp_slowtmr+0x21c>
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d171      	bne.n	8005f34 <tcp_slowtmr+0x2f8>
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d06d      	beq.n	8005f34 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	7d1b      	ldrb	r3, [r3, #20]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d03a      	beq.n	8005ed6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	bf28      	it	cs
 8005e6a:	230c      	movcs	r3, #12
 8005e6c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005e74:	10db      	asrs	r3, r3, #3
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005e80:	4413      	add	r3, r2
 8005e82:	7efa      	ldrb	r2, [r7, #27]
 8005e84:	4910      	ldr	r1, [pc, #64]	; (8005ec8 <tcp_slowtmr+0x28c>)
 8005e86:	5c8a      	ldrb	r2, [r1, r2]
 8005e88:	4093      	lsls	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005e92:	4293      	cmp	r3, r2
 8005e94:	dc1a      	bgt.n	8005ecc <tcp_slowtmr+0x290>
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	b21a      	sxth	r2, r3
 8005e9a:	e019      	b.n	8005ed0 <tcp_slowtmr+0x294>
 8005e9c:	2000a44c 	.word	0x2000a44c
 8005ea0:	2000a462 	.word	0x2000a462
 8005ea4:	2000a458 	.word	0x2000a458
 8005ea8:	0801119c 	.word	0x0801119c
 8005eac:	080114e0 	.word	0x080114e0
 8005eb0:	080111e0 	.word	0x080111e0
 8005eb4:	0801150c 	.word	0x0801150c
 8005eb8:	08011538 	.word	0x08011538
 8005ebc:	08011568 	.word	0x08011568
 8005ec0:	0801159c 	.word	0x0801159c
 8005ec4:	0801350c 	.word	0x0801350c
 8005ec8:	080134fc 	.word	0x080134fc
 8005ecc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2200      	movs	r2, #0
 8005eda:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	bf28      	it	cs
 8005eec:	4613      	movcs	r3, r2
 8005eee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005ef0:	8a7b      	ldrh	r3, [r7, #18]
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d206      	bcs.n	8005f1c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f30:	f004 f81e 	bl	8009f70 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	7d1b      	ldrb	r3, [r3, #20]
 8005f38:	2b06      	cmp	r3, #6
 8005f3a:	d111      	bne.n	8005f60 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	8b5b      	ldrh	r3, [r3, #26]
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f48:	4b9d      	ldr	r3, [pc, #628]	; (80061c0 <tcp_slowtmr+0x584>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b28      	cmp	r3, #40	; 0x28
 8005f54:	d904      	bls.n	8005f60 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	7a5b      	ldrb	r3, [r3, #9]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d04c      	beq.n	8006006 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d003      	beq.n	8005f7c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005f78:	2b07      	cmp	r3, #7
 8005f7a:	d144      	bne.n	8006006 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f7c:	4b90      	ldr	r3, [pc, #576]	; (80061c0 <tcp_slowtmr+0x584>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f8c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005f90:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005f94:	498b      	ldr	r1, [pc, #556]	; (80061c4 <tcp_slowtmr+0x588>)
 8005f96:	fba1 1303 	umull	r1, r3, r1, r3
 8005f9a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d90a      	bls.n	8005fb6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005fb4:	e027      	b.n	8006006 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005fb6:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <tcp_slowtmr+0x584>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005fcc:	4618      	mov	r0, r3
 8005fce:	4b7e      	ldr	r3, [pc, #504]	; (80061c8 <tcp_slowtmr+0x58c>)
 8005fd0:	fb00 f303 	mul.w	r3, r0, r3
 8005fd4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005fd6:	497b      	ldr	r1, [pc, #492]	; (80061c4 <tcp_slowtmr+0x588>)
 8005fd8:	fba1 1303 	umull	r1, r3, r1, r3
 8005fdc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d911      	bls.n	8006006 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fe4:	f004 fac8 	bl	800a578 <tcp_keepalive>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005fee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600a:	2b00      	cmp	r3, #0
 800600c:	d011      	beq.n	8006032 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800600e:	4b6c      	ldr	r3, [pc, #432]	; (80061c0 <tcp_slowtmr+0x584>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	1ad2      	subs	r2, r2, r3
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800601e:	4619      	mov	r1, r3
 8006020:	460b      	mov	r3, r1
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	440b      	add	r3, r1
 8006026:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800602c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800602e:	f000 fddb 	bl	8006be8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	7d1b      	ldrb	r3, [r3, #20]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d10b      	bne.n	8006052 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800603a:	4b61      	ldr	r3, [pc, #388]	; (80061c0 <tcp_slowtmr+0x584>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b28      	cmp	r3, #40	; 0x28
 8006046:	d904      	bls.n	8006052 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800604c:	3301      	adds	r3, #1
 800604e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	7d1b      	ldrb	r3, [r3, #20]
 8006056:	2b09      	cmp	r3, #9
 8006058:	d10b      	bne.n	8006072 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800605a:	4b59      	ldr	r3, [pc, #356]	; (80061c0 <tcp_slowtmr+0x584>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2bf0      	cmp	r3, #240	; 0xf0
 8006066:	d904      	bls.n	8006072 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800606c:	3301      	adds	r3, #1
 800606e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006076:	2b00      	cmp	r3, #0
 8006078:	d060      	beq.n	800613c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006080:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006084:	f000 fbfc 	bl	8006880 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d010      	beq.n	80060b0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800608e:	4b4f      	ldr	r3, [pc, #316]	; (80061cc <tcp_slowtmr+0x590>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d106      	bne.n	80060a6 <tcp_slowtmr+0x46a>
 8006098:	4b4d      	ldr	r3, [pc, #308]	; (80061d0 <tcp_slowtmr+0x594>)
 800609a:	f240 526d 	movw	r2, #1389	; 0x56d
 800609e:	494d      	ldr	r1, [pc, #308]	; (80061d4 <tcp_slowtmr+0x598>)
 80060a0:	484d      	ldr	r0, [pc, #308]	; (80061d8 <tcp_slowtmr+0x59c>)
 80060a2:	f009 fbf7 	bl	800f894 <iprintf>
        prev->next = pcb->next;
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	60da      	str	r2, [r3, #12]
 80060ae:	e00f      	b.n	80060d0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80060b0:	4b46      	ldr	r3, [pc, #280]	; (80061cc <tcp_slowtmr+0x590>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d006      	beq.n	80060c8 <tcp_slowtmr+0x48c>
 80060ba:	4b45      	ldr	r3, [pc, #276]	; (80061d0 <tcp_slowtmr+0x594>)
 80060bc:	f240 5271 	movw	r2, #1393	; 0x571
 80060c0:	4946      	ldr	r1, [pc, #280]	; (80061dc <tcp_slowtmr+0x5a0>)
 80060c2:	4845      	ldr	r0, [pc, #276]	; (80061d8 <tcp_slowtmr+0x59c>)
 80060c4:	f009 fbe6 	bl	800f894 <iprintf>
        tcp_active_pcbs = pcb->next;
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4a3f      	ldr	r2, [pc, #252]	; (80061cc <tcp_slowtmr+0x590>)
 80060ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80060d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d013      	beq.n	8006100 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80060e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	3304      	adds	r3, #4
 80060e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060e8:	8ad2      	ldrh	r2, [r2, #22]
 80060ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060ec:	8b09      	ldrh	r1, [r1, #24]
 80060ee:	9102      	str	r1, [sp, #8]
 80060f0:	9201      	str	r2, [sp, #4]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	462b      	mov	r3, r5
 80060f6:	4622      	mov	r2, r4
 80060f8:	4601      	mov	r1, r0
 80060fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060fc:	f004 f988 	bl	800a410 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	7d1b      	ldrb	r3, [r3, #20]
 800610a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006116:	6838      	ldr	r0, [r7, #0]
 8006118:	f7ff f9f2 	bl	8005500 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800611c:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <tcp_slowtmr+0x5a4>)
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <tcp_slowtmr+0x4f6>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f06f 010c 	mvn.w	r1, #12
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006132:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <tcp_slowtmr+0x5a4>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d037      	beq.n	80061aa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800613a:	e590      	b.n	8005c5e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	7f1b      	ldrb	r3, [r3, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	b2da      	uxtb	r2, r3
 800614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006150:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	7f1a      	ldrb	r2, [r3, #28]
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	7f5b      	ldrb	r3, [r3, #29]
 800615a:	429a      	cmp	r2, r3
 800615c:	d325      	bcc.n	80061aa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006164:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <tcp_slowtmr+0x5a4>)
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800616a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <tcp_slowtmr+0x550>
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800617a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800617c:	6912      	ldr	r2, [r2, #16]
 800617e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	4603      	mov	r3, r0
 8006186:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800618a:	e002      	b.n	8006192 <tcp_slowtmr+0x556>
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <tcp_slowtmr+0x5a4>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d000      	beq.n	800619c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800619a:	e560      	b.n	8005c5e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800619c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80061a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a6:	f003 fb7f 	bl	80098a8 <tcp_output>
  while (pcb != NULL) {
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f47f ad5c 	bne.w	8005c6a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <tcp_slowtmr+0x5a8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80061bc:	e067      	b.n	800628e <tcp_slowtmr+0x652>
 80061be:	bf00      	nop
 80061c0:	2000a44c 	.word	0x2000a44c
 80061c4:	10624dd3 	.word	0x10624dd3
 80061c8:	000124f8 	.word	0x000124f8
 80061cc:	2000a458 	.word	0x2000a458
 80061d0:	0801119c 	.word	0x0801119c
 80061d4:	080115d4 	.word	0x080115d4
 80061d8:	080111e0 	.word	0x080111e0
 80061dc:	08011600 	.word	0x08011600
 80061e0:	2000a460 	.word	0x2000a460
 80061e4:	2000a45c 	.word	0x2000a45c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	7d1b      	ldrb	r3, [r3, #20]
 80061ec:	2b0a      	cmp	r3, #10
 80061ee:	d006      	beq.n	80061fe <tcp_slowtmr+0x5c2>
 80061f0:	4b2b      	ldr	r3, [pc, #172]	; (80062a0 <tcp_slowtmr+0x664>)
 80061f2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80061f6:	492b      	ldr	r1, [pc, #172]	; (80062a4 <tcp_slowtmr+0x668>)
 80061f8:	482b      	ldr	r0, [pc, #172]	; (80062a8 <tcp_slowtmr+0x66c>)
 80061fa:	f009 fb4b 	bl	800f894 <iprintf>
    pcb_remove = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006204:	4b29      	ldr	r3, [pc, #164]	; (80062ac <tcp_slowtmr+0x670>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2bf0      	cmp	r3, #240	; 0xf0
 8006210:	d904      	bls.n	800621c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006216:	3301      	adds	r3, #1
 8006218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02f      	beq.n	8006284 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006226:	f000 fb2b 	bl	8006880 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006230:	4b1f      	ldr	r3, [pc, #124]	; (80062b0 <tcp_slowtmr+0x674>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006236:	429a      	cmp	r2, r3
 8006238:	d106      	bne.n	8006248 <tcp_slowtmr+0x60c>
 800623a:	4b19      	ldr	r3, [pc, #100]	; (80062a0 <tcp_slowtmr+0x664>)
 800623c:	f240 52af 	movw	r2, #1455	; 0x5af
 8006240:	491c      	ldr	r1, [pc, #112]	; (80062b4 <tcp_slowtmr+0x678>)
 8006242:	4819      	ldr	r0, [pc, #100]	; (80062a8 <tcp_slowtmr+0x66c>)
 8006244:	f009 fb26 	bl	800f894 <iprintf>
        prev->next = pcb->next;
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e00f      	b.n	8006272 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <tcp_slowtmr+0x674>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006258:	429a      	cmp	r2, r3
 800625a:	d006      	beq.n	800626a <tcp_slowtmr+0x62e>
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <tcp_slowtmr+0x664>)
 800625e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006262:	4915      	ldr	r1, [pc, #84]	; (80062b8 <tcp_slowtmr+0x67c>)
 8006264:	4810      	ldr	r0, [pc, #64]	; (80062a8 <tcp_slowtmr+0x66c>)
 8006266:	f009 fb15 	bl	800f894 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <tcp_slowtmr+0x674>)
 8006270:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800627c:	69f8      	ldr	r0, [r7, #28]
 800627e:	f7ff f93f 	bl	8005500 <tcp_free>
 8006282:	e004      	b.n	800628e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1a9      	bne.n	80061e8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3730      	adds	r7, #48	; 0x30
 800629a:	46bd      	mov	sp, r7
 800629c:	bdb0      	pop	{r4, r5, r7, pc}
 800629e:	bf00      	nop
 80062a0:	0801119c 	.word	0x0801119c
 80062a4:	0801162c 	.word	0x0801162c
 80062a8:	080111e0 	.word	0x080111e0
 80062ac:	2000a44c 	.word	0x2000a44c
 80062b0:	2000a45c 	.word	0x2000a45c
 80062b4:	0801165c 	.word	0x0801165c
 80062b8:	08011684 	.word	0x08011684

080062bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80062c2:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <tcp_fasttmr+0xbc>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	4b2b      	ldr	r3, [pc, #172]	; (8006378 <tcp_fasttmr+0xbc>)
 80062cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80062ce:	4b2b      	ldr	r3, [pc, #172]	; (800637c <tcp_fasttmr+0xc0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80062d4:	e048      	b.n	8006368 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	7f9a      	ldrb	r2, [r3, #30]
 80062da:	4b27      	ldr	r3, [pc, #156]	; (8006378 <tcp_fasttmr+0xbc>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d03f      	beq.n	8006362 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80062e2:	4b25      	ldr	r3, [pc, #148]	; (8006378 <tcp_fasttmr+0xbc>)
 80062e4:	781a      	ldrb	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8b5b      	ldrh	r3, [r3, #26]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d010      	beq.n	8006318 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8b5b      	ldrh	r3, [r3, #26]
 80062fa:	f043 0302 	orr.w	r3, r3, #2
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f003 facf 	bl	80098a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8b5b      	ldrh	r3, [r3, #26]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8b5b      	ldrh	r3, [r3, #26]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d009      	beq.n	8006338 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8b5b      	ldrh	r3, [r3, #26]
 8006328:	f023 0308 	bic.w	r3, r3, #8
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fa78 	bl	8005828 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006346:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <tcp_fasttmr+0xc4>)
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f819 	bl	8006384 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <tcp_fasttmr+0xc4>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d000      	beq.n	800635c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800635a:	e7b8      	b.n	80062ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	e002      	b.n	8006368 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1b3      	bne.n	80062d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	2000a462 	.word	0x2000a462
 800637c:	2000a458 	.word	0x2000a458
 8006380:	2000a460 	.word	0x2000a460

08006384 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <tcp_process_refused_data+0x22>
 8006392:	4b37      	ldr	r3, [pc, #220]	; (8006470 <tcp_process_refused_data+0xec>)
 8006394:	f240 6209 	movw	r2, #1545	; 0x609
 8006398:	4936      	ldr	r1, [pc, #216]	; (8006474 <tcp_process_refused_data+0xf0>)
 800639a:	4837      	ldr	r0, [pc, #220]	; (8006478 <tcp_process_refused_data+0xf4>)
 800639c:	f009 fa7a 	bl	800f894 <iprintf>
 80063a0:	f06f 030f 	mvn.w	r3, #15
 80063a4:	e060      	b.n	8006468 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063aa:	7b5b      	ldrb	r3, [r3, #13]
 80063ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <tcp_process_refused_data+0x58>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6918      	ldr	r0, [r3, #16]
 80063ce:	2300      	movs	r3, #0
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	47a0      	blx	r4
 80063d6:	4603      	mov	r3, r0
 80063d8:	73fb      	strb	r3, [r7, #15]
 80063da:	e007      	b.n	80063ec <tcp_process_refused_data+0x68>
 80063dc:	2300      	movs	r3, #0
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	2000      	movs	r0, #0
 80063e4:	f000 f8a4 	bl	8006530 <tcp_recv_null>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80063ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d12a      	bne.n	800644a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d033      	beq.n	8006466 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006402:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006406:	d005      	beq.n	8006414 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640c:	3301      	adds	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <tcp_process_refused_data+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6918      	ldr	r0, [r3, #16]
 8006428:	2300      	movs	r3, #0
 800642a:	2200      	movs	r2, #0
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	47a0      	blx	r4
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e001      	b.n	800643a <tcp_process_refused_data+0xb6>
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800643a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800643e:	f113 0f0d 	cmn.w	r3, #13
 8006442:	d110      	bne.n	8006466 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006444:	f06f 030c 	mvn.w	r3, #12
 8006448:	e00e      	b.n	8006468 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800644a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644e:	f113 0f0d 	cmn.w	r3, #13
 8006452:	d102      	bne.n	800645a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006454:	f06f 030c 	mvn.w	r3, #12
 8006458:	e006      	b.n	8006468 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006460:	f06f 0304 	mvn.w	r3, #4
 8006464:	e000      	b.n	8006468 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bd90      	pop	{r4, r7, pc}
 8006470:	0801119c 	.word	0x0801119c
 8006474:	080116ac 	.word	0x080116ac
 8006478:	080111e0 	.word	0x080111e0

0800647c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006484:	e007      	b.n	8006496 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f80a 	bl	80064a6 <tcp_seg_free>
    seg = next;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1f4      	bne.n	8006486 <tcp_segs_free+0xa>
  }
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fd6d 	bl	8004fa0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	2003      	movs	r0, #3
 80064ca:	f7fd fee7 	bl	800429c <memp_free>
  }
}
 80064ce:	bf00      	nop
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <tcp_seg_copy+0x1c>
 80064e6:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <tcp_seg_copy+0x4c>)
 80064e8:	f240 6282 	movw	r2, #1666	; 0x682
 80064ec:	490e      	ldr	r1, [pc, #56]	; (8006528 <tcp_seg_copy+0x50>)
 80064ee:	480f      	ldr	r0, [pc, #60]	; (800652c <tcp_seg_copy+0x54>)
 80064f0:	f009 f9d0 	bl	800f894 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80064f4:	2003      	movs	r0, #3
 80064f6:	f7fd fe61 	bl	80041bc <memp_malloc>
 80064fa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <tcp_seg_copy+0x2e>
    return NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	e00a      	b.n	800651c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006506:	2210      	movs	r2, #16
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f009 fa9d 	bl	800fa4a <memcpy>
  pbuf_ref(cseg->p);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fde3 	bl	80050e0 <pbuf_ref>
  return cseg;
 800651a:	68fb      	ldr	r3, [r7, #12]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	0801119c 	.word	0x0801119c
 8006528:	080116f0 	.word	0x080116f0
 800652c:	080111e0 	.word	0x080111e0

08006530 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d109      	bne.n	8006558 <tcp_recv_null+0x28>
 8006544:	4b12      	ldr	r3, [pc, #72]	; (8006590 <tcp_recv_null+0x60>)
 8006546:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800654a:	4912      	ldr	r1, [pc, #72]	; (8006594 <tcp_recv_null+0x64>)
 800654c:	4812      	ldr	r0, [pc, #72]	; (8006598 <tcp_recv_null+0x68>)
 800654e:	f009 f9a1 	bl	800f894 <iprintf>
 8006552:	f06f 030f 	mvn.w	r3, #15
 8006556:	e016      	b.n	8006586 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	891b      	ldrh	r3, [r3, #8]
 8006562:	4619      	mov	r1, r3
 8006564:	68b8      	ldr	r0, [r7, #8]
 8006566:	f7ff fb19 	bl	8005b9c <tcp_recved>
    pbuf_free(p);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fe fd18 	bl	8004fa0 <pbuf_free>
 8006570:	e008      	b.n	8006584 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	f7ff f9be 	bl	80058fc <tcp_close>
 8006580:	4603      	mov	r3, r0
 8006582:	e000      	b.n	8006586 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	0801119c 	.word	0x0801119c
 8006594:	0801170c 	.word	0x0801170c
 8006598:	080111e0 	.word	0x080111e0

0800659c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db01      	blt.n	80065b2 <tcp_kill_prio+0x16>
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	e000      	b.n	80065b4 <tcp_kill_prio+0x18>
 80065b2:	237f      	movs	r3, #127	; 0x7f
 80065b4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80065b6:	7afb      	ldrb	r3, [r7, #11]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d034      	beq.n	8006626 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80065bc:	7afb      	ldrb	r3, [r7, #11]
 80065be:	3b01      	subs	r3, #1
 80065c0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065ca:	4b19      	ldr	r3, [pc, #100]	; (8006630 <tcp_kill_prio+0x94>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e01f      	b.n	8006612 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	7d5b      	ldrb	r3, [r3, #21]
 80065d6:	7afa      	ldrb	r2, [r7, #11]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d80c      	bhi.n	80065f6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80065e0:	7afa      	ldrb	r2, [r7, #11]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d112      	bne.n	800660c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80065e6:	4b13      	ldr	r3, [pc, #76]	; (8006634 <tcp_kill_prio+0x98>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d80a      	bhi.n	800660c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <tcp_kill_prio+0x98>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	7d5b      	ldrb	r3, [r3, #21]
 800660a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1dc      	bne.n	80065d2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7ff fa56 	bl	8005ad0 <tcp_abort>
 8006624:	e000      	b.n	8006628 <tcp_kill_prio+0x8c>
    return;
 8006626:	bf00      	nop
  }
}
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	2000a458 	.word	0x2000a458
 8006634:	2000a44c 	.word	0x2000a44c

08006638 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d009      	beq.n	800665c <tcp_kill_state+0x24>
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b09      	cmp	r3, #9
 800664c:	d006      	beq.n	800665c <tcp_kill_state+0x24>
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <tcp_kill_state+0x80>)
 8006650:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006654:	4919      	ldr	r1, [pc, #100]	; (80066bc <tcp_kill_state+0x84>)
 8006656:	481a      	ldr	r0, [pc, #104]	; (80066c0 <tcp_kill_state+0x88>)
 8006658:	f009 f91c 	bl	800f894 <iprintf>

  inactivity = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006664:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <tcp_kill_state+0x8c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	e017      	b.n	800669c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	7d1b      	ldrb	r3, [r3, #20]
 8006670:	79fa      	ldrb	r2, [r7, #7]
 8006672:	429a      	cmp	r2, r3
 8006674:	d10f      	bne.n	8006696 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <tcp_kill_state+0x90>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	429a      	cmp	r2, r3
 8006684:	d807      	bhi.n	8006696 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006686:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <tcp_kill_state+0x90>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e4      	bne.n	800666c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d003      	beq.n	80066b0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80066a8:	2100      	movs	r1, #0
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f7ff f952 	bl	8005954 <tcp_abandon>
  }
}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	0801119c 	.word	0x0801119c
 80066bc:	08011728 	.word	0x08011728
 80066c0:	080111e0 	.word	0x080111e0
 80066c4:	2000a458 	.word	0x2000a458
 80066c8:	2000a44c 	.word	0x2000a44c

080066cc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <tcp_kill_timewait+0x58>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	e012      	b.n	8006708 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <tcp_kill_timewait+0x5c>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d807      	bhi.n	8006702 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80066f2:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <tcp_kill_timewait+0x5c>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e9      	bne.n	80066e2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006714:	68b8      	ldr	r0, [r7, #8]
 8006716:	f7ff f9db 	bl	8005ad0 <tcp_abort>
  }
}
 800671a:	bf00      	nop
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2000a45c 	.word	0x2000a45c
 8006728:	2000a44c 	.word	0x2000a44c

0800672c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <tcp_handle_closepend+0x48>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006738:	e014      	b.n	8006764 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8b5b      	ldrh	r3, [r3, #26]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d009      	beq.n	8006760 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8b5b      	ldrh	r3, [r3, #26]
 8006750:	f023 0308 	bic.w	r3, r3, #8
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff f864 	bl	8005828 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e7      	bne.n	800673a <tcp_handle_closepend+0xe>
  }
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	2000a458 	.word	0x2000a458

08006778 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006782:	2001      	movs	r0, #1
 8006784:	f7fd fd1a 	bl	80041bc <memp_malloc>
 8006788:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d126      	bne.n	80067de <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006790:	f7ff ffcc 	bl	800672c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006794:	f7ff ff9a 	bl	80066cc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006798:	2001      	movs	r0, #1
 800679a:	f7fd fd0f 	bl	80041bc <memp_malloc>
 800679e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11b      	bne.n	80067de <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80067a6:	2009      	movs	r0, #9
 80067a8:	f7ff ff46 	bl	8006638 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80067ac:	2001      	movs	r0, #1
 80067ae:	f7fd fd05 	bl	80041bc <memp_malloc>
 80067b2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d111      	bne.n	80067de <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80067ba:	2008      	movs	r0, #8
 80067bc:	f7ff ff3c 	bl	8006638 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80067c0:	2001      	movs	r0, #1
 80067c2:	f7fd fcfb 	bl	80041bc <memp_malloc>
 80067c6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d107      	bne.n	80067de <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fee3 	bl	800659c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80067d6:	2001      	movs	r0, #1
 80067d8:	f7fd fcf0 	bl	80041bc <memp_malloc>
 80067dc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d03f      	beq.n	8006864 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80067e4:	229c      	movs	r2, #156	; 0x9c
 80067e6:	2100      	movs	r1, #0
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f009 f8b8 	bl	800f95e <memset>
    pcb->prio = prio;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	79fa      	ldrb	r2, [r7, #7]
 80067f2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80067fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	22ff      	movs	r2, #255	; 0xff
 8006812:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f44f 7206 	mov.w	r2, #536	; 0x218
 800681a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2206      	movs	r2, #6
 8006820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2206      	movs	r2, #6
 8006828:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006830:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <tcp_alloc+0xf8>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <tcp_alloc+0xfc>)
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006850:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a08      	ldr	r2, [pc, #32]	; (8006878 <tcp_alloc+0x100>)
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a07      	ldr	r2, [pc, #28]	; (800687c <tcp_alloc+0x104>)
 8006860:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	2000a44c 	.word	0x2000a44c
 8006874:	2000a462 	.word	0x2000a462
 8006878:	08006531 	.word	0x08006531
 800687c:	006ddd00 	.word	0x006ddd00

08006880 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <tcp_pcb_purge+0x1e>
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <tcp_pcb_purge+0x94>)
 8006890:	f640 0251 	movw	r2, #2129	; 0x851
 8006894:	4920      	ldr	r1, [pc, #128]	; (8006918 <tcp_pcb_purge+0x98>)
 8006896:	4821      	ldr	r0, [pc, #132]	; (800691c <tcp_pcb_purge+0x9c>)
 8006898:	f008 fffc 	bl	800f894 <iprintf>
 800689c:	e037      	b.n	800690e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7d1b      	ldrb	r3, [r3, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d033      	beq.n	800690e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80068aa:	2b0a      	cmp	r3, #10
 80068ac:	d02f      	beq.n	800690e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d02b      	beq.n	800690e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fb6c 	bl	8004fa0 <pbuf_free>
      pcb->refused_data = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f986 	bl	8006be8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fdc7 	bl	800647c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fdc2 	bl	800647c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	0801119c 	.word	0x0801119c
 8006918:	080117e8 	.word	0x080117e8
 800691c:	080111e0 	.word	0x080111e0

08006920 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d106      	bne.n	800693e <tcp_pcb_remove+0x1e>
 8006930:	4b3e      	ldr	r3, [pc, #248]	; (8006a2c <tcp_pcb_remove+0x10c>)
 8006932:	f640 0283 	movw	r2, #2179	; 0x883
 8006936:	493e      	ldr	r1, [pc, #248]	; (8006a30 <tcp_pcb_remove+0x110>)
 8006938:	483e      	ldr	r0, [pc, #248]	; (8006a34 <tcp_pcb_remove+0x114>)
 800693a:	f008 ffab 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <tcp_pcb_remove+0x32>
 8006944:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <tcp_pcb_remove+0x10c>)
 8006946:	f640 0284 	movw	r2, #2180	; 0x884
 800694a:	493b      	ldr	r1, [pc, #236]	; (8006a38 <tcp_pcb_remove+0x118>)
 800694c:	4839      	ldr	r0, [pc, #228]	; (8006a34 <tcp_pcb_remove+0x114>)
 800694e:	f008 ffa1 	bl	800f894 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d105      	bne.n	8006968 <tcp_pcb_remove+0x48>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e013      	b.n	8006990 <tcp_pcb_remove+0x70>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e00c      	b.n	800698a <tcp_pcb_remove+0x6a>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d104      	bne.n	8006984 <tcp_pcb_remove+0x64>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	e005      	b.n	8006990 <tcp_pcb_remove+0x70>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1ef      	bne.n	8006970 <tcp_pcb_remove+0x50>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006996:	6838      	ldr	r0, [r7, #0]
 8006998:	f7ff ff72 	bl	8006880 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	7d1b      	ldrb	r3, [r3, #20]
 80069a0:	2b0a      	cmp	r3, #10
 80069a2:	d013      	beq.n	80069cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d00f      	beq.n	80069cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	8b5b      	ldrh	r3, [r3, #26]
 80069b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	8b5b      	ldrh	r3, [r3, #26]
 80069bc:	f043 0302 	orr.w	r3, r3, #2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80069c6:	6838      	ldr	r0, [r7, #0]
 80069c8:	f002 ff6e 	bl	80098a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	7d1b      	ldrb	r3, [r3, #20]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d020      	beq.n	8006a16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <tcp_pcb_remove+0xca>
 80069dc:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <tcp_pcb_remove+0x10c>)
 80069de:	f640 0293 	movw	r2, #2195	; 0x893
 80069e2:	4916      	ldr	r1, [pc, #88]	; (8006a3c <tcp_pcb_remove+0x11c>)
 80069e4:	4813      	ldr	r0, [pc, #76]	; (8006a34 <tcp_pcb_remove+0x114>)
 80069e6:	f008 ff55 	bl	800f894 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <tcp_pcb_remove+0xe0>
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <tcp_pcb_remove+0x10c>)
 80069f4:	f640 0294 	movw	r2, #2196	; 0x894
 80069f8:	4911      	ldr	r1, [pc, #68]	; (8006a40 <tcp_pcb_remove+0x120>)
 80069fa:	480e      	ldr	r0, [pc, #56]	; (8006a34 <tcp_pcb_remove+0x114>)
 80069fc:	f008 ff4a 	bl	800f894 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <tcp_pcb_remove+0xf6>
 8006a08:	4b08      	ldr	r3, [pc, #32]	; (8006a2c <tcp_pcb_remove+0x10c>)
 8006a0a:	f640 0296 	movw	r2, #2198	; 0x896
 8006a0e:	490d      	ldr	r1, [pc, #52]	; (8006a44 <tcp_pcb_remove+0x124>)
 8006a10:	4808      	ldr	r0, [pc, #32]	; (8006a34 <tcp_pcb_remove+0x114>)
 8006a12:	f008 ff3f 	bl	800f894 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	0801119c 	.word	0x0801119c
 8006a30:	08011804 	.word	0x08011804
 8006a34:	080111e0 	.word	0x080111e0
 8006a38:	08011820 	.word	0x08011820
 8006a3c:	08011840 	.word	0x08011840
 8006a40:	08011858 	.word	0x08011858
 8006a44:	08011874 	.word	0x08011874

08006a48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <tcp_next_iss+0x1c>
 8006a56:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <tcp_next_iss+0x38>)
 8006a58:	f640 02af 	movw	r2, #2223	; 0x8af
 8006a5c:	4909      	ldr	r1, [pc, #36]	; (8006a84 <tcp_next_iss+0x3c>)
 8006a5e:	480a      	ldr	r0, [pc, #40]	; (8006a88 <tcp_next_iss+0x40>)
 8006a60:	f008 ff18 	bl	800f894 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <tcp_next_iss+0x44>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <tcp_next_iss+0x48>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <tcp_next_iss+0x44>)
 8006a70:	6013      	str	r3, [r2, #0]
  return iss;
 8006a72:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <tcp_next_iss+0x44>)
 8006a74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	0801119c 	.word	0x0801119c
 8006a84:	0801188c 	.word	0x0801188c
 8006a88:	080111e0 	.word	0x080111e0
 8006a8c:	20000024 	.word	0x20000024
 8006a90:	2000a44c 	.word	0x2000a44c

08006a94 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <tcp_eff_send_mss_netif+0x22>
 8006aa8:	4b14      	ldr	r3, [pc, #80]	; (8006afc <tcp_eff_send_mss_netif+0x68>)
 8006aaa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006aae:	4914      	ldr	r1, [pc, #80]	; (8006b00 <tcp_eff_send_mss_netif+0x6c>)
 8006ab0:	4814      	ldr	r0, [pc, #80]	; (8006b04 <tcp_eff_send_mss_netif+0x70>)
 8006ab2:	f008 feef 	bl	800f894 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006abc:	89fb      	ldrh	r3, [r7, #14]
 8006abe:	e019      	b.n	8006af4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006ac6:	8afb      	ldrh	r3, [r7, #22]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d012      	beq.n	8006af2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006acc:	2328      	movs	r3, #40	; 0x28
 8006ace:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006ad0:	8afa      	ldrh	r2, [r7, #22]
 8006ad2:	8abb      	ldrh	r3, [r7, #20]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d904      	bls.n	8006ae2 <tcp_eff_send_mss_netif+0x4e>
 8006ad8:	8afa      	ldrh	r2, [r7, #22]
 8006ada:	8abb      	ldrh	r3, [r7, #20]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	e000      	b.n	8006ae4 <tcp_eff_send_mss_netif+0x50>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006ae6:	8a7a      	ldrh	r2, [r7, #18]
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
 8006aea:	4293      	cmp	r3, r2
 8006aec:	bf28      	it	cs
 8006aee:	4613      	movcs	r3, r2
 8006af0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006af2:	89fb      	ldrh	r3, [r7, #14]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	0801119c 	.word	0x0801119c
 8006b00:	080118a8 	.word	0x080118a8
 8006b04:	080111e0 	.word	0x080111e0

08006b08 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d119      	bne.n	8006b50 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006b1c:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006b1e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006b22:	4910      	ldr	r1, [pc, #64]	; (8006b64 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006b24:	4810      	ldr	r0, [pc, #64]	; (8006b68 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006b26:	f008 feb5 	bl	800f894 <iprintf>

  while (pcb != NULL) {
 8006b2a:	e011      	b.n	8006b50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d108      	bne.n	8006b4a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7fe ffc6 	bl	8005ad0 <tcp_abort>
      pcb = next;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e002      	b.n	8006b50 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1ea      	bne.n	8006b2c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	0801119c 	.word	0x0801119c
 8006b64:	080118d0 	.word	0x080118d0
 8006b68:	080111e0 	.word	0x080111e0

08006b6c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d02a      	beq.n	8006bd2 <tcp_netif_ip_addr_changed+0x66>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d026      	beq.n	8006bd2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006b84:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <tcp_netif_ip_addr_changed+0x70>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff ffbc 	bl	8006b08 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006b90:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <tcp_netif_ip_addr_changed+0x74>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ffb6 	bl	8006b08 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d017      	beq.n	8006bd2 <tcp_netif_ip_addr_changed+0x66>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d013      	beq.n	8006bd2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <tcp_netif_ip_addr_changed+0x78>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e00c      	b.n	8006bcc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d103      	bne.n	8006bc6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1ef      	bne.n	8006bb2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	2000a458 	.word	0x2000a458
 8006be0:	2000a450 	.word	0x2000a450
 8006be4:	2000a454 	.word	0x2000a454

08006be8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fc3d 	bl	800647c <tcp_segs_free>
    pcb->ooseq = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b08d      	sub	sp, #52	; 0x34
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <tcp_input+0x1c>
 8006c20:	4b9b      	ldr	r3, [pc, #620]	; (8006e90 <tcp_input+0x280>)
 8006c22:	2283      	movs	r2, #131	; 0x83
 8006c24:	499b      	ldr	r1, [pc, #620]	; (8006e94 <tcp_input+0x284>)
 8006c26:	489c      	ldr	r0, [pc, #624]	; (8006e98 <tcp_input+0x288>)
 8006c28:	f008 fe34 	bl	800f894 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a9a      	ldr	r2, [pc, #616]	; (8006e9c <tcp_input+0x28c>)
 8006c32:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	895b      	ldrh	r3, [r3, #10]
 8006c38:	2b13      	cmp	r3, #19
 8006c3a:	f240 83d1 	bls.w	80073e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006c3e:	4b98      	ldr	r3, [pc, #608]	; (8006ea0 <tcp_input+0x290>)
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	4a97      	ldr	r2, [pc, #604]	; (8006ea0 <tcp_input+0x290>)
 8006c44:	6812      	ldr	r2, [r2, #0]
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f007 fdcd 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f040 83c7 	bne.w	80073e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006c56:	4b92      	ldr	r3, [pc, #584]	; (8006ea0 <tcp_input+0x290>)
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006c5e:	2be0      	cmp	r3, #224	; 0xe0
 8006c60:	f000 83c0 	beq.w	80073e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006c64:	4b8d      	ldr	r3, [pc, #564]	; (8006e9c <tcp_input+0x28c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	899b      	ldrh	r3, [r3, #12]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fc fe2d 	bl	80038cc <lwip_htons>
 8006c72:	4603      	mov	r3, r0
 8006c74:	0b1b      	lsrs	r3, r3, #12
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006c7e:	7cbb      	ldrb	r3, [r7, #18]
 8006c80:	2b13      	cmp	r3, #19
 8006c82:	f240 83b1 	bls.w	80073e8 <tcp_input+0x7d8>
 8006c86:	7cbb      	ldrb	r3, [r7, #18]
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	891b      	ldrh	r3, [r3, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	f200 83aa 	bhi.w	80073e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006c94:	7cbb      	ldrb	r3, [r7, #18]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b14      	subs	r3, #20
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	4b81      	ldr	r3, [pc, #516]	; (8006ea4 <tcp_input+0x294>)
 8006c9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006ca0:	4b81      	ldr	r3, [pc, #516]	; (8006ea8 <tcp_input+0x298>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	895a      	ldrh	r2, [r3, #10]
 8006caa:	7cbb      	ldrb	r3, [r7, #18]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d309      	bcc.n	8006cc6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006cb2:	4b7c      	ldr	r3, [pc, #496]	; (8006ea4 <tcp_input+0x294>)
 8006cb4:	881a      	ldrh	r2, [r3, #0]
 8006cb6:	4b7d      	ldr	r3, [pc, #500]	; (8006eac <tcp_input+0x29c>)
 8006cb8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006cba:	7cbb      	ldrb	r3, [r7, #18]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe f8e8 	bl	8004e94 <pbuf_remove_header>
 8006cc4:	e04e      	b.n	8006d64 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d105      	bne.n	8006cda <tcp_input+0xca>
 8006cce:	4b70      	ldr	r3, [pc, #448]	; (8006e90 <tcp_input+0x280>)
 8006cd0:	22c2      	movs	r2, #194	; 0xc2
 8006cd2:	4977      	ldr	r1, [pc, #476]	; (8006eb0 <tcp_input+0x2a0>)
 8006cd4:	4870      	ldr	r0, [pc, #448]	; (8006e98 <tcp_input+0x288>)
 8006cd6:	f008 fddd 	bl	800f894 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006cda:	2114      	movs	r1, #20
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7fe f8d9 	bl	8004e94 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	895a      	ldrh	r2, [r3, #10]
 8006ce6:	4b71      	ldr	r3, [pc, #452]	; (8006eac <tcp_input+0x29c>)
 8006ce8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006cea:	4b6e      	ldr	r3, [pc, #440]	; (8006ea4 <tcp_input+0x294>)
 8006cec:	881a      	ldrh	r2, [r3, #0]
 8006cee:	4b6f      	ldr	r3, [pc, #444]	; (8006eac <tcp_input+0x29c>)
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006cf6:	4b6d      	ldr	r3, [pc, #436]	; (8006eac <tcp_input+0x29c>)
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7fe f8c9 	bl	8004e94 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	895b      	ldrh	r3, [r3, #10]
 8006d08:	8a3a      	ldrh	r2, [r7, #16]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	f200 836e 	bhi.w	80073ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	4a64      	ldr	r2, [pc, #400]	; (8006ea8 <tcp_input+0x298>)
 8006d18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	8a3a      	ldrh	r2, [r7, #16]
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe f8b6 	bl	8004e94 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	891a      	ldrh	r2, [r3, #8]
 8006d2c:	8a3b      	ldrh	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	895b      	ldrh	r3, [r3, #10]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <tcp_input+0x13a>
 8006d3e:	4b54      	ldr	r3, [pc, #336]	; (8006e90 <tcp_input+0x280>)
 8006d40:	22df      	movs	r2, #223	; 0xdf
 8006d42:	495c      	ldr	r1, [pc, #368]	; (8006eb4 <tcp_input+0x2a4>)
 8006d44:	4854      	ldr	r0, [pc, #336]	; (8006e98 <tcp_input+0x288>)
 8006d46:	f008 fda5 	bl	800f894 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	891a      	ldrh	r2, [r3, #8]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	891b      	ldrh	r3, [r3, #8]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d005      	beq.n	8006d64 <tcp_input+0x154>
 8006d58:	4b4d      	ldr	r3, [pc, #308]	; (8006e90 <tcp_input+0x280>)
 8006d5a:	22e0      	movs	r2, #224	; 0xe0
 8006d5c:	4956      	ldr	r1, [pc, #344]	; (8006eb8 <tcp_input+0x2a8>)
 8006d5e:	484e      	ldr	r0, [pc, #312]	; (8006e98 <tcp_input+0x288>)
 8006d60:	f008 fd98 	bl	800f894 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006d64:	4b4d      	ldr	r3, [pc, #308]	; (8006e9c <tcp_input+0x28c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4a4b      	ldr	r2, [pc, #300]	; (8006e9c <tcp_input+0x28c>)
 8006d6e:	6814      	ldr	r4, [r2, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fc fdab 	bl	80038cc <lwip_htons>
 8006d76:	4603      	mov	r3, r0
 8006d78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006d7a:	4b48      	ldr	r3, [pc, #288]	; (8006e9c <tcp_input+0x28c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	885b      	ldrh	r3, [r3, #2]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	4a46      	ldr	r2, [pc, #280]	; (8006e9c <tcp_input+0x28c>)
 8006d84:	6814      	ldr	r4, [r2, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fc fda0 	bl	80038cc <lwip_htons>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006d90:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <tcp_input+0x28c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4a41      	ldr	r2, [pc, #260]	; (8006e9c <tcp_input+0x28c>)
 8006d98:	6814      	ldr	r4, [r2, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fc fdab 	bl	80038f6 <lwip_htonl>
 8006da0:	4603      	mov	r3, r0
 8006da2:	6063      	str	r3, [r4, #4]
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	4a45      	ldr	r2, [pc, #276]	; (8006ebc <tcp_input+0x2ac>)
 8006da8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006daa:	4b3c      	ldr	r3, [pc, #240]	; (8006e9c <tcp_input+0x28c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a3a      	ldr	r2, [pc, #232]	; (8006e9c <tcp_input+0x28c>)
 8006db2:	6814      	ldr	r4, [r2, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fc fd9e 	bl	80038f6 <lwip_htonl>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	60a3      	str	r3, [r4, #8]
 8006dbe:	68a3      	ldr	r3, [r4, #8]
 8006dc0:	4a3f      	ldr	r2, [pc, #252]	; (8006ec0 <tcp_input+0x2b0>)
 8006dc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006dc4:	4b35      	ldr	r3, [pc, #212]	; (8006e9c <tcp_input+0x28c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	89db      	ldrh	r3, [r3, #14]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4a33      	ldr	r2, [pc, #204]	; (8006e9c <tcp_input+0x28c>)
 8006dce:	6814      	ldr	r4, [r2, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fc fd7b 	bl	80038cc <lwip_htons>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006dda:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <tcp_input+0x28c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	899b      	ldrh	r3, [r3, #12]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fc fd72 	bl	80038cc <lwip_htons>
 8006de8:	4603      	mov	r3, r0
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <tcp_input+0x2b4>)
 8006df4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	891a      	ldrh	r2, [r3, #8]
 8006dfa:	4b33      	ldr	r3, [pc, #204]	; (8006ec8 <tcp_input+0x2b8>)
 8006dfc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <tcp_input+0x2b4>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00c      	beq.n	8006e24 <tcp_input+0x214>
    tcplen++;
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <tcp_input+0x2b8>)
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <tcp_input+0x2b8>)
 8006e14:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	891a      	ldrh	r2, [r3, #8]
 8006e1a:	4b2b      	ldr	r3, [pc, #172]	; (8006ec8 <tcp_input+0x2b8>)
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	f200 82e6 	bhi.w	80073f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e28:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <tcp_input+0x2bc>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e09d      	b.n	8006f6c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	7d1b      	ldrb	r3, [r3, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <tcp_input+0x234>
 8006e38:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <tcp_input+0x280>)
 8006e3a:	22fb      	movs	r2, #251	; 0xfb
 8006e3c:	4924      	ldr	r1, [pc, #144]	; (8006ed0 <tcp_input+0x2c0>)
 8006e3e:	4816      	ldr	r0, [pc, #88]	; (8006e98 <tcp_input+0x288>)
 8006e40:	f008 fd28 	bl	800f894 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	7d1b      	ldrb	r3, [r3, #20]
 8006e48:	2b0a      	cmp	r3, #10
 8006e4a:	d105      	bne.n	8006e58 <tcp_input+0x248>
 8006e4c:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <tcp_input+0x280>)
 8006e4e:	22fc      	movs	r2, #252	; 0xfc
 8006e50:	4920      	ldr	r1, [pc, #128]	; (8006ed4 <tcp_input+0x2c4>)
 8006e52:	4811      	ldr	r0, [pc, #68]	; (8006e98 <tcp_input+0x288>)
 8006e54:	f008 fd1e 	bl	800f894 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	7d1b      	ldrb	r3, [r3, #20]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d105      	bne.n	8006e6c <tcp_input+0x25c>
 8006e60:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <tcp_input+0x280>)
 8006e62:	22fd      	movs	r2, #253	; 0xfd
 8006e64:	491c      	ldr	r1, [pc, #112]	; (8006ed8 <tcp_input+0x2c8>)
 8006e66:	480c      	ldr	r0, [pc, #48]	; (8006e98 <tcp_input+0x288>)
 8006e68:	f008 fd14 	bl	800f894 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	7a1b      	ldrb	r3, [r3, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d033      	beq.n	8006edc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	7a1a      	ldrb	r2, [r3, #8]
 8006e78:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <tcp_input+0x290>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e80:	3301      	adds	r3, #1
 8006e82:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d029      	beq.n	8006edc <tcp_input+0x2cc>
      prev = pcb;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	61bb      	str	r3, [r7, #24]
      continue;
 8006e8c:	e06b      	b.n	8006f66 <tcp_input+0x356>
 8006e8e:	bf00      	nop
 8006e90:	08011904 	.word	0x08011904
 8006e94:	08011938 	.word	0x08011938
 8006e98:	08011950 	.word	0x08011950
 8006e9c:	2000a474 	.word	0x2000a474
 8006ea0:	20004cfc 	.word	0x20004cfc
 8006ea4:	2000a478 	.word	0x2000a478
 8006ea8:	2000a47c 	.word	0x2000a47c
 8006eac:	2000a47a 	.word	0x2000a47a
 8006eb0:	08011978 	.word	0x08011978
 8006eb4:	08011988 	.word	0x08011988
 8006eb8:	08011994 	.word	0x08011994
 8006ebc:	2000a484 	.word	0x2000a484
 8006ec0:	2000a488 	.word	0x2000a488
 8006ec4:	2000a490 	.word	0x2000a490
 8006ec8:	2000a48e 	.word	0x2000a48e
 8006ecc:	2000a458 	.word	0x2000a458
 8006ed0:	080119b4 	.word	0x080119b4
 8006ed4:	080119dc 	.word	0x080119dc
 8006ed8:	08011a08 	.word	0x08011a08
    }

    if (pcb->remote_port == tcphdr->src &&
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	8b1a      	ldrh	r2, [r3, #24]
 8006ee0:	4b72      	ldr	r3, [pc, #456]	; (80070ac <tcp_input+0x49c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d13a      	bne.n	8006f62 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	8ada      	ldrh	r2, [r3, #22]
 8006ef0:	4b6e      	ldr	r3, [pc, #440]	; (80070ac <tcp_input+0x49c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	885b      	ldrh	r3, [r3, #2]
 8006ef6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d132      	bne.n	8006f62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	4b6b      	ldr	r3, [pc, #428]	; (80070b0 <tcp_input+0x4a0>)
 8006f02:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d12c      	bne.n	8006f62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4b68      	ldr	r3, [pc, #416]	; (80070b0 <tcp_input+0x4a0>)
 8006f0e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d126      	bne.n	8006f62 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d106      	bne.n	8006f2c <tcp_input+0x31c>
 8006f1e:	4b65      	ldr	r3, [pc, #404]	; (80070b4 <tcp_input+0x4a4>)
 8006f20:	f240 120d 	movw	r2, #269	; 0x10d
 8006f24:	4964      	ldr	r1, [pc, #400]	; (80070b8 <tcp_input+0x4a8>)
 8006f26:	4865      	ldr	r0, [pc, #404]	; (80070bc <tcp_input+0x4ac>)
 8006f28:	f008 fcb4 	bl	800f894 <iprintf>
      if (prev != NULL) {
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <tcp_input+0x338>
        prev->next = pcb->next;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006f3a:	4b61      	ldr	r3, [pc, #388]	; (80070c0 <tcp_input+0x4b0>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006f42:	4a5f      	ldr	r2, [pc, #380]	; (80070c0 <tcp_input+0x4b0>)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d111      	bne.n	8006f76 <tcp_input+0x366>
 8006f52:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <tcp_input+0x4a4>)
 8006f54:	f240 1215 	movw	r2, #277	; 0x115
 8006f58:	495a      	ldr	r1, [pc, #360]	; (80070c4 <tcp_input+0x4b4>)
 8006f5a:	4858      	ldr	r0, [pc, #352]	; (80070bc <tcp_input+0x4ac>)
 8006f5c:	f008 fc9a 	bl	800f894 <iprintf>
      break;
 8006f60:	e009      	b.n	8006f76 <tcp_input+0x366>
    }
    prev = pcb;
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	61fb      	str	r3, [r7, #28]
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f47f af5e 	bne.w	8006e30 <tcp_input+0x220>
 8006f74:	e000      	b.n	8006f78 <tcp_input+0x368>
      break;
 8006f76:	bf00      	nop
  }

  if (pcb == NULL) {
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 80aa 	bne.w	80070d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f80:	4b51      	ldr	r3, [pc, #324]	; (80070c8 <tcp_input+0x4b8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	e03f      	b.n	8007008 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	7d1b      	ldrb	r3, [r3, #20]
 8006f8c:	2b0a      	cmp	r3, #10
 8006f8e:	d006      	beq.n	8006f9e <tcp_input+0x38e>
 8006f90:	4b48      	ldr	r3, [pc, #288]	; (80070b4 <tcp_input+0x4a4>)
 8006f92:	f240 121f 	movw	r2, #287	; 0x11f
 8006f96:	494d      	ldr	r1, [pc, #308]	; (80070cc <tcp_input+0x4bc>)
 8006f98:	4848      	ldr	r0, [pc, #288]	; (80070bc <tcp_input+0x4ac>)
 8006f9a:	f008 fc7b 	bl	800f894 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	7a1b      	ldrb	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	7a1a      	ldrb	r2, [r3, #8]
 8006faa:	4b41      	ldr	r3, [pc, #260]	; (80070b0 <tcp_input+0x4a0>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d122      	bne.n	8007000 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	8b1a      	ldrh	r2, [r3, #24]
 8006fbe:	4b3b      	ldr	r3, [pc, #236]	; (80070ac <tcp_input+0x49c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d11b      	bne.n	8007002 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	8ada      	ldrh	r2, [r3, #22]
 8006fce:	4b37      	ldr	r3, [pc, #220]	; (80070ac <tcp_input+0x49c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d113      	bne.n	8007002 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	4b34      	ldr	r3, [pc, #208]	; (80070b0 <tcp_input+0x4a0>)
 8006fe0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d10d      	bne.n	8007002 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b31      	ldr	r3, [pc, #196]	; (80070b0 <tcp_input+0x4a0>)
 8006fec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d107      	bne.n	8007002 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006ff2:	69f8      	ldr	r0, [r7, #28]
 8006ff4:	f000 fb56 	bl	80076a4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fd ffd1 	bl	8004fa0 <pbuf_free>
        return;
 8006ffe:	e1fd      	b.n	80073fc <tcp_input+0x7ec>
        continue;
 8007000:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1bc      	bne.n	8006f88 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007012:	4b2f      	ldr	r3, [pc, #188]	; (80070d0 <tcp_input+0x4c0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e02a      	b.n	8007070 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	7a1b      	ldrb	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00c      	beq.n	800703c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	7a1a      	ldrb	r2, [r3, #8]
 8007026:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <tcp_input+0x4a0>)
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800702e:	3301      	adds	r3, #1
 8007030:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007032:	429a      	cmp	r2, r3
 8007034:	d002      	beq.n	800703c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	61bb      	str	r3, [r7, #24]
        continue;
 800703a:	e016      	b.n	800706a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	8ada      	ldrh	r2, [r3, #22]
 8007040:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <tcp_input+0x49c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	885b      	ldrh	r3, [r3, #2]
 8007046:	b29b      	uxth	r3, r3
 8007048:	429a      	cmp	r2, r3
 800704a:	d10c      	bne.n	8007066 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <tcp_input+0x4a0>)
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d00f      	beq.n	8007078 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00d      	beq.n	800707a <tcp_input+0x46a>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1d1      	bne.n	800701a <tcp_input+0x40a>
 8007076:	e000      	b.n	800707a <tcp_input+0x46a>
            break;
 8007078:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d029      	beq.n	80070d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800708e:	4b10      	ldr	r3, [pc, #64]	; (80070d0 <tcp_input+0x4c0>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007096:	4a0e      	ldr	r2, [pc, #56]	; (80070d0 <tcp_input+0x4c0>)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800709c:	6978      	ldr	r0, [r7, #20]
 800709e:	f000 fa03 	bl	80074a8 <tcp_listen_input>
      }
      pbuf_free(p);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fd ff7c 	bl	8004fa0 <pbuf_free>
      return;
 80070a8:	e1a8      	b.n	80073fc <tcp_input+0x7ec>
 80070aa:	bf00      	nop
 80070ac:	2000a474 	.word	0x2000a474
 80070b0:	20004cfc 	.word	0x20004cfc
 80070b4:	08011904 	.word	0x08011904
 80070b8:	08011a30 	.word	0x08011a30
 80070bc:	08011950 	.word	0x08011950
 80070c0:	2000a458 	.word	0x2000a458
 80070c4:	08011a5c 	.word	0x08011a5c
 80070c8:	2000a45c 	.word	0x2000a45c
 80070cc:	08011a88 	.word	0x08011a88
 80070d0:	2000a454 	.word	0x2000a454
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8158 	beq.w	800738c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80070dc:	4b95      	ldr	r3, [pc, #596]	; (8007334 <tcp_input+0x724>)
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	891a      	ldrh	r2, [r3, #8]
 80070e6:	4b93      	ldr	r3, [pc, #588]	; (8007334 <tcp_input+0x724>)
 80070e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80070ea:	4a92      	ldr	r2, [pc, #584]	; (8007334 <tcp_input+0x724>)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80070f0:	4b91      	ldr	r3, [pc, #580]	; (8007338 <tcp_input+0x728>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a8f      	ldr	r2, [pc, #572]	; (8007334 <tcp_input+0x724>)
 80070f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80070f8:	4b90      	ldr	r3, [pc, #576]	; (800733c <tcp_input+0x72c>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80070fe:	4b90      	ldr	r3, [pc, #576]	; (8007340 <tcp_input+0x730>)
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007104:	4b8f      	ldr	r3, [pc, #572]	; (8007344 <tcp_input+0x734>)
 8007106:	2200      	movs	r2, #0
 8007108:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800710a:	4b8f      	ldr	r3, [pc, #572]	; (8007348 <tcp_input+0x738>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d006      	beq.n	8007124 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7b5b      	ldrb	r3, [r3, #13]
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007128:	2b00      	cmp	r3, #0
 800712a:	d017      	beq.n	800715c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800712c:	69f8      	ldr	r0, [r7, #28]
 800712e:	f7ff f929 	bl	8006384 <tcp_process_refused_data>
 8007132:	4603      	mov	r3, r0
 8007134:	f113 0f0d 	cmn.w	r3, #13
 8007138:	d007      	beq.n	800714a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007142:	4b82      	ldr	r3, [pc, #520]	; (800734c <tcp_input+0x73c>)
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d008      	beq.n	800715c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	2b00      	cmp	r3, #0
 8007150:	f040 80e3 	bne.w	800731a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007154:	69f8      	ldr	r0, [r7, #28]
 8007156:	f003 f9ad 	bl	800a4b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800715a:	e0de      	b.n	800731a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800715c:	4a7c      	ldr	r2, [pc, #496]	; (8007350 <tcp_input+0x740>)
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007162:	69f8      	ldr	r0, [r7, #28]
 8007164:	f000 fb18 	bl	8007798 <tcp_process>
 8007168:	4603      	mov	r3, r0
 800716a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800716c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007170:	f113 0f0d 	cmn.w	r3, #13
 8007174:	f000 80d3 	beq.w	800731e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007178:	4b71      	ldr	r3, [pc, #452]	; (8007340 <tcp_input+0x730>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d015      	beq.n	80071b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718a:	2b00      	cmp	r3, #0
 800718c:	d008      	beq.n	80071a0 <tcp_input+0x590>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	6912      	ldr	r2, [r2, #16]
 8007198:	f06f 010d 	mvn.w	r1, #13
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	486c      	ldr	r0, [pc, #432]	; (8007354 <tcp_input+0x744>)
 80071a4:	f7ff fbbc 	bl	8006920 <tcp_pcb_remove>
        tcp_free(pcb);
 80071a8:	69f8      	ldr	r0, [r7, #28]
 80071aa:	f7fe f9a9 	bl	8005500 <tcp_free>
 80071ae:	e0da      	b.n	8007366 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80071b4:	4b63      	ldr	r3, [pc, #396]	; (8007344 <tcp_input+0x734>)
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01d      	beq.n	80071f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80071bc:	4b61      	ldr	r3, [pc, #388]	; (8007344 <tcp_input+0x734>)
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <tcp_input+0x5d2>
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	6910      	ldr	r0, [r2, #16]
 80071d6:	89fa      	ldrh	r2, [r7, #14]
 80071d8:	69f9      	ldr	r1, [r7, #28]
 80071da:	4798      	blx	r3
 80071dc:	4603      	mov	r3, r0
 80071de:	74fb      	strb	r3, [r7, #19]
 80071e0:	e001      	b.n	80071e6 <tcp_input+0x5d6>
 80071e2:	2300      	movs	r3, #0
 80071e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80071e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071ea:	f113 0f0d 	cmn.w	r3, #13
 80071ee:	f000 8098 	beq.w	8007322 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80071f2:	4b54      	ldr	r3, [pc, #336]	; (8007344 <tcp_input+0x734>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80071f8:	69f8      	ldr	r0, [r7, #28]
 80071fa:	f000 f915 	bl	8007428 <tcp_input_delayed_close>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	f040 8090 	bne.w	8007326 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007206:	4b4d      	ldr	r3, [pc, #308]	; (800733c <tcp_input+0x72c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d041      	beq.n	8007292 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007212:	2b00      	cmp	r3, #0
 8007214:	d006      	beq.n	8007224 <tcp_input+0x614>
 8007216:	4b50      	ldr	r3, [pc, #320]	; (8007358 <tcp_input+0x748>)
 8007218:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800721c:	494f      	ldr	r1, [pc, #316]	; (800735c <tcp_input+0x74c>)
 800721e:	4850      	ldr	r0, [pc, #320]	; (8007360 <tcp_input+0x750>)
 8007220:	f008 fb38 	bl	800f894 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	8b5b      	ldrh	r3, [r3, #26]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007230:	4b42      	ldr	r3, [pc, #264]	; (800733c <tcp_input+0x72c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f7fd feb3 	bl	8004fa0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800723a:	69f8      	ldr	r0, [r7, #28]
 800723c:	f7fe fc48 	bl	8005ad0 <tcp_abort>
            goto aborted;
 8007240:	e091      	b.n	8007366 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00c      	beq.n	8007266 <tcp_input+0x656>
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	6918      	ldr	r0, [r3, #16]
 8007256:	4b39      	ldr	r3, [pc, #228]	; (800733c <tcp_input+0x72c>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	69f9      	ldr	r1, [r7, #28]
 800725e:	47a0      	blx	r4
 8007260:	4603      	mov	r3, r0
 8007262:	74fb      	strb	r3, [r7, #19]
 8007264:	e008      	b.n	8007278 <tcp_input+0x668>
 8007266:	4b35      	ldr	r3, [pc, #212]	; (800733c <tcp_input+0x72c>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	69f9      	ldr	r1, [r7, #28]
 800726e:	2000      	movs	r0, #0
 8007270:	f7ff f95e 	bl	8006530 <tcp_recv_null>
 8007274:	4603      	mov	r3, r0
 8007276:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007278:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800727c:	f113 0f0d 	cmn.w	r3, #13
 8007280:	d053      	beq.n	800732a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007282:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800728a:	4b2c      	ldr	r3, [pc, #176]	; (800733c <tcp_input+0x72c>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007292:	4b2b      	ldr	r3, [pc, #172]	; (8007340 <tcp_input+0x730>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d030      	beq.n	8007300 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d009      	beq.n	80072ba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072aa:	7b5a      	ldrb	r2, [r3, #13]
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072b0:	f042 0220 	orr.w	r2, r2, #32
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	735a      	strb	r2, [r3, #13]
 80072b8:	e022      	b.n	8007300 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80072c2:	d005      	beq.n	80072d0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c8:	3301      	adds	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00b      	beq.n	80072f2 <tcp_input+0x6e2>
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	6918      	ldr	r0, [r3, #16]
 80072e4:	2300      	movs	r3, #0
 80072e6:	2200      	movs	r2, #0
 80072e8:	69f9      	ldr	r1, [r7, #28]
 80072ea:	47a0      	blx	r4
 80072ec:	4603      	mov	r3, r0
 80072ee:	74fb      	strb	r3, [r7, #19]
 80072f0:	e001      	b.n	80072f6 <tcp_input+0x6e6>
 80072f2:	2300      	movs	r3, #0
 80072f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80072f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80072fa:	f113 0f0d 	cmn.w	r3, #13
 80072fe:	d016      	beq.n	800732e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007300:	4b13      	ldr	r3, [pc, #76]	; (8007350 <tcp_input+0x740>)
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007306:	69f8      	ldr	r0, [r7, #28]
 8007308:	f000 f88e 	bl	8007428 <tcp_input_delayed_close>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d128      	bne.n	8007364 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007312:	69f8      	ldr	r0, [r7, #28]
 8007314:	f002 fac8 	bl	80098a8 <tcp_output>
 8007318:	e025      	b.n	8007366 <tcp_input+0x756>
        goto aborted;
 800731a:	bf00      	nop
 800731c:	e023      	b.n	8007366 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800731e:	bf00      	nop
 8007320:	e021      	b.n	8007366 <tcp_input+0x756>
              goto aborted;
 8007322:	bf00      	nop
 8007324:	e01f      	b.n	8007366 <tcp_input+0x756>
          goto aborted;
 8007326:	bf00      	nop
 8007328:	e01d      	b.n	8007366 <tcp_input+0x756>
            goto aborted;
 800732a:	bf00      	nop
 800732c:	e01b      	b.n	8007366 <tcp_input+0x756>
              goto aborted;
 800732e:	bf00      	nop
 8007330:	e019      	b.n	8007366 <tcp_input+0x756>
 8007332:	bf00      	nop
 8007334:	2000a464 	.word	0x2000a464
 8007338:	2000a474 	.word	0x2000a474
 800733c:	2000a494 	.word	0x2000a494
 8007340:	2000a491 	.word	0x2000a491
 8007344:	2000a48c 	.word	0x2000a48c
 8007348:	2000a490 	.word	0x2000a490
 800734c:	2000a48e 	.word	0x2000a48e
 8007350:	2000a498 	.word	0x2000a498
 8007354:	2000a458 	.word	0x2000a458
 8007358:	08011904 	.word	0x08011904
 800735c:	08011ab8 	.word	0x08011ab8
 8007360:	08011950 	.word	0x08011950
          goto aborted;
 8007364:	bf00      	nop
    tcp_input_pcb = NULL;
 8007366:	4b27      	ldr	r3, [pc, #156]	; (8007404 <tcp_input+0x7f4>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800736c:	4b26      	ldr	r3, [pc, #152]	; (8007408 <tcp_input+0x7f8>)
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007372:	4b26      	ldr	r3, [pc, #152]	; (800740c <tcp_input+0x7fc>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d03f      	beq.n	80073fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800737a:	4b24      	ldr	r3, [pc, #144]	; (800740c <tcp_input+0x7fc>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fd fe0e 	bl	8004fa0 <pbuf_free>
      inseg.p = NULL;
 8007384:	4b21      	ldr	r3, [pc, #132]	; (800740c <tcp_input+0x7fc>)
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800738a:	e036      	b.n	80073fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800738c:	4b20      	ldr	r3, [pc, #128]	; (8007410 <tcp_input+0x800>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	899b      	ldrh	r3, [r3, #12]
 8007392:	b29b      	uxth	r3, r3
 8007394:	4618      	mov	r0, r3
 8007396:	f7fc fa99 	bl	80038cc <lwip_htons>
 800739a:	4603      	mov	r3, r0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d118      	bne.n	80073d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073a6:	4b1b      	ldr	r3, [pc, #108]	; (8007414 <tcp_input+0x804>)
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <tcp_input+0x808>)
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	4b1a      	ldr	r3, [pc, #104]	; (800741c <tcp_input+0x80c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <tcp_input+0x800>)
 80073b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073ba:	885b      	ldrh	r3, [r3, #2]
 80073bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073be:	4a14      	ldr	r2, [pc, #80]	; (8007410 <tcp_input+0x800>)
 80073c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073c2:	8812      	ldrh	r2, [r2, #0]
 80073c4:	b292      	uxth	r2, r2
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <tcp_input+0x810>)
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <tcp_input+0x814>)
 80073d0:	4602      	mov	r2, r0
 80073d2:	2000      	movs	r0, #0
 80073d4:	f003 f81c 	bl	800a410 <tcp_rst>
    pbuf_free(p);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7fd fde1 	bl	8004fa0 <pbuf_free>
  return;
 80073de:	e00c      	b.n	80073fa <tcp_input+0x7ea>
    goto dropped;
 80073e0:	bf00      	nop
 80073e2:	e006      	b.n	80073f2 <tcp_input+0x7e2>
    goto dropped;
 80073e4:	bf00      	nop
 80073e6:	e004      	b.n	80073f2 <tcp_input+0x7e2>
    goto dropped;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <tcp_input+0x7e2>
      goto dropped;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <tcp_input+0x7e2>
      goto dropped;
 80073f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fd fdd4 	bl	8004fa0 <pbuf_free>
 80073f8:	e000      	b.n	80073fc <tcp_input+0x7ec>
  return;
 80073fa:	bf00      	nop
}
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd90      	pop	{r4, r7, pc}
 8007402:	bf00      	nop
 8007404:	2000a498 	.word	0x2000a498
 8007408:	2000a494 	.word	0x2000a494
 800740c:	2000a464 	.word	0x2000a464
 8007410:	2000a474 	.word	0x2000a474
 8007414:	2000a488 	.word	0x2000a488
 8007418:	2000a48e 	.word	0x2000a48e
 800741c:	2000a484 	.word	0x2000a484
 8007420:	20004d0c 	.word	0x20004d0c
 8007424:	20004d10 	.word	0x20004d10

08007428 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <tcp_input_delayed_close+0x1c>
 8007436:	4b17      	ldr	r3, [pc, #92]	; (8007494 <tcp_input_delayed_close+0x6c>)
 8007438:	f240 225a 	movw	r2, #602	; 0x25a
 800743c:	4916      	ldr	r1, [pc, #88]	; (8007498 <tcp_input_delayed_close+0x70>)
 800743e:	4817      	ldr	r0, [pc, #92]	; (800749c <tcp_input_delayed_close+0x74>)
 8007440:	f008 fa28 	bl	800f894 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007444:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <tcp_input_delayed_close+0x78>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01c      	beq.n	800748a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8b5b      	ldrh	r3, [r3, #26]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10d      	bne.n	8007478 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <tcp_input_delayed_close+0x50>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6912      	ldr	r2, [r2, #16]
 8007470:	f06f 010e 	mvn.w	r1, #14
 8007474:	4610      	mov	r0, r2
 8007476:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	480a      	ldr	r0, [pc, #40]	; (80074a4 <tcp_input_delayed_close+0x7c>)
 800747c:	f7ff fa50 	bl	8006920 <tcp_pcb_remove>
    tcp_free(pcb);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fe f83d 	bl	8005500 <tcp_free>
    return 1;
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	08011904 	.word	0x08011904
 8007498:	08011ad4 	.word	0x08011ad4
 800749c:	08011950 	.word	0x08011950
 80074a0:	2000a491 	.word	0x2000a491
 80074a4:	2000a458 	.word	0x2000a458

080074a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80074a8:	b590      	push	{r4, r7, lr}
 80074aa:	b08b      	sub	sp, #44	; 0x2c
 80074ac:	af04      	add	r7, sp, #16
 80074ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80074b0:	4b6f      	ldr	r3, [pc, #444]	; (8007670 <tcp_listen_input+0x1c8>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 80d2 	bne.w	8007662 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <tcp_listen_input+0x2a>
 80074c4:	4b6b      	ldr	r3, [pc, #428]	; (8007674 <tcp_listen_input+0x1cc>)
 80074c6:	f240 2281 	movw	r2, #641	; 0x281
 80074ca:	496b      	ldr	r1, [pc, #428]	; (8007678 <tcp_listen_input+0x1d0>)
 80074cc:	486b      	ldr	r0, [pc, #428]	; (800767c <tcp_listen_input+0x1d4>)
 80074ce:	f008 f9e1 	bl	800f894 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80074d2:	4b67      	ldr	r3, [pc, #412]	; (8007670 <tcp_listen_input+0x1c8>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d019      	beq.n	8007512 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80074de:	4b68      	ldr	r3, [pc, #416]	; (8007680 <tcp_listen_input+0x1d8>)
 80074e0:	6819      	ldr	r1, [r3, #0]
 80074e2:	4b68      	ldr	r3, [pc, #416]	; (8007684 <tcp_listen_input+0x1dc>)
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	4b67      	ldr	r3, [pc, #412]	; (8007688 <tcp_listen_input+0x1e0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074ee:	4b67      	ldr	r3, [pc, #412]	; (800768c <tcp_listen_input+0x1e4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80074f6:	4a65      	ldr	r2, [pc, #404]	; (800768c <tcp_listen_input+0x1e4>)
 80074f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80074fa:	8812      	ldrh	r2, [r2, #0]
 80074fc:	b292      	uxth	r2, r2
 80074fe:	9202      	str	r2, [sp, #8]
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	4b63      	ldr	r3, [pc, #396]	; (8007690 <tcp_listen_input+0x1e8>)
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	4b63      	ldr	r3, [pc, #396]	; (8007694 <tcp_listen_input+0x1ec>)
 8007508:	4602      	mov	r2, r0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f002 ff80 	bl	800a410 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007510:	e0a9      	b.n	8007666 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007512:	4b57      	ldr	r3, [pc, #348]	; (8007670 <tcp_listen_input+0x1c8>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 80a3 	beq.w	8007666 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	7d5b      	ldrb	r3, [r3, #21]
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff f927 	bl	8006778 <tcp_alloc>
 800752a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d111      	bne.n	8007556 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <tcp_listen_input+0xa8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6910      	ldr	r0, [r2, #16]
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	2100      	movs	r1, #0
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	73bb      	strb	r3, [r7, #14]
      return;
 800754e:	e08b      	b.n	8007668 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007550:	23f0      	movs	r3, #240	; 0xf0
 8007552:	73bb      	strb	r3, [r7, #14]
      return;
 8007554:	e088      	b.n	8007668 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007556:	4b50      	ldr	r3, [pc, #320]	; (8007698 <tcp_listen_input+0x1f0>)
 8007558:	695a      	ldr	r2, [r3, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800755e:	4b4e      	ldr	r3, [pc, #312]	; (8007698 <tcp_listen_input+0x1f0>)
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8ada      	ldrh	r2, [r3, #22]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800756e:	4b47      	ldr	r3, [pc, #284]	; (800768c <tcp_listen_input+0x1e4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2203      	movs	r2, #3
 800757e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007580:	4b41      	ldr	r3, [pc, #260]	; (8007688 <tcp_listen_input+0x1e0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007592:	6978      	ldr	r0, [r7, #20]
 8007594:	f7ff fa58 	bl	8006a48 <tcp_next_iss>
 8007598:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80075b2:	4b35      	ldr	r3, [pc, #212]	; (8007688 <tcp_listen_input+0x1e0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	1e5a      	subs	r2, r3, #1
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7a5b      	ldrb	r3, [r3, #9]
 80075ce:	f003 030c 	and.w	r3, r3, #12
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7a1a      	ldrb	r2, [r3, #8]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80075e0:	4b2e      	ldr	r3, [pc, #184]	; (800769c <tcp_listen_input+0x1f4>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	60da      	str	r2, [r3, #12]
 80075e8:	4a2c      	ldr	r2, [pc, #176]	; (800769c <tcp_listen_input+0x1f4>)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	f003 f8d1 	bl	800a794 <tcp_timer_needed>
 80075f2:	4b2b      	ldr	r3, [pc, #172]	; (80076a0 <tcp_listen_input+0x1f8>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80075f8:	6978      	ldr	r0, [r7, #20]
 80075fa:	f001 fd8f 	bl	800911c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80075fe:	4b23      	ldr	r3, [pc, #140]	; (800768c <tcp_listen_input+0x1e4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	89db      	ldrh	r3, [r3, #14]
 8007604:	b29a      	uxth	r2, r3
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	3304      	adds	r3, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f006 fe2d 	bl	800e280 <ip4_route>
 8007626:	4601      	mov	r1, r0
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	3304      	adds	r3, #4
 800762c:	461a      	mov	r2, r3
 800762e:	4620      	mov	r0, r4
 8007630:	f7ff fa30 	bl	8006a94 <tcp_eff_send_mss_netif>
 8007634:	4603      	mov	r3, r0
 8007636:	461a      	mov	r2, r3
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800763c:	2112      	movs	r1, #18
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f002 f844 	bl	80096cc <tcp_enqueue_flags>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d004      	beq.n	800765a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007650:	2100      	movs	r1, #0
 8007652:	6978      	ldr	r0, [r7, #20]
 8007654:	f7fe f97e 	bl	8005954 <tcp_abandon>
      return;
 8007658:	e006      	b.n	8007668 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800765a:	6978      	ldr	r0, [r7, #20]
 800765c:	f002 f924 	bl	80098a8 <tcp_output>
  return;
 8007660:	e001      	b.n	8007666 <tcp_listen_input+0x1be>
    return;
 8007662:	bf00      	nop
 8007664:	e000      	b.n	8007668 <tcp_listen_input+0x1c0>
  return;
 8007666:	bf00      	nop
}
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd90      	pop	{r4, r7, pc}
 800766e:	bf00      	nop
 8007670:	2000a490 	.word	0x2000a490
 8007674:	08011904 	.word	0x08011904
 8007678:	08011afc 	.word	0x08011afc
 800767c:	08011950 	.word	0x08011950
 8007680:	2000a488 	.word	0x2000a488
 8007684:	2000a48e 	.word	0x2000a48e
 8007688:	2000a484 	.word	0x2000a484
 800768c:	2000a474 	.word	0x2000a474
 8007690:	20004d0c 	.word	0x20004d0c
 8007694:	20004d10 	.word	0x20004d10
 8007698:	20004cfc 	.word	0x20004cfc
 800769c:	2000a458 	.word	0x2000a458
 80076a0:	2000a460 	.word	0x2000a460

080076a4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af04      	add	r7, sp, #16
 80076aa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80076ac:	4b2f      	ldr	r3, [pc, #188]	; (800776c <tcp_timewait_input+0xc8>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d153      	bne.n	8007760 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <tcp_timewait_input+0x28>
 80076be:	4b2c      	ldr	r3, [pc, #176]	; (8007770 <tcp_timewait_input+0xcc>)
 80076c0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80076c4:	492b      	ldr	r1, [pc, #172]	; (8007774 <tcp_timewait_input+0xd0>)
 80076c6:	482c      	ldr	r0, [pc, #176]	; (8007778 <tcp_timewait_input+0xd4>)
 80076c8:	f008 f8e4 	bl	800f894 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80076cc:	4b27      	ldr	r3, [pc, #156]	; (800776c <tcp_timewait_input+0xc8>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d02a      	beq.n	800772e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80076d8:	4b28      	ldr	r3, [pc, #160]	; (800777c <tcp_timewait_input+0xd8>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	db2d      	blt.n	8007742 <tcp_timewait_input+0x9e>
 80076e6:	4b25      	ldr	r3, [pc, #148]	; (800777c <tcp_timewait_input+0xd8>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076f2:	440b      	add	r3, r1
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	dc23      	bgt.n	8007742 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076fa:	4b21      	ldr	r3, [pc, #132]	; (8007780 <tcp_timewait_input+0xdc>)
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	4b21      	ldr	r3, [pc, #132]	; (8007784 <tcp_timewait_input+0xe0>)
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <tcp_timewait_input+0xd8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <tcp_timewait_input+0xe4>)
 800770c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007712:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <tcp_timewait_input+0xe4>)
 8007714:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007716:	8812      	ldrh	r2, [r2, #0]
 8007718:	b292      	uxth	r2, r2
 800771a:	9202      	str	r2, [sp, #8]
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	4b1b      	ldr	r3, [pc, #108]	; (800778c <tcp_timewait_input+0xe8>)
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <tcp_timewait_input+0xec>)
 8007724:	4602      	mov	r2, r0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f002 fe72 	bl	800a410 <tcp_rst>
      return;
 800772c:	e01b      	b.n	8007766 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <tcp_timewait_input+0xc8>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800773a:	4b16      	ldr	r3, [pc, #88]	; (8007794 <tcp_timewait_input+0xf0>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007742:	4b10      	ldr	r3, [pc, #64]	; (8007784 <tcp_timewait_input+0xe0>)
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	8b5b      	ldrh	r3, [r3, #26]
 800774e:	f043 0302 	orr.w	r3, r3, #2
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f002 f8a5 	bl	80098a8 <tcp_output>
  }
  return;
 800775e:	e001      	b.n	8007764 <tcp_timewait_input+0xc0>
    return;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <tcp_timewait_input+0xc2>
  return;
 8007764:	bf00      	nop
}
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	2000a490 	.word	0x2000a490
 8007770:	08011904 	.word	0x08011904
 8007774:	08011b1c 	.word	0x08011b1c
 8007778:	08011950 	.word	0x08011950
 800777c:	2000a484 	.word	0x2000a484
 8007780:	2000a488 	.word	0x2000a488
 8007784:	2000a48e 	.word	0x2000a48e
 8007788:	2000a474 	.word	0x2000a474
 800778c:	20004d0c 	.word	0x20004d0c
 8007790:	20004d10 	.word	0x20004d10
 8007794:	2000a44c 	.word	0x2000a44c

08007798 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b08d      	sub	sp, #52	; 0x34
 800779c:	af04      	add	r7, sp, #16
 800779e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <tcp_process+0x24>
 80077ae:	4b9d      	ldr	r3, [pc, #628]	; (8007a24 <tcp_process+0x28c>)
 80077b0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80077b4:	499c      	ldr	r1, [pc, #624]	; (8007a28 <tcp_process+0x290>)
 80077b6:	489d      	ldr	r0, [pc, #628]	; (8007a2c <tcp_process+0x294>)
 80077b8:	f008 f86c 	bl	800f894 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80077bc:	4b9c      	ldr	r3, [pc, #624]	; (8007a30 <tcp_process+0x298>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d04e      	beq.n	8007866 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	7d1b      	ldrb	r3, [r3, #20]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d108      	bne.n	80077e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077d4:	4b97      	ldr	r3, [pc, #604]	; (8007a34 <tcp_process+0x29c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d123      	bne.n	8007824 <tcp_process+0x8c>
        acceptable = 1;
 80077dc:	2301      	movs	r3, #1
 80077de:	76fb      	strb	r3, [r7, #27]
 80077e0:	e020      	b.n	8007824 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e6:	4b94      	ldr	r3, [pc, #592]	; (8007a38 <tcp_process+0x2a0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d102      	bne.n	80077f4 <tcp_process+0x5c>
        acceptable = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	76fb      	strb	r3, [r7, #27]
 80077f2:	e017      	b.n	8007824 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80077f4:	4b90      	ldr	r3, [pc, #576]	; (8007a38 <tcp_process+0x2a0>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	db10      	blt.n	8007824 <tcp_process+0x8c>
 8007802:	4b8d      	ldr	r3, [pc, #564]	; (8007a38 <tcp_process+0x2a0>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800780e:	440b      	add	r3, r1
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	dc06      	bgt.n	8007824 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8b5b      	ldrh	r3, [r3, #26]
 800781a:	f043 0302 	orr.w	r3, r3, #2
 800781e:	b29a      	uxth	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007824:	7efb      	ldrb	r3, [r7, #27]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d01b      	beq.n	8007862 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7d1b      	ldrb	r3, [r3, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <tcp_process+0xa8>
 8007832:	4b7c      	ldr	r3, [pc, #496]	; (8007a24 <tcp_process+0x28c>)
 8007834:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007838:	4980      	ldr	r1, [pc, #512]	; (8007a3c <tcp_process+0x2a4>)
 800783a:	487c      	ldr	r0, [pc, #496]	; (8007a2c <tcp_process+0x294>)
 800783c:	f008 f82a 	bl	800f894 <iprintf>
      recv_flags |= TF_RESET;
 8007840:	4b7f      	ldr	r3, [pc, #508]	; (8007a40 <tcp_process+0x2a8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f043 0308 	orr.w	r3, r3, #8
 8007848:	b2da      	uxtb	r2, r3
 800784a:	4b7d      	ldr	r3, [pc, #500]	; (8007a40 <tcp_process+0x2a8>)
 800784c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8b5b      	ldrh	r3, [r3, #26]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800785c:	f06f 030d 	mvn.w	r3, #13
 8007860:	e37a      	b.n	8007f58 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e378      	b.n	8007f58 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007866:	4b72      	ldr	r3, [pc, #456]	; (8007a30 <tcp_process+0x298>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d010      	beq.n	8007894 <tcp_process+0xfc>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7d1b      	ldrb	r3, [r3, #20]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d00c      	beq.n	8007894 <tcp_process+0xfc>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7d1b      	ldrb	r3, [r3, #20]
 800787e:	2b03      	cmp	r3, #3
 8007880:	d008      	beq.n	8007894 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	8b5b      	ldrh	r3, [r3, #26]
 8007886:	f043 0302 	orr.w	r3, r3, #2
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	e361      	b.n	8007f58 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8b5b      	ldrh	r3, [r3, #26]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80078a0:	4b68      	ldr	r3, [pc, #416]	; (8007a44 <tcp_process+0x2ac>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 fc2f 	bl	800911c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7d1b      	ldrb	r3, [r3, #20]
 80078c2:	3b02      	subs	r3, #2
 80078c4:	2b07      	cmp	r3, #7
 80078c6:	f200 8337 	bhi.w	8007f38 <tcp_process+0x7a0>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <tcp_process+0x138>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	08007b21 	.word	0x08007b21
 80078d8:	08007c99 	.word	0x08007c99
 80078dc:	08007cc3 	.word	0x08007cc3
 80078e0:	08007de7 	.word	0x08007de7
 80078e4:	08007c99 	.word	0x08007c99
 80078e8:	08007e73 	.word	0x08007e73
 80078ec:	08007f03 	.word	0x08007f03
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80078f0:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <tcp_process+0x298>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 80e4 	beq.w	8007ac6 <tcp_process+0x32e>
 80078fe:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <tcp_process+0x298>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80dd 	beq.w	8007ac6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	4b48      	ldr	r3, [pc, #288]	; (8007a34 <tcp_process+0x29c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	f040 80d5 	bne.w	8007ac6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800791c:	4b46      	ldr	r3, [pc, #280]	; (8007a38 <tcp_process+0x2a0>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800792e:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <tcp_process+0x29c>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007936:	4b44      	ldr	r3, [pc, #272]	; (8007a48 <tcp_process+0x2b0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	89db      	ldrh	r3, [r3, #14]
 800793c:	b29a      	uxth	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007950:	4b39      	ldr	r3, [pc, #228]	; (8007a38 <tcp_process+0x2a0>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	1e5a      	subs	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2204      	movs	r2, #4
 800795e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4618      	mov	r0, r3
 800796a:	f006 fc89 	bl	800e280 <ip4_route>
 800796e:	4601      	mov	r1, r0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3304      	adds	r3, #4
 8007974:	461a      	mov	r2, r3
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff f88c 	bl	8006a94 <tcp_eff_send_mss_netif>
 800797c:	4603      	mov	r3, r0
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007988:	009a      	lsls	r2, r3, #2
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	f241 111c 	movw	r1, #4380	; 0x111c
 8007994:	428b      	cmp	r3, r1
 8007996:	bf38      	it	cc
 8007998:	460b      	movcc	r3, r1
 800799a:	429a      	cmp	r2, r3
 800799c:	d204      	bcs.n	80079a8 <tcp_process+0x210>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	e00d      	b.n	80079c4 <tcp_process+0x22c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d904      	bls.n	80079c0 <tcp_process+0x228>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	b29b      	uxth	r3, r3
 80079be:	e001      	b.n	80079c4 <tcp_process+0x22c>
 80079c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <tcp_process+0x24a>
 80079d4:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <tcp_process+0x28c>)
 80079d6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80079da:	491c      	ldr	r1, [pc, #112]	; (8007a4c <tcp_process+0x2b4>)
 80079dc:	4813      	ldr	r0, [pc, #76]	; (8007a2c <tcp_process+0x294>)
 80079de:	f007 ff59 	bl	800f894 <iprintf>
        --pcb->snd_queuelen;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d12a      	bne.n	8007a54 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a02:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d106      	bne.n	8007a18 <tcp_process+0x280>
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <tcp_process+0x28c>)
 8007a0c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007a10:	490f      	ldr	r1, [pc, #60]	; (8007a50 <tcp_process+0x2b8>)
 8007a12:	4806      	ldr	r0, [pc, #24]	; (8007a2c <tcp_process+0x294>)
 8007a14:	f007 ff3e 	bl	800f894 <iprintf>
          pcb->unsent = rseg->next;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007a20:	e01c      	b.n	8007a5c <tcp_process+0x2c4>
 8007a22:	bf00      	nop
 8007a24:	08011904 	.word	0x08011904
 8007a28:	08011b3c 	.word	0x08011b3c
 8007a2c:	08011950 	.word	0x08011950
 8007a30:	2000a490 	.word	0x2000a490
 8007a34:	2000a488 	.word	0x2000a488
 8007a38:	2000a484 	.word	0x2000a484
 8007a3c:	08011b58 	.word	0x08011b58
 8007a40:	2000a491 	.word	0x2000a491
 8007a44:	2000a44c 	.word	0x2000a44c
 8007a48:	2000a474 	.word	0x2000a474
 8007a4c:	08011b78 	.word	0x08011b78
 8007a50:	08011b90 	.word	0x08011b90
        } else {
          pcb->unacked = rseg->next;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007a5c:	69f8      	ldr	r0, [r7, #28]
 8007a5e:	f7fe fd22 	bl	80064a6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d104      	bne.n	8007a74 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a70:	861a      	strh	r2, [r3, #48]	; 0x30
 8007a72:	e006      	b.n	8007a82 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <tcp_process+0x30a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6910      	ldr	r0, [r2, #16]
 8007a96:	2200      	movs	r2, #0
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4798      	blx	r3
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	76bb      	strb	r3, [r7, #26]
 8007aa0:	e001      	b.n	8007aa6 <tcp_process+0x30e>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007aa6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007aaa:	f113 0f0d 	cmn.w	r3, #13
 8007aae:	d102      	bne.n	8007ab6 <tcp_process+0x31e>
          return ERR_ABRT;
 8007ab0:	f06f 030c 	mvn.w	r3, #12
 8007ab4:	e250      	b.n	8007f58 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8b5b      	ldrh	r3, [r3, #26]
 8007aba:	f043 0302 	orr.w	r3, r3, #2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007ac4:	e23a      	b.n	8007f3c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007ac6:	4b98      	ldr	r3, [pc, #608]	; (8007d28 <tcp_process+0x590>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8234 	beq.w	8007f3c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ad4:	4b95      	ldr	r3, [pc, #596]	; (8007d2c <tcp_process+0x594>)
 8007ad6:	6819      	ldr	r1, [r3, #0]
 8007ad8:	4b95      	ldr	r3, [pc, #596]	; (8007d30 <tcp_process+0x598>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b95      	ldr	r3, [pc, #596]	; (8007d34 <tcp_process+0x59c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ae4:	4b94      	ldr	r3, [pc, #592]	; (8007d38 <tcp_process+0x5a0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ae8:	885b      	ldrh	r3, [r3, #2]
 8007aea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aec:	4a92      	ldr	r2, [pc, #584]	; (8007d38 <tcp_process+0x5a0>)
 8007aee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af0:	8812      	ldrh	r2, [r2, #0]
 8007af2:	b292      	uxth	r2, r2
 8007af4:	9202      	str	r2, [sp, #8]
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	4b90      	ldr	r3, [pc, #576]	; (8007d3c <tcp_process+0x5a4>)
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4b90      	ldr	r3, [pc, #576]	; (8007d40 <tcp_process+0x5a8>)
 8007afe:	4602      	mov	r2, r0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f002 fc85 	bl	800a410 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	f200 8215 	bhi.w	8007f3c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f002 fa51 	bl	8009fc0 <tcp_rexmit_rto>
      break;
 8007b1e:	e20d      	b.n	8007f3c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007b20:	4b81      	ldr	r3, [pc, #516]	; (8007d28 <tcp_process+0x590>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	f003 0310 	and.w	r3, r3, #16
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80a1 	beq.w	8007c70 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007b2e:	4b7f      	ldr	r3, [pc, #508]	; (8007d2c <tcp_process+0x594>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db7e      	blt.n	8007c3c <tcp_process+0x4a4>
 8007b3e:	4b7b      	ldr	r3, [pc, #492]	; (8007d2c <tcp_process+0x594>)
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc77      	bgt.n	8007c3c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2204      	movs	r2, #4
 8007b50:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d102      	bne.n	8007b60 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007b5a:	23fa      	movs	r3, #250	; 0xfa
 8007b5c:	76bb      	strb	r3, [r7, #26]
 8007b5e:	e01d      	b.n	8007b9c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <tcp_process+0x3e0>
 8007b6a:	4b76      	ldr	r3, [pc, #472]	; (8007d44 <tcp_process+0x5ac>)
 8007b6c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007b70:	4975      	ldr	r1, [pc, #468]	; (8007d48 <tcp_process+0x5b0>)
 8007b72:	4876      	ldr	r0, [pc, #472]	; (8007d4c <tcp_process+0x5b4>)
 8007b74:	f007 fe8e 	bl	800f894 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <tcp_process+0x400>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6910      	ldr	r0, [r2, #16]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	76bb      	strb	r3, [r7, #26]
 8007b96:	e001      	b.n	8007b9c <tcp_process+0x404>
 8007b98:	23f0      	movs	r3, #240	; 0xf0
 8007b9a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007b9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007ba4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007ba8:	f113 0f0d 	cmn.w	r3, #13
 8007bac:	d002      	beq.n	8007bb4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7fd ff8e 	bl	8005ad0 <tcp_abort>
            }
            return ERR_ABRT;
 8007bb4:	f06f 030c 	mvn.w	r3, #12
 8007bb8:	e1ce      	b.n	8007f58 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fae0 	bl	8008180 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007bc0:	4b63      	ldr	r3, [pc, #396]	; (8007d50 <tcp_process+0x5b8>)
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <tcp_process+0x43c>
            recv_acked--;
 8007bc8:	4b61      	ldr	r3, [pc, #388]	; (8007d50 <tcp_process+0x5b8>)
 8007bca:	881b      	ldrh	r3, [r3, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	4b5f      	ldr	r3, [pc, #380]	; (8007d50 <tcp_process+0x5b8>)
 8007bd2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bd8:	009a      	lsls	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	f241 111c 	movw	r1, #4380	; 0x111c
 8007be4:	428b      	cmp	r3, r1
 8007be6:	bf38      	it	cc
 8007be8:	460b      	movcc	r3, r1
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d204      	bcs.n	8007bf8 <tcp_process+0x460>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	e00d      	b.n	8007c14 <tcp_process+0x47c>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	f241 121c 	movw	r2, #4380	; 0x111c
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d904      	bls.n	8007c10 <tcp_process+0x478>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	e001      	b.n	8007c14 <tcp_process+0x47c>
 8007c10:	f241 131c 	movw	r3, #4380	; 0x111c
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007c1a:	4b4e      	ldr	r3, [pc, #312]	; (8007d54 <tcp_process+0x5bc>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d037      	beq.n	8007c96 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	8b5b      	ldrh	r3, [r3, #26]
 8007c2a:	f043 0302 	orr.w	r3, r3, #2
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2207      	movs	r2, #7
 8007c38:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007c3a:	e02c      	b.n	8007c96 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <tcp_process+0x594>)
 8007c3e:	6819      	ldr	r1, [r3, #0]
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <tcp_process+0x598>)
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	4b3b      	ldr	r3, [pc, #236]	; (8007d34 <tcp_process+0x59c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c4c:	4b3a      	ldr	r3, [pc, #232]	; (8007d38 <tcp_process+0x5a0>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c54:	4a38      	ldr	r2, [pc, #224]	; (8007d38 <tcp_process+0x5a0>)
 8007c56:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c58:	8812      	ldrh	r2, [r2, #0]
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	9202      	str	r2, [sp, #8]
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	4b36      	ldr	r3, [pc, #216]	; (8007d3c <tcp_process+0x5a4>)
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <tcp_process+0x5a8>)
 8007c66:	4602      	mov	r2, r0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f002 fbd1 	bl	800a410 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007c6e:	e167      	b.n	8007f40 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007c70:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <tcp_process+0x590>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8161 	beq.w	8007f40 <tcp_process+0x7a8>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	1e5a      	subs	r2, r3, #1
 8007c84:	4b2b      	ldr	r3, [pc, #172]	; (8007d34 <tcp_process+0x59c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	f040 8159 	bne.w	8007f40 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f002 f9b8 	bl	800a004 <tcp_rexmit>
      break;
 8007c94:	e154      	b.n	8007f40 <tcp_process+0x7a8>
 8007c96:	e153      	b.n	8007f40 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa71 	bl	8008180 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007c9e:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <tcp_process+0x5bc>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 814c 	beq.w	8007f44 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8b5b      	ldrh	r3, [r3, #26]
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007cc0:	e140      	b.n	8007f44 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa5c 	bl	8008180 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007cc8:	4b22      	ldr	r3, [pc, #136]	; (8007d54 <tcp_process+0x5bc>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d071      	beq.n	8007db8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007cd4:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <tcp_process+0x590>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d060      	beq.n	8007da2 <tcp_process+0x60a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ce4:	4b11      	ldr	r3, [pc, #68]	; (8007d2c <tcp_process+0x594>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d15a      	bne.n	8007da2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d156      	bne.n	8007da2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8b5b      	ldrh	r3, [r3, #26]
 8007cf8:	f043 0302 	orr.w	r3, r3, #2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7fe fdbc 	bl	8006880 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007d08:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <tcp_process+0x5c0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d105      	bne.n	8007d1e <tcp_process+0x586>
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <tcp_process+0x5c0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	4a0f      	ldr	r2, [pc, #60]	; (8007d58 <tcp_process+0x5c0>)
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e02e      	b.n	8007d7c <tcp_process+0x5e4>
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <tcp_process+0x5c0>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	e027      	b.n	8007d76 <tcp_process+0x5de>
 8007d26:	bf00      	nop
 8007d28:	2000a490 	.word	0x2000a490
 8007d2c:	2000a488 	.word	0x2000a488
 8007d30:	2000a48e 	.word	0x2000a48e
 8007d34:	2000a484 	.word	0x2000a484
 8007d38:	2000a474 	.word	0x2000a474
 8007d3c:	20004d0c 	.word	0x20004d0c
 8007d40:	20004d10 	.word	0x20004d10
 8007d44:	08011904 	.word	0x08011904
 8007d48:	08011ba4 	.word	0x08011ba4
 8007d4c:	08011950 	.word	0x08011950
 8007d50:	2000a48c 	.word	0x2000a48c
 8007d54:	2000a491 	.word	0x2000a491
 8007d58:	2000a458 	.word	0x2000a458
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d104      	bne.n	8007d70 <tcp_process+0x5d8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	60da      	str	r2, [r3, #12]
 8007d6e:	e005      	b.n	8007d7c <tcp_process+0x5e4>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1ef      	bne.n	8007d5c <tcp_process+0x5c4>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	60da      	str	r2, [r3, #12]
 8007d82:	4b77      	ldr	r3, [pc, #476]	; (8007f60 <tcp_process+0x7c8>)
 8007d84:	2201      	movs	r2, #1
 8007d86:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007d8e:	4b75      	ldr	r3, [pc, #468]	; (8007f64 <tcp_process+0x7cc>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]
 8007d96:	4a73      	ldr	r2, [pc, #460]	; (8007f64 <tcp_process+0x7cc>)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	f002 fcfa 	bl	800a794 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007da0:	e0d2      	b.n	8007f48 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	8b5b      	ldrh	r3, [r3, #26]
 8007da6:	f043 0302 	orr.w	r3, r3, #2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2208      	movs	r2, #8
 8007db4:	751a      	strb	r2, [r3, #20]
      break;
 8007db6:	e0c7      	b.n	8007f48 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007db8:	4b6b      	ldr	r3, [pc, #428]	; (8007f68 <tcp_process+0x7d0>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80c1 	beq.w	8007f48 <tcp_process+0x7b0>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dca:	4b68      	ldr	r3, [pc, #416]	; (8007f6c <tcp_process+0x7d4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	f040 80ba 	bne.w	8007f48 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 80b5 	bne.w	8007f48 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2206      	movs	r2, #6
 8007de2:	751a      	strb	r2, [r3, #20]
      break;
 8007de4:	e0b0      	b.n	8007f48 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f9ca 	bl	8008180 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007dec:	4b60      	ldr	r3, [pc, #384]	; (8007f70 <tcp_process+0x7d8>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80a9 	beq.w	8007f4c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8b5b      	ldrh	r3, [r3, #26]
 8007dfe:	f043 0302 	orr.w	r3, r3, #2
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7fe fd39 	bl	8006880 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007e0e:	4b59      	ldr	r3, [pc, #356]	; (8007f74 <tcp_process+0x7dc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d105      	bne.n	8007e24 <tcp_process+0x68c>
 8007e18:	4b56      	ldr	r3, [pc, #344]	; (8007f74 <tcp_process+0x7dc>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	4a55      	ldr	r2, [pc, #340]	; (8007f74 <tcp_process+0x7dc>)
 8007e20:	6013      	str	r3, [r2, #0]
 8007e22:	e013      	b.n	8007e4c <tcp_process+0x6b4>
 8007e24:	4b53      	ldr	r3, [pc, #332]	; (8007f74 <tcp_process+0x7dc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	e00c      	b.n	8007e46 <tcp_process+0x6ae>
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d104      	bne.n	8007e40 <tcp_process+0x6a8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	60da      	str	r2, [r3, #12]
 8007e3e:	e005      	b.n	8007e4c <tcp_process+0x6b4>
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1ef      	bne.n	8007e2c <tcp_process+0x694>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	4b43      	ldr	r3, [pc, #268]	; (8007f60 <tcp_process+0x7c8>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220a      	movs	r2, #10
 8007e5c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007e5e:	4b41      	ldr	r3, [pc, #260]	; (8007f64 <tcp_process+0x7cc>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	4a3f      	ldr	r2, [pc, #252]	; (8007f64 <tcp_process+0x7cc>)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	f002 fc92 	bl	800a794 <tcp_timer_needed>
      }
      break;
 8007e70:	e06c      	b.n	8007f4c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f984 	bl	8008180 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007e78:	4b3b      	ldr	r3, [pc, #236]	; (8007f68 <tcp_process+0x7d0>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d065      	beq.n	8007f50 <tcp_process+0x7b8>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e88:	4b38      	ldr	r3, [pc, #224]	; (8007f6c <tcp_process+0x7d4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d15f      	bne.n	8007f50 <tcp_process+0x7b8>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d15b      	bne.n	8007f50 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fe fcf1 	bl	8006880 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007e9e:	4b35      	ldr	r3, [pc, #212]	; (8007f74 <tcp_process+0x7dc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d105      	bne.n	8007eb4 <tcp_process+0x71c>
 8007ea8:	4b32      	ldr	r3, [pc, #200]	; (8007f74 <tcp_process+0x7dc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	4a31      	ldr	r2, [pc, #196]	; (8007f74 <tcp_process+0x7dc>)
 8007eb0:	6013      	str	r3, [r2, #0]
 8007eb2:	e013      	b.n	8007edc <tcp_process+0x744>
 8007eb4:	4b2f      	ldr	r3, [pc, #188]	; (8007f74 <tcp_process+0x7dc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	e00c      	b.n	8007ed6 <tcp_process+0x73e>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d104      	bne.n	8007ed0 <tcp_process+0x738>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	60da      	str	r2, [r3, #12]
 8007ece:	e005      	b.n	8007edc <tcp_process+0x744>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1ef      	bne.n	8007ebc <tcp_process+0x724>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <tcp_process+0x7c8>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	220a      	movs	r2, #10
 8007eec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <tcp_process+0x7cc>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	60da      	str	r2, [r3, #12]
 8007ef6:	4a1b      	ldr	r2, [pc, #108]	; (8007f64 <tcp_process+0x7cc>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	f002 fc4a 	bl	800a794 <tcp_timer_needed>
      }
      break;
 8007f00:	e026      	b.n	8007f50 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f93c 	bl	8008180 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <tcp_process+0x7d0>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01f      	beq.n	8007f54 <tcp_process+0x7bc>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f18:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <tcp_process+0x7d4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d119      	bne.n	8007f54 <tcp_process+0x7bc>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d115      	bne.n	8007f54 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007f28:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <tcp_process+0x7d8>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	f043 0310 	orr.w	r3, r3, #16
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <tcp_process+0x7d8>)
 8007f34:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007f36:	e00d      	b.n	8007f54 <tcp_process+0x7bc>
    default:
      break;
 8007f38:	bf00      	nop
 8007f3a:	e00c      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e00a      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f40:	bf00      	nop
 8007f42:	e008      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f44:	bf00      	nop
 8007f46:	e006      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e004      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f4c:	bf00      	nop
 8007f4e:	e002      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f50:	bf00      	nop
 8007f52:	e000      	b.n	8007f56 <tcp_process+0x7be>
      break;
 8007f54:	bf00      	nop
  }
  return ERR_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3724      	adds	r7, #36	; 0x24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}
 8007f60:	2000a460 	.word	0x2000a460
 8007f64:	2000a45c 	.word	0x2000a45c
 8007f68:	2000a490 	.word	0x2000a490
 8007f6c:	2000a488 	.word	0x2000a488
 8007f70:	2000a491 	.word	0x2000a491
 8007f74:	2000a458 	.word	0x2000a458

08007f78 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <tcp_oos_insert_segment+0x1e>
 8007f88:	4b3b      	ldr	r3, [pc, #236]	; (8008078 <tcp_oos_insert_segment+0x100>)
 8007f8a:	f240 421f 	movw	r2, #1055	; 0x41f
 8007f8e:	493b      	ldr	r1, [pc, #236]	; (800807c <tcp_oos_insert_segment+0x104>)
 8007f90:	483b      	ldr	r0, [pc, #236]	; (8008080 <tcp_oos_insert_segment+0x108>)
 8007f92:	f007 fc7f 	bl	800f894 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	899b      	ldrh	r3, [r3, #12]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fb fc94 	bl	80038cc <lwip_htons>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d028      	beq.n	8008002 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007fb0:	6838      	ldr	r0, [r7, #0]
 8007fb2:	f7fe fa63 	bl	800647c <tcp_segs_free>
    next = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	603b      	str	r3, [r7, #0]
 8007fba:	e056      	b.n	800806a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	899b      	ldrh	r3, [r3, #12]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fb fc81 	bl	80038cc <lwip_htons>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	899b      	ldrh	r3, [r3, #12]
 8007fdc:	b29c      	uxth	r4, r3
 8007fde:	2001      	movs	r0, #1
 8007fe0:	f7fb fc74 	bl	80038cc <lwip_htons>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	4322      	orrs	r2, r4
 8007fee:	b292      	uxth	r2, r2
 8007ff0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7fe fa52 	bl	80064a6 <tcp_seg_free>
    while (next &&
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	891b      	ldrh	r3, [r3, #8]
 800800c:	461a      	mov	r2, r3
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <tcp_oos_insert_segment+0x10c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	441a      	add	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	8909      	ldrh	r1, [r1, #8]
 800801e:	440b      	add	r3, r1
 8008020:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008022:	2b00      	cmp	r3, #0
 8008024:	daca      	bge.n	8007fbc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01e      	beq.n	800806a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	891b      	ldrh	r3, [r3, #8]
 8008030:	461a      	mov	r2, r3
 8008032:	4b14      	ldr	r3, [pc, #80]	; (8008084 <tcp_oos_insert_segment+0x10c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	441a      	add	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008040:	2b00      	cmp	r3, #0
 8008042:	dd12      	ble.n	800806a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	b29a      	uxth	r2, r3
 800804c:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <tcp_oos_insert_segment+0x10c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	b29a      	uxth	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	891b      	ldrh	r3, [r3, #8]
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7fc fe15 	bl	8004c94 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	601a      	str	r2, [r3, #0]
}
 8008070:	bf00      	nop
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	bd90      	pop	{r4, r7, pc}
 8008078:	08011904 	.word	0x08011904
 800807c:	08011bc4 	.word	0x08011bc4
 8008080:	08011950 	.word	0x08011950
 8008084:	2000a484 	.word	0x2000a484

08008088 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008088:	b5b0      	push	{r4, r5, r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008096:	e03e      	b.n	8008116 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd f802 	bl	80050b0 <pbuf_clen>
 80080ac:	4603      	mov	r3, r0
 80080ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80080b6:	8a7a      	ldrh	r2, [r7, #18]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d906      	bls.n	80080ca <tcp_free_acked_segments+0x42>
 80080bc:	4b2a      	ldr	r3, [pc, #168]	; (8008168 <tcp_free_acked_segments+0xe0>)
 80080be:	f240 4257 	movw	r2, #1111	; 0x457
 80080c2:	492a      	ldr	r1, [pc, #168]	; (800816c <tcp_free_acked_segments+0xe4>)
 80080c4:	482a      	ldr	r0, [pc, #168]	; (8008170 <tcp_free_acked_segments+0xe8>)
 80080c6:	f007 fbe5 	bl	800f894 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80080d0:	8a7b      	ldrh	r3, [r7, #18]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	891a      	ldrh	r2, [r3, #8]
 80080e0:	4b24      	ldr	r3, [pc, #144]	; (8008174 <tcp_free_acked_segments+0xec>)
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	4b22      	ldr	r3, [pc, #136]	; (8008174 <tcp_free_acked_segments+0xec>)
 80080ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80080ec:	6978      	ldr	r0, [r7, #20]
 80080ee:	f7fe f9da 	bl	80064a6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00c      	beq.n	8008116 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d109      	bne.n	8008116 <tcp_free_acked_segments+0x8e>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <tcp_free_acked_segments+0x8e>
 8008108:	4b17      	ldr	r3, [pc, #92]	; (8008168 <tcp_free_acked_segments+0xe0>)
 800810a:	f240 4261 	movw	r2, #1121	; 0x461
 800810e:	491a      	ldr	r1, [pc, #104]	; (8008178 <tcp_free_acked_segments+0xf0>)
 8008110:	4817      	ldr	r0, [pc, #92]	; (8008170 <tcp_free_acked_segments+0xe8>)
 8008112:	f007 fbbf 	bl	800f894 <iprintf>
  while (seg_list != NULL &&
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d020      	beq.n	800815e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4618      	mov	r0, r3
 8008124:	f7fb fbe7 	bl	80038f6 <lwip_htonl>
 8008128:	4604      	mov	r4, r0
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	891b      	ldrh	r3, [r3, #8]
 800812e:	461d      	mov	r5, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	899b      	ldrh	r3, [r3, #12]
 8008136:	b29b      	uxth	r3, r3
 8008138:	4618      	mov	r0, r3
 800813a:	f7fb fbc7 	bl	80038cc <lwip_htons>
 800813e:	4603      	mov	r3, r0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <tcp_free_acked_segments+0xc6>
 800814a:	2301      	movs	r3, #1
 800814c:	e000      	b.n	8008150 <tcp_free_acked_segments+0xc8>
 800814e:	2300      	movs	r3, #0
 8008150:	442b      	add	r3, r5
 8008152:	18e2      	adds	r2, r4, r3
 8008154:	4b09      	ldr	r3, [pc, #36]	; (800817c <tcp_free_acked_segments+0xf4>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd9c      	ble.n	8008098 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800815e:	68bb      	ldr	r3, [r7, #8]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bdb0      	pop	{r4, r5, r7, pc}
 8008168:	08011904 	.word	0x08011904
 800816c:	08011bec 	.word	0x08011bec
 8008170:	08011950 	.word	0x08011950
 8008174:	2000a48c 	.word	0x2000a48c
 8008178:	08011c14 	.word	0x08011c14
 800817c:	2000a488 	.word	0x2000a488

08008180 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008180:	b5b0      	push	{r4, r5, r7, lr}
 8008182:	b094      	sub	sp, #80	; 0x50
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d106      	bne.n	80081a0 <tcp_receive+0x20>
 8008192:	4b91      	ldr	r3, [pc, #580]	; (80083d8 <tcp_receive+0x258>)
 8008194:	f240 427b 	movw	r2, #1147	; 0x47b
 8008198:	4990      	ldr	r1, [pc, #576]	; (80083dc <tcp_receive+0x25c>)
 800819a:	4891      	ldr	r0, [pc, #580]	; (80083e0 <tcp_receive+0x260>)
 800819c:	f007 fb7a 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7d1b      	ldrb	r3, [r3, #20]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d806      	bhi.n	80081b6 <tcp_receive+0x36>
 80081a8:	4b8b      	ldr	r3, [pc, #556]	; (80083d8 <tcp_receive+0x258>)
 80081aa:	f240 427c 	movw	r2, #1148	; 0x47c
 80081ae:	498d      	ldr	r1, [pc, #564]	; (80083e4 <tcp_receive+0x264>)
 80081b0:	488b      	ldr	r0, [pc, #556]	; (80083e0 <tcp_receive+0x260>)
 80081b2:	f007 fb6f 	bl	800f894 <iprintf>

  if (flags & TCP_ACK) {
 80081b6:	4b8c      	ldr	r3, [pc, #560]	; (80083e8 <tcp_receive+0x268>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 8264 	beq.w	800868c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d0:	4413      	add	r3, r2
 80081d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081d8:	4b84      	ldr	r3, [pc, #528]	; (80083ec <tcp_receive+0x26c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db1b      	blt.n	800821a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e6:	4b81      	ldr	r3, [pc, #516]	; (80083ec <tcp_receive+0x26c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d106      	bne.n	80081fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80081f2:	4b7f      	ldr	r3, [pc, #508]	; (80083f0 <tcp_receive+0x270>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	db0e      	blt.n	800821a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008200:	4b7b      	ldr	r3, [pc, #492]	; (80083f0 <tcp_receive+0x270>)
 8008202:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008204:	429a      	cmp	r2, r3
 8008206:	d125      	bne.n	8008254 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008208:	4b7a      	ldr	r3, [pc, #488]	; (80083f4 <tcp_receive+0x274>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	89db      	ldrh	r3, [r3, #14]
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008216:	429a      	cmp	r2, r3
 8008218:	d91c      	bls.n	8008254 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800821a:	4b76      	ldr	r3, [pc, #472]	; (80083f4 <tcp_receive+0x274>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	89db      	ldrh	r3, [r3, #14]
 8008220:	b29a      	uxth	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008234:	429a      	cmp	r2, r3
 8008236:	d205      	bcs.n	8008244 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008244:	4b69      	ldr	r3, [pc, #420]	; (80083ec <tcp_receive+0x26c>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800824c:	4b68      	ldr	r3, [pc, #416]	; (80083f0 <tcp_receive+0x270>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008254:	4b66      	ldr	r3, [pc, #408]	; (80083f0 <tcp_receive+0x270>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc58      	bgt.n	8008314 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008262:	4b65      	ldr	r3, [pc, #404]	; (80083f8 <tcp_receive+0x278>)
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d14b      	bne.n	8008302 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008274:	4413      	add	r3, r2
 8008276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008278:	429a      	cmp	r2, r3
 800827a:	d142      	bne.n	8008302 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008282:	2b00      	cmp	r3, #0
 8008284:	db3d      	blt.n	8008302 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800828a:	4b59      	ldr	r3, [pc, #356]	; (80083f0 <tcp_receive+0x270>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d137      	bne.n	8008302 <tcp_receive+0x182>
              found_dupack = 1;
 8008292:	2301      	movs	r3, #1
 8008294:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800829c:	2bff      	cmp	r3, #255	; 0xff
 800829e:	d007      	beq.n	80082b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082a6:	3301      	adds	r3, #1
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d91b      	bls.n	80082f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082c4:	4413      	add	r3, r2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d30a      	bcc.n	80082e8 <tcp_receive+0x168>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082dc:	4413      	add	r3, r2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082e6:	e004      	b.n	80082f2 <tcp_receive+0x172>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d902      	bls.n	8008302 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 feed 	bl	800a0dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 8161 	bne.w	80085cc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008312:	e15b      	b.n	80085cc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008314:	4b36      	ldr	r3, [pc, #216]	; (80083f0 <tcp_receive+0x270>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	f2c0 814e 	blt.w	80085c2 <tcp_receive+0x442>
 8008326:	4b32      	ldr	r3, [pc, #200]	; (80083f0 <tcp_receive+0x270>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	f300 8146 	bgt.w	80085c2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8b5b      	ldrh	r3, [r3, #26]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d010      	beq.n	8008364 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8b5b      	ldrh	r3, [r3, #26]
 8008346:	f023 0304 	bic.w	r3, r3, #4
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008372:	10db      	asrs	r3, r3, #3
 8008374:	b21b      	sxth	r3, r3
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	4413      	add	r3, r2
 8008382:	b29b      	uxth	r3, r3
 8008384:	b21a      	sxth	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800838c:	4b18      	ldr	r3, [pc, #96]	; (80083f0 <tcp_receive+0x270>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008396:	b29b      	uxth	r3, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80083a4:	4b12      	ldr	r3, [pc, #72]	; (80083f0 <tcp_receive+0x270>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7d1b      	ldrb	r3, [r3, #20]
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	f240 8097 	bls.w	80084e4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d245      	bcs.n	8008452 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8b5b      	ldrh	r3, [r3, #26]
 80083ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d014      	beq.n	80083fc <tcp_receive+0x27c>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e013      	b.n	80083fe <tcp_receive+0x27e>
 80083d6:	bf00      	nop
 80083d8:	08011904 	.word	0x08011904
 80083dc:	08011c34 	.word	0x08011c34
 80083e0:	08011950 	.word	0x08011950
 80083e4:	08011c50 	.word	0x08011c50
 80083e8:	2000a490 	.word	0x2000a490
 80083ec:	2000a484 	.word	0x2000a484
 80083f0:	2000a488 	.word	0x2000a488
 80083f4:	2000a474 	.word	0x2000a474
 80083f8:	2000a48e 	.word	0x2000a48e
 80083fc:	2302      	movs	r3, #2
 80083fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008402:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800840c:	fb12 f303 	smulbb	r3, r2, r3
 8008410:	b29b      	uxth	r3, r3
 8008412:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008414:	4293      	cmp	r3, r2
 8008416:	bf28      	it	cs
 8008418:	4613      	movcs	r3, r2
 800841a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008424:	4413      	add	r3, r2
 8008426:	b29a      	uxth	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800842e:	429a      	cmp	r2, r3
 8008430:	d309      	bcc.n	8008446 <tcp_receive+0x2c6>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800843a:	4413      	add	r3, r2
 800843c:	b29a      	uxth	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008444:	e04e      	b.n	80084e4 <tcp_receive+0x364>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800844c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008450:	e048      	b.n	80084e4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008458:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800845a:	4413      	add	r3, r2
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008464:	429a      	cmp	r2, r3
 8008466:	d309      	bcc.n	800847c <tcp_receive+0x2fc>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800846e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008470:	4413      	add	r3, r2
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800847a:	e004      	b.n	8008486 <tcp_receive+0x306>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008482:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008492:	429a      	cmp	r2, r3
 8008494:	d326      	bcc.n	80084e4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084b6:	4413      	add	r3, r2
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d30a      	bcc.n	80084da <tcp_receive+0x35a>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084ce:	4413      	add	r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80084d8:	e004      	b.n	80084e4 <tcp_receive+0x364>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ec:	4a98      	ldr	r2, [pc, #608]	; (8008750 <tcp_receive+0x5d0>)
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fdca 	bl	8008088 <tcp_free_acked_segments>
 80084f4:	4602      	mov	r2, r0
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	4a94      	ldr	r2, [pc, #592]	; (8008754 <tcp_receive+0x5d4>)
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7ff fdbf 	bl	8008088 <tcp_free_acked_segments>
 800850a:	4602      	mov	r2, r0
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008514:	2b00      	cmp	r3, #0
 8008516:	d104      	bne.n	8008522 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800851e:	861a      	strh	r2, [r3, #48]	; 0x30
 8008520:	e002      	b.n	8008528 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d103      	bne.n	800853e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008544:	4b84      	ldr	r3, [pc, #528]	; (8008758 <tcp_receive+0x5d8>)
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	4413      	add	r3, r2
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	8b5b      	ldrh	r3, [r3, #26]
 8008556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800855a:	2b00      	cmp	r3, #0
 800855c:	d035      	beq.n	80085ca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	2b00      	cmp	r3, #0
 8008564:	d118      	bne.n	8008598 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	4618      	mov	r0, r3
 800857c:	f7fb f9bb 	bl	80038f6 <lwip_htonl>
 8008580:	4603      	mov	r3, r0
 8008582:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008584:	2b00      	cmp	r3, #0
 8008586:	dc20      	bgt.n	80085ca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8b5b      	ldrh	r3, [r3, #26]
 800858c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008596:	e018      	b.n	80085ca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fb f9a6 	bl	80038f6 <lwip_htonl>
 80085aa:	4603      	mov	r3, r0
 80085ac:	1ae3      	subs	r3, r4, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dc0b      	bgt.n	80085ca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	8b5b      	ldrh	r3, [r3, #26]
 80085b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80085c0:	e003      	b.n	80085ca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 ff76 	bl	800a4b4 <tcp_send_empty_ack>
 80085c8:	e000      	b.n	80085cc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80085ca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d05b      	beq.n	800868c <tcp_receive+0x50c>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d8:	4b60      	ldr	r3, [pc, #384]	; (800875c <tcp_receive+0x5dc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da54      	bge.n	800868c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80085e2:	4b5f      	ldr	r3, [pc, #380]	; (8008760 <tcp_receive+0x5e0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80085f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008600:	10db      	asrs	r3, r3, #3
 8008602:	b21b      	sxth	r3, r3
 8008604:	b29b      	uxth	r3, r3
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	b29b      	uxth	r3, r3
 800860a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800861a:	4413      	add	r3, r2
 800861c:	b29b      	uxth	r3, r3
 800861e:	b21a      	sxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008624:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008628:	2b00      	cmp	r3, #0
 800862a:	da05      	bge.n	8008638 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800862c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008630:	425b      	negs	r3, r3
 8008632:	b29b      	uxth	r3, r3
 8008634:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008638:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008642:	109b      	asrs	r3, r3, #2
 8008644:	b21b      	sxth	r3, r3
 8008646:	b29b      	uxth	r3, r3
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	b29b      	uxth	r3, r3
 800864c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008656:	b29a      	uxth	r2, r3
 8008658:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800865c:	4413      	add	r3, r2
 800865e:	b29b      	uxth	r3, r3
 8008660:	b21a      	sxth	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800866c:	10db      	asrs	r3, r3, #3
 800866e:	b21b      	sxth	r3, r3
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008678:	b29b      	uxth	r3, r3
 800867a:	4413      	add	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	b21a      	sxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800868c:	4b35      	ldr	r3, [pc, #212]	; (8008764 <tcp_receive+0x5e4>)
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 84e2 	beq.w	800905a <tcp_receive+0xeda>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7d1b      	ldrb	r3, [r3, #20]
 800869a:	2b06      	cmp	r3, #6
 800869c:	f200 84dd 	bhi.w	800905a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086a4:	4b30      	ldr	r3, [pc, #192]	; (8008768 <tcp_receive+0x5e8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	3b01      	subs	r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f2c0 808f 	blt.w	80087d0 <tcp_receive+0x650>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b6:	4b2b      	ldr	r3, [pc, #172]	; (8008764 <tcp_receive+0x5e4>)
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <tcp_receive+0x5e8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	440b      	add	r3, r1
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	3301      	adds	r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f300 8082 	bgt.w	80087d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80086cc:	4b27      	ldr	r3, [pc, #156]	; (800876c <tcp_receive+0x5ec>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086d6:	4b24      	ldr	r3, [pc, #144]	; (8008768 <tcp_receive+0x5e8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80086de:	4b23      	ldr	r3, [pc, #140]	; (800876c <tcp_receive+0x5ec>)
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <tcp_receive+0x574>
 80086e6:	4b22      	ldr	r3, [pc, #136]	; (8008770 <tcp_receive+0x5f0>)
 80086e8:	f240 5294 	movw	r2, #1428	; 0x594
 80086ec:	4921      	ldr	r1, [pc, #132]	; (8008774 <tcp_receive+0x5f4>)
 80086ee:	4822      	ldr	r0, [pc, #136]	; (8008778 <tcp_receive+0x5f8>)
 80086f0:	f007 f8d0 	bl	800f894 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d906      	bls.n	800870c <tcp_receive+0x58c>
 80086fe:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <tcp_receive+0x5f0>)
 8008700:	f240 5295 	movw	r2, #1429	; 0x595
 8008704:	491d      	ldr	r1, [pc, #116]	; (800877c <tcp_receive+0x5fc>)
 8008706:	481c      	ldr	r0, [pc, #112]	; (8008778 <tcp_receive+0x5f8>)
 8008708:	f007 f8c4 	bl	800f894 <iprintf>
      off = (u16_t)off32;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008712:	4b16      	ldr	r3, [pc, #88]	; (800876c <tcp_receive+0x5ec>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	891b      	ldrh	r3, [r3, #8]
 8008718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800871c:	429a      	cmp	r2, r3
 800871e:	d906      	bls.n	800872e <tcp_receive+0x5ae>
 8008720:	4b13      	ldr	r3, [pc, #76]	; (8008770 <tcp_receive+0x5f0>)
 8008722:	f240 5297 	movw	r2, #1431	; 0x597
 8008726:	4916      	ldr	r1, [pc, #88]	; (8008780 <tcp_receive+0x600>)
 8008728:	4813      	ldr	r0, [pc, #76]	; (8008778 <tcp_receive+0x5f8>)
 800872a:	f007 f8b3 	bl	800f894 <iprintf>
      inseg.len -= off;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <tcp_receive+0x5ec>)
 8008730:	891a      	ldrh	r2, [r3, #8]
 8008732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	b29a      	uxth	r2, r3
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <tcp_receive+0x5ec>)
 800873c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <tcp_receive+0x5ec>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	891a      	ldrh	r2, [r3, #8]
 8008744:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800874c:	e02a      	b.n	80087a4 <tcp_receive+0x624>
 800874e:	bf00      	nop
 8008750:	08011c6c 	.word	0x08011c6c
 8008754:	08011c74 	.word	0x08011c74
 8008758:	2000a48c 	.word	0x2000a48c
 800875c:	2000a488 	.word	0x2000a488
 8008760:	2000a44c 	.word	0x2000a44c
 8008764:	2000a48e 	.word	0x2000a48e
 8008768:	2000a484 	.word	0x2000a484
 800876c:	2000a464 	.word	0x2000a464
 8008770:	08011904 	.word	0x08011904
 8008774:	08011c7c 	.word	0x08011c7c
 8008778:	08011950 	.word	0x08011950
 800877c:	08011c8c 	.word	0x08011c8c
 8008780:	08011c9c 	.word	0x08011c9c
        off -= p->len;
 8008784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008786:	895b      	ldrh	r3, [r3, #10]
 8008788:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008794:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008796:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879a:	2200      	movs	r2, #0
 800879c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800879e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80087a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a6:	895b      	ldrh	r3, [r3, #10]
 80087a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d8e9      	bhi.n	8008784 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80087b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80087b4:	4619      	mov	r1, r3
 80087b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80087b8:	f7fc fb6c 	bl	8004e94 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	4a91      	ldr	r2, [pc, #580]	; (8008a08 <tcp_receive+0x888>)
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	4b91      	ldr	r3, [pc, #580]	; (8008a0c <tcp_receive+0x88c>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	4a8f      	ldr	r2, [pc, #572]	; (8008a08 <tcp_receive+0x888>)
 80087ca:	6812      	ldr	r2, [r2, #0]
 80087cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80087ce:	e00d      	b.n	80087ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80087d0:	4b8d      	ldr	r3, [pc, #564]	; (8008a08 <tcp_receive+0x888>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	da06      	bge.n	80087ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	8b5b      	ldrh	r3, [r3, #26]
 80087e2:	f043 0302 	orr.w	r3, r3, #2
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80087ec:	4b86      	ldr	r3, [pc, #536]	; (8008a08 <tcp_receive+0x888>)
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f2c0 842a 	blt.w	8009050 <tcp_receive+0xed0>
 80087fc:	4b82      	ldr	r3, [pc, #520]	; (8008a08 <tcp_receive+0x888>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008808:	440b      	add	r3, r1
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	3301      	adds	r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	f300 841e 	bgt.w	8009050 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008818:	4b7b      	ldr	r3, [pc, #492]	; (8008a08 <tcp_receive+0x888>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	f040 829a 	bne.w	8008d56 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008822:	4b7a      	ldr	r3, [pc, #488]	; (8008a0c <tcp_receive+0x88c>)
 8008824:	891c      	ldrh	r4, [r3, #8]
 8008826:	4b79      	ldr	r3, [pc, #484]	; (8008a0c <tcp_receive+0x88c>)
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	899b      	ldrh	r3, [r3, #12]
 800882c:	b29b      	uxth	r3, r3
 800882e:	4618      	mov	r0, r3
 8008830:	f7fb f84c 	bl	80038cc <lwip_htons>
 8008834:	4603      	mov	r3, r0
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <tcp_receive+0x6c4>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <tcp_receive+0x6c6>
 8008844:	2300      	movs	r3, #0
 8008846:	4423      	add	r3, r4
 8008848:	b29a      	uxth	r2, r3
 800884a:	4b71      	ldr	r3, [pc, #452]	; (8008a10 <tcp_receive+0x890>)
 800884c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008852:	4b6f      	ldr	r3, [pc, #444]	; (8008a10 <tcp_receive+0x890>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d275      	bcs.n	8008946 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800885a:	4b6c      	ldr	r3, [pc, #432]	; (8008a0c <tcp_receive+0x88c>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	899b      	ldrh	r3, [r3, #12]
 8008860:	b29b      	uxth	r3, r3
 8008862:	4618      	mov	r0, r3
 8008864:	f7fb f832 	bl	80038cc <lwip_htons>
 8008868:	4603      	mov	r3, r0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d01f      	beq.n	80088b4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008874:	4b65      	ldr	r3, [pc, #404]	; (8008a0c <tcp_receive+0x88c>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	899b      	ldrh	r3, [r3, #12]
 800887a:	b29b      	uxth	r3, r3
 800887c:	b21b      	sxth	r3, r3
 800887e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008882:	b21c      	sxth	r4, r3
 8008884:	4b61      	ldr	r3, [pc, #388]	; (8008a0c <tcp_receive+0x88c>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	b29b      	uxth	r3, r3
 800888c:	4618      	mov	r0, r3
 800888e:	f7fb f81d 	bl	80038cc <lwip_htons>
 8008892:	4603      	mov	r3, r0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	b29b      	uxth	r3, r3
 8008898:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800889c:	b29b      	uxth	r3, r3
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fb f814 	bl	80038cc <lwip_htons>
 80088a4:	4603      	mov	r3, r0
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	4323      	orrs	r3, r4
 80088aa:	b21a      	sxth	r2, r3
 80088ac:	4b57      	ldr	r3, [pc, #348]	; (8008a0c <tcp_receive+0x88c>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	b292      	uxth	r2, r2
 80088b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80088b8:	4b54      	ldr	r3, [pc, #336]	; (8008a0c <tcp_receive+0x88c>)
 80088ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80088bc:	4b53      	ldr	r3, [pc, #332]	; (8008a0c <tcp_receive+0x88c>)
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	899b      	ldrh	r3, [r3, #12]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fb f801 	bl	80038cc <lwip_htons>
 80088ca:	4603      	mov	r3, r0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <tcp_receive+0x762>
            inseg.len -= 1;
 80088d6:	4b4d      	ldr	r3, [pc, #308]	; (8008a0c <tcp_receive+0x88c>)
 80088d8:	891b      	ldrh	r3, [r3, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	b29a      	uxth	r2, r3
 80088de:	4b4b      	ldr	r3, [pc, #300]	; (8008a0c <tcp_receive+0x88c>)
 80088e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80088e2:	4b4a      	ldr	r3, [pc, #296]	; (8008a0c <tcp_receive+0x88c>)
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	4a49      	ldr	r2, [pc, #292]	; (8008a0c <tcp_receive+0x88c>)
 80088e8:	8912      	ldrh	r2, [r2, #8]
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fc f9d1 	bl	8004c94 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80088f2:	4b46      	ldr	r3, [pc, #280]	; (8008a0c <tcp_receive+0x88c>)
 80088f4:	891c      	ldrh	r4, [r3, #8]
 80088f6:	4b45      	ldr	r3, [pc, #276]	; (8008a0c <tcp_receive+0x88c>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	899b      	ldrh	r3, [r3, #12]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fa ffe4 	bl	80038cc <lwip_htons>
 8008904:	4603      	mov	r3, r0
 8008906:	b2db      	uxtb	r3, r3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <tcp_receive+0x794>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <tcp_receive+0x796>
 8008914:	2300      	movs	r3, #0
 8008916:	4423      	add	r3, r4
 8008918:	b29a      	uxth	r2, r3
 800891a:	4b3d      	ldr	r3, [pc, #244]	; (8008a10 <tcp_receive+0x890>)
 800891c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800891e:	4b3c      	ldr	r3, [pc, #240]	; (8008a10 <tcp_receive+0x890>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <tcp_receive+0x888>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	441a      	add	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008932:	440b      	add	r3, r1
 8008934:	429a      	cmp	r2, r3
 8008936:	d006      	beq.n	8008946 <tcp_receive+0x7c6>
 8008938:	4b36      	ldr	r3, [pc, #216]	; (8008a14 <tcp_receive+0x894>)
 800893a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800893e:	4936      	ldr	r1, [pc, #216]	; (8008a18 <tcp_receive+0x898>)
 8008940:	4836      	ldr	r0, [pc, #216]	; (8008a1c <tcp_receive+0x89c>)
 8008942:	f006 ffa7 	bl	800f894 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 80e7 	beq.w	8008b1e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008950:	4b2e      	ldr	r3, [pc, #184]	; (8008a0c <tcp_receive+0x88c>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	899b      	ldrh	r3, [r3, #12]
 8008956:	b29b      	uxth	r3, r3
 8008958:	4618      	mov	r0, r3
 800895a:	f7fa ffb7 	bl	80038cc <lwip_htons>
 800895e:	4603      	mov	r3, r0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d010      	beq.n	800898c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800896a:	e00a      	b.n	8008982 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008970:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f7fd fd92 	bl	80064a6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f0      	bne.n	800896c <tcp_receive+0x7ec>
 800898a:	e0c8      	b.n	8008b1e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008990:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008992:	e052      	b.n	8008a3a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	899b      	ldrh	r3, [r3, #12]
 800899a:	b29b      	uxth	r3, r3
 800899c:	4618      	mov	r0, r3
 800899e:	f7fa ff95 	bl	80038cc <lwip_htons>
 80089a2:	4603      	mov	r3, r0
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d03d      	beq.n	8008a2a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80089ae:	4b17      	ldr	r3, [pc, #92]	; (8008a0c <tcp_receive+0x88c>)
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	899b      	ldrh	r3, [r3, #12]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fa ff88 	bl	80038cc <lwip_htons>
 80089bc:	4603      	mov	r3, r0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d130      	bne.n	8008a2a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80089c8:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <tcp_receive+0x88c>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	899b      	ldrh	r3, [r3, #12]
 80089ce:	b29c      	uxth	r4, r3
 80089d0:	2001      	movs	r0, #1
 80089d2:	f7fa ff7b 	bl	80038cc <lwip_htons>
 80089d6:	4603      	mov	r3, r0
 80089d8:	461a      	mov	r2, r3
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <tcp_receive+0x88c>)
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	4322      	orrs	r2, r4
 80089e0:	b292      	uxth	r2, r2
 80089e2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80089e4:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <tcp_receive+0x88c>)
 80089e6:	891c      	ldrh	r4, [r3, #8]
 80089e8:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <tcp_receive+0x88c>)
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	899b      	ldrh	r3, [r3, #12]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fa ff6b 	bl	80038cc <lwip_htons>
 80089f6:	4603      	mov	r3, r0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00e      	beq.n	8008a20 <tcp_receive+0x8a0>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e00d      	b.n	8008a22 <tcp_receive+0x8a2>
 8008a06:	bf00      	nop
 8008a08:	2000a484 	.word	0x2000a484
 8008a0c:	2000a464 	.word	0x2000a464
 8008a10:	2000a48e 	.word	0x2000a48e
 8008a14:	08011904 	.word	0x08011904
 8008a18:	08011cac 	.word	0x08011cac
 8008a1c:	08011950 	.word	0x08011950
 8008a20:	2300      	movs	r3, #0
 8008a22:	4423      	add	r3, r4
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	4b98      	ldr	r3, [pc, #608]	; (8008c88 <tcp_receive+0xb08>)
 8008a28:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008a34:	6938      	ldr	r0, [r7, #16]
 8008a36:	f7fd fd36 	bl	80064a6 <tcp_seg_free>
            while (next &&
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008a40:	4b91      	ldr	r3, [pc, #580]	; (8008c88 <tcp_receive+0xb08>)
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	4b91      	ldr	r3, [pc, #580]	; (8008c8c <tcp_receive+0xb0c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	441a      	add	r2, r3
 8008a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a54:	8909      	ldrh	r1, [r1, #8]
 8008a56:	440b      	add	r3, r1
 8008a58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da9a      	bge.n	8008994 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d059      	beq.n	8008b18 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8008a64:	4b88      	ldr	r3, [pc, #544]	; (8008c88 <tcp_receive+0xb08>)
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4b88      	ldr	r3, [pc, #544]	; (8008c8c <tcp_receive+0xb0c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	441a      	add	r2, r3
 8008a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dd4d      	ble.n	8008b18 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	4b81      	ldr	r3, [pc, #516]	; (8008c8c <tcp_receive+0xb0c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	4b80      	ldr	r3, [pc, #512]	; (8008c90 <tcp_receive+0xb10>)
 8008a90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008a92:	4b7f      	ldr	r3, [pc, #508]	; (8008c90 <tcp_receive+0xb10>)
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	899b      	ldrh	r3, [r3, #12]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fa ff16 	bl	80038cc <lwip_htons>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d005      	beq.n	8008ab8 <tcp_receive+0x938>
                inseg.len -= 1;
 8008aac:	4b78      	ldr	r3, [pc, #480]	; (8008c90 <tcp_receive+0xb10>)
 8008aae:	891b      	ldrh	r3, [r3, #8]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	4b76      	ldr	r3, [pc, #472]	; (8008c90 <tcp_receive+0xb10>)
 8008ab6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008ab8:	4b75      	ldr	r3, [pc, #468]	; (8008c90 <tcp_receive+0xb10>)
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4a74      	ldr	r2, [pc, #464]	; (8008c90 <tcp_receive+0xb10>)
 8008abe:	8912      	ldrh	r2, [r2, #8]
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fc f8e6 	bl	8004c94 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008ac8:	4b71      	ldr	r3, [pc, #452]	; (8008c90 <tcp_receive+0xb10>)
 8008aca:	891c      	ldrh	r4, [r3, #8]
 8008acc:	4b70      	ldr	r3, [pc, #448]	; (8008c90 <tcp_receive+0xb10>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	899b      	ldrh	r3, [r3, #12]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fa fef9 	bl	80038cc <lwip_htons>
 8008ada:	4603      	mov	r3, r0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <tcp_receive+0x96a>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <tcp_receive+0x96c>
 8008aea:	2300      	movs	r3, #0
 8008aec:	4423      	add	r3, r4
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	4b65      	ldr	r3, [pc, #404]	; (8008c88 <tcp_receive+0xb08>)
 8008af2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008af4:	4b64      	ldr	r3, [pc, #400]	; (8008c88 <tcp_receive+0xb08>)
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	4b64      	ldr	r3, [pc, #400]	; (8008c8c <tcp_receive+0xb0c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	441a      	add	r2, r3
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d006      	beq.n	8008b18 <tcp_receive+0x998>
 8008b0a:	4b62      	ldr	r3, [pc, #392]	; (8008c94 <tcp_receive+0xb14>)
 8008b0c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8008b10:	4961      	ldr	r1, [pc, #388]	; (8008c98 <tcp_receive+0xb18>)
 8008b12:	4862      	ldr	r0, [pc, #392]	; (8008c9c <tcp_receive+0xb1c>)
 8008b14:	f006 febe 	bl	800f894 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b1c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008b1e:	4b5a      	ldr	r3, [pc, #360]	; (8008c88 <tcp_receive+0xb08>)
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	4b59      	ldr	r3, [pc, #356]	; (8008c8c <tcp_receive+0xb0c>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	441a      	add	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b32:	4b55      	ldr	r3, [pc, #340]	; (8008c88 <tcp_receive+0xb08>)
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d206      	bcs.n	8008b48 <tcp_receive+0x9c8>
 8008b3a:	4b56      	ldr	r3, [pc, #344]	; (8008c94 <tcp_receive+0xb14>)
 8008b3c:	f240 6207 	movw	r2, #1543	; 0x607
 8008b40:	4957      	ldr	r1, [pc, #348]	; (8008ca0 <tcp_receive+0xb20>)
 8008b42:	4856      	ldr	r0, [pc, #344]	; (8008c9c <tcp_receive+0xb1c>)
 8008b44:	f006 fea6 	bl	800f894 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b4c:	4b4e      	ldr	r3, [pc, #312]	; (8008c88 <tcp_receive+0xb08>)
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7fc ffc5 	bl	8005ae8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008b5e:	4b4c      	ldr	r3, [pc, #304]	; (8008c90 <tcp_receive+0xb10>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	891b      	ldrh	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d006      	beq.n	8008b76 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8008b68:	4b49      	ldr	r3, [pc, #292]	; (8008c90 <tcp_receive+0xb10>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4a4d      	ldr	r2, [pc, #308]	; (8008ca4 <tcp_receive+0xb24>)
 8008b6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008b70:	4b47      	ldr	r3, [pc, #284]	; (8008c90 <tcp_receive+0xb10>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008b76:	4b46      	ldr	r3, [pc, #280]	; (8008c90 <tcp_receive+0xb10>)
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	899b      	ldrh	r3, [r3, #12]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fa fea4 	bl	80038cc <lwip_htons>
 8008b84:	4603      	mov	r3, r0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80b8 	beq.w	8008d02 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008b92:	4b45      	ldr	r3, [pc, #276]	; (8008ca8 <tcp_receive+0xb28>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f043 0320 	orr.w	r3, r3, #32
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	4b42      	ldr	r3, [pc, #264]	; (8008ca8 <tcp_receive+0xb28>)
 8008b9e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008ba0:	e0af      	b.n	8008d02 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4a36      	ldr	r2, [pc, #216]	; (8008c8c <tcp_receive+0xb0c>)
 8008bb2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	891b      	ldrh	r3, [r3, #8]
 8008bb8:	461c      	mov	r4, r3
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	899b      	ldrh	r3, [r3, #12]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fa fe82 	bl	80038cc <lwip_htons>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f003 0303 	and.w	r3, r3, #3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <tcp_receive+0xa58>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <tcp_receive+0xa5a>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	191a      	adds	r2, r3, r4
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	441a      	add	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bea:	461c      	mov	r4, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	891b      	ldrh	r3, [r3, #8]
 8008bf0:	461d      	mov	r5, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	899b      	ldrh	r3, [r3, #12]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fa fe66 	bl	80038cc <lwip_htons>
 8008c00:	4603      	mov	r3, r0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <tcp_receive+0xa90>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <tcp_receive+0xa92>
 8008c10:	2300      	movs	r3, #0
 8008c12:	442b      	add	r3, r5
 8008c14:	429c      	cmp	r4, r3
 8008c16:	d206      	bcs.n	8008c26 <tcp_receive+0xaa6>
 8008c18:	4b1e      	ldr	r3, [pc, #120]	; (8008c94 <tcp_receive+0xb14>)
 8008c1a:	f240 622b 	movw	r2, #1579	; 0x62b
 8008c1e:	4923      	ldr	r1, [pc, #140]	; (8008cac <tcp_receive+0xb2c>)
 8008c20:	481e      	ldr	r0, [pc, #120]	; (8008c9c <tcp_receive+0xb1c>)
 8008c22:	f006 fe37 	bl	800f894 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	891b      	ldrh	r3, [r3, #8]
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	899b      	ldrh	r3, [r3, #12]
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fa fe49 	bl	80038cc <lwip_htons>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <tcp_receive+0xaca>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <tcp_receive+0xacc>
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	1919      	adds	r1, r3, r4
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008c52:	b28b      	uxth	r3, r1
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7fc ff43 	bl	8005ae8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	891b      	ldrh	r3, [r3, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d028      	beq.n	8008cbe <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008c6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ca4 <tcp_receive+0xb24>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01d      	beq.n	8008cb0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8008c74:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <tcp_receive+0xb24>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f7fc fa50 	bl	8005124 <pbuf_cat>
 8008c84:	e018      	b.n	8008cb8 <tcp_receive+0xb38>
 8008c86:	bf00      	nop
 8008c88:	2000a48e 	.word	0x2000a48e
 8008c8c:	2000a484 	.word	0x2000a484
 8008c90:	2000a464 	.word	0x2000a464
 8008c94:	08011904 	.word	0x08011904
 8008c98:	08011ce4 	.word	0x08011ce4
 8008c9c:	08011950 	.word	0x08011950
 8008ca0:	08011d20 	.word	0x08011d20
 8008ca4:	2000a494 	.word	0x2000a494
 8008ca8:	2000a491 	.word	0x2000a491
 8008cac:	08011d40 	.word	0x08011d40
            } else {
              recv_data = cseg->p;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a70      	ldr	r2, [pc, #448]	; (8008e78 <tcp_receive+0xcf8>)
 8008cb6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	899b      	ldrh	r3, [r3, #12]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fa fe00 	bl	80038cc <lwip_htons>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00d      	beq.n	8008cf4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008cd8:	4b68      	ldr	r3, [pc, #416]	; (8008e7c <tcp_receive+0xcfc>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f043 0320 	orr.w	r3, r3, #32
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	4b66      	ldr	r3, [pc, #408]	; (8008e7c <tcp_receive+0xcfc>)
 8008ce4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	7d1b      	ldrb	r3, [r3, #20]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d102      	bne.n	8008cf4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008cfc:	68b8      	ldr	r0, [r7, #8]
 8008cfe:	f7fd fbd2 	bl	80064a6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d008      	beq.n	8008d1c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008d16:	429a      	cmp	r2, r3
 8008d18:	f43f af43 	beq.w	8008ba2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8b5b      	ldrh	r3, [r3, #26]
 8008d20:	f003 0301 	and.w	r3, r3, #1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00e      	beq.n	8008d46 <tcp_receive+0xbc6>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	8b5b      	ldrh	r3, [r3, #26]
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	835a      	strh	r2, [r3, #26]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	8b5b      	ldrh	r3, [r3, #26]
 8008d3a:	f043 0302 	orr.w	r3, r3, #2
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008d44:	e188      	b.n	8009058 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	8b5b      	ldrh	r3, [r3, #26]
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008d54:	e180      	b.n	8009058 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008d5e:	4848      	ldr	r0, [pc, #288]	; (8008e80 <tcp_receive+0xd00>)
 8008d60:	f7fd fbba 	bl	80064d8 <tcp_seg_copy>
 8008d64:	4602      	mov	r2, r0
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	675a      	str	r2, [r3, #116]	; 0x74
 8008d6a:	e16d      	b.n	8009048 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d76:	e157      	b.n	8009028 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	4b41      	ldr	r3, [pc, #260]	; (8008e84 <tcp_receive+0xd04>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d11d      	bne.n	8008dc2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008d86:	4b3e      	ldr	r3, [pc, #248]	; (8008e80 <tcp_receive+0xd00>)
 8008d88:	891a      	ldrh	r2, [r3, #8]
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	891b      	ldrh	r3, [r3, #8]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	f240 814f 	bls.w	8009032 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008d94:	483a      	ldr	r0, [pc, #232]	; (8008e80 <tcp_receive+0xd00>)
 8008d96:	f7fd fb9f 	bl	80064d8 <tcp_seg_copy>
 8008d9a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8149 	beq.w	8009036 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <tcp_receive+0xc32>
                    prev->next = cseg;
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e002      	b.n	8008db8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dba:	6978      	ldr	r0, [r7, #20]
 8008dbc:	f7ff f8dc 	bl	8007f78 <tcp_oos_insert_segment>
                }
                break;
 8008dc0:	e139      	b.n	8009036 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d117      	bne.n	8008df8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008dc8:	4b2e      	ldr	r3, [pc, #184]	; (8008e84 <tcp_receive+0xd04>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	da57      	bge.n	8008e88 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008dd8:	4829      	ldr	r0, [pc, #164]	; (8008e80 <tcp_receive+0xd00>)
 8008dda:	f7fd fb7d 	bl	80064d8 <tcp_seg_copy>
 8008dde:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 8129 	beq.w	800903a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008df0:	69b8      	ldr	r0, [r7, #24]
 8008df2:	f7ff f8c1 	bl	8007f78 <tcp_oos_insert_segment>
                  }
                  break;
 8008df6:	e120      	b.n	800903a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008df8:	4b22      	ldr	r3, [pc, #136]	; (8008e84 <tcp_receive+0xd04>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	db3e      	blt.n	8008e88 <tcp_receive+0xd08>
 8008e0a:	4b1e      	ldr	r3, [pc, #120]	; (8008e84 <tcp_receive+0xd04>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	3301      	adds	r3, #1
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dc35      	bgt.n	8008e88 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008e1c:	4818      	ldr	r0, [pc, #96]	; (8008e80 <tcp_receive+0xd00>)
 8008e1e:	f7fd fb5b 	bl	80064d8 <tcp_seg_copy>
 8008e22:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 8109 	beq.w	800903e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e34:	8912      	ldrh	r2, [r2, #8]
 8008e36:	441a      	add	r2, r3
 8008e38:	4b12      	ldr	r3, [pc, #72]	; (8008e84 <tcp_receive+0xd04>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd12      	ble.n	8008e68 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008e42:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <tcp_receive+0xd04>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5e:	891b      	ldrh	r3, [r3, #8]
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f7fb ff16 	bl	8004c94 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6a:	69fa      	ldr	r2, [r7, #28]
 8008e6c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008e6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e70:	69f8      	ldr	r0, [r7, #28]
 8008e72:	f7ff f881 	bl	8007f78 <tcp_oos_insert_segment>
                  }
                  break;
 8008e76:	e0e2      	b.n	800903e <tcp_receive+0xebe>
 8008e78:	2000a494 	.word	0x2000a494
 8008e7c:	2000a491 	.word	0x2000a491
 8008e80:	2000a464 	.word	0x2000a464
 8008e84:	2000a484 	.word	0x2000a484
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 80c6 	bne.w	8009022 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008e96:	4b80      	ldr	r3, [pc, #512]	; (8009098 <tcp_receive+0xf18>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f340 80bd 	ble.w	8009022 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	899b      	ldrh	r3, [r3, #12]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fa fd0b 	bl	80038cc <lwip_htons>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 80bf 	bne.w	8009042 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008ec4:	4875      	ldr	r0, [pc, #468]	; (800909c <tcp_receive+0xf1c>)
 8008ec6:	f7fd fb07 	bl	80064d8 <tcp_seg_copy>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80b6 	beq.w	8009046 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee2:	8912      	ldrh	r2, [r2, #8]
 8008ee4:	441a      	add	r2, r3
 8008ee6:	4b6c      	ldr	r3, [pc, #432]	; (8009098 <tcp_receive+0xf18>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dd12      	ble.n	8008f16 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008ef0:	4b69      	ldr	r3, [pc, #420]	; (8009098 <tcp_receive+0xf18>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	891b      	ldrh	r3, [r3, #8]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	4610      	mov	r0, r2
 8008f12:	f7fb febf 	bl	8004c94 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008f16:	4b62      	ldr	r3, [pc, #392]	; (80090a0 <tcp_receive+0xf20>)
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4b5e      	ldr	r3, [pc, #376]	; (8009098 <tcp_receive+0xf18>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	441a      	add	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f2a:	440b      	add	r3, r1
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f340 8089 	ble.w	8009046 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	899b      	ldrh	r3, [r3, #12]
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fa fcc4 	bl	80038cc <lwip_htons>
 8008f44:	4603      	mov	r3, r0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d022      	beq.n	8008f96 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	899b      	ldrh	r3, [r3, #12]
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	b21b      	sxth	r3, r3
 8008f5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f60:	b21c      	sxth	r4, r3
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	899b      	ldrh	r3, [r3, #12]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fa fcad 	bl	80038cc <lwip_htons>
 8008f72:	4603      	mov	r3, r0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fa fca4 	bl	80038cc <lwip_htons>
 8008f84:	4603      	mov	r3, r0
 8008f86:	b21b      	sxth	r3, r3
 8008f88:	4323      	orrs	r3, r4
 8008f8a:	b21a      	sxth	r2, r3
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	b292      	uxth	r2, r2
 8008f94:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa0:	4413      	add	r3, r2
 8008fa2:	b299      	uxth	r1, r3
 8008fa4:	4b3c      	ldr	r3, [pc, #240]	; (8009098 <tcp_receive+0xf18>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	1a8a      	subs	r2, r1, r2
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	891b      	ldrh	r3, [r3, #8]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f7fb fe66 	bl	8004c94 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	891c      	ldrh	r4, [r3, #8]
 8008fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	899b      	ldrh	r3, [r3, #12]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fa fc77 	bl	80038cc <lwip_htons>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <tcp_receive+0xe6e>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e000      	b.n	8008ff0 <tcp_receive+0xe70>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4423      	add	r3, r4
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	4b2a      	ldr	r3, [pc, #168]	; (80090a0 <tcp_receive+0xf20>)
 8008ff6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ff8:	4b29      	ldr	r3, [pc, #164]	; (80090a0 <tcp_receive+0xf20>)
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	4b26      	ldr	r3, [pc, #152]	; (8009098 <tcp_receive+0xf18>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	441a      	add	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800900c:	440b      	add	r3, r1
 800900e:	429a      	cmp	r2, r3
 8009010:	d019      	beq.n	8009046 <tcp_receive+0xec6>
 8009012:	4b24      	ldr	r3, [pc, #144]	; (80090a4 <tcp_receive+0xf24>)
 8009014:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009018:	4923      	ldr	r1, [pc, #140]	; (80090a8 <tcp_receive+0xf28>)
 800901a:	4824      	ldr	r0, [pc, #144]	; (80090ac <tcp_receive+0xf2c>)
 800901c:	f006 fc3a 	bl	800f894 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009020:	e011      	b.n	8009046 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	63bb      	str	r3, [r7, #56]	; 0x38
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	2b00      	cmp	r3, #0
 800902c:	f47f aea4 	bne.w	8008d78 <tcp_receive+0xbf8>
 8009030:	e00a      	b.n	8009048 <tcp_receive+0xec8>
                break;
 8009032:	bf00      	nop
 8009034:	e008      	b.n	8009048 <tcp_receive+0xec8>
                break;
 8009036:	bf00      	nop
 8009038:	e006      	b.n	8009048 <tcp_receive+0xec8>
                  break;
 800903a:	bf00      	nop
 800903c:	e004      	b.n	8009048 <tcp_receive+0xec8>
                  break;
 800903e:	bf00      	nop
 8009040:	e002      	b.n	8009048 <tcp_receive+0xec8>
                  break;
 8009042:	bf00      	nop
 8009044:	e000      	b.n	8009048 <tcp_receive+0xec8>
                break;
 8009046:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fa33 	bl	800a4b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800904e:	e003      	b.n	8009058 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 fa2f 	bl	800a4b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009056:	e01a      	b.n	800908e <tcp_receive+0xf0e>
 8009058:	e019      	b.n	800908e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800905a:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <tcp_receive+0xf18>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	db0a      	blt.n	800907e <tcp_receive+0xefe>
 8009068:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <tcp_receive+0xf18>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009074:	440b      	add	r3, r1
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	3301      	adds	r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	dd07      	ble.n	800908e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	8b5b      	ldrh	r3, [r3, #26]
 8009082:	f043 0302 	orr.w	r3, r3, #2
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800908c:	e7ff      	b.n	800908e <tcp_receive+0xf0e>
 800908e:	bf00      	nop
 8009090:	3750      	adds	r7, #80	; 0x50
 8009092:	46bd      	mov	sp, r7
 8009094:	bdb0      	pop	{r4, r5, r7, pc}
 8009096:	bf00      	nop
 8009098:	2000a484 	.word	0x2000a484
 800909c:	2000a464 	.word	0x2000a464
 80090a0:	2000a48e 	.word	0x2000a48e
 80090a4:	08011904 	.word	0x08011904
 80090a8:	08011cac 	.word	0x08011cac
 80090ac:	08011950 	.word	0x08011950

080090b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80090b6:	4b15      	ldr	r3, [pc, #84]	; (800910c <tcp_get_next_optbyte+0x5c>)
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	b291      	uxth	r1, r2
 80090be:	4a13      	ldr	r2, [pc, #76]	; (800910c <tcp_get_next_optbyte+0x5c>)
 80090c0:	8011      	strh	r1, [r2, #0]
 80090c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80090c4:	4b12      	ldr	r3, [pc, #72]	; (8009110 <tcp_get_next_optbyte+0x60>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <tcp_get_next_optbyte+0x26>
 80090cc:	4b11      	ldr	r3, [pc, #68]	; (8009114 <tcp_get_next_optbyte+0x64>)
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d208      	bcs.n	80090e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80090d6:	4b10      	ldr	r3, [pc, #64]	; (8009118 <tcp_get_next_optbyte+0x68>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3314      	adds	r3, #20
 80090dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80090de:	88fb      	ldrh	r3, [r7, #6]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	4413      	add	r3, r2
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	e00b      	b.n	8009100 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <tcp_get_next_optbyte+0x64>)
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <tcp_get_next_optbyte+0x60>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	797b      	ldrb	r3, [r7, #5]
 80090fc:	4413      	add	r3, r2
 80090fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	2000a480 	.word	0x2000a480
 8009110:	2000a47c 	.word	0x2000a47c
 8009114:	2000a47a 	.word	0x2000a47a
 8009118:	2000a474 	.word	0x2000a474

0800911c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <tcp_parseopt+0x1c>
 800912a:	4b32      	ldr	r3, [pc, #200]	; (80091f4 <tcp_parseopt+0xd8>)
 800912c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009130:	4931      	ldr	r1, [pc, #196]	; (80091f8 <tcp_parseopt+0xdc>)
 8009132:	4832      	ldr	r0, [pc, #200]	; (80091fc <tcp_parseopt+0xe0>)
 8009134:	f006 fbae 	bl	800f894 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009138:	4b31      	ldr	r3, [pc, #196]	; (8009200 <tcp_parseopt+0xe4>)
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d055      	beq.n	80091ec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009140:	4b30      	ldr	r3, [pc, #192]	; (8009204 <tcp_parseopt+0xe8>)
 8009142:	2200      	movs	r2, #0
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e045      	b.n	80091d4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009148:	f7ff ffb2 	bl	80090b0 <tcp_get_next_optbyte>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d006      	beq.n	8009164 <tcp_parseopt+0x48>
 8009156:	2b02      	cmp	r3, #2
 8009158:	dc2b      	bgt.n	80091b2 <tcp_parseopt+0x96>
 800915a:	2b00      	cmp	r3, #0
 800915c:	d041      	beq.n	80091e2 <tcp_parseopt+0xc6>
 800915e:	2b01      	cmp	r3, #1
 8009160:	d127      	bne.n	80091b2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009162:	e037      	b.n	80091d4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009164:	f7ff ffa4 	bl	80090b0 <tcp_get_next_optbyte>
 8009168:	4603      	mov	r3, r0
 800916a:	2b04      	cmp	r3, #4
 800916c:	d13b      	bne.n	80091e6 <tcp_parseopt+0xca>
 800916e:	4b25      	ldr	r3, [pc, #148]	; (8009204 <tcp_parseopt+0xe8>)
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	3301      	adds	r3, #1
 8009174:	4a22      	ldr	r2, [pc, #136]	; (8009200 <tcp_parseopt+0xe4>)
 8009176:	8812      	ldrh	r2, [r2, #0]
 8009178:	4293      	cmp	r3, r2
 800917a:	da34      	bge.n	80091e6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800917c:	f7ff ff98 	bl	80090b0 <tcp_get_next_optbyte>
 8009180:	4603      	mov	r3, r0
 8009182:	b29b      	uxth	r3, r3
 8009184:	021b      	lsls	r3, r3, #8
 8009186:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009188:	f7ff ff92 	bl	80090b0 <tcp_get_next_optbyte>
 800918c:	4603      	mov	r3, r0
 800918e:	b29a      	uxth	r2, r3
 8009190:	89bb      	ldrh	r3, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009196:	89bb      	ldrh	r3, [r7, #12]
 8009198:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800919c:	d804      	bhi.n	80091a8 <tcp_parseopt+0x8c>
 800919e:	89bb      	ldrh	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <tcp_parseopt+0x8c>
 80091a4:	89ba      	ldrh	r2, [r7, #12]
 80091a6:	e001      	b.n	80091ac <tcp_parseopt+0x90>
 80091a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80091b0:	e010      	b.n	80091d4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80091b2:	f7ff ff7d 	bl	80090b0 <tcp_get_next_optbyte>
 80091b6:	4603      	mov	r3, r0
 80091b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d914      	bls.n	80091ea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <tcp_parseopt+0xe8>)
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	4413      	add	r3, r2
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b02      	subs	r3, #2
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <tcp_parseopt+0xe8>)
 80091d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <tcp_parseopt+0xe8>)
 80091d6:	881a      	ldrh	r2, [r3, #0]
 80091d8:	4b09      	ldr	r3, [pc, #36]	; (8009200 <tcp_parseopt+0xe4>)
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d3b3      	bcc.n	8009148 <tcp_parseopt+0x2c>
 80091e0:	e004      	b.n	80091ec <tcp_parseopt+0xd0>
          return;
 80091e2:	bf00      	nop
 80091e4:	e002      	b.n	80091ec <tcp_parseopt+0xd0>
            return;
 80091e6:	bf00      	nop
 80091e8:	e000      	b.n	80091ec <tcp_parseopt+0xd0>
            return;
 80091ea:	bf00      	nop
      }
    }
  }
}
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	08011904 	.word	0x08011904
 80091f8:	08011d68 	.word	0x08011d68
 80091fc:	08011950 	.word	0x08011950
 8009200:	2000a478 	.word	0x2000a478
 8009204:	2000a480 	.word	0x2000a480

08009208 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <tcp_trigger_input_pcb_close+0x1c>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	f043 0310 	orr.w	r3, r3, #16
 8009214:	b2da      	uxtb	r2, r3
 8009216:	4b03      	ldr	r3, [pc, #12]	; (8009224 <tcp_trigger_input_pcb_close+0x1c>)
 8009218:	701a      	strb	r2, [r3, #0]
}
 800921a:	bf00      	nop
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	2000a491 	.word	0x2000a491

08009228 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <tcp_route+0x28>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	7a1b      	ldrb	r3, [r3, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d006      	beq.n	8009250 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	7a1b      	ldrb	r3, [r3, #8]
 8009246:	4618      	mov	r0, r3
 8009248:	f7fb fb4a 	bl	80048e0 <netif_get_by_index>
 800924c:	4603      	mov	r3, r0
 800924e:	e003      	b.n	8009258 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f005 f815 	bl	800e280 <ip4_route>
 8009256:	4603      	mov	r3, r0
  }
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <tcp_create_segment+0x22>
 8009276:	4b44      	ldr	r3, [pc, #272]	; (8009388 <tcp_create_segment+0x128>)
 8009278:	22a3      	movs	r2, #163	; 0xa3
 800927a:	4944      	ldr	r1, [pc, #272]	; (800938c <tcp_create_segment+0x12c>)
 800927c:	4844      	ldr	r0, [pc, #272]	; (8009390 <tcp_create_segment+0x130>)
 800927e:	f006 fb09 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d105      	bne.n	8009294 <tcp_create_segment+0x34>
 8009288:	4b3f      	ldr	r3, [pc, #252]	; (8009388 <tcp_create_segment+0x128>)
 800928a:	22a4      	movs	r2, #164	; 0xa4
 800928c:	4941      	ldr	r1, [pc, #260]	; (8009394 <tcp_create_segment+0x134>)
 800928e:	4840      	ldr	r0, [pc, #256]	; (8009390 <tcp_create_segment+0x130>)
 8009290:	f006 fb00 	bl	800f894 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009294:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80092a2:	2003      	movs	r0, #3
 80092a4:	f7fa ff8a 	bl	80041bc <memp_malloc>
 80092a8:	6138      	str	r0, [r7, #16]
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80092b0:	68b8      	ldr	r0, [r7, #8]
 80092b2:	f7fb fe75 	bl	8004fa0 <pbuf_free>
    return NULL;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e061      	b.n	800937e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80092c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	891a      	ldrh	r2, [r3, #8]
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d205      	bcs.n	80092e6 <tcp_create_segment+0x86>
 80092da:	4b2b      	ldr	r3, [pc, #172]	; (8009388 <tcp_create_segment+0x128>)
 80092dc:	22b0      	movs	r2, #176	; 0xb0
 80092de:	492e      	ldr	r1, [pc, #184]	; (8009398 <tcp_create_segment+0x138>)
 80092e0:	482b      	ldr	r0, [pc, #172]	; (8009390 <tcp_create_segment+0x130>)
 80092e2:	f006 fad7 	bl	800f894 <iprintf>
  seg->len = p->tot_len - optlen;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	891a      	ldrh	r2, [r3, #8]
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80092f6:	2114      	movs	r1, #20
 80092f8:	68b8      	ldr	r0, [r7, #8]
 80092fa:	f7fb fdbb 	bl	8004e74 <pbuf_add_header>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009304:	6938      	ldr	r0, [r7, #16]
 8009306:	f7fd f8ce 	bl	80064a6 <tcp_seg_free>
    return NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	e037      	b.n	800937e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8ada      	ldrh	r2, [r3, #22]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	68dc      	ldr	r4, [r3, #12]
 8009320:	4610      	mov	r0, r2
 8009322:	f7fa fad3 	bl	80038cc <lwip_htons>
 8009326:	4603      	mov	r3, r0
 8009328:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8b1a      	ldrh	r2, [r3, #24]
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	68dc      	ldr	r4, [r3, #12]
 8009332:	4610      	mov	r0, r2
 8009334:	f7fa faca 	bl	80038cc <lwip_htons>
 8009338:	4603      	mov	r3, r0
 800933a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	68dc      	ldr	r4, [r3, #12]
 8009340:	6838      	ldr	r0, [r7, #0]
 8009342:	f7fa fad8 	bl	80038f6 <lwip_htonl>
 8009346:	4603      	mov	r3, r0
 8009348:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	089b      	lsrs	r3, r3, #2
 800934e:	b2db      	uxtb	r3, r3
 8009350:	b29b      	uxth	r3, r3
 8009352:	3305      	adds	r3, #5
 8009354:	b29b      	uxth	r3, r3
 8009356:	031b      	lsls	r3, r3, #12
 8009358:	b29a      	uxth	r2, r3
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	b29b      	uxth	r3, r3
 800935e:	4313      	orrs	r3, r2
 8009360:	b29a      	uxth	r2, r3
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	68dc      	ldr	r4, [r3, #12]
 8009366:	4610      	mov	r0, r2
 8009368:	f7fa fab0 	bl	80038cc <lwip_htons>
 800936c:	4603      	mov	r3, r0
 800936e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	749a      	strb	r2, [r3, #18]
 8009378:	2200      	movs	r2, #0
 800937a:	74da      	strb	r2, [r3, #19]
  return seg;
 800937c:	693b      	ldr	r3, [r7, #16]
}
 800937e:	4618      	mov	r0, r3
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	bd90      	pop	{r4, r7, pc}
 8009386:	bf00      	nop
 8009388:	08011d84 	.word	0x08011d84
 800938c:	08011db8 	.word	0x08011db8
 8009390:	08011dd8 	.word	0x08011dd8
 8009394:	08011e00 	.word	0x08011e00
 8009398:	08011e24 	.word	0x08011e24

0800939c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b08b      	sub	sp, #44	; 0x2c
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61fb      	str	r3, [r7, #28]
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d106      	bne.n	80093c8 <tcp_split_unsent_seg+0x2c>
 80093ba:	4b95      	ldr	r3, [pc, #596]	; (8009610 <tcp_split_unsent_seg+0x274>)
 80093bc:	f240 324b 	movw	r2, #843	; 0x34b
 80093c0:	4994      	ldr	r1, [pc, #592]	; (8009614 <tcp_split_unsent_seg+0x278>)
 80093c2:	4895      	ldr	r0, [pc, #596]	; (8009618 <tcp_split_unsent_seg+0x27c>)
 80093c4:	f006 fa66 	bl	800f894 <iprintf>

  useg = pcb->unsent;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80093d4:	f04f 33ff 	mov.w	r3, #4294967295
 80093d8:	e116      	b.n	8009608 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80093da:	887b      	ldrh	r3, [r7, #2]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80093e0:	4b8b      	ldr	r3, [pc, #556]	; (8009610 <tcp_split_unsent_seg+0x274>)
 80093e2:	f240 3253 	movw	r2, #851	; 0x353
 80093e6:	498d      	ldr	r1, [pc, #564]	; (800961c <tcp_split_unsent_seg+0x280>)
 80093e8:	488b      	ldr	r0, [pc, #556]	; (8009618 <tcp_split_unsent_seg+0x27c>)
 80093ea:	f006 fa53 	bl	800f894 <iprintf>
    return ERR_VAL;
 80093ee:	f06f 0305 	mvn.w	r3, #5
 80093f2:	e109      	b.n	8009608 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	891b      	ldrh	r3, [r3, #8]
 80093f8:	887a      	ldrh	r2, [r7, #2]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d301      	bcc.n	8009402 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	e102      	b.n	8009608 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009406:	887a      	ldrh	r2, [r7, #2]
 8009408:	429a      	cmp	r2, r3
 800940a:	d906      	bls.n	800941a <tcp_split_unsent_seg+0x7e>
 800940c:	4b80      	ldr	r3, [pc, #512]	; (8009610 <tcp_split_unsent_seg+0x274>)
 800940e:	f240 325b 	movw	r2, #859	; 0x35b
 8009412:	4983      	ldr	r1, [pc, #524]	; (8009620 <tcp_split_unsent_seg+0x284>)
 8009414:	4880      	ldr	r0, [pc, #512]	; (8009618 <tcp_split_unsent_seg+0x27c>)
 8009416:	f006 fa3d 	bl	800f894 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	891b      	ldrh	r3, [r3, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <tcp_split_unsent_seg+0x94>
 8009422:	4b7b      	ldr	r3, [pc, #492]	; (8009610 <tcp_split_unsent_seg+0x274>)
 8009424:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009428:	497e      	ldr	r1, [pc, #504]	; (8009624 <tcp_split_unsent_seg+0x288>)
 800942a:	487b      	ldr	r0, [pc, #492]	; (8009618 <tcp_split_unsent_seg+0x27c>)
 800942c:	f006 fa32 	bl	800f894 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	7a9b      	ldrb	r3, [r3, #10]
 8009434:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	891a      	ldrh	r2, [r3, #8]
 8009446:	887b      	ldrh	r3, [r7, #2]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800944c:	7bbb      	ldrb	r3, [r7, #14]
 800944e:	b29a      	uxth	r2, r3
 8009450:	89bb      	ldrh	r3, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	b29b      	uxth	r3, r3
 8009456:	f44f 7220 	mov.w	r2, #640	; 0x280
 800945a:	4619      	mov	r1, r3
 800945c:	2036      	movs	r0, #54	; 0x36
 800945e:	f7fb fabb 	bl	80049d8 <pbuf_alloc>
 8009462:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80b7 	beq.w	80095da <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	891a      	ldrh	r2, [r3, #8]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	891b      	ldrh	r3, [r3, #8]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	b29a      	uxth	r2, r3
 800947a:	887b      	ldrh	r3, [r7, #2]
 800947c:	4413      	add	r3, r2
 800947e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	6858      	ldr	r0, [r3, #4]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	685a      	ldr	r2, [r3, #4]
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	18d1      	adds	r1, r2, r3
 800948c:	897b      	ldrh	r3, [r7, #10]
 800948e:	89ba      	ldrh	r2, [r7, #12]
 8009490:	f7fb ff80 	bl	8005394 <pbuf_copy_partial>
 8009494:	4603      	mov	r3, r0
 8009496:	461a      	mov	r2, r3
 8009498:	89bb      	ldrh	r3, [r7, #12]
 800949a:	4293      	cmp	r3, r2
 800949c:	f040 809f 	bne.w	80095de <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	899b      	ldrh	r3, [r3, #12]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fa fa0f 	bl	80038cc <lwip_htons>
 80094ae:	4603      	mov	r3, r0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80094b8:	2300      	movs	r3, #0
 80094ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80094bc:	7efb      	ldrb	r3, [r7, #27]
 80094be:	f003 0308 	and.w	r3, r3, #8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80094c6:	7efb      	ldrb	r3, [r7, #27]
 80094c8:	f023 0308 	bic.w	r3, r3, #8
 80094cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80094ce:	7ebb      	ldrb	r3, [r7, #26]
 80094d0:	f043 0308 	orr.w	r3, r3, #8
 80094d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80094d6:	7efb      	ldrb	r3, [r7, #27]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80094e0:	7efb      	ldrb	r3, [r7, #27]
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80094e8:	7ebb      	ldrb	r3, [r7, #26]
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fa f9fd 	bl	80038f6 <lwip_htonl>
 80094fc:	4602      	mov	r2, r0
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	18d1      	adds	r1, r2, r3
 8009502:	7eba      	ldrb	r2, [r7, #26]
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	460b      	mov	r3, r1
 800950a:	6939      	ldr	r1, [r7, #16]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7ff fea7 	bl	8009260 <tcp_create_segment>
 8009512:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d063      	beq.n	80095e2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	4618      	mov	r0, r3
 8009520:	f7fb fdc6 	bl	80050b0 <pbuf_clen>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800952e:	1a9b      	subs	r3, r3, r2
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	6858      	ldr	r0, [r3, #4]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	891a      	ldrh	r2, [r3, #8]
 8009542:	89bb      	ldrh	r3, [r7, #12]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	b29b      	uxth	r3, r3
 8009548:	4619      	mov	r1, r3
 800954a:	f7fb fba3 	bl	8004c94 <pbuf_realloc>
  useg->len -= remainder;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	891a      	ldrh	r2, [r3, #8]
 8009552:	89bb      	ldrh	r3, [r7, #12]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	b29a      	uxth	r2, r3
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	899b      	ldrh	r3, [r3, #12]
 8009562:	b29c      	uxth	r4, r3
 8009564:	7efb      	ldrb	r3, [r7, #27]
 8009566:	b29b      	uxth	r3, r3
 8009568:	4618      	mov	r0, r3
 800956a:	f7fa f9af 	bl	80038cc <lwip_htons>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	4322      	orrs	r2, r4
 8009578:	b292      	uxth	r2, r2
 800957a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4618      	mov	r0, r3
 8009582:	f7fb fd95 	bl	80050b0 <pbuf_clen>
 8009586:	4603      	mov	r3, r0
 8009588:	461a      	mov	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009590:	4413      	add	r3, r2
 8009592:	b29a      	uxth	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fb fd86 	bl	80050b0 <pbuf_clen>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80095ae:	4413      	add	r3, r2
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	69fa      	ldr	r2, [r7, #28]
 80095c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	e016      	b.n	8009608 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80095da:	bf00      	nop
 80095dc:	e002      	b.n	80095e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80095de:	bf00      	nop
 80095e0:	e000      	b.n	80095e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80095e2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <tcp_split_unsent_seg+0x25c>
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <tcp_split_unsent_seg+0x274>)
 80095ec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80095f0:	490d      	ldr	r1, [pc, #52]	; (8009628 <tcp_split_unsent_seg+0x28c>)
 80095f2:	4809      	ldr	r0, [pc, #36]	; (8009618 <tcp_split_unsent_seg+0x27c>)
 80095f4:	f006 f94e 	bl	800f894 <iprintf>
  if (p != NULL) {
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80095fe:	6938      	ldr	r0, [r7, #16]
 8009600:	f7fb fcce 	bl	8004fa0 <pbuf_free>
  }

  return ERR_MEM;
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009608:	4618      	mov	r0, r3
 800960a:	3724      	adds	r7, #36	; 0x24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd90      	pop	{r4, r7, pc}
 8009610:	08011d84 	.word	0x08011d84
 8009614:	08012118 	.word	0x08012118
 8009618:	08011dd8 	.word	0x08011dd8
 800961c:	0801213c 	.word	0x0801213c
 8009620:	08012160 	.word	0x08012160
 8009624:	08012170 	.word	0x08012170
 8009628:	08012180 	.word	0x08012180

0800962c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800962c:	b590      	push	{r4, r7, lr}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <tcp_send_fin+0x1c>
 800963a:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <tcp_send_fin+0x94>)
 800963c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009640:	4920      	ldr	r1, [pc, #128]	; (80096c4 <tcp_send_fin+0x98>)
 8009642:	4821      	ldr	r0, [pc, #132]	; (80096c8 <tcp_send_fin+0x9c>)
 8009644:	f006 f926 	bl	800f894 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d02e      	beq.n	80096ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	e002      	b.n	800965e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1f8      	bne.n	8009658 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	899b      	ldrh	r3, [r3, #12]
 800966c:	b29b      	uxth	r3, r3
 800966e:	4618      	mov	r0, r3
 8009670:	f7fa f92c 	bl	80038cc <lwip_htons>
 8009674:	4603      	mov	r3, r0
 8009676:	b2db      	uxtb	r3, r3
 8009678:	f003 0307 	and.w	r3, r3, #7
 800967c:	2b00      	cmp	r3, #0
 800967e:	d116      	bne.n	80096ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	899b      	ldrh	r3, [r3, #12]
 8009686:	b29c      	uxth	r4, r3
 8009688:	2001      	movs	r0, #1
 800968a:	f7fa f91f 	bl	80038cc <lwip_htons>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	4322      	orrs	r2, r4
 8009698:	b292      	uxth	r2, r2
 800969a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	8b5b      	ldrh	r3, [r3, #26]
 80096a0:	f043 0320 	orr.w	r3, r3, #32
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e004      	b.n	80096b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80096ae:	2101      	movs	r1, #1
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f80b 	bl	80096cc <tcp_enqueue_flags>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd90      	pop	{r4, r7, pc}
 80096c0:	08011d84 	.word	0x08011d84
 80096c4:	0801218c 	.word	0x0801218c
 80096c8:	08011dd8 	.word	0x08011dd8

080096cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08a      	sub	sp, #40	; 0x28
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <tcp_enqueue_flags+0x2c>
 80096ea:	4b67      	ldr	r3, [pc, #412]	; (8009888 <tcp_enqueue_flags+0x1bc>)
 80096ec:	f240 4211 	movw	r2, #1041	; 0x411
 80096f0:	4966      	ldr	r1, [pc, #408]	; (800988c <tcp_enqueue_flags+0x1c0>)
 80096f2:	4867      	ldr	r0, [pc, #412]	; (8009890 <tcp_enqueue_flags+0x1c4>)
 80096f4:	f006 f8ce 	bl	800f894 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d106      	bne.n	800970c <tcp_enqueue_flags+0x40>
 80096fe:	4b62      	ldr	r3, [pc, #392]	; (8009888 <tcp_enqueue_flags+0x1bc>)
 8009700:	f240 4213 	movw	r2, #1043	; 0x413
 8009704:	4963      	ldr	r1, [pc, #396]	; (8009894 <tcp_enqueue_flags+0x1c8>)
 8009706:	4862      	ldr	r0, [pc, #392]	; (8009890 <tcp_enqueue_flags+0x1c4>)
 8009708:	f006 f8c4 	bl	800f894 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d001      	beq.n	800971a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009716:	2301      	movs	r3, #1
 8009718:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800971a:	7ffb      	ldrb	r3, [r7, #31]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009726:	7dfb      	ldrb	r3, [r7, #23]
 8009728:	b29b      	uxth	r3, r3
 800972a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800972e:	4619      	mov	r1, r3
 8009730:	2036      	movs	r0, #54	; 0x36
 8009732:	f7fb f951 	bl	80049d8 <pbuf_alloc>
 8009736:	6138      	str	r0, [r7, #16]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	8b5b      	ldrh	r3, [r3, #26]
 8009742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009746:	b29a      	uxth	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800974c:	f04f 33ff 	mov.w	r3, #4294967295
 8009750:	e095      	b.n	800987e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	895a      	ldrh	r2, [r3, #10]
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	b29b      	uxth	r3, r3
 800975a:	429a      	cmp	r2, r3
 800975c:	d206      	bcs.n	800976c <tcp_enqueue_flags+0xa0>
 800975e:	4b4a      	ldr	r3, [pc, #296]	; (8009888 <tcp_enqueue_flags+0x1bc>)
 8009760:	f240 4239 	movw	r2, #1081	; 0x439
 8009764:	494c      	ldr	r1, [pc, #304]	; (8009898 <tcp_enqueue_flags+0x1cc>)
 8009766:	484a      	ldr	r0, [pc, #296]	; (8009890 <tcp_enqueue_flags+0x1c4>)
 8009768:	f006 f894 	bl	800f894 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009770:	78fa      	ldrb	r2, [r7, #3]
 8009772:	7ffb      	ldrb	r3, [r7, #31]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	460b      	mov	r3, r1
 8009778:	6939      	ldr	r1, [r7, #16]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fd70 	bl	8009260 <tcp_create_segment>
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d109      	bne.n	800979c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	8b5b      	ldrh	r3, [r3, #26]
 800978c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009790:	b29a      	uxth	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009796:	f04f 33ff 	mov.w	r3, #4294967295
 800979a:	e070      	b.n	800987e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <tcp_enqueue_flags+0xea>
 80097a8:	4b37      	ldr	r3, [pc, #220]	; (8009888 <tcp_enqueue_flags+0x1bc>)
 80097aa:	f240 4242 	movw	r2, #1090	; 0x442
 80097ae:	493b      	ldr	r1, [pc, #236]	; (800989c <tcp_enqueue_flags+0x1d0>)
 80097b0:	4837      	ldr	r0, [pc, #220]	; (8009890 <tcp_enqueue_flags+0x1c4>)
 80097b2:	f006 f86f 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	891b      	ldrh	r3, [r3, #8]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d006      	beq.n	80097cc <tcp_enqueue_flags+0x100>
 80097be:	4b32      	ldr	r3, [pc, #200]	; (8009888 <tcp_enqueue_flags+0x1bc>)
 80097c0:	f240 4243 	movw	r2, #1091	; 0x443
 80097c4:	4936      	ldr	r1, [pc, #216]	; (80098a0 <tcp_enqueue_flags+0x1d4>)
 80097c6:	4832      	ldr	r0, [pc, #200]	; (8009890 <tcp_enqueue_flags+0x1c4>)
 80097c8:	f006 f864 	bl	800f894 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80097da:	e00d      	b.n	80097f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	e002      	b.n	80097ea <tcp_enqueue_flags+0x11e>
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	61bb      	str	r3, [r7, #24]
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1f8      	bne.n	80097e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d104      	bne.n	8009814 <tcp_enqueue_flags+0x148>
 800980a:	78fb      	ldrb	r3, [r7, #3]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	8b5b      	ldrh	r3, [r3, #26]
 800982c:	f043 0320 	orr.w	r3, r3, #32
 8009830:	b29a      	uxth	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	4618      	mov	r0, r3
 800983c:	f7fb fc38 	bl	80050b0 <pbuf_clen>
 8009840:	4603      	mov	r3, r0
 8009842:	461a      	mov	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800984a:	4413      	add	r3, r2
 800984c:	b29a      	uxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00e      	beq.n	800987c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <tcp_enqueue_flags+0x1b0>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800986a:	2b00      	cmp	r3, #0
 800986c:	d106      	bne.n	800987c <tcp_enqueue_flags+0x1b0>
 800986e:	4b06      	ldr	r3, [pc, #24]	; (8009888 <tcp_enqueue_flags+0x1bc>)
 8009870:	f240 4265 	movw	r2, #1125	; 0x465
 8009874:	490b      	ldr	r1, [pc, #44]	; (80098a4 <tcp_enqueue_flags+0x1d8>)
 8009876:	4806      	ldr	r0, [pc, #24]	; (8009890 <tcp_enqueue_flags+0x1c4>)
 8009878:	f006 f80c 	bl	800f894 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	08011d84 	.word	0x08011d84
 800988c:	080121a8 	.word	0x080121a8
 8009890:	08011dd8 	.word	0x08011dd8
 8009894:	08012200 	.word	0x08012200
 8009898:	08012220 	.word	0x08012220
 800989c:	0801225c 	.word	0x0801225c
 80098a0:	08012274 	.word	0x08012274
 80098a4:	080122a0 	.word	0x080122a0

080098a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80098a8:	b5b0      	push	{r4, r5, r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <tcp_output+0x1c>
 80098b6:	4b8a      	ldr	r3, [pc, #552]	; (8009ae0 <tcp_output+0x238>)
 80098b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80098bc:	4989      	ldr	r1, [pc, #548]	; (8009ae4 <tcp_output+0x23c>)
 80098be:	488a      	ldr	r0, [pc, #552]	; (8009ae8 <tcp_output+0x240>)
 80098c0:	f005 ffe8 	bl	800f894 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7d1b      	ldrb	r3, [r3, #20]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d106      	bne.n	80098da <tcp_output+0x32>
 80098cc:	4b84      	ldr	r3, [pc, #528]	; (8009ae0 <tcp_output+0x238>)
 80098ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80098d2:	4986      	ldr	r1, [pc, #536]	; (8009aec <tcp_output+0x244>)
 80098d4:	4884      	ldr	r0, [pc, #528]	; (8009ae8 <tcp_output+0x240>)
 80098d6:	f005 ffdd 	bl	800f894 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80098da:	4b85      	ldr	r3, [pc, #532]	; (8009af0 <tcp_output+0x248>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d101      	bne.n	80098e8 <tcp_output+0x40>
    return ERR_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e1ce      	b.n	8009c86 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098f4:	4293      	cmp	r3, r2
 80098f6:	bf28      	it	cs
 80098f8:	4613      	movcs	r3, r2
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009902:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	8b5b      	ldrh	r3, [r3, #26]
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 81aa 	beq.w	8009c6c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 fdcb 	bl	800a4b4 <tcp_send_empty_ack>
 800991e:	4603      	mov	r3, r0
 8009920:	e1b1      	b.n	8009c86 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3304      	adds	r3, #4
 8009928:	461a      	mov	r2, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7ff fc7c 	bl	8009228 <tcp_route>
 8009930:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <tcp_output+0x96>
    return ERR_RTE;
 8009938:	f06f 0303 	mvn.w	r3, #3
 800993c:	e1a3      	b.n	8009c86 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <tcp_output+0xa4>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d111      	bne.n	8009970 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <tcp_output+0xb0>
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	3304      	adds	r3, #4
 8009956:	e000      	b.n	800995a <tcp_output+0xb2>
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d102      	bne.n	8009968 <tcp_output+0xc0>
      return ERR_RTE;
 8009962:	f06f 0303 	mvn.w	r3, #3
 8009966:	e18e      	b.n	8009c86 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	4618      	mov	r0, r3
 8009978:	f7f9 ffbd 	bl	80038f6 <lwip_htonl>
 800997c:	4602      	mov	r2, r0
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009986:	8912      	ldrh	r2, [r2, #8]
 8009988:	4413      	add	r3, r2
 800998a:	69ba      	ldr	r2, [r7, #24]
 800998c:	429a      	cmp	r2, r3
 800998e:	d227      	bcs.n	80099e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009996:	461a      	mov	r2, r3
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	4293      	cmp	r3, r2
 800999c:	d114      	bne.n	80099c8 <tcp_output+0x120>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d110      	bne.n	80099c8 <tcp_output+0x120>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10b      	bne.n	80099c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8b5b      	ldrh	r3, [r3, #26]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 814d 	beq.w	8009c70 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fd6c 	bl	800a4b4 <tcp_send_empty_ack>
 80099dc:	4603      	mov	r3, r0
 80099de:	e152      	b.n	8009c86 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 811c 	beq.w	8009c2e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80099f6:	e002      	b.n	80099fe <tcp_output+0x156>
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	623b      	str	r3, [r7, #32]
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f8      	bne.n	80099f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009a06:	e112      	b.n	8009c2e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	899b      	ldrh	r3, [r3, #12]
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7f9 ff5b 	bl	80038cc <lwip_htons>
 8009a16:	4603      	mov	r3, r0
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	f003 0304 	and.w	r3, r3, #4
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d006      	beq.n	8009a30 <tcp_output+0x188>
 8009a22:	4b2f      	ldr	r3, [pc, #188]	; (8009ae0 <tcp_output+0x238>)
 8009a24:	f240 5236 	movw	r2, #1334	; 0x536
 8009a28:	4932      	ldr	r1, [pc, #200]	; (8009af4 <tcp_output+0x24c>)
 8009a2a:	482f      	ldr	r0, [pc, #188]	; (8009ae8 <tcp_output+0x240>)
 8009a2c:	f005 ff32 	bl	800f894 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d01f      	beq.n	8009a78 <tcp_output+0x1d0>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	8b5b      	ldrh	r3, [r3, #26]
 8009a3c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d119      	bne.n	8009a78 <tcp_output+0x1d0>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <tcp_output+0x1bc>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d110      	bne.n	8009a78 <tcp_output+0x1d0>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a5a:	891a      	ldrh	r2, [r3, #8]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d209      	bcs.n	8009a78 <tcp_output+0x1d0>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <tcp_output+0x1d0>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d901      	bls.n	8009a7c <tcp_output+0x1d4>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <tcp_output+0x1d6>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	8b5b      	ldrh	r3, [r3, #26]
 8009a86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 80e4 	beq.w	8009c58 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7d1b      	ldrb	r3, [r3, #20]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d00d      	beq.n	8009ab4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	899b      	ldrh	r3, [r3, #12]
 8009a9e:	b29c      	uxth	r4, r3
 8009aa0:	2010      	movs	r0, #16
 8009aa2:	f7f9 ff13 	bl	80038cc <lwip_htons>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	4322      	orrs	r2, r4
 8009ab0:	b292      	uxth	r2, r2
 8009ab2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aba:	f000 f909 	bl	8009cd0 <tcp_output_segment>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d016      	beq.n	8009af8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	8b5b      	ldrh	r3, [r3, #26]
 8009ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	835a      	strh	r2, [r3, #26]
      return err;
 8009ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009adc:	e0d3      	b.n	8009c86 <tcp_output+0x3de>
 8009ade:	bf00      	nop
 8009ae0:	08011d84 	.word	0x08011d84
 8009ae4:	080122c8 	.word	0x080122c8
 8009ae8:	08011dd8 	.word	0x08011dd8
 8009aec:	080122e0 	.word	0x080122e0
 8009af0:	2000a498 	.word	0x2000a498
 8009af4:	08012308 	.word	0x08012308
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7d1b      	ldrb	r3, [r3, #20]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d006      	beq.n	8009b16 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	8b5b      	ldrh	r3, [r3, #26]
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7f9 feea 	bl	80038f6 <lwip_htonl>
 8009b22:	4604      	mov	r4, r0
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	891b      	ldrh	r3, [r3, #8]
 8009b28:	461d      	mov	r5, r3
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	899b      	ldrh	r3, [r3, #12]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7f9 feca 	bl	80038cc <lwip_htons>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <tcp_output+0x2a0>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e000      	b.n	8009b4a <tcp_output+0x2a2>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	442b      	add	r3, r5
 8009b4c:	4423      	add	r3, r4
 8009b4e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	da02      	bge.n	8009b62 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	891b      	ldrh	r3, [r3, #8]
 8009b66:	461c      	mov	r4, r3
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	899b      	ldrh	r3, [r3, #12]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7f9 feab 	bl	80038cc <lwip_htons>
 8009b76:	4603      	mov	r3, r0
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <tcp_output+0x2de>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <tcp_output+0x2e0>
 8009b86:	2300      	movs	r3, #0
 8009b88:	4423      	add	r3, r4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d049      	beq.n	8009c22 <tcp_output+0x37a>
      seg->next = NULL;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <tcp_output+0x300>
        pcb->unacked = seg;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	623b      	str	r3, [r7, #32]
 8009ba6:	e03f      	b.n	8009c28 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7f9 fea1 	bl	80038f6 <lwip_htonl>
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7f9 fe9a 	bl	80038f6 <lwip_htonl>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	1ae3      	subs	r3, r4, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da24      	bge.n	8009c14 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	3370      	adds	r3, #112	; 0x70
 8009bce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009bd0:	e002      	b.n	8009bd8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d011      	beq.n	8009c04 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7f9 fe84 	bl	80038f6 <lwip_htonl>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7f9 fe7d 	bl	80038f6 <lwip_htonl>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dbe6      	blt.n	8009bd2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	e009      	b.n	8009c28 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c18:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	623b      	str	r3, [r7, #32]
 8009c20:	e002      	b.n	8009c28 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c24:	f7fc fc3f 	bl	80064a6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d012      	beq.n	8009c5a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f9 fe5b 	bl	80038f6 <lwip_htonl>
 8009c40:	4602      	mov	r2, r0
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4a:	8912      	ldrh	r2, [r2, #8]
 8009c4c:	4413      	add	r3, r2
  while (seg != NULL &&
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	f4bf aed9 	bcs.w	8009a08 <tcp_output+0x160>
 8009c56:	e000      	b.n	8009c5a <tcp_output+0x3b2>
      break;
 8009c58:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d108      	bne.n	8009c74 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009c6a:	e004      	b.n	8009c76 <tcp_output+0x3ce>
    goto output_done;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <tcp_output+0x3ce>
    goto output_done;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009c74:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	8b5b      	ldrh	r3, [r3, #26]
 8009c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3728      	adds	r7, #40	; 0x28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8009c8e:	bf00      	nop

08009c90 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d106      	bne.n	8009cac <tcp_output_segment_busy+0x1c>
 8009c9e:	4b09      	ldr	r3, [pc, #36]	; (8009cc4 <tcp_output_segment_busy+0x34>)
 8009ca0:	f240 529a 	movw	r2, #1434	; 0x59a
 8009ca4:	4908      	ldr	r1, [pc, #32]	; (8009cc8 <tcp_output_segment_busy+0x38>)
 8009ca6:	4809      	ldr	r0, [pc, #36]	; (8009ccc <tcp_output_segment_busy+0x3c>)
 8009ca8:	f005 fdf4 	bl	800f894 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	7b9b      	ldrb	r3, [r3, #14]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d001      	beq.n	8009cba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	08011d84 	.word	0x08011d84
 8009cc8:	08012320 	.word	0x08012320
 8009ccc:	08011dd8 	.word	0x08011dd8

08009cd0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009cd0:	b5b0      	push	{r4, r5, r7, lr}
 8009cd2:	b08c      	sub	sp, #48	; 0x30
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d106      	bne.n	8009cf0 <tcp_output_segment+0x20>
 8009ce2:	4b64      	ldr	r3, [pc, #400]	; (8009e74 <tcp_output_segment+0x1a4>)
 8009ce4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009ce8:	4963      	ldr	r1, [pc, #396]	; (8009e78 <tcp_output_segment+0x1a8>)
 8009cea:	4864      	ldr	r0, [pc, #400]	; (8009e7c <tcp_output_segment+0x1ac>)
 8009cec:	f005 fdd2 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <tcp_output_segment+0x34>
 8009cf6:	4b5f      	ldr	r3, [pc, #380]	; (8009e74 <tcp_output_segment+0x1a4>)
 8009cf8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009cfc:	4960      	ldr	r1, [pc, #384]	; (8009e80 <tcp_output_segment+0x1b0>)
 8009cfe:	485f      	ldr	r0, [pc, #380]	; (8009e7c <tcp_output_segment+0x1ac>)
 8009d00:	f005 fdc8 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d106      	bne.n	8009d18 <tcp_output_segment+0x48>
 8009d0a:	4b5a      	ldr	r3, [pc, #360]	; (8009e74 <tcp_output_segment+0x1a4>)
 8009d0c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8009d10:	495c      	ldr	r1, [pc, #368]	; (8009e84 <tcp_output_segment+0x1b4>)
 8009d12:	485a      	ldr	r0, [pc, #360]	; (8009e7c <tcp_output_segment+0x1ac>)
 8009d14:	f005 fdbe 	bl	800f894 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff ffb9 	bl	8009c90 <tcp_output_segment_busy>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e0a1      	b.n	8009e6c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68dc      	ldr	r4, [r3, #12]
 8009d30:	4610      	mov	r0, r2
 8009d32:	f7f9 fde0 	bl	80038f6 <lwip_htonl>
 8009d36:	4603      	mov	r3, r0
 8009d38:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68dc      	ldr	r4, [r3, #12]
 8009d42:	4610      	mov	r0, r2
 8009d44:	f7f9 fdc2 	bl	80038cc <lwip_htons>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009d54:	441a      	add	r2, r3
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	3314      	adds	r3, #20
 8009d60:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	7a9b      	ldrb	r3, [r3, #10]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d015      	beq.n	8009d9a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	3304      	adds	r3, #4
 8009d72:	461a      	mov	r2, r3
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009d7a:	f7fc fe8b 	bl	8006a94 <tcp_eff_send_mss_netif>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009d82:	8b7b      	ldrh	r3, [r7, #26]
 8009d84:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7f9 fdb4 	bl	80038f6 <lwip_htonl>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	3304      	adds	r3, #4
 8009d98:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	da02      	bge.n	8009daa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10c      	bne.n	8009dcc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8009db2:	4b35      	ldr	r3, [pc, #212]	; (8009e88 <tcp_output_segment+0x1b8>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7f9 fd98 	bl	80038f6 <lwip_htonl>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	8959      	ldrh	r1, [r3, #10]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	8b3a      	ldrh	r2, [r7, #24]
 8009de6:	1a8a      	subs	r2, r1, r2
 8009de8:	b292      	uxth	r2, r2
 8009dea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	8919      	ldrh	r1, [r3, #8]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	8b3a      	ldrh	r2, [r7, #24]
 8009df8:	1a8a      	subs	r2, r1, r2
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	68d2      	ldr	r2, [r2, #12]
 8009e06:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	741a      	strb	r2, [r3, #16]
 8009e10:	2200      	movs	r2, #0
 8009e12:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	7a9b      	ldrb	r3, [r3, #10]
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <tcp_output_segment+0x158>
 8009e24:	2318      	movs	r3, #24
 8009e26:	e000      	b.n	8009e2a <tcp_output_segment+0x15a>
 8009e28:	2314      	movs	r3, #20
 8009e2a:	4413      	add	r3, r2
 8009e2c:	69fa      	ldr	r2, [r7, #28]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d006      	beq.n	8009e40 <tcp_output_segment+0x170>
 8009e32:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <tcp_output_segment+0x1a4>)
 8009e34:	f240 621c 	movw	r2, #1564	; 0x61c
 8009e38:	4914      	ldr	r1, [pc, #80]	; (8009e8c <tcp_output_segment+0x1bc>)
 8009e3a:	4810      	ldr	r0, [pc, #64]	; (8009e7c <tcp_output_segment+0x1ac>)
 8009e3c:	f005 fd2a 	bl	800f894 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6858      	ldr	r0, [r3, #4]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	1d1c      	adds	r4, r3, #4
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	7add      	ldrb	r5, [r3, #11]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	7a9b      	ldrb	r3, [r3, #10]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	9202      	str	r2, [sp, #8]
 8009e56:	2206      	movs	r2, #6
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	462b      	mov	r3, r5
 8009e5e:	4622      	mov	r2, r4
 8009e60:	f004 fbea 	bl	800e638 <ip4_output_if>
 8009e64:	4603      	mov	r3, r0
 8009e66:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3720      	adds	r7, #32
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bdb0      	pop	{r4, r5, r7, pc}
 8009e74:	08011d84 	.word	0x08011d84
 8009e78:	08012348 	.word	0x08012348
 8009e7c:	08011dd8 	.word	0x08011dd8
 8009e80:	08012368 	.word	0x08012368
 8009e84:	08012388 	.word	0x08012388
 8009e88:	2000a44c 	.word	0x2000a44c
 8009e8c:	080123ac 	.word	0x080123ac

08009e90 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8009e90:	b5b0      	push	{r4, r5, r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <tcp_rexmit_rto_prepare+0x1c>
 8009e9e:	4b31      	ldr	r3, [pc, #196]	; (8009f64 <tcp_rexmit_rto_prepare+0xd4>)
 8009ea0:	f240 6263 	movw	r2, #1635	; 0x663
 8009ea4:	4930      	ldr	r1, [pc, #192]	; (8009f68 <tcp_rexmit_rto_prepare+0xd8>)
 8009ea6:	4831      	ldr	r0, [pc, #196]	; (8009f6c <tcp_rexmit_rto_prepare+0xdc>)
 8009ea8:	f005 fcf4 	bl	800f894 <iprintf>

  if (pcb->unacked == NULL) {
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d102      	bne.n	8009eba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009eb4:	f06f 0305 	mvn.w	r3, #5
 8009eb8:	e050      	b.n	8009f5c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebe:	60fb      	str	r3, [r7, #12]
 8009ec0:	e00b      	b.n	8009eda <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff fee4 	bl	8009c90 <tcp_output_segment_busy>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d002      	beq.n	8009ed4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8009ece:	f06f 0305 	mvn.w	r3, #5
 8009ed2:	e043      	b.n	8009f5c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1ef      	bne.n	8009ec2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7ff fed4 	bl	8009c90 <tcp_output_segment_busy>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8009eee:	f06f 0305 	mvn.w	r3, #5
 8009ef2:	e033      	b.n	8009f5c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	8b5b      	ldrh	r3, [r3, #26]
 8009f0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7f9 fce9 	bl	80038f6 <lwip_htonl>
 8009f24:	4604      	mov	r4, r0
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	891b      	ldrh	r3, [r3, #8]
 8009f2a:	461d      	mov	r5, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7f9 fcc9 	bl	80038cc <lwip_htons>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 0303 	and.w	r3, r3, #3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <tcp_rexmit_rto_prepare+0xba>
 8009f46:	2301      	movs	r3, #1
 8009f48:	e000      	b.n	8009f4c <tcp_rexmit_rto_prepare+0xbc>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	442b      	add	r3, r5
 8009f4e:	18e2      	adds	r2, r4, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bdb0      	pop	{r4, r5, r7, pc}
 8009f64:	08011d84 	.word	0x08011d84
 8009f68:	080123c0 	.word	0x080123c0
 8009f6c:	08011dd8 	.word	0x08011dd8

08009f70 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d106      	bne.n	8009f8c <tcp_rexmit_rto_commit+0x1c>
 8009f7e:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <tcp_rexmit_rto_commit+0x44>)
 8009f80:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009f84:	490c      	ldr	r1, [pc, #48]	; (8009fb8 <tcp_rexmit_rto_commit+0x48>)
 8009f86:	480d      	ldr	r0, [pc, #52]	; (8009fbc <tcp_rexmit_rto_commit+0x4c>)
 8009f88:	f005 fc84 	bl	800f894 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f92:	2bff      	cmp	r3, #255	; 0xff
 8009f94:	d007      	beq.n	8009fa6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff fc7e 	bl	80098a8 <tcp_output>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	08011d84 	.word	0x08011d84
 8009fb8:	080123e4 	.word	0x080123e4
 8009fbc:	08011dd8 	.word	0x08011dd8

08009fc0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d106      	bne.n	8009fdc <tcp_rexmit_rto+0x1c>
 8009fce:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <tcp_rexmit_rto+0x38>)
 8009fd0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009fd4:	4909      	ldr	r1, [pc, #36]	; (8009ffc <tcp_rexmit_rto+0x3c>)
 8009fd6:	480a      	ldr	r0, [pc, #40]	; (800a000 <tcp_rexmit_rto+0x40>)
 8009fd8:	f005 fc5c 	bl	800f894 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff57 	bl	8009e90 <tcp_rexmit_rto_prepare>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f7ff ffc1 	bl	8009f70 <tcp_rexmit_rto_commit>
  }
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	08011d84 	.word	0x08011d84
 8009ffc:	08012408 	.word	0x08012408
 800a000:	08011dd8 	.word	0x08011dd8

0800a004 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a004:	b590      	push	{r4, r7, lr}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <tcp_rexmit+0x1c>
 800a012:	4b2f      	ldr	r3, [pc, #188]	; (800a0d0 <tcp_rexmit+0xcc>)
 800a014:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a018:	492e      	ldr	r1, [pc, #184]	; (800a0d4 <tcp_rexmit+0xd0>)
 800a01a:	482f      	ldr	r0, [pc, #188]	; (800a0d8 <tcp_rexmit+0xd4>)
 800a01c:	f005 fc3a 	bl	800f894 <iprintf>

  if (pcb->unacked == NULL) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a028:	f06f 0305 	mvn.w	r3, #5
 800a02c:	e04c      	b.n	800a0c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a032:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a034:	68b8      	ldr	r0, [r7, #8]
 800a036:	f7ff fe2b 	bl	8009c90 <tcp_output_segment_busy>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a040:	f06f 0305 	mvn.w	r3, #5
 800a044:	e040      	b.n	800a0c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	336c      	adds	r3, #108	; 0x6c
 800a052:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a054:	e002      	b.n	800a05c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d011      	beq.n	800a088 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7f9 fc42 	bl	80038f6 <lwip_htonl>
 800a072:	4604      	mov	r4, r0
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f9 fc3b 	bl	80038f6 <lwip_htonl>
 800a080:	4603      	mov	r3, r0
 800a082:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a084:	2b00      	cmp	r3, #0
 800a086:	dbe6      	blt.n	800a056 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d103      	bne.n	800a0a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0ac:	2bff      	cmp	r3, #255	; 0xff
 800a0ae:	d007      	beq.n	800a0c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd90      	pop	{r4, r7, pc}
 800a0d0:	08011d84 	.word	0x08011d84
 800a0d4:	08012424 	.word	0x08012424
 800a0d8:	08011dd8 	.word	0x08011dd8

0800a0dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <tcp_rexmit_fast+0x1c>
 800a0ea:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <tcp_rexmit_fast+0xb8>)
 800a0ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a0f0:	4929      	ldr	r1, [pc, #164]	; (800a198 <tcp_rexmit_fast+0xbc>)
 800a0f2:	482a      	ldr	r0, [pc, #168]	; (800a19c <tcp_rexmit_fast+0xc0>)
 800a0f4:	f005 fbce 	bl	800f894 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d044      	beq.n	800a18a <tcp_rexmit_fast+0xae>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	8b5b      	ldrh	r3, [r3, #26]
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d13e      	bne.n	800a18a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ff79 	bl	800a004 <tcp_rexmit>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d138      	bne.n	800a18a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a124:	4293      	cmp	r3, r2
 800a126:	bf28      	it	cs
 800a128:	4613      	movcs	r3, r2
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	0fda      	lsrs	r2, r3, #31
 800a12e:	4413      	add	r3, r2
 800a130:	105b      	asrs	r3, r3, #1
 800a132:	b29a      	uxth	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a140:	461a      	mov	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	429a      	cmp	r2, r3
 800a14a:	d206      	bcs.n	800a15a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a164:	4619      	mov	r1, r3
 800a166:	0049      	lsls	r1, r1, #1
 800a168:	440b      	add	r3, r1
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8b5b      	ldrh	r3, [r3, #26]
 800a17a:	f043 0304 	orr.w	r3, r3, #4
 800a17e:	b29a      	uxth	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a18a:	bf00      	nop
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	08011d84 	.word	0x08011d84
 800a198:	0801243c 	.word	0x0801243c
 800a19c:	08011dd8 	.word	0x08011dd8

0800a1a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	607b      	str	r3, [r7, #4]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	817b      	strh	r3, [r7, #10]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a1b2:	897a      	ldrh	r2, [r7, #10]
 800a1b4:	893b      	ldrh	r3, [r7, #8]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	3314      	adds	r3, #20
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	2022      	movs	r0, #34	; 0x22
 800a1c6:	f7fa fc07 	bl	80049d8 <pbuf_alloc>
 800a1ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d04d      	beq.n	800a26e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a1d2:	897b      	ldrh	r3, [r7, #10]
 800a1d4:	3313      	adds	r3, #19
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	8952      	ldrh	r2, [r2, #10]
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	db06      	blt.n	800a1ec <tcp_output_alloc_header_common+0x4c>
 800a1de:	4b26      	ldr	r3, [pc, #152]	; (800a278 <tcp_output_alloc_header_common+0xd8>)
 800a1e0:	f240 7223 	movw	r2, #1827	; 0x723
 800a1e4:	4925      	ldr	r1, [pc, #148]	; (800a27c <tcp_output_alloc_header_common+0xdc>)
 800a1e6:	4826      	ldr	r0, [pc, #152]	; (800a280 <tcp_output_alloc_header_common+0xe0>)
 800a1e8:	f005 fb54 	bl	800f894 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a1f2:	8c3b      	ldrh	r3, [r7, #32]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7f9 fb69 	bl	80038cc <lwip_htons>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a204:	4618      	mov	r0, r3
 800a206:	f7f9 fb61 	bl	80038cc <lwip_htons>
 800a20a:	4603      	mov	r3, r0
 800a20c:	461a      	mov	r2, r3
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7f9 fb6c 	bl	80038f6 <lwip_htonl>
 800a21e:	4602      	mov	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a224:	897b      	ldrh	r3, [r7, #10]
 800a226:	089b      	lsrs	r3, r3, #2
 800a228:	b29b      	uxth	r3, r3
 800a22a:	3305      	adds	r3, #5
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	031b      	lsls	r3, r3, #12
 800a230:	b29a      	uxth	r2, r3
 800a232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a236:	b29b      	uxth	r3, r3
 800a238:	4313      	orrs	r3, r2
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7f9 fb45 	bl	80038cc <lwip_htons>
 800a242:	4603      	mov	r3, r0
 800a244:	461a      	mov	r2, r3
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a24a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7f9 fb3d 	bl	80038cc <lwip_htons>
 800a252:	4603      	mov	r3, r0
 800a254:	461a      	mov	r2, r3
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	2200      	movs	r2, #0
 800a25e:	741a      	strb	r2, [r3, #16]
 800a260:	2200      	movs	r2, #0
 800a262:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2200      	movs	r2, #0
 800a268:	749a      	strb	r2, [r3, #18]
 800a26a:	2200      	movs	r2, #0
 800a26c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a26e:	697b      	ldr	r3, [r7, #20]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	08011d84 	.word	0x08011d84
 800a27c:	0801245c 	.word	0x0801245c
 800a280:	08011dd8 	.word	0x08011dd8

0800a284 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a284:	b5b0      	push	{r4, r5, r7, lr}
 800a286:	b08a      	sub	sp, #40	; 0x28
 800a288:	af04      	add	r7, sp, #16
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	607b      	str	r3, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	817b      	strh	r3, [r7, #10]
 800a292:	4613      	mov	r3, r2
 800a294:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d106      	bne.n	800a2aa <tcp_output_alloc_header+0x26>
 800a29c:	4b15      	ldr	r3, [pc, #84]	; (800a2f4 <tcp_output_alloc_header+0x70>)
 800a29e:	f240 7242 	movw	r2, #1858	; 0x742
 800a2a2:	4915      	ldr	r1, [pc, #84]	; (800a2f8 <tcp_output_alloc_header+0x74>)
 800a2a4:	4815      	ldr	r0, [pc, #84]	; (800a2fc <tcp_output_alloc_header+0x78>)
 800a2a6:	f005 faf5 	bl	800f894 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8adb      	ldrh	r3, [r3, #22]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	8b12      	ldrh	r2, [r2, #24]
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a2ba:	893d      	ldrh	r5, [r7, #8]
 800a2bc:	897c      	ldrh	r4, [r7, #10]
 800a2be:	9103      	str	r1, [sp, #12]
 800a2c0:	2110      	movs	r1, #16
 800a2c2:	9102      	str	r1, [sp, #8]
 800a2c4:	9201      	str	r2, [sp, #4]
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	f7ff ff67 	bl	800a1a0 <tcp_output_alloc_header_common>
 800a2d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d006      	beq.n	800a2e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a2e2:	441a      	add	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a2e8:	697b      	ldr	r3, [r7, #20]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3718      	adds	r7, #24
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	08011d84 	.word	0x08011d84
 800a2f8:	0801248c 	.word	0x0801248c
 800a2fc:	08011dd8 	.word	0x08011dd8

0800a300 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	460b      	mov	r3, r1
 800a310:	71fb      	strb	r3, [r7, #7]
 800a312:	4613      	mov	r3, r2
 800a314:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d106      	bne.n	800a32e <tcp_output_fill_options+0x2e>
 800a320:	4b12      	ldr	r3, [pc, #72]	; (800a36c <tcp_output_fill_options+0x6c>)
 800a322:	f240 7256 	movw	r2, #1878	; 0x756
 800a326:	4912      	ldr	r1, [pc, #72]	; (800a370 <tcp_output_fill_options+0x70>)
 800a328:	4812      	ldr	r0, [pc, #72]	; (800a374 <tcp_output_fill_options+0x74>)
 800a32a:	f005 fab3 	bl	800f894 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	3314      	adds	r3, #20
 800a338:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a33a:	8bfb      	ldrh	r3, [r7, #30]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	461a      	mov	r2, r3
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	4413      	add	r3, r2
 800a34a:	3314      	adds	r3, #20
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	4413      	add	r3, r2
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	429a      	cmp	r2, r3
 800a354:	d006      	beq.n	800a364 <tcp_output_fill_options+0x64>
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <tcp_output_fill_options+0x6c>)
 800a358:	f240 7275 	movw	r2, #1909	; 0x775
 800a35c:	4906      	ldr	r1, [pc, #24]	; (800a378 <tcp_output_fill_options+0x78>)
 800a35e:	4805      	ldr	r0, [pc, #20]	; (800a374 <tcp_output_fill_options+0x74>)
 800a360:	f005 fa98 	bl	800f894 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a364:	bf00      	nop
 800a366:	3720      	adds	r7, #32
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	08011d84 	.word	0x08011d84
 800a370:	080124b4 	.word	0x080124b4
 800a374:	08011dd8 	.word	0x08011dd8
 800a378:	080123ac 	.word	0x080123ac

0800a37c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	; 0x28
 800a380:	af04      	add	r7, sp, #16
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <tcp_output_control_segment+0x22>
 800a390:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <tcp_output_control_segment+0x88>)
 800a392:	f240 7287 	movw	r2, #1927	; 0x787
 800a396:	491c      	ldr	r1, [pc, #112]	; (800a408 <tcp_output_control_segment+0x8c>)
 800a398:	481c      	ldr	r0, [pc, #112]	; (800a40c <tcp_output_control_segment+0x90>)
 800a39a:	f005 fa7b 	bl	800f894 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f7fe ff40 	bl	8009228 <tcp_route>
 800a3a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d102      	bne.n	800a3b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a3b0:	23fc      	movs	r3, #252	; 0xfc
 800a3b2:	75fb      	strb	r3, [r7, #23]
 800a3b4:	e01c      	b.n	800a3f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d006      	beq.n	800a3ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	7adb      	ldrb	r3, [r3, #11]
 800a3c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	7a9b      	ldrb	r3, [r3, #10]
 800a3c6:	757b      	strb	r3, [r7, #21]
 800a3c8:	e003      	b.n	800a3d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a3ca:	23ff      	movs	r3, #255	; 0xff
 800a3cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a3d2:	7dba      	ldrb	r2, [r7, #22]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	9302      	str	r3, [sp, #8]
 800a3d8:	2306      	movs	r3, #6
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	7d7b      	ldrb	r3, [r7, #21]
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	68b8      	ldr	r0, [r7, #8]
 800a3e8:	f004 f926 	bl	800e638 <ip4_output_if>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f7fa fdd5 	bl	8004fa0 <pbuf_free>
  return err;
 800a3f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	08011d84 	.word	0x08011d84
 800a408:	080124dc 	.word	0x080124dc
 800a40c:	08011dd8 	.word	0x08011dd8

0800a410 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a410:	b590      	push	{r4, r7, lr}
 800a412:	b08b      	sub	sp, #44	; 0x2c
 800a414:	af04      	add	r7, sp, #16
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
 800a41c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d106      	bne.n	800a432 <tcp_rst+0x22>
 800a424:	4b1f      	ldr	r3, [pc, #124]	; (800a4a4 <tcp_rst+0x94>)
 800a426:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a42a:	491f      	ldr	r1, [pc, #124]	; (800a4a8 <tcp_rst+0x98>)
 800a42c:	481f      	ldr	r0, [pc, #124]	; (800a4ac <tcp_rst+0x9c>)
 800a42e:	f005 fa31 	bl	800f894 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <tcp_rst+0x36>
 800a438:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <tcp_rst+0x94>)
 800a43a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a43e:	491c      	ldr	r1, [pc, #112]	; (800a4b0 <tcp_rst+0xa0>)
 800a440:	481a      	ldr	r0, [pc, #104]	; (800a4ac <tcp_rst+0x9c>)
 800a442:	f005 fa27 	bl	800f894 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a446:	2300      	movs	r3, #0
 800a448:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a44a:	f246 0308 	movw	r3, #24584	; 0x6008
 800a44e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	b29c      	uxth	r4, r3
 800a454:	68b8      	ldr	r0, [r7, #8]
 800a456:	f7f9 fa4e 	bl	80038f6 <lwip_htonl>
 800a45a:	4602      	mov	r2, r0
 800a45c:	8abb      	ldrh	r3, [r7, #20]
 800a45e:	9303      	str	r3, [sp, #12]
 800a460:	2314      	movs	r3, #20
 800a462:	9302      	str	r3, [sp, #8]
 800a464:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4613      	mov	r3, r2
 800a46e:	2200      	movs	r2, #0
 800a470:	4621      	mov	r1, r4
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff fe94 	bl	800a1a0 <tcp_output_alloc_header_common>
 800a478:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00c      	beq.n	800a49a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	2200      	movs	r2, #0
 800a484:	6939      	ldr	r1, [r7, #16]
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7ff ff3a 	bl	800a300 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	6939      	ldr	r1, [r7, #16]
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff ff72 	bl	800a37c <tcp_output_control_segment>
 800a498:	e000      	b.n	800a49c <tcp_rst+0x8c>
    return;
 800a49a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd90      	pop	{r4, r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	08011d84 	.word	0x08011d84
 800a4a8:	08012508 	.word	0x08012508
 800a4ac:	08011dd8 	.word	0x08011dd8
 800a4b0:	08012524 	.word	0x08012524

0800a4b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a4b4:	b590      	push	{r4, r7, lr}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d106      	bne.n	800a4d8 <tcp_send_empty_ack+0x24>
 800a4ca:	4b28      	ldr	r3, [pc, #160]	; (800a56c <tcp_send_empty_ack+0xb8>)
 800a4cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a4d0:	4927      	ldr	r1, [pc, #156]	; (800a570 <tcp_send_empty_ack+0xbc>)
 800a4d2:	4828      	ldr	r0, [pc, #160]	; (800a574 <tcp_send_empty_ack+0xc0>)
 800a4d4:	f005 f9de 	bl	800f894 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a4e4:	7d7b      	ldrb	r3, [r7, #21]
 800a4e6:	b29c      	uxth	r4, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7f9 fa02 	bl	80038f6 <lwip_htonl>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff fec3 	bl	800a284 <tcp_output_alloc_header>
 800a4fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	8b5b      	ldrh	r3, [r3, #26]
 800a50a:	f043 0303 	orr.w	r3, r3, #3
 800a50e:	b29a      	uxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a514:	f06f 0301 	mvn.w	r3, #1
 800a518:	e023      	b.n	800a562 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a51a:	7dbb      	ldrb	r3, [r7, #22]
 800a51c:	7dfa      	ldrb	r2, [r7, #23]
 800a51e:	6939      	ldr	r1, [r7, #16]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff feed 	bl	800a300 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3304      	adds	r3, #4
 800a52c:	6939      	ldr	r1, [r7, #16]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff ff24 	bl	800a37c <tcp_output_control_segment>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	8b5b      	ldrh	r3, [r3, #26]
 800a544:	f043 0303 	orr.w	r3, r3, #3
 800a548:	b29a      	uxth	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	835a      	strh	r2, [r3, #26]
 800a54e:	e006      	b.n	800a55e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	8b5b      	ldrh	r3, [r3, #26]
 800a554:	f023 0303 	bic.w	r3, r3, #3
 800a558:	b29a      	uxth	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	bd90      	pop	{r4, r7, pc}
 800a56a:	bf00      	nop
 800a56c:	08011d84 	.word	0x08011d84
 800a570:	08012540 	.word	0x08012540
 800a574:	08011dd8 	.word	0x08011dd8

0800a578 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a580:	2300      	movs	r3, #0
 800a582:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d106      	bne.n	800a598 <tcp_keepalive+0x20>
 800a58a:	4b18      	ldr	r3, [pc, #96]	; (800a5ec <tcp_keepalive+0x74>)
 800a58c:	f640 0224 	movw	r2, #2084	; 0x824
 800a590:	4917      	ldr	r1, [pc, #92]	; (800a5f0 <tcp_keepalive+0x78>)
 800a592:	4818      	ldr	r0, [pc, #96]	; (800a5f4 <tcp_keepalive+0x7c>)
 800a594:	f005 f97e 	bl	800f894 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a598:	7dfb      	ldrb	r3, [r7, #23]
 800a59a:	b29c      	uxth	r4, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f9 f9a7 	bl	80038f6 <lwip_htonl>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f7ff fe68 	bl	800a284 <tcp_output_alloc_header>
 800a5b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c0:	e010      	b.n	800a5e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	6939      	ldr	r1, [r7, #16]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fe99 	bl	800a300 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	6939      	ldr	r1, [r7, #16]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fed0 	bl	800a37c <tcp_output_control_segment>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	371c      	adds	r7, #28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd90      	pop	{r4, r7, pc}
 800a5ec:	08011d84 	.word	0x08011d84
 800a5f0:	08012560 	.word	0x08012560
 800a5f4:	08011dd8 	.word	0x08011dd8

0800a5f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a5f8:	b590      	push	{r4, r7, lr}
 800a5fa:	b08b      	sub	sp, #44	; 0x2c
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a600:	2300      	movs	r3, #0
 800a602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d106      	bne.n	800a61a <tcp_zero_window_probe+0x22>
 800a60c:	4b4c      	ldr	r3, [pc, #304]	; (800a740 <tcp_zero_window_probe+0x148>)
 800a60e:	f640 024f 	movw	r2, #2127	; 0x84f
 800a612:	494c      	ldr	r1, [pc, #304]	; (800a744 <tcp_zero_window_probe+0x14c>)
 800a614:	484c      	ldr	r0, [pc, #304]	; (800a748 <tcp_zero_window_probe+0x150>)
 800a616:	f005 f93d 	bl	800f894 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a61e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	e086      	b.n	800a738 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a630:	2bff      	cmp	r3, #255	; 0xff
 800a632:	d007      	beq.n	800a644 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a63a:	3301      	adds	r3, #1
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	899b      	ldrh	r3, [r3, #12]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7f9 f93d 	bl	80038cc <lwip_htons>
 800a652:	4603      	mov	r3, r0
 800a654:	b2db      	uxtb	r3, r3
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d005      	beq.n	800a66a <tcp_zero_window_probe+0x72>
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	891b      	ldrh	r3, [r3, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <tcp_zero_window_probe+0x72>
 800a666:	2301      	movs	r3, #1
 800a668:	e000      	b.n	800a66c <tcp_zero_window_probe+0x74>
 800a66a:	2300      	movs	r3, #0
 800a66c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a66e:	7ffb      	ldrb	r3, [r7, #31]
 800a670:	2b00      	cmp	r3, #0
 800a672:	bf0c      	ite	eq
 800a674:	2301      	moveq	r3, #1
 800a676:	2300      	movne	r3, #0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a67c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a680:	b299      	uxth	r1, r3
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	8bba      	ldrh	r2, [r7, #28]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff fdfa 	bl	800a284 <tcp_output_alloc_header>
 800a690:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d102      	bne.n	800a69e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a698:	f04f 33ff 	mov.w	r3, #4294967295
 800a69c:	e04c      	b.n	800a738 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a6a4:	7ffb      	ldrb	r3, [r7, #31]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d011      	beq.n	800a6ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	899b      	ldrh	r3, [r3, #12]
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	b21b      	sxth	r3, r3
 800a6b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6b6:	b21c      	sxth	r4, r3
 800a6b8:	2011      	movs	r0, #17
 800a6ba:	f7f9 f907 	bl	80038cc <lwip_htons>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	b21b      	sxth	r3, r3
 800a6c2:	4323      	orrs	r3, r4
 800a6c4:	b21b      	sxth	r3, r3
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	819a      	strh	r2, [r3, #12]
 800a6cc:	e010      	b.n	800a6f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	3314      	adds	r3, #20
 800a6d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	6858      	ldr	r0, [r3, #4]
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	891a      	ldrh	r2, [r3, #8]
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	891b      	ldrh	r3, [r3, #8]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	6939      	ldr	r1, [r7, #16]
 800a6ec:	f7fa fe52 	bl	8005394 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7f9 f8fd 	bl	80038f6 <lwip_htonl>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	3301      	adds	r3, #1
 800a700:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da02      	bge.n	800a714 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a718:	2200      	movs	r2, #0
 800a71a:	69b9      	ldr	r1, [r7, #24]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff fdef 	bl	800a300 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3304      	adds	r3, #4
 800a728:	69b9      	ldr	r1, [r7, #24]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff fe26 	bl	800a37c <tcp_output_control_segment>
 800a730:	4603      	mov	r3, r0
 800a732:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a734:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	372c      	adds	r7, #44	; 0x2c
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd90      	pop	{r4, r7, pc}
 800a740:	08011d84 	.word	0x08011d84
 800a744:	0801257c 	.word	0x0801257c
 800a748:	08011dd8 	.word	0x08011dd8

0800a74c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a754:	f7fa ff0c 	bl	8005570 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a758:	4b0a      	ldr	r3, [pc, #40]	; (800a784 <tcpip_tcp_timer+0x38>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d103      	bne.n	800a768 <tcpip_tcp_timer+0x1c>
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <tcpip_tcp_timer+0x3c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d005      	beq.n	800a774 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a768:	2200      	movs	r2, #0
 800a76a:	4908      	ldr	r1, [pc, #32]	; (800a78c <tcpip_tcp_timer+0x40>)
 800a76c:	20fa      	movs	r0, #250	; 0xfa
 800a76e:	f000 f8f3 	bl	800a958 <sys_timeout>
 800a772:	e003      	b.n	800a77c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a774:	4b06      	ldr	r3, [pc, #24]	; (800a790 <tcpip_tcp_timer+0x44>)
 800a776:	2200      	movs	r2, #0
 800a778:	601a      	str	r2, [r3, #0]
  }
}
 800a77a:	bf00      	nop
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	2000a458 	.word	0x2000a458
 800a788:	2000a45c 	.word	0x2000a45c
 800a78c:	0800a74d 	.word	0x0800a74d
 800a790:	2000a4a4 	.word	0x2000a4a4

0800a794 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a798:	4b0a      	ldr	r3, [pc, #40]	; (800a7c4 <tcp_timer_needed+0x30>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10f      	bne.n	800a7c0 <tcp_timer_needed+0x2c>
 800a7a0:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <tcp_timer_needed+0x34>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d103      	bne.n	800a7b0 <tcp_timer_needed+0x1c>
 800a7a8:	4b08      	ldr	r3, [pc, #32]	; (800a7cc <tcp_timer_needed+0x38>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d007      	beq.n	800a7c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <tcp_timer_needed+0x30>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4905      	ldr	r1, [pc, #20]	; (800a7d0 <tcp_timer_needed+0x3c>)
 800a7ba:	20fa      	movs	r0, #250	; 0xfa
 800a7bc:	f000 f8cc 	bl	800a958 <sys_timeout>
  }
}
 800a7c0:	bf00      	nop
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	2000a4a4 	.word	0x2000a4a4
 800a7c8:	2000a458 	.word	0x2000a458
 800a7cc:	2000a45c 	.word	0x2000a45c
 800a7d0:	0800a74d 	.word	0x0800a74d

0800a7d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a7e0:	2006      	movs	r0, #6
 800a7e2:	f7f9 fceb 	bl	80041bc <memp_malloc>
 800a7e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d109      	bne.n	800a802 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d151      	bne.n	800a898 <sys_timeout_abs+0xc4>
 800a7f4:	4b2a      	ldr	r3, [pc, #168]	; (800a8a0 <sys_timeout_abs+0xcc>)
 800a7f6:	22be      	movs	r2, #190	; 0xbe
 800a7f8:	492a      	ldr	r1, [pc, #168]	; (800a8a4 <sys_timeout_abs+0xd0>)
 800a7fa:	482b      	ldr	r0, [pc, #172]	; (800a8a8 <sys_timeout_abs+0xd4>)
 800a7fc:	f005 f84a 	bl	800f894 <iprintf>
    return;
 800a800:	e04a      	b.n	800a898 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a81a:	4b24      	ldr	r3, [pc, #144]	; (800a8ac <sys_timeout_abs+0xd8>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d103      	bne.n	800a82a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a822:	4a22      	ldr	r2, [pc, #136]	; (800a8ac <sys_timeout_abs+0xd8>)
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	6013      	str	r3, [r2, #0]
    return;
 800a828:	e037      	b.n	800a89a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	4b1f      	ldr	r3, [pc, #124]	; (800a8ac <sys_timeout_abs+0xd8>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	0fdb      	lsrs	r3, r3, #31
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a842:	4b1a      	ldr	r3, [pc, #104]	; (800a8ac <sys_timeout_abs+0xd8>)
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a84a:	4a18      	ldr	r2, [pc, #96]	; (800a8ac <sys_timeout_abs+0xd8>)
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	e023      	b.n	800a89a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a852:	4b16      	ldr	r3, [pc, #88]	; (800a8ac <sys_timeout_abs+0xd8>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	617b      	str	r3, [r7, #20]
 800a858:	e01a      	b.n	800a890 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00b      	beq.n	800a87a <sys_timeout_abs+0xa6>
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	0fdb      	lsrs	r3, r3, #31
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d007      	beq.n	800a88a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	601a      	str	r2, [r3, #0]
        break;
 800a888:	e007      	b.n	800a89a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e1      	bne.n	800a85a <sys_timeout_abs+0x86>
 800a896:	e000      	b.n	800a89a <sys_timeout_abs+0xc6>
    return;
 800a898:	bf00      	nop
      }
    }
  }
}
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	080125a0 	.word	0x080125a0
 800a8a4:	080125d4 	.word	0x080125d4
 800a8a8:	08012614 	.word	0x08012614
 800a8ac:	2000a49c 	.word	0x2000a49c

0800a8b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4798      	blx	r3

  now = sys_now();
 800a8c2:	f7f8 fdab 	bl	800341c <sys_now>
 800a8c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <lwip_cyclic_timer+0x5c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	0fdb      	lsrs	r3, r3, #31
 800a8dc:	f003 0301 	and.w	r3, r3, #1
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4907      	ldr	r1, [pc, #28]	; (800a910 <lwip_cyclic_timer+0x60>)
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff ff6e 	bl	800a7d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a8f8:	e004      	b.n	800a904 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	4904      	ldr	r1, [pc, #16]	; (800a910 <lwip_cyclic_timer+0x60>)
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f7ff ff68 	bl	800a7d4 <sys_timeout_abs>
}
 800a904:	bf00      	nop
 800a906:	3718      	adds	r7, #24
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	2000a4a0 	.word	0x2000a4a0
 800a910:	0800a8b1 	.word	0x0800a8b1

0800a914 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a91a:	2301      	movs	r3, #1
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	e00e      	b.n	800a93e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a920:	4a0b      	ldr	r2, [pc, #44]	; (800a950 <sys_timeouts_init+0x3c>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	00db      	lsls	r3, r3, #3
 800a92c:	4a08      	ldr	r2, [pc, #32]	; (800a950 <sys_timeouts_init+0x3c>)
 800a92e:	4413      	add	r3, r2
 800a930:	461a      	mov	r2, r3
 800a932:	4908      	ldr	r1, [pc, #32]	; (800a954 <sys_timeouts_init+0x40>)
 800a934:	f000 f810 	bl	800a958 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3301      	adds	r3, #1
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b04      	cmp	r3, #4
 800a942:	d9ed      	bls.n	800a920 <sys_timeouts_init+0xc>
  }
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	08013524 	.word	0x08013524
 800a954:	0800a8b1 	.word	0x0800a8b1

0800a958 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a96a:	d306      	bcc.n	800a97a <sys_timeout+0x22>
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <sys_timeout+0x40>)
 800a96e:	f240 1229 	movw	r2, #297	; 0x129
 800a972:	490a      	ldr	r1, [pc, #40]	; (800a99c <sys_timeout+0x44>)
 800a974:	480a      	ldr	r0, [pc, #40]	; (800a9a0 <sys_timeout+0x48>)
 800a976:	f004 ff8d 	bl	800f894 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a97a:	f7f8 fd4f 	bl	800341c <sys_now>
 800a97e:	4602      	mov	r2, r0
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4413      	add	r3, r2
 800a984:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	6978      	ldr	r0, [r7, #20]
 800a98c:	f7ff ff22 	bl	800a7d4 <sys_timeout_abs>
#endif
}
 800a990:	bf00      	nop
 800a992:	3718      	adds	r7, #24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	080125a0 	.word	0x080125a0
 800a99c:	0801263c 	.word	0x0801263c
 800a9a0:	08012614 	.word	0x08012614

0800a9a4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a9aa:	f7f8 fd37 	bl	800341c <sys_now>
 800a9ae:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a9b0:	4b1a      	ldr	r3, [pc, #104]	; (800aa1c <sys_check_timeouts+0x78>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <sys_check_timeouts+0x1a>
 800a9ba:	f7f9 ffb7 	bl	800492c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a9be:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <sys_check_timeouts+0x7c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d022      	beq.n	800aa10 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	0fdb      	lsrs	r3, r3, #31
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d11a      	bne.n	800aa14 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a0f      	ldr	r2, [pc, #60]	; (800aa20 <sys_check_timeouts+0x7c>)
 800a9e4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4a0b      	ldr	r2, [pc, #44]	; (800aa24 <sys_check_timeouts+0x80>)
 800a9f8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	2006      	movs	r0, #6
 800a9fe:	f7f9 fc4d 	bl	800429c <memp_free>
    if (handler != NULL) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0d3      	beq.n	800a9b0 <sys_check_timeouts+0xc>
      handler(arg);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6838      	ldr	r0, [r7, #0]
 800aa0c:	4798      	blx	r3
  do {
 800aa0e:	e7cf      	b.n	800a9b0 <sys_check_timeouts+0xc>
      return;
 800aa10:	bf00      	nop
 800aa12:	e000      	b.n	800aa16 <sys_check_timeouts+0x72>
      return;
 800aa14:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	2000a449 	.word	0x2000a449
 800aa20:	2000a49c 	.word	0x2000a49c
 800aa24:	2000a4a0 	.word	0x2000a4a0

0800aa28 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800aa2c:	f004 fe32 	bl	800f694 <rand>
 800aa30:	4603      	mov	r3, r0
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	4b01      	ldr	r3, [pc, #4]	; (800aa48 <udp_init+0x20>)
 800aa42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800aa44:	bf00      	nop
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20000028 	.word	0x20000028

0800aa4c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800aa56:	4b17      	ldr	r3, [pc, #92]	; (800aab4 <udp_new_port+0x68>)
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	b291      	uxth	r1, r2
 800aa5e:	4a15      	ldr	r2, [pc, #84]	; (800aab4 <udp_new_port+0x68>)
 800aa60:	8011      	strh	r1, [r2, #0]
 800aa62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d103      	bne.n	800aa72 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800aa6a:	4b12      	ldr	r3, [pc, #72]	; (800aab4 <udp_new_port+0x68>)
 800aa6c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800aa70:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa72:	4b11      	ldr	r3, [pc, #68]	; (800aab8 <udp_new_port+0x6c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	e011      	b.n	800aa9e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	8a5a      	ldrh	r2, [r3, #18]
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <udp_new_port+0x68>)
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d108      	bne.n	800aa98 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	80fb      	strh	r3, [r7, #6]
 800aa8c:	88fb      	ldrh	r3, [r7, #6]
 800aa8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa92:	d3e0      	bcc.n	800aa56 <udp_new_port+0xa>
        return 0;
 800aa94:	2300      	movs	r3, #0
 800aa96:	e007      	b.n	800aaa8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	603b      	str	r3, [r7, #0]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1ea      	bne.n	800aa7a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800aaa4:	4b03      	ldr	r3, [pc, #12]	; (800aab4 <udp_new_port+0x68>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	20000028 	.word	0x20000028
 800aab8:	2000a4a8 	.word	0x2000a4a8

0800aabc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d105      	bne.n	800aadc <udp_input_local_match+0x20>
 800aad0:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <udp_input_local_match+0xb4>)
 800aad2:	2287      	movs	r2, #135	; 0x87
 800aad4:	4927      	ldr	r1, [pc, #156]	; (800ab74 <udp_input_local_match+0xb8>)
 800aad6:	4828      	ldr	r0, [pc, #160]	; (800ab78 <udp_input_local_match+0xbc>)
 800aad8:	f004 fedc 	bl	800f894 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d105      	bne.n	800aaee <udp_input_local_match+0x32>
 800aae2:	4b23      	ldr	r3, [pc, #140]	; (800ab70 <udp_input_local_match+0xb4>)
 800aae4:	2288      	movs	r2, #136	; 0x88
 800aae6:	4925      	ldr	r1, [pc, #148]	; (800ab7c <udp_input_local_match+0xc0>)
 800aae8:	4823      	ldr	r0, [pc, #140]	; (800ab78 <udp_input_local_match+0xbc>)
 800aaea:	f004 fed3 	bl	800f894 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	7a1b      	ldrb	r3, [r3, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00b      	beq.n	800ab0e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	7a1a      	ldrb	r2, [r3, #8]
 800aafa:	4b21      	ldr	r3, [pc, #132]	; (800ab80 <udp_input_local_match+0xc4>)
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab02:	3301      	adds	r3, #1
 800ab04:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d001      	beq.n	800ab0e <udp_input_local_match+0x52>
    return 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	e02b      	b.n	800ab66 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d018      	beq.n	800ab46 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d013      	beq.n	800ab42 <udp_input_local_match+0x86>
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00f      	beq.n	800ab42 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ab22:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <udp_input_local_match+0xc4>)
 800ab24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ab26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2a:	d00a      	beq.n	800ab42 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <udp_input_local_match+0xc4>)
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	405a      	eors	r2, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d110      	bne.n	800ab64 <udp_input_local_match+0xa8>
          return 1;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e00f      	b.n	800ab66 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d009      	beq.n	800ab60 <udp_input_local_match+0xa4>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d005      	beq.n	800ab60 <udp_input_local_match+0xa4>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <udp_input_local_match+0xc4>)
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d101      	bne.n	800ab64 <udp_input_local_match+0xa8>
        return 1;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	08012688 	.word	0x08012688
 800ab74:	080126b8 	.word	0x080126b8
 800ab78:	080126dc 	.word	0x080126dc
 800ab7c:	08012704 	.word	0x08012704
 800ab80:	20004cfc 	.word	0x20004cfc

0800ab84 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b08d      	sub	sp, #52	; 0x34
 800ab88:	af02      	add	r7, sp, #8
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <udp_input+0x20>
 800ab98:	4b7c      	ldr	r3, [pc, #496]	; (800ad8c <udp_input+0x208>)
 800ab9a:	22cf      	movs	r2, #207	; 0xcf
 800ab9c:	497c      	ldr	r1, [pc, #496]	; (800ad90 <udp_input+0x20c>)
 800ab9e:	487d      	ldr	r0, [pc, #500]	; (800ad94 <udp_input+0x210>)
 800aba0:	f004 fe78 	bl	800f894 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d105      	bne.n	800abb6 <udp_input+0x32>
 800abaa:	4b78      	ldr	r3, [pc, #480]	; (800ad8c <udp_input+0x208>)
 800abac:	22d0      	movs	r2, #208	; 0xd0
 800abae:	497a      	ldr	r1, [pc, #488]	; (800ad98 <udp_input+0x214>)
 800abb0:	4878      	ldr	r0, [pc, #480]	; (800ad94 <udp_input+0x210>)
 800abb2:	f004 fe6f 	bl	800f894 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	895b      	ldrh	r3, [r3, #10]
 800abba:	2b07      	cmp	r3, #7
 800abbc:	d803      	bhi.n	800abc6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7fa f9ee 	bl	8004fa0 <pbuf_free>
    goto end;
 800abc4:	e0de      	b.n	800ad84 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800abcc:	4b73      	ldr	r3, [pc, #460]	; (800ad9c <udp_input+0x218>)
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	4a72      	ldr	r2, [pc, #456]	; (800ad9c <udp_input+0x218>)
 800abd2:	6812      	ldr	r2, [r2, #0]
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f003 fe06 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800abdc:	4603      	mov	r3, r0
 800abde:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7f8 fe70 	bl	80038cc <lwip_htons>
 800abec:	4603      	mov	r3, r0
 800abee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	885b      	ldrh	r3, [r3, #2]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f8 fe68 	bl	80038cc <lwip_htons>
 800abfc:	4603      	mov	r3, r0
 800abfe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ac00:	2300      	movs	r3, #0
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ac04:	2300      	movs	r3, #0
 800ac06:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac0c:	4b64      	ldr	r3, [pc, #400]	; (800ada0 <udp_input+0x21c>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	627b      	str	r3, [r7, #36]	; 0x24
 800ac12:	e054      	b.n	800acbe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	8a5b      	ldrh	r3, [r3, #18]
 800ac18:	89fa      	ldrh	r2, [r7, #14]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d14a      	bne.n	800acb4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ac1e:	7cfb      	ldrb	r3, [r7, #19]
 800ac20:	461a      	mov	r2, r3
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac26:	f7ff ff49 	bl	800aabc <udp_input_local_match>
 800ac2a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d041      	beq.n	800acb4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	7c1b      	ldrb	r3, [r3, #16]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d11d      	bne.n	800ac78 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ac42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	e017      	b.n	800ac78 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ac48:	7cfb      	ldrb	r3, [r7, #19]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d014      	beq.n	800ac78 <udp_input+0xf4>
 800ac4e:	4b53      	ldr	r3, [pc, #332]	; (800ad9c <udp_input+0x218>)
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac56:	d10f      	bne.n	800ac78 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	3304      	adds	r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d008      	beq.n	800ac78 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d101      	bne.n	800ac78 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	8a9b      	ldrh	r3, [r3, #20]
 800ac7c:	8a3a      	ldrh	r2, [r7, #16]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d118      	bne.n	800acb4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d005      	beq.n	800ac96 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	4b43      	ldr	r3, [pc, #268]	; (800ad9c <udp_input+0x218>)
 800ac90:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d10e      	bne.n	800acb4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ac96:	6a3b      	ldr	r3, [r7, #32]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d014      	beq.n	800acc6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aca4:	4b3e      	ldr	r3, [pc, #248]	; (800ada0 <udp_input+0x21c>)
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800acac:	4a3c      	ldr	r2, [pc, #240]	; (800ada0 <udp_input+0x21c>)
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800acb2:	e008      	b.n	800acc6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800acb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1a7      	bne.n	800ac14 <udp_input+0x90>
 800acc4:	e000      	b.n	800acc8 <udp_input+0x144>
        break;
 800acc6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <udp_input+0x15a>
    for_us = 1;
 800acd8:	2301      	movs	r3, #1
 800acda:	76fb      	strb	r3, [r7, #27]
 800acdc:	e00a      	b.n	800acf4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	3304      	adds	r3, #4
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	4b2d      	ldr	r3, [pc, #180]	; (800ad9c <udp_input+0x218>)
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	429a      	cmp	r2, r3
 800acea:	bf0c      	ite	eq
 800acec:	2301      	moveq	r3, #1
 800acee:	2300      	movne	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800acf4:	7efb      	ldrb	r3, [r7, #27]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d041      	beq.n	800ad7e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800acfa:	2108      	movs	r1, #8
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7fa f8c9 	bl	8004e94 <pbuf_remove_header>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ad08:	4b20      	ldr	r3, [pc, #128]	; (800ad8c <udp_input+0x208>)
 800ad0a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ad0e:	4925      	ldr	r1, [pc, #148]	; (800ada4 <udp_input+0x220>)
 800ad10:	4820      	ldr	r0, [pc, #128]	; (800ad94 <udp_input+0x210>)
 800ad12:	f004 fdbf 	bl	800f894 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7fa f942 	bl	8004fa0 <pbuf_free>
      goto end;
 800ad1c:	e032      	b.n	800ad84 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d012      	beq.n	800ad4a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	699c      	ldr	r4, [r3, #24]
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	69d8      	ldr	r0, [r3, #28]
 800ad34:	8a3b      	ldrh	r3, [r7, #16]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <udp_input+0x224>)
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad3e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ad40:	e021      	b.n	800ad86 <udp_input+0x202>
        pbuf_free(p);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7fa f92c 	bl	8004fa0 <pbuf_free>
        goto end;
 800ad48:	e01c      	b.n	800ad84 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ad4a:	7cfb      	ldrb	r3, [r7, #19]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d112      	bne.n	800ad76 <udp_input+0x1f2>
 800ad50:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <udp_input+0x218>)
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad58:	2be0      	cmp	r3, #224	; 0xe0
 800ad5a:	d00c      	beq.n	800ad76 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ad5c:	4b0f      	ldr	r3, [pc, #60]	; (800ad9c <udp_input+0x218>)
 800ad5e:	899b      	ldrh	r3, [r3, #12]
 800ad60:	3308      	adds	r3, #8
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	b21b      	sxth	r3, r3
 800ad66:	4619      	mov	r1, r3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7fa f906 	bl	8004f7a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ad6e:	2103      	movs	r1, #3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f003 f9fb 	bl	800e16c <icmp_dest_unreach>
      pbuf_free(p);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7fa f912 	bl	8004fa0 <pbuf_free>
  return;
 800ad7c:	e003      	b.n	800ad86 <udp_input+0x202>
    pbuf_free(p);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7fa f90e 	bl	8004fa0 <pbuf_free>
  return;
 800ad84:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ad86:	372c      	adds	r7, #44	; 0x2c
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd90      	pop	{r4, r7, pc}
 800ad8c:	08012688 	.word	0x08012688
 800ad90:	0801272c 	.word	0x0801272c
 800ad94:	080126dc 	.word	0x080126dc
 800ad98:	08012744 	.word	0x08012744
 800ad9c:	20004cfc 	.word	0x20004cfc
 800ada0:	2000a4a8 	.word	0x2000a4a8
 800ada4:	08012760 	.word	0x08012760
 800ada8:	20004d0c 	.word	0x20004d0c

0800adac <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af02      	add	r7, sp, #8
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d109      	bne.n	800add4 <udp_sendto_if+0x28>
 800adc0:	4b2e      	ldr	r3, [pc, #184]	; (800ae7c <udp_sendto_if+0xd0>)
 800adc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800adc6:	492e      	ldr	r1, [pc, #184]	; (800ae80 <udp_sendto_if+0xd4>)
 800adc8:	482e      	ldr	r0, [pc, #184]	; (800ae84 <udp_sendto_if+0xd8>)
 800adca:	f004 fd63 	bl	800f894 <iprintf>
 800adce:	f06f 030f 	mvn.w	r3, #15
 800add2:	e04f      	b.n	800ae74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <udp_sendto_if+0x42>
 800adda:	4b28      	ldr	r3, [pc, #160]	; (800ae7c <udp_sendto_if+0xd0>)
 800addc:	f240 2281 	movw	r2, #641	; 0x281
 800ade0:	4929      	ldr	r1, [pc, #164]	; (800ae88 <udp_sendto_if+0xdc>)
 800ade2:	4828      	ldr	r0, [pc, #160]	; (800ae84 <udp_sendto_if+0xd8>)
 800ade4:	f004 fd56 	bl	800f894 <iprintf>
 800ade8:	f06f 030f 	mvn.w	r3, #15
 800adec:	e042      	b.n	800ae74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d109      	bne.n	800ae08 <udp_sendto_if+0x5c>
 800adf4:	4b21      	ldr	r3, [pc, #132]	; (800ae7c <udp_sendto_if+0xd0>)
 800adf6:	f240 2282 	movw	r2, #642	; 0x282
 800adfa:	4924      	ldr	r1, [pc, #144]	; (800ae8c <udp_sendto_if+0xe0>)
 800adfc:	4821      	ldr	r0, [pc, #132]	; (800ae84 <udp_sendto_if+0xd8>)
 800adfe:	f004 fd49 	bl	800f894 <iprintf>
 800ae02:	f06f 030f 	mvn.w	r3, #15
 800ae06:	e035      	b.n	800ae74 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d109      	bne.n	800ae22 <udp_sendto_if+0x76>
 800ae0e:	4b1b      	ldr	r3, [pc, #108]	; (800ae7c <udp_sendto_if+0xd0>)
 800ae10:	f240 2283 	movw	r2, #643	; 0x283
 800ae14:	491e      	ldr	r1, [pc, #120]	; (800ae90 <udp_sendto_if+0xe4>)
 800ae16:	481b      	ldr	r0, [pc, #108]	; (800ae84 <udp_sendto_if+0xd8>)
 800ae18:	f004 fd3c 	bl	800f894 <iprintf>
 800ae1c:	f06f 030f 	mvn.w	r3, #15
 800ae20:	e028      	b.n	800ae74 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d009      	beq.n	800ae3c <udp_sendto_if+0x90>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d005      	beq.n	800ae3c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae38:	2be0      	cmp	r3, #224	; 0xe0
 800ae3a:	d103      	bne.n	800ae44 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	3304      	adds	r3, #4
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e00b      	b.n	800ae5c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d002      	beq.n	800ae58 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800ae52:	f06f 0303 	mvn.w	r3, #3
 800ae56:	e00d      	b.n	800ae74 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ae5c:	887a      	ldrh	r2, [r7, #2]
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4613      	mov	r3, r2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f811 	bl	800ae94 <udp_sendto_if_src>
 800ae72:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3718      	adds	r7, #24
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	08012688 	.word	0x08012688
 800ae80:	080127fc 	.word	0x080127fc
 800ae84:	080126dc 	.word	0x080126dc
 800ae88:	08012818 	.word	0x08012818
 800ae8c:	08012834 	.word	0x08012834
 800ae90:	08012854 	.word	0x08012854

0800ae94 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08c      	sub	sp, #48	; 0x30
 800ae98:	af04      	add	r7, sp, #16
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d109      	bne.n	800aebc <udp_sendto_if_src+0x28>
 800aea8:	4b65      	ldr	r3, [pc, #404]	; (800b040 <udp_sendto_if_src+0x1ac>)
 800aeaa:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aeae:	4965      	ldr	r1, [pc, #404]	; (800b044 <udp_sendto_if_src+0x1b0>)
 800aeb0:	4865      	ldr	r0, [pc, #404]	; (800b048 <udp_sendto_if_src+0x1b4>)
 800aeb2:	f004 fcef 	bl	800f894 <iprintf>
 800aeb6:	f06f 030f 	mvn.w	r3, #15
 800aeba:	e0bc      	b.n	800b036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d109      	bne.n	800aed6 <udp_sendto_if_src+0x42>
 800aec2:	4b5f      	ldr	r3, [pc, #380]	; (800b040 <udp_sendto_if_src+0x1ac>)
 800aec4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800aec8:	4960      	ldr	r1, [pc, #384]	; (800b04c <udp_sendto_if_src+0x1b8>)
 800aeca:	485f      	ldr	r0, [pc, #380]	; (800b048 <udp_sendto_if_src+0x1b4>)
 800aecc:	f004 fce2 	bl	800f894 <iprintf>
 800aed0:	f06f 030f 	mvn.w	r3, #15
 800aed4:	e0af      	b.n	800b036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d109      	bne.n	800aef0 <udp_sendto_if_src+0x5c>
 800aedc:	4b58      	ldr	r3, [pc, #352]	; (800b040 <udp_sendto_if_src+0x1ac>)
 800aede:	f240 22d3 	movw	r2, #723	; 0x2d3
 800aee2:	495b      	ldr	r1, [pc, #364]	; (800b050 <udp_sendto_if_src+0x1bc>)
 800aee4:	4858      	ldr	r0, [pc, #352]	; (800b048 <udp_sendto_if_src+0x1b4>)
 800aee6:	f004 fcd5 	bl	800f894 <iprintf>
 800aeea:	f06f 030f 	mvn.w	r3, #15
 800aeee:	e0a2      	b.n	800b036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d109      	bne.n	800af0a <udp_sendto_if_src+0x76>
 800aef6:	4b52      	ldr	r3, [pc, #328]	; (800b040 <udp_sendto_if_src+0x1ac>)
 800aef8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800aefc:	4955      	ldr	r1, [pc, #340]	; (800b054 <udp_sendto_if_src+0x1c0>)
 800aefe:	4852      	ldr	r0, [pc, #328]	; (800b048 <udp_sendto_if_src+0x1b4>)
 800af00:	f004 fcc8 	bl	800f894 <iprintf>
 800af04:	f06f 030f 	mvn.w	r3, #15
 800af08:	e095      	b.n	800b036 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d109      	bne.n	800af24 <udp_sendto_if_src+0x90>
 800af10:	4b4b      	ldr	r3, [pc, #300]	; (800b040 <udp_sendto_if_src+0x1ac>)
 800af12:	f240 22d5 	movw	r2, #725	; 0x2d5
 800af16:	4950      	ldr	r1, [pc, #320]	; (800b058 <udp_sendto_if_src+0x1c4>)
 800af18:	484b      	ldr	r0, [pc, #300]	; (800b048 <udp_sendto_if_src+0x1b4>)
 800af1a:	f004 fcbb 	bl	800f894 <iprintf>
 800af1e:	f06f 030f 	mvn.w	r3, #15
 800af22:	e088      	b.n	800b036 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8a5b      	ldrh	r3, [r3, #18]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10f      	bne.n	800af4c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8a5b      	ldrh	r3, [r3, #18]
 800af32:	461a      	mov	r2, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 f893 	bl	800b060 <udp_bind>
 800af3a:	4603      	mov	r3, r0
 800af3c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800af3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800af46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af4a:	e074      	b.n	800b036 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	891b      	ldrh	r3, [r3, #8]
 800af50:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800af54:	4293      	cmp	r3, r2
 800af56:	d902      	bls.n	800af5e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800af58:	f04f 33ff 	mov.w	r3, #4294967295
 800af5c:	e06b      	b.n	800b036 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800af5e:	2108      	movs	r1, #8
 800af60:	68b8      	ldr	r0, [r7, #8]
 800af62:	f7f9 ff87 	bl	8004e74 <pbuf_add_header>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d015      	beq.n	800af98 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800af6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af70:	2108      	movs	r1, #8
 800af72:	2022      	movs	r0, #34	; 0x22
 800af74:	f7f9 fd30 	bl	80049d8 <pbuf_alloc>
 800af78:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800af80:	f04f 33ff 	mov.w	r3, #4294967295
 800af84:	e057      	b.n	800b036 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	891b      	ldrh	r3, [r3, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d006      	beq.n	800af9c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800af8e:	68b9      	ldr	r1, [r7, #8]
 800af90:	69f8      	ldr	r0, [r7, #28]
 800af92:	f7fa f91d 	bl	80051d0 <pbuf_chain>
 800af96:	e001      	b.n	800af9c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	895b      	ldrh	r3, [r3, #10]
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	d806      	bhi.n	800afb2 <udp_sendto_if_src+0x11e>
 800afa4:	4b26      	ldr	r3, [pc, #152]	; (800b040 <udp_sendto_if_src+0x1ac>)
 800afa6:	f240 320d 	movw	r2, #781	; 0x30d
 800afaa:	492c      	ldr	r1, [pc, #176]	; (800b05c <udp_sendto_if_src+0x1c8>)
 800afac:	4826      	ldr	r0, [pc, #152]	; (800b048 <udp_sendto_if_src+0x1b4>)
 800afae:	f004 fc71 	bl	800f894 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	8a5b      	ldrh	r3, [r3, #18]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f8 fc85 	bl	80038cc <lwip_htons>
 800afc2:	4603      	mov	r3, r0
 800afc4:	461a      	mov	r2, r3
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800afca:	887b      	ldrh	r3, [r7, #2]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7f8 fc7d 	bl	80038cc <lwip_htons>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461a      	mov	r2, r3
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2200      	movs	r2, #0
 800afde:	719a      	strb	r2, [r3, #6]
 800afe0:	2200      	movs	r2, #0
 800afe2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	891b      	ldrh	r3, [r3, #8]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7f8 fc6f 	bl	80038cc <lwip_htons>
 800afee:	4603      	mov	r3, r0
 800aff0:	461a      	mov	r2, r3
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800aff6:	2311      	movs	r3, #17
 800aff8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	7adb      	ldrb	r3, [r3, #11]
 800affe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	7a9b      	ldrb	r3, [r3, #10]
 800b004:	7cb9      	ldrb	r1, [r7, #18]
 800b006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b008:	9202      	str	r2, [sp, #8]
 800b00a:	7cfa      	ldrb	r2, [r7, #19]
 800b00c:	9201      	str	r2, [sp, #4]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	460b      	mov	r3, r1
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b016:	69f8      	ldr	r0, [r7, #28]
 800b018:	f003 fb38 	bl	800e68c <ip4_output_if_src>
 800b01c:	4603      	mov	r3, r0
 800b01e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	429a      	cmp	r2, r3
 800b026:	d004      	beq.n	800b032 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b028:	69f8      	ldr	r0, [r7, #28]
 800b02a:	f7f9 ffb9 	bl	8004fa0 <pbuf_free>
    q = NULL;
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b032:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	08012688 	.word	0x08012688
 800b044:	08012874 	.word	0x08012874
 800b048:	080126dc 	.word	0x080126dc
 800b04c:	08012894 	.word	0x08012894
 800b050:	080128b4 	.word	0x080128b4
 800b054:	080128d8 	.word	0x080128d8
 800b058:	080128fc 	.word	0x080128fc
 800b05c:	08012920 	.word	0x08012920

0800b060 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b074:	4b39      	ldr	r3, [pc, #228]	; (800b15c <udp_bind+0xfc>)
 800b076:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d109      	bne.n	800b092 <udp_bind+0x32>
 800b07e:	4b38      	ldr	r3, [pc, #224]	; (800b160 <udp_bind+0x100>)
 800b080:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b084:	4937      	ldr	r1, [pc, #220]	; (800b164 <udp_bind+0x104>)
 800b086:	4838      	ldr	r0, [pc, #224]	; (800b168 <udp_bind+0x108>)
 800b088:	f004 fc04 	bl	800f894 <iprintf>
 800b08c:	f06f 030f 	mvn.w	r3, #15
 800b090:	e060      	b.n	800b154 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b096:	4b35      	ldr	r3, [pc, #212]	; (800b16c <udp_bind+0x10c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e009      	b.n	800b0b2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d102      	bne.n	800b0ac <udp_bind+0x4c>
      rebind = 1;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	74fb      	strb	r3, [r7, #19]
      break;
 800b0aa:	e005      	b.n	800b0b8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	617b      	str	r3, [r7, #20]
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1f2      	bne.n	800b09e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b0b8:	88fb      	ldrh	r3, [r7, #6]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d109      	bne.n	800b0d2 <udp_bind+0x72>
    port = udp_new_port();
 800b0be:	f7ff fcc5 	bl	800aa4c <udp_new_port>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b0c6:	88fb      	ldrh	r3, [r7, #6]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d12c      	bne.n	800b126 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b0cc:	f06f 0307 	mvn.w	r3, #7
 800b0d0:	e040      	b.n	800b154 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b0d2:	4b26      	ldr	r3, [pc, #152]	; (800b16c <udp_bind+0x10c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	e022      	b.n	800b120 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d01b      	beq.n	800b11a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	8a5b      	ldrh	r3, [r3, #18]
 800b0e6:	88fa      	ldrh	r2, [r7, #6]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d116      	bne.n	800b11a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d00d      	beq.n	800b114 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00a      	beq.n	800b114 <udp_bind+0xb4>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d006      	beq.n	800b114 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b106:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b114:	f06f 0307 	mvn.w	r3, #7
 800b118:	e01c      	b.n	800b154 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d1d9      	bne.n	800b0da <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <udp_bind+0xd2>
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	e000      	b.n	800b134 <udp_bind+0xd4>
 800b132:	2300      	movs	r3, #0
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	88fa      	ldrh	r2, [r7, #6]
 800b13c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b13e:	7cfb      	ldrb	r3, [r7, #19]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d106      	bne.n	800b152 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b144:	4b09      	ldr	r3, [pc, #36]	; (800b16c <udp_bind+0x10c>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b14c:	4a07      	ldr	r2, [pc, #28]	; (800b16c <udp_bind+0x10c>)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	0801354c 	.word	0x0801354c
 800b160:	08012688 	.word	0x08012688
 800b164:	08012950 	.word	0x08012950
 800b168:	080126dc 	.word	0x080126dc
 800b16c:	2000a4a8 	.word	0x2000a4a8

0800b170 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	4613      	mov	r3, r2
 800b17c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d109      	bne.n	800b198 <udp_connect+0x28>
 800b184:	4b2c      	ldr	r3, [pc, #176]	; (800b238 <udp_connect+0xc8>)
 800b186:	f240 4235 	movw	r2, #1077	; 0x435
 800b18a:	492c      	ldr	r1, [pc, #176]	; (800b23c <udp_connect+0xcc>)
 800b18c:	482c      	ldr	r0, [pc, #176]	; (800b240 <udp_connect+0xd0>)
 800b18e:	f004 fb81 	bl	800f894 <iprintf>
 800b192:	f06f 030f 	mvn.w	r3, #15
 800b196:	e04b      	b.n	800b230 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <udp_connect+0x42>
 800b19e:	4b26      	ldr	r3, [pc, #152]	; (800b238 <udp_connect+0xc8>)
 800b1a0:	f240 4236 	movw	r2, #1078	; 0x436
 800b1a4:	4927      	ldr	r1, [pc, #156]	; (800b244 <udp_connect+0xd4>)
 800b1a6:	4826      	ldr	r0, [pc, #152]	; (800b240 <udp_connect+0xd0>)
 800b1a8:	f004 fb74 	bl	800f894 <iprintf>
 800b1ac:	f06f 030f 	mvn.w	r3, #15
 800b1b0:	e03e      	b.n	800b230 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8a5b      	ldrh	r3, [r3, #18]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10f      	bne.n	800b1da <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8a5b      	ldrh	r3, [r3, #18]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff ff4c 	bl	800b060 <udp_bind>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b1cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <udp_connect+0x6a>
      return err;
 800b1d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1d8:	e02a      	b.n	800b230 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <udp_connect+0x76>
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	e000      	b.n	800b1e8 <udp_connect+0x78>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	7c1b      	ldrb	r3, [r3, #16]
 800b1f6:	f043 0304 	orr.w	r3, r3, #4
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b200:	4b11      	ldr	r3, [pc, #68]	; (800b248 <udp_connect+0xd8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	617b      	str	r3, [r7, #20]
 800b206:	e008      	b.n	800b21a <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d101      	bne.n	800b214 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	e00d      	b.n	800b230 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1f3      	bne.n	800b208 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b220:	4b09      	ldr	r3, [pc, #36]	; (800b248 <udp_connect+0xd8>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b228:	4a07      	ldr	r2, [pc, #28]	; (800b248 <udp_connect+0xd8>)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	08012688 	.word	0x08012688
 800b23c:	08012968 	.word	0x08012968
 800b240:	080126dc 	.word	0x080126dc
 800b244:	08012984 	.word	0x08012984
 800b248:	2000a4a8 	.word	0x2000a4a8

0800b24c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d107      	bne.n	800b26e <udp_recv+0x22>
 800b25e:	4b08      	ldr	r3, [pc, #32]	; (800b280 <udp_recv+0x34>)
 800b260:	f240 428a 	movw	r2, #1162	; 0x48a
 800b264:	4907      	ldr	r1, [pc, #28]	; (800b284 <udp_recv+0x38>)
 800b266:	4808      	ldr	r0, [pc, #32]	; (800b288 <udp_recv+0x3c>)
 800b268:	f004 fb14 	bl	800f894 <iprintf>
 800b26c:	e005      	b.n	800b27a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	61da      	str	r2, [r3, #28]
}
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	08012688 	.word	0x08012688
 800b284:	080129bc 	.word	0x080129bc
 800b288:	080126dc 	.word	0x080126dc

0800b28c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d107      	bne.n	800b2aa <udp_remove+0x1e>
 800b29a:	4b19      	ldr	r3, [pc, #100]	; (800b300 <udp_remove+0x74>)
 800b29c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b2a0:	4918      	ldr	r1, [pc, #96]	; (800b304 <udp_remove+0x78>)
 800b2a2:	4819      	ldr	r0, [pc, #100]	; (800b308 <udp_remove+0x7c>)
 800b2a4:	f004 faf6 	bl	800f894 <iprintf>
 800b2a8:	e026      	b.n	800b2f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b2aa:	4b18      	ldr	r3, [pc, #96]	; (800b30c <udp_remove+0x80>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d105      	bne.n	800b2c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b2b4:	4b15      	ldr	r3, [pc, #84]	; (800b30c <udp_remove+0x80>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	4a14      	ldr	r2, [pc, #80]	; (800b30c <udp_remove+0x80>)
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	e017      	b.n	800b2f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b2c0:	4b12      	ldr	r3, [pc, #72]	; (800b30c <udp_remove+0x80>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	e010      	b.n	800b2ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d009      	beq.n	800b2e4 <udp_remove+0x58>
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d104      	bne.n	800b2e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	60da      	str	r2, [r3, #12]
        break;
 800b2e2:	e005      	b.n	800b2f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1eb      	bne.n	800b2c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f7f8 ffd2 	bl	800429c <memp_free>
}
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	08012688 	.word	0x08012688
 800b304:	080129d4 	.word	0x080129d4
 800b308:	080126dc 	.word	0x080126dc
 800b30c:	2000a4a8 	.word	0x2000a4a8

0800b310 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b316:	2000      	movs	r0, #0
 800b318:	f7f8 ff50 	bl	80041bc <memp_malloc>
 800b31c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d007      	beq.n	800b334 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b324:	2220      	movs	r2, #32
 800b326:	2100      	movs	r1, #0
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f004 fb18 	bl	800f95e <memset>
    pcb->ttl = UDP_TTL;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	22ff      	movs	r2, #255	; 0xff
 800b332:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b334:	687b      	ldr	r3, [r7, #4]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01e      	beq.n	800b38e <udp_netif_ip_addr_changed+0x4e>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d01a      	beq.n	800b38e <udp_netif_ip_addr_changed+0x4e>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d017      	beq.n	800b38e <udp_netif_ip_addr_changed+0x4e>
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d013      	beq.n	800b38e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b366:	4b0d      	ldr	r3, [pc, #52]	; (800b39c <udp_netif_ip_addr_changed+0x5c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e00c      	b.n	800b388 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	429a      	cmp	r2, r3
 800b378:	d103      	bne.n	800b382 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	60fb      	str	r3, [r7, #12]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1ef      	bne.n	800b36e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b38e:	bf00      	nop
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	2000a4a8 	.word	0x2000a4a8

0800b3a0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b3a4:	4b20      	ldr	r3, [pc, #128]	; (800b428 <dhcp_inc_pcb_refcount+0x88>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d133      	bne.n	800b414 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b3ac:	4b1f      	ldr	r3, [pc, #124]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <dhcp_inc_pcb_refcount+0x20>
 800b3b4:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <dhcp_inc_pcb_refcount+0x90>)
 800b3b6:	22e5      	movs	r2, #229	; 0xe5
 800b3b8:	491e      	ldr	r1, [pc, #120]	; (800b434 <dhcp_inc_pcb_refcount+0x94>)
 800b3ba:	481f      	ldr	r0, [pc, #124]	; (800b438 <dhcp_inc_pcb_refcount+0x98>)
 800b3bc:	f004 fa6a 	bl	800f894 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b3c0:	f7ff ffa6 	bl	800b310 <udp_new>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4a19      	ldr	r2, [pc, #100]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3c8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800b3ca:	4b18      	ldr	r3, [pc, #96]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d102      	bne.n	800b3d8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d6:	e024      	b.n	800b422 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b3d8:	4b14      	ldr	r3, [pc, #80]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	7a5a      	ldrb	r2, [r3, #9]
 800b3de:	4b13      	ldr	r3, [pc, #76]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f042 0220 	orr.w	r2, r2, #32
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800b3ea:	4b10      	ldr	r3, [pc, #64]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2244      	movs	r2, #68	; 0x44
 800b3f0:	4912      	ldr	r1, [pc, #72]	; (800b43c <dhcp_inc_pcb_refcount+0x9c>)
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff fe34 	bl	800b060 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2243      	movs	r2, #67	; 0x43
 800b3fe:	490f      	ldr	r1, [pc, #60]	; (800b43c <dhcp_inc_pcb_refcount+0x9c>)
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff feb5 	bl	800b170 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <dhcp_inc_pcb_refcount+0x8c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2200      	movs	r2, #0
 800b40c:	490c      	ldr	r1, [pc, #48]	; (800b440 <dhcp_inc_pcb_refcount+0xa0>)
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff ff1c 	bl	800b24c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b414:	4b04      	ldr	r3, [pc, #16]	; (800b428 <dhcp_inc_pcb_refcount+0x88>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	3301      	adds	r3, #1
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <dhcp_inc_pcb_refcount+0x88>)
 800b41e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	2000a4d8 	.word	0x2000a4d8
 800b42c:	2000a4d4 	.word	0x2000a4d4
 800b430:	080129ec 	.word	0x080129ec
 800b434:	08012a24 	.word	0x08012a24
 800b438:	08012a4c 	.word	0x08012a4c
 800b43c:	0801354c 	.word	0x0801354c
 800b440:	0800ccd5 	.word	0x0800ccd5

0800b444 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b448:	4b0e      	ldr	r3, [pc, #56]	; (800b484 <dhcp_dec_pcb_refcount+0x40>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d105      	bne.n	800b45c <dhcp_dec_pcb_refcount+0x18>
 800b450:	4b0d      	ldr	r3, [pc, #52]	; (800b488 <dhcp_dec_pcb_refcount+0x44>)
 800b452:	22ff      	movs	r2, #255	; 0xff
 800b454:	490d      	ldr	r1, [pc, #52]	; (800b48c <dhcp_dec_pcb_refcount+0x48>)
 800b456:	480e      	ldr	r0, [pc, #56]	; (800b490 <dhcp_dec_pcb_refcount+0x4c>)
 800b458:	f004 fa1c 	bl	800f894 <iprintf>
  dhcp_pcb_refcount--;
 800b45c:	4b09      	ldr	r3, [pc, #36]	; (800b484 <dhcp_dec_pcb_refcount+0x40>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	3b01      	subs	r3, #1
 800b462:	b2da      	uxtb	r2, r3
 800b464:	4b07      	ldr	r3, [pc, #28]	; (800b484 <dhcp_dec_pcb_refcount+0x40>)
 800b466:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800b468:	4b06      	ldr	r3, [pc, #24]	; (800b484 <dhcp_dec_pcb_refcount+0x40>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d107      	bne.n	800b480 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800b470:	4b08      	ldr	r3, [pc, #32]	; (800b494 <dhcp_dec_pcb_refcount+0x50>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff ff09 	bl	800b28c <udp_remove>
    dhcp_pcb = NULL;
 800b47a:	4b06      	ldr	r3, [pc, #24]	; (800b494 <dhcp_dec_pcb_refcount+0x50>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]
  }
}
 800b480:	bf00      	nop
 800b482:	bd80      	pop	{r7, pc}
 800b484:	2000a4d8 	.word	0x2000a4d8
 800b488:	080129ec 	.word	0x080129ec
 800b48c:	08012a74 	.word	0x08012a74
 800b490:	08012a4c 	.word	0x08012a4c
 800b494:	2000a4d4 	.word	0x2000a4d4

0800b498 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b4a6:	210c      	movs	r1, #12
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f001 f855 	bl	800c558 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b4ae:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <dhcp_handle_nak+0x30>)
 800b4b0:	4a05      	ldr	r2, [pc, #20]	; (800b4c8 <dhcp_handle_nak+0x30>)
 800b4b2:	4905      	ldr	r1, [pc, #20]	; (800b4c8 <dhcp_handle_nak+0x30>)
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f7f9 f893 	bl	80045e0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fc48 	bl	800bd50 <dhcp_discover>
}
 800b4c0:	bf00      	nop
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	0801354c 	.word	0x0801354c

0800b4cc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b4da:	2108      	movs	r1, #8
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f001 f83b 	bl	800c558 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	331c      	adds	r3, #28
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f002 fb3c 	bl	800db68 <etharp_query>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	799b      	ldrb	r3, [r3, #6]
 800b4f8:	2bff      	cmp	r3, #255	; 0xff
 800b4fa:	d005      	beq.n	800b508 <dhcp_check+0x3c>
    dhcp->tries++;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	799b      	ldrb	r3, [r3, #6]
 800b500:	3301      	adds	r3, #1
 800b502:	b2da      	uxtb	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800b508:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b50c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b50e:	893b      	ldrh	r3, [r7, #8]
 800b510:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b514:	4a06      	ldr	r2, [pc, #24]	; (800b530 <dhcp_check+0x64>)
 800b516:	fb82 1203 	smull	r1, r2, r2, r3
 800b51a:	1152      	asrs	r2, r2, #5
 800b51c:	17db      	asrs	r3, r3, #31
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	b29a      	uxth	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	10624dd3 	.word	0x10624dd3

0800b534 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b544:	4b0c      	ldr	r3, [pc, #48]	; (800b578 <dhcp_handle_offer+0x44>)
 800b546:	789b      	ldrb	r3, [r3, #2]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d011      	beq.n	800b570 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b552:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <dhcp_handle_offer+0x48>)
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	4618      	mov	r0, r3
 800b558:	f7f8 f9cd 	bl	80038f6 <lwip_htonl>
 800b55c:	4602      	mov	r2, r0
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	691a      	ldr	r2, [r3, #16]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f808 	bl	800b580 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800b570:	bf00      	nop
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	2000a4cc 	.word	0x2000a4cc
 800b57c:	2000a4ac 	.word	0x2000a4ac

0800b580 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b580:	b5b0      	push	{r4, r5, r7, lr}
 800b582:	b08a      	sub	sp, #40	; 0x28
 800b584:	af02      	add	r7, sp, #8
 800b586:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d109      	bne.n	800b5a2 <dhcp_select+0x22>
 800b58e:	4b71      	ldr	r3, [pc, #452]	; (800b754 <dhcp_select+0x1d4>)
 800b590:	f240 1277 	movw	r2, #375	; 0x177
 800b594:	4970      	ldr	r1, [pc, #448]	; (800b758 <dhcp_select+0x1d8>)
 800b596:	4871      	ldr	r0, [pc, #452]	; (800b75c <dhcp_select+0x1dc>)
 800b598:	f004 f97c 	bl	800f894 <iprintf>
 800b59c:	f06f 030f 	mvn.w	r3, #15
 800b5a0:	e0d3      	b.n	800b74a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <dhcp_select+0x42>
 800b5ae:	4b69      	ldr	r3, [pc, #420]	; (800b754 <dhcp_select+0x1d4>)
 800b5b0:	f240 1279 	movw	r2, #377	; 0x179
 800b5b4:	496a      	ldr	r1, [pc, #424]	; (800b760 <dhcp_select+0x1e0>)
 800b5b6:	4869      	ldr	r0, [pc, #420]	; (800b75c <dhcp_select+0x1dc>)
 800b5b8:	f004 f96c 	bl	800f894 <iprintf>
 800b5bc:	f06f 0305 	mvn.w	r3, #5
 800b5c0:	e0c3      	b.n	800b74a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	69b8      	ldr	r0, [r7, #24]
 800b5c6:	f000 ffc7 	bl	800c558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b5ca:	f107 030c 	add.w	r3, r7, #12
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	69b9      	ldr	r1, [r7, #24]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f001 fc4c 	bl	800ce70 <dhcp_create_msg>
 800b5d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 8085 	beq.w	800b6ec <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b5e8:	89b8      	ldrh	r0, [r7, #12]
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	2239      	movs	r2, #57	; 0x39
 800b5f4:	f000 ffca 	bl	800c58c <dhcp_option>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b5fc:	89b8      	ldrh	r0, [r7, #12]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b608:	461a      	mov	r2, r3
 800b60a:	f001 f819 	bl	800c640 <dhcp_option_short>
 800b60e:	4603      	mov	r3, r0
 800b610:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b612:	89b8      	ldrh	r0, [r7, #12]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b61a:	2304      	movs	r3, #4
 800b61c:	2232      	movs	r2, #50	; 0x32
 800b61e:	f000 ffb5 	bl	800c58c <dhcp_option>
 800b622:	4603      	mov	r3, r0
 800b624:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b626:	89bc      	ldrh	r4, [r7, #12]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	4618      	mov	r0, r3
 800b634:	f7f8 f95f 	bl	80038f6 <lwip_htonl>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
 800b63c:	4629      	mov	r1, r5
 800b63e:	4620      	mov	r0, r4
 800b640:	f001 f830 	bl	800c6a4 <dhcp_option_long>
 800b644:	4603      	mov	r3, r0
 800b646:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800b648:	89b8      	ldrh	r0, [r7, #12]
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b650:	2304      	movs	r3, #4
 800b652:	2236      	movs	r2, #54	; 0x36
 800b654:	f000 ff9a 	bl	800c58c <dhcp_option>
 800b658:	4603      	mov	r3, r0
 800b65a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800b65c:	89bc      	ldrh	r4, [r7, #12]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	4618      	mov	r0, r3
 800b66a:	f7f8 f944 	bl	80038f6 <lwip_htonl>
 800b66e:	4603      	mov	r3, r0
 800b670:	461a      	mov	r2, r3
 800b672:	4629      	mov	r1, r5
 800b674:	4620      	mov	r0, r4
 800b676:	f001 f815 	bl	800c6a4 <dhcp_option_long>
 800b67a:	4603      	mov	r3, r0
 800b67c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b67e:	89b8      	ldrh	r0, [r7, #12]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b686:	2303      	movs	r3, #3
 800b688:	2237      	movs	r2, #55	; 0x37
 800b68a:	f000 ff7f 	bl	800c58c <dhcp_option>
 800b68e:	4603      	mov	r3, r0
 800b690:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b692:	2300      	movs	r3, #0
 800b694:	77bb      	strb	r3, [r7, #30]
 800b696:	e00e      	b.n	800b6b6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800b698:	89b8      	ldrh	r0, [r7, #12]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b6a0:	7fbb      	ldrb	r3, [r7, #30]
 800b6a2:	4a30      	ldr	r2, [pc, #192]	; (800b764 <dhcp_select+0x1e4>)
 800b6a4:	5cd3      	ldrb	r3, [r2, r3]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f000 ffa4 	bl	800c5f4 <dhcp_option_byte>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b6b0:	7fbb      	ldrb	r3, [r7, #30]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	77bb      	strb	r3, [r7, #30]
 800b6b6:	7fbb      	ldrb	r3, [r7, #30]
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d9ed      	bls.n	800b698 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800b6bc:	89b8      	ldrh	r0, [r7, #12]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	33f0      	adds	r3, #240	; 0xf0
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f001 fca9 	bl	800d01c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800b6ca:	4b27      	ldr	r3, [pc, #156]	; (800b768 <dhcp_select+0x1e8>)
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	4b27      	ldr	r3, [pc, #156]	; (800b76c <dhcp_select+0x1ec>)
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	2343      	movs	r3, #67	; 0x43
 800b6d8:	4a25      	ldr	r2, [pc, #148]	; (800b770 <dhcp_select+0x1f0>)
 800b6da:	6979      	ldr	r1, [r7, #20]
 800b6dc:	f7ff fbda 	bl	800ae94 <udp_sendto_if_src>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800b6e4:	6978      	ldr	r0, [r7, #20]
 800b6e6:	f7f9 fc5b 	bl	8004fa0 <pbuf_free>
 800b6ea:	e001      	b.n	800b6f0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800b6ec:	23ff      	movs	r3, #255	; 0xff
 800b6ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	799b      	ldrb	r3, [r3, #6]
 800b6f4:	2bff      	cmp	r3, #255	; 0xff
 800b6f6:	d005      	beq.n	800b704 <dhcp_select+0x184>
    dhcp->tries++;
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	799b      	ldrb	r3, [r3, #6]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	799b      	ldrb	r3, [r3, #6]
 800b708:	2b05      	cmp	r3, #5
 800b70a:	d80d      	bhi.n	800b728 <dhcp_select+0x1a8>
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	799b      	ldrb	r3, [r3, #6]
 800b710:	461a      	mov	r2, r3
 800b712:	2301      	movs	r3, #1
 800b714:	4093      	lsls	r3, r2
 800b716:	b29b      	uxth	r3, r3
 800b718:	461a      	mov	r2, r3
 800b71a:	0152      	lsls	r2, r2, #5
 800b71c:	1ad2      	subs	r2, r2, r3
 800b71e:	0092      	lsls	r2, r2, #2
 800b720:	4413      	add	r3, r2
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	b29b      	uxth	r3, r3
 800b726:	e001      	b.n	800b72c <dhcp_select+0x1ac>
 800b728:	f64e 2360 	movw	r3, #60000	; 0xea60
 800b72c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b72e:	89fb      	ldrh	r3, [r7, #14]
 800b730:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b734:	4a0f      	ldr	r2, [pc, #60]	; (800b774 <dhcp_select+0x1f4>)
 800b736:	fb82 1203 	smull	r1, r2, r2, r3
 800b73a:	1152      	asrs	r2, r2, #5
 800b73c:	17db      	asrs	r3, r3, #31
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	b29a      	uxth	r2, r3
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b746:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bdb0      	pop	{r4, r5, r7, pc}
 800b752:	bf00      	nop
 800b754:	080129ec 	.word	0x080129ec
 800b758:	08012a98 	.word	0x08012a98
 800b75c:	08012a4c 	.word	0x08012a4c
 800b760:	08012ab4 	.word	0x08012ab4
 800b764:	2000002c 	.word	0x2000002c
 800b768:	2000a4d4 	.word	0x2000a4d4
 800b76c:	0801354c 	.word	0x0801354c
 800b770:	08013550 	.word	0x08013550
 800b774:	10624dd3 	.word	0x10624dd3

0800b778 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800b77e:	4b27      	ldr	r3, [pc, #156]	; (800b81c <dhcp_coarse_tmr+0xa4>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	607b      	str	r3, [r7, #4]
 800b784:	e042      	b.n	800b80c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d039      	beq.n	800b806 <dhcp_coarse_tmr+0x8e>
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	795b      	ldrb	r3, [r3, #5]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d035      	beq.n	800b806 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	8a9b      	ldrh	r3, [r3, #20]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d012      	beq.n	800b7c8 <dhcp_coarse_tmr+0x50>
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	8a5b      	ldrh	r3, [r3, #18]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	825a      	strh	r2, [r3, #18]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	8a5a      	ldrh	r2, [r3, #18]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	8a9b      	ldrh	r3, [r3, #20]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d106      	bne.n	800b7c8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fe32 	bl	800c424 <dhcp_release_and_stop>
        dhcp_start(netif);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f969 	bl	800ba98 <dhcp_start>
 800b7c6:	e01e      	b.n	800b806 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	8a1b      	ldrh	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00b      	beq.n	800b7e8 <dhcp_coarse_tmr+0x70>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	8a1b      	ldrh	r3, [r3, #16]
 800b7d4:	1e5a      	subs	r2, r3, #1
 800b7d6:	b291      	uxth	r1, r2
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	8211      	strh	r1, [r2, #16]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d103      	bne.n	800b7e8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f8c6 	bl	800b972 <dhcp_t2_timeout>
 800b7e6:	e00e      	b.n	800b806 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	89db      	ldrh	r3, [r3, #14]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00a      	beq.n	800b806 <dhcp_coarse_tmr+0x8e>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	89db      	ldrh	r3, [r3, #14]
 800b7f4:	1e5a      	subs	r2, r3, #1
 800b7f6:	b291      	uxth	r1, r2
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	81d1      	strh	r1, [r2, #14]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d102      	bne.n	800b806 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f888 	bl	800b916 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	607b      	str	r3, [r7, #4]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1b9      	bne.n	800b786 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	2000a440 	.word	0x2000a440

0800b820 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800b826:	4b16      	ldr	r3, [pc, #88]	; (800b880 <dhcp_fine_tmr+0x60>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	e020      	b.n	800b870 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d017      	beq.n	800b86a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	891b      	ldrh	r3, [r3, #8]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d906      	bls.n	800b850 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	891b      	ldrh	r3, [r3, #8]
 800b846:	3b01      	subs	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	811a      	strh	r2, [r3, #8]
 800b84e:	e00c      	b.n	800b86a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	891b      	ldrh	r3, [r3, #8]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d108      	bne.n	800b86a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	891b      	ldrh	r3, [r3, #8]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	b29a      	uxth	r2, r3
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f80d 	bl	800b884 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	607b      	str	r3, [r7, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1db      	bne.n	800b82e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800b876:	bf00      	nop
 800b878:	bf00      	nop
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	2000a440 	.word	0x2000a440

0800b884 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b890:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	795b      	ldrb	r3, [r3, #5]
 800b896:	2b0c      	cmp	r3, #12
 800b898:	d003      	beq.n	800b8a2 <dhcp_timeout+0x1e>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	795b      	ldrb	r3, [r3, #5]
 800b89e:	2b06      	cmp	r3, #6
 800b8a0:	d103      	bne.n	800b8aa <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fa54 	bl	800bd50 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800b8a8:	e031      	b.n	800b90e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	795b      	ldrb	r3, [r3, #5]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d10e      	bne.n	800b8d0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	799b      	ldrb	r3, [r3, #6]
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d803      	bhi.n	800b8c2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff fe60 	bl	800b580 <dhcp_select>
}
 800b8c0:	e025      	b.n	800b90e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fdae 	bl	800c424 <dhcp_release_and_stop>
      dhcp_start(netif);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8e5 	bl	800ba98 <dhcp_start>
}
 800b8ce:	e01e      	b.n	800b90e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	795b      	ldrb	r3, [r3, #5]
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d10b      	bne.n	800b8f0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	799b      	ldrb	r3, [r3, #6]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d803      	bhi.n	800b8e8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff fdf3 	bl	800b4cc <dhcp_check>
}
 800b8e6:	e012      	b.n	800b90e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fad3 	bl	800be94 <dhcp_bind>
}
 800b8ee:	e00e      	b.n	800b90e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	795b      	ldrb	r3, [r3, #5]
 800b8f4:	2b03      	cmp	r3, #3
 800b8f6:	d10a      	bne.n	800b90e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	799b      	ldrb	r3, [r3, #6]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d803      	bhi.n	800b908 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fcd9 	bl	800c2b8 <dhcp_reboot>
}
 800b906:	e002      	b.n	800b90e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fa21 	bl	800bd50 <dhcp_discover>
}
 800b90e:	bf00      	nop
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b084      	sub	sp, #16
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	795b      	ldrb	r3, [r3, #5]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d007      	beq.n	800b93c <dhcp_t1_timeout+0x26>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	795b      	ldrb	r3, [r3, #5]
 800b930:	2b0a      	cmp	r3, #10
 800b932:	d003      	beq.n	800b93c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b938:	2b05      	cmp	r3, #5
 800b93a:	d116      	bne.n	800b96a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fb83 	bl	800c048 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	899b      	ldrh	r3, [r3, #12]
 800b946:	461a      	mov	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	8a5b      	ldrh	r3, [r3, #18]
 800b94c:	1ad3      	subs	r3, r2, r3
 800b94e:	2b01      	cmp	r3, #1
 800b950:	dd0b      	ble.n	800b96a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	899b      	ldrh	r3, [r3, #12]
 800b956:	461a      	mov	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	8a5b      	ldrh	r3, [r3, #18]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	0fda      	lsrs	r2, r3, #31
 800b960:	4413      	add	r3, r2
 800b962:	105b      	asrs	r3, r3, #1
 800b964:	b29a      	uxth	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800b96a:	bf00      	nop
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	795b      	ldrb	r3, [r3, #5]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d00b      	beq.n	800b9a0 <dhcp_t2_timeout+0x2e>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	795b      	ldrb	r3, [r3, #5]
 800b98c:	2b0a      	cmp	r3, #10
 800b98e:	d007      	beq.n	800b9a0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800b994:	2b05      	cmp	r3, #5
 800b996:	d003      	beq.n	800b9a0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	795b      	ldrb	r3, [r3, #5]
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	d116      	bne.n	800b9ce <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fbed 	bl	800c180 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8a9b      	ldrh	r3, [r3, #20]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8a5b      	ldrh	r3, [r3, #18]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	dd0b      	ble.n	800b9ce <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	8a9b      	ldrh	r3, [r3, #20]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	8a5b      	ldrh	r3, [r3, #18]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	0fda      	lsrs	r2, r3, #31
 800b9c4:	4413      	add	r3, r2
 800b9c6:	105b      	asrs	r3, r3, #1
 800b9c8:	b29a      	uxth	r2, r3
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800b9ce:	bf00      	nop
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
	...

0800b9d8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800b9f4:	4b26      	ldr	r3, [pc, #152]	; (800ba90 <dhcp_handle_ack+0xb8>)
 800b9f6:	78db      	ldrb	r3, [r3, #3]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800b9fc:	4b25      	ldr	r3, [pc, #148]	; (800ba94 <dhcp_handle_ack+0xbc>)
 800b9fe:	68da      	ldr	r2, [r3, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ba04:	4b22      	ldr	r3, [pc, #136]	; (800ba90 <dhcp_handle_ack+0xb8>)
 800ba06:	791b      	ldrb	r3, [r3, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ba0c:	4b21      	ldr	r3, [pc, #132]	; (800ba94 <dhcp_handle_ack+0xbc>)
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	62da      	str	r2, [r3, #44]	; 0x2c
 800ba14:	e004      	b.n	800ba20 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1a:	085a      	lsrs	r2, r3, #1
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ba20:	4b1b      	ldr	r3, [pc, #108]	; (800ba90 <dhcp_handle_ack+0xb8>)
 800ba22:	795b      	ldrb	r3, [r3, #5]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d004      	beq.n	800ba32 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ba28:	4b1a      	ldr	r3, [pc, #104]	; (800ba94 <dhcp_handle_ack+0xbc>)
 800ba2a:	695a      	ldr	r2, [r3, #20]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ba30:	e007      	b.n	800ba42 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba36:	4613      	mov	r3, r2
 800ba38:	00db      	lsls	r3, r3, #3
 800ba3a:	1a9b      	subs	r3, r3, r2
 800ba3c:	08da      	lsrs	r2, r3, #3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	691a      	ldr	r2, [r3, #16]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ba4a:	4b11      	ldr	r3, [pc, #68]	; (800ba90 <dhcp_handle_ack+0xb8>)
 800ba4c:	799b      	ldrb	r3, [r3, #6]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00b      	beq.n	800ba6a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ba52:	4b10      	ldr	r3, [pc, #64]	; (800ba94 <dhcp_handle_ack+0xbc>)
 800ba54:	699b      	ldr	r3, [r3, #24]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f7 ff4d 	bl	80038f6 <lwip_htonl>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	71da      	strb	r2, [r3, #7]
 800ba68:	e002      	b.n	800ba70 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ba70:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <dhcp_handle_ack+0xb8>)
 800ba72:	79db      	ldrb	r3, [r3, #7]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d007      	beq.n	800ba88 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <dhcp_handle_ack+0xbc>)
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f7 ff3a 	bl	80038f6 <lwip_htonl>
 800ba82:	4602      	mov	r2, r0
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800ba88:	bf00      	nop
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	2000a4cc 	.word	0x2000a4cc
 800ba94:	2000a4ac 	.word	0x2000a4ac

0800ba98 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <dhcp_start+0x22>
 800baa6:	4b37      	ldr	r3, [pc, #220]	; (800bb84 <dhcp_start+0xec>)
 800baa8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800baac:	4936      	ldr	r1, [pc, #216]	; (800bb88 <dhcp_start+0xf0>)
 800baae:	4837      	ldr	r0, [pc, #220]	; (800bb8c <dhcp_start+0xf4>)
 800bab0:	f003 fef0 	bl	800f894 <iprintf>
 800bab4:	f06f 030f 	mvn.w	r3, #15
 800bab8:	e060      	b.n	800bb7c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bac0:	f003 0301 	and.w	r3, r3, #1
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <dhcp_start+0x44>
 800bac8:	4b2e      	ldr	r3, [pc, #184]	; (800bb84 <dhcp_start+0xec>)
 800baca:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800bace:	4930      	ldr	r1, [pc, #192]	; (800bb90 <dhcp_start+0xf8>)
 800bad0:	482e      	ldr	r0, [pc, #184]	; (800bb8c <dhcp_start+0xf4>)
 800bad2:	f003 fedf 	bl	800f894 <iprintf>
 800bad6:	f06f 030f 	mvn.w	r3, #15
 800bada:	e04f      	b.n	800bb7c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bae6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800baea:	d202      	bcs.n	800baf2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e044      	b.n	800bb7c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10d      	bne.n	800bb14 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800baf8:	2034      	movs	r0, #52	; 0x34
 800bafa:	f7f8 f9cf 	bl	8003e9c <mem_malloc>
 800bafe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800bb06:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0a:	e037      	b.n	800bb7c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	625a      	str	r2, [r3, #36]	; 0x24
 800bb12:	e005      	b.n	800bb20 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	791b      	ldrb	r3, [r3, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800bb1c:	f7ff fc92 	bl	800b444 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800bb20:	2234      	movs	r2, #52	; 0x34
 800bb22:	2100      	movs	r1, #0
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f003 ff1a 	bl	800f95e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800bb2a:	f7ff fc39 	bl	800b3a0 <dhcp_inc_pcb_refcount>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <dhcp_start+0xa2>
    return ERR_MEM;
 800bb34:	f04f 33ff 	mov.w	r3, #4294967295
 800bb38:	e020      	b.n	800bb7c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb46:	f003 0304 	and.w	r3, r3, #4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d105      	bne.n	800bb5a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800bb4e:	2102      	movs	r1, #2
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fd01 	bl	800c558 <dhcp_set_state>
    return ERR_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e010      	b.n	800bb7c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f8f8 	bl	800bd50 <dhcp_discover>
 800bb60:	4603      	mov	r3, r0
 800bb62:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800bb64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fc59 	bl	800c424 <dhcp_release_and_stop>
    return ERR_MEM;
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295
 800bb76:	e001      	b.n	800bb7c <dhcp_start+0xe4>
  }
  return result;
 800bb78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	080129ec 	.word	0x080129ec
 800bb88:	08012ad0 	.word	0x08012ad0
 800bb8c:	08012a4c 	.word	0x08012a4c
 800bb90:	08012b14 	.word	0x08012b14

0800bb94 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d025      	beq.n	800bbf4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	795b      	ldrb	r3, [r3, #5]
 800bbac:	2b0a      	cmp	r3, #10
 800bbae:	d008      	beq.n	800bbc2 <dhcp_network_changed+0x2e>
 800bbb0:	2b0a      	cmp	r3, #10
 800bbb2:	dc0d      	bgt.n	800bbd0 <dhcp_network_changed+0x3c>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01f      	beq.n	800bbf8 <dhcp_network_changed+0x64>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	db09      	blt.n	800bbd0 <dhcp_network_changed+0x3c>
 800bbbc:	3b03      	subs	r3, #3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d806      	bhi.n	800bbd0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fb75 	bl	800c2b8 <dhcp_reboot>
      break;
 800bbce:	e014      	b.n	800bbfa <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	795b      	ldrb	r3, [r3, #5]
 800bbd4:	2b0c      	cmp	r3, #12
 800bbd6:	d906      	bls.n	800bbe6 <dhcp_network_changed+0x52>
 800bbd8:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <dhcp_network_changed+0x6c>)
 800bbda:	f240 326d 	movw	r2, #877	; 0x36d
 800bbde:	4909      	ldr	r1, [pc, #36]	; (800bc04 <dhcp_network_changed+0x70>)
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <dhcp_network_changed+0x74>)
 800bbe2:	f003 fe57 	bl	800f894 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 f8af 	bl	800bd50 <dhcp_discover>
      break;
 800bbf2:	e002      	b.n	800bbfa <dhcp_network_changed+0x66>
    return;
 800bbf4:	bf00      	nop
 800bbf6:	e000      	b.n	800bbfa <dhcp_network_changed+0x66>
      break;
 800bbf8:	bf00      	nop
  }
}
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	080129ec 	.word	0x080129ec
 800bc04:	08012b38 	.word	0x08012b38
 800bc08:	08012a4c 	.word	0x08012a4c

0800bc0c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d107      	bne.n	800bc2c <dhcp_arp_reply+0x20>
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <dhcp_arp_reply+0x4c>)
 800bc1e:	f240 328b 	movw	r2, #907	; 0x38b
 800bc22:	490e      	ldr	r1, [pc, #56]	; (800bc5c <dhcp_arp_reply+0x50>)
 800bc24:	480e      	ldr	r0, [pc, #56]	; (800bc60 <dhcp_arp_reply+0x54>)
 800bc26:	f003 fe35 	bl	800f894 <iprintf>
 800bc2a:	e012      	b.n	800bc52 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc30:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00c      	beq.n	800bc52 <dhcp_arp_reply+0x46>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	795b      	ldrb	r3, [r3, #5]
 800bc3c:	2b08      	cmp	r3, #8
 800bc3e:	d108      	bne.n	800bc52 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d102      	bne.n	800bc52 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f809 	bl	800bc64 <dhcp_decline>
    }
  }
}
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	080129ec 	.word	0x080129ec
 800bc5c:	08012ad0 	.word	0x08012ad0
 800bc60:	08012a4c 	.word	0x08012a4c

0800bc64 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800bc64:	b5b0      	push	{r4, r5, r7, lr}
 800bc66:	b08a      	sub	sp, #40	; 0x28
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800bc72:	210c      	movs	r1, #12
 800bc74:	69b8      	ldr	r0, [r7, #24]
 800bc76:	f000 fc6f 	bl	800c558 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800bc7a:	f107 030c 	add.w	r3, r7, #12
 800bc7e:	2204      	movs	r2, #4
 800bc80:	69b9      	ldr	r1, [r7, #24]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 f8f4 	bl	800ce70 <dhcp_create_msg>
 800bc88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d035      	beq.n	800bcfc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800bc96:	89b8      	ldrh	r0, [r7, #12]
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bc9e:	2304      	movs	r3, #4
 800bca0:	2232      	movs	r2, #50	; 0x32
 800bca2:	f000 fc73 	bl	800c58c <dhcp_option>
 800bca6:	4603      	mov	r3, r0
 800bca8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800bcaa:	89bc      	ldrh	r4, [r7, #12]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7f7 fe1d 	bl	80038f6 <lwip_htonl>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f000 fcee 	bl	800c6a4 <dhcp_option_long>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bccc:	89b8      	ldrh	r0, [r7, #12]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	33f0      	adds	r3, #240	; 0xf0
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	f001 f9a1 	bl	800d01c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800bcda:	4b19      	ldr	r3, [pc, #100]	; (800bd40 <dhcp_decline+0xdc>)
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <dhcp_decline+0xe0>)
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	2343      	movs	r3, #67	; 0x43
 800bce8:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <dhcp_decline+0xe4>)
 800bcea:	6979      	ldr	r1, [r7, #20]
 800bcec:	f7ff f8d2 	bl	800ae94 <udp_sendto_if_src>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bcf4:	6978      	ldr	r0, [r7, #20]
 800bcf6:	f7f9 f953 	bl	8004fa0 <pbuf_free>
 800bcfa:	e001      	b.n	800bd00 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bcfc:	23ff      	movs	r3, #255	; 0xff
 800bcfe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	799b      	ldrb	r3, [r3, #6]
 800bd04:	2bff      	cmp	r3, #255	; 0xff
 800bd06:	d005      	beq.n	800bd14 <dhcp_decline+0xb0>
    dhcp->tries++;
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	799b      	ldrb	r3, [r3, #6]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800bd14:	f242 7310 	movw	r3, #10000	; 0x2710
 800bd18:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bd1a:	89fb      	ldrh	r3, [r7, #14]
 800bd1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bd20:	4a0a      	ldr	r2, [pc, #40]	; (800bd4c <dhcp_decline+0xe8>)
 800bd22:	fb82 1203 	smull	r1, r2, r2, r3
 800bd26:	1152      	asrs	r2, r2, #5
 800bd28:	17db      	asrs	r3, r3, #31
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bd32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3720      	adds	r7, #32
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	2000a4d4 	.word	0x2000a4d4
 800bd44:	0801354c 	.word	0x0801354c
 800bd48:	08013550 	.word	0x08013550
 800bd4c:	10624dd3 	.word	0x10624dd3

0800bd50 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08a      	sub	sp, #40	; 0x28
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	2200      	movs	r2, #0
 800bd66:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800bd68:	2106      	movs	r1, #6
 800bd6a:	69b8      	ldr	r0, [r7, #24]
 800bd6c:	f000 fbf4 	bl	800c558 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800bd70:	f107 0308 	add.w	r3, r7, #8
 800bd74:	2201      	movs	r2, #1
 800bd76:	69b9      	ldr	r1, [r7, #24]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f001 f879 	bl	800ce70 <dhcp_create_msg>
 800bd7e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d04b      	beq.n	800be1e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bd8c:	8938      	ldrh	r0, [r7, #8]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bd94:	2302      	movs	r3, #2
 800bd96:	2239      	movs	r2, #57	; 0x39
 800bd98:	f000 fbf8 	bl	800c58c <dhcp_option>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800bda0:	8938      	ldrh	r0, [r7, #8]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdac:	461a      	mov	r2, r3
 800bdae:	f000 fc47 	bl	800c640 <dhcp_option_short>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bdb6:	8938      	ldrh	r0, [r7, #8]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	2237      	movs	r2, #55	; 0x37
 800bdc2:	f000 fbe3 	bl	800c58c <dhcp_option>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bdca:	2300      	movs	r3, #0
 800bdcc:	77fb      	strb	r3, [r7, #31]
 800bdce:	e00e      	b.n	800bdee <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800bdd0:	8938      	ldrh	r0, [r7, #8]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bdd8:	7ffb      	ldrb	r3, [r7, #31]
 800bdda:	4a29      	ldr	r2, [pc, #164]	; (800be80 <dhcp_discover+0x130>)
 800bddc:	5cd3      	ldrb	r3, [r2, r3]
 800bdde:	461a      	mov	r2, r3
 800bde0:	f000 fc08 	bl	800c5f4 <dhcp_option_byte>
 800bde4:	4603      	mov	r3, r0
 800bde6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bde8:	7ffb      	ldrb	r3, [r7, #31]
 800bdea:	3301      	adds	r3, #1
 800bdec:	77fb      	strb	r3, [r7, #31]
 800bdee:	7ffb      	ldrb	r3, [r7, #31]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d9ed      	bls.n	800bdd0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bdf4:	8938      	ldrh	r0, [r7, #8]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	33f0      	adds	r3, #240	; 0xf0
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	f001 f90d 	bl	800d01c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800be02:	4b20      	ldr	r3, [pc, #128]	; (800be84 <dhcp_discover+0x134>)
 800be04:	6818      	ldr	r0, [r3, #0]
 800be06:	4b20      	ldr	r3, [pc, #128]	; (800be88 <dhcp_discover+0x138>)
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	9300      	str	r3, [sp, #0]
 800be0e:	2343      	movs	r3, #67	; 0x43
 800be10:	4a1e      	ldr	r2, [pc, #120]	; (800be8c <dhcp_discover+0x13c>)
 800be12:	6939      	ldr	r1, [r7, #16]
 800be14:	f7ff f83e 	bl	800ae94 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800be18:	6938      	ldr	r0, [r7, #16]
 800be1a:	f7f9 f8c1 	bl	8004fa0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	799b      	ldrb	r3, [r3, #6]
 800be22:	2bff      	cmp	r3, #255	; 0xff
 800be24:	d005      	beq.n	800be32 <dhcp_discover+0xe2>
    dhcp->tries++;
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	799b      	ldrb	r3, [r3, #6]
 800be2a:	3301      	adds	r3, #1
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	799b      	ldrb	r3, [r3, #6]
 800be36:	2b05      	cmp	r3, #5
 800be38:	d80d      	bhi.n	800be56 <dhcp_discover+0x106>
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	799b      	ldrb	r3, [r3, #6]
 800be3e:	461a      	mov	r2, r3
 800be40:	2301      	movs	r3, #1
 800be42:	4093      	lsls	r3, r2
 800be44:	b29b      	uxth	r3, r3
 800be46:	461a      	mov	r2, r3
 800be48:	0152      	lsls	r2, r2, #5
 800be4a:	1ad2      	subs	r2, r2, r3
 800be4c:	0092      	lsls	r2, r2, #2
 800be4e:	4413      	add	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	b29b      	uxth	r3, r3
 800be54:	e001      	b.n	800be5a <dhcp_discover+0x10a>
 800be56:	f64e 2360 	movw	r3, #60000	; 0xea60
 800be5a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800be5c:	897b      	ldrh	r3, [r7, #10]
 800be5e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800be62:	4a0b      	ldr	r2, [pc, #44]	; (800be90 <dhcp_discover+0x140>)
 800be64:	fb82 1203 	smull	r1, r2, r2, r3
 800be68:	1152      	asrs	r2, r2, #5
 800be6a:	17db      	asrs	r3, r3, #31
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	b29a      	uxth	r2, r3
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800be74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3720      	adds	r7, #32
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	2000002c 	.word	0x2000002c
 800be84:	2000a4d4 	.word	0x2000a4d4
 800be88:	0801354c 	.word	0x0801354c
 800be8c:	08013550 	.word	0x08013550
 800be90:	10624dd3 	.word	0x10624dd3

0800be94 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d107      	bne.n	800beb2 <dhcp_bind+0x1e>
 800bea2:	4b64      	ldr	r3, [pc, #400]	; (800c034 <dhcp_bind+0x1a0>)
 800bea4:	f240 4215 	movw	r2, #1045	; 0x415
 800bea8:	4963      	ldr	r1, [pc, #396]	; (800c038 <dhcp_bind+0x1a4>)
 800beaa:	4864      	ldr	r0, [pc, #400]	; (800c03c <dhcp_bind+0x1a8>)
 800beac:	f003 fcf2 	bl	800f894 <iprintf>
 800beb0:	e0bc      	b.n	800c02c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d107      	bne.n	800bece <dhcp_bind+0x3a>
 800bebe:	4b5d      	ldr	r3, [pc, #372]	; (800c034 <dhcp_bind+0x1a0>)
 800bec0:	f240 4217 	movw	r2, #1047	; 0x417
 800bec4:	495e      	ldr	r1, [pc, #376]	; (800c040 <dhcp_bind+0x1ac>)
 800bec6:	485d      	ldr	r0, [pc, #372]	; (800c03c <dhcp_bind+0x1a8>)
 800bec8:	f003 fce4 	bl	800f894 <iprintf>
 800becc:	e0ae      	b.n	800c02c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	2200      	movs	r2, #0
 800bed2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d019      	beq.n	800bf12 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee2:	331e      	adds	r3, #30
 800bee4:	4a57      	ldr	r2, [pc, #348]	; (800c044 <dhcp_bind+0x1b0>)
 800bee6:	fba2 2303 	umull	r2, r3, r2, r3
 800beea:	095b      	lsrs	r3, r3, #5
 800beec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef4:	d302      	bcc.n	800befc <dhcp_bind+0x68>
      timeout = 0xffff;
 800bef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800befa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	b29a      	uxth	r2, r3
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	8a9b      	ldrh	r3, [r3, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d102      	bne.n	800bf12 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf1a:	d01d      	beq.n	800bf58 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf20:	331e      	adds	r3, #30
 800bf22:	4a48      	ldr	r2, [pc, #288]	; (800c044 <dhcp_bind+0x1b0>)
 800bf24:	fba2 2303 	umull	r2, r3, r2, r3
 800bf28:	095b      	lsrs	r3, r3, #5
 800bf2a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf32:	d302      	bcc.n	800bf3a <dhcp_bind+0xa6>
      timeout = 0xffff;
 800bf34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf38:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	895b      	ldrh	r3, [r3, #10]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d102      	bne.n	800bf50 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800bf4a:	69bb      	ldr	r3, [r7, #24]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	895a      	ldrh	r2, [r3, #10]
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf60:	d01d      	beq.n	800bf9e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf66:	331e      	adds	r3, #30
 800bf68:	4a36      	ldr	r2, [pc, #216]	; (800c044 <dhcp_bind+0x1b0>)
 800bf6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6e:	095b      	lsrs	r3, r3, #5
 800bf70:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf78:	d302      	bcc.n	800bf80 <dhcp_bind+0xec>
      timeout = 0xffff;
 800bf7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf7e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	899b      	ldrh	r3, [r3, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2201      	movs	r2, #1
 800bf94:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	899a      	ldrh	r2, [r3, #12]
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	895a      	ldrh	r2, [r3, #10]
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	899b      	ldrh	r3, [r3, #12]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d306      	bcc.n	800bfb8 <dhcp_bind+0x124>
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	899b      	ldrh	r3, [r3, #12]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	79db      	ldrb	r3, [r3, #7]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	6a1b      	ldr	r3, [r3, #32]
 800bfc4:	613b      	str	r3, [r7, #16]
 800bfc6:	e014      	b.n	800bff2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	331c      	adds	r3, #28
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800bfd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	db02      	blt.n	800bfde <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800bfd8:	23ff      	movs	r3, #255	; 0xff
 800bfda:	613b      	str	r3, [r7, #16]
 800bfdc:	e009      	b.n	800bff2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	2bbf      	cmp	r3, #191	; 0xbf
 800bfe2:	d903      	bls.n	800bfec <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800bfe4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bfe8:	613b      	str	r3, [r7, #16]
 800bfea:	e002      	b.n	800bff2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800bfec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bff0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d108      	bne.n	800c010 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	69da      	ldr	r2, [r3, #28]
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	4013      	ands	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c00e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c010:	210a      	movs	r1, #10
 800c012:	69b8      	ldr	r0, [r7, #24]
 800c014:	f000 faa0 	bl	800c558 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	f103 011c 	add.w	r1, r3, #28
 800c01e:	f107 030c 	add.w	r3, r7, #12
 800c022:	f107 0210 	add.w	r2, r7, #16
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7f8 fada 	bl	80045e0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c02c:	3720      	adds	r7, #32
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	080129ec 	.word	0x080129ec
 800c038:	08012b4c 	.word	0x08012b4c
 800c03c:	08012a4c 	.word	0x08012a4c
 800c040:	08012b68 	.word	0x08012b68
 800c044:	88888889 	.word	0x88888889

0800c048 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08a      	sub	sp, #40	; 0x28
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c054:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c056:	2105      	movs	r1, #5
 800c058:	69b8      	ldr	r0, [r7, #24]
 800c05a:	f000 fa7d 	bl	800c558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c05e:	f107 030c 	add.w	r3, r7, #12
 800c062:	2203      	movs	r2, #3
 800c064:	69b9      	ldr	r1, [r7, #24]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 ff02 	bl	800ce70 <dhcp_create_msg>
 800c06c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d04e      	beq.n	800c112 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c07a:	89b8      	ldrh	r0, [r7, #12]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c082:	2302      	movs	r3, #2
 800c084:	2239      	movs	r2, #57	; 0x39
 800c086:	f000 fa81 	bl	800c58c <dhcp_option>
 800c08a:	4603      	mov	r3, r0
 800c08c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c08e:	89b8      	ldrh	r0, [r7, #12]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09a:	461a      	mov	r2, r3
 800c09c:	f000 fad0 	bl	800c640 <dhcp_option_short>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c0a4:	89b8      	ldrh	r0, [r7, #12]
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	2237      	movs	r2, #55	; 0x37
 800c0b0:	f000 fa6c 	bl	800c58c <dhcp_option>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	77bb      	strb	r3, [r7, #30]
 800c0bc:	e00e      	b.n	800c0dc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c0be:	89b8      	ldrh	r0, [r7, #12]
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c0c6:	7fbb      	ldrb	r3, [r7, #30]
 800c0c8:	4a2a      	ldr	r2, [pc, #168]	; (800c174 <dhcp_renew+0x12c>)
 800c0ca:	5cd3      	ldrb	r3, [r2, r3]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f000 fa91 	bl	800c5f4 <dhcp_option_byte>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c0d6:	7fbb      	ldrb	r3, [r7, #30]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	77bb      	strb	r3, [r7, #30]
 800c0dc:	7fbb      	ldrb	r3, [r7, #30]
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d9ed      	bls.n	800c0be <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c0e2:	89b8      	ldrh	r0, [r7, #12]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	33f0      	adds	r3, #240	; 0xf0
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	f000 ff96 	bl	800d01c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c0f0:	4b21      	ldr	r3, [pc, #132]	; (800c178 <dhcp_renew+0x130>)
 800c0f2:	6818      	ldr	r0, [r3, #0]
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	f103 0218 	add.w	r2, r3, #24
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	2343      	movs	r3, #67	; 0x43
 800c100:	6979      	ldr	r1, [r7, #20]
 800c102:	f7fe fe53 	bl	800adac <udp_sendto_if>
 800c106:	4603      	mov	r3, r0
 800c108:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c10a:	6978      	ldr	r0, [r7, #20]
 800c10c:	f7f8 ff48 	bl	8004fa0 <pbuf_free>
 800c110:	e001      	b.n	800c116 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c112:	23ff      	movs	r3, #255	; 0xff
 800c114:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	799b      	ldrb	r3, [r3, #6]
 800c11a:	2bff      	cmp	r3, #255	; 0xff
 800c11c:	d005      	beq.n	800c12a <dhcp_renew+0xe2>
    dhcp->tries++;
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	799b      	ldrb	r3, [r3, #6]
 800c122:	3301      	adds	r3, #1
 800c124:	b2da      	uxtb	r2, r3
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	799b      	ldrb	r3, [r3, #6]
 800c12e:	2b09      	cmp	r3, #9
 800c130:	d80a      	bhi.n	800c148 <dhcp_renew+0x100>
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	799b      	ldrb	r3, [r3, #6]
 800c136:	b29b      	uxth	r3, r3
 800c138:	461a      	mov	r2, r3
 800c13a:	0152      	lsls	r2, r2, #5
 800c13c:	1ad2      	subs	r2, r2, r3
 800c13e:	0092      	lsls	r2, r2, #2
 800c140:	4413      	add	r3, r2
 800c142:	011b      	lsls	r3, r3, #4
 800c144:	b29b      	uxth	r3, r3
 800c146:	e001      	b.n	800c14c <dhcp_renew+0x104>
 800c148:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c14c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c14e:	89fb      	ldrh	r3, [r7, #14]
 800c150:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c154:	4a09      	ldr	r2, [pc, #36]	; (800c17c <dhcp_renew+0x134>)
 800c156:	fb82 1203 	smull	r1, r2, r2, r3
 800c15a:	1152      	asrs	r2, r2, #5
 800c15c:	17db      	asrs	r3, r3, #31
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	b29a      	uxth	r2, r3
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c166:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3720      	adds	r7, #32
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	2000002c 	.word	0x2000002c
 800c178:	2000a4d4 	.word	0x2000a4d4
 800c17c:	10624dd3 	.word	0x10624dd3

0800c180 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08a      	sub	sp, #40	; 0x28
 800c184:	af02      	add	r7, sp, #8
 800c186:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c18e:	2104      	movs	r1, #4
 800c190:	69b8      	ldr	r0, [r7, #24]
 800c192:	f000 f9e1 	bl	800c558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c196:	f107 030c 	add.w	r3, r7, #12
 800c19a:	2203      	movs	r2, #3
 800c19c:	69b9      	ldr	r1, [r7, #24]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fe66 	bl	800ce70 <dhcp_create_msg>
 800c1a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d04c      	beq.n	800c246 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c1b2:	89b8      	ldrh	r0, [r7, #12]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	2239      	movs	r2, #57	; 0x39
 800c1be:	f000 f9e5 	bl	800c58c <dhcp_option>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c1c6:	89b8      	ldrh	r0, [r7, #12]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f000 fa34 	bl	800c640 <dhcp_option_short>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c1dc:	89b8      	ldrh	r0, [r7, #12]
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	2237      	movs	r2, #55	; 0x37
 800c1e8:	f000 f9d0 	bl	800c58c <dhcp_option>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	77bb      	strb	r3, [r7, #30]
 800c1f4:	e00e      	b.n	800c214 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c1f6:	89b8      	ldrh	r0, [r7, #12]
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1fe:	7fbb      	ldrb	r3, [r7, #30]
 800c200:	4a29      	ldr	r2, [pc, #164]	; (800c2a8 <dhcp_rebind+0x128>)
 800c202:	5cd3      	ldrb	r3, [r2, r3]
 800c204:	461a      	mov	r2, r3
 800c206:	f000 f9f5 	bl	800c5f4 <dhcp_option_byte>
 800c20a:	4603      	mov	r3, r0
 800c20c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c20e:	7fbb      	ldrb	r3, [r7, #30]
 800c210:	3301      	adds	r3, #1
 800c212:	77bb      	strb	r3, [r7, #30]
 800c214:	7fbb      	ldrb	r3, [r7, #30]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d9ed      	bls.n	800c1f6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c21a:	89b8      	ldrh	r0, [r7, #12]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	33f0      	adds	r3, #240	; 0xf0
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	4619      	mov	r1, r3
 800c224:	f000 fefa 	bl	800d01c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c228:	4b20      	ldr	r3, [pc, #128]	; (800c2ac <dhcp_rebind+0x12c>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	2343      	movs	r3, #67	; 0x43
 800c232:	4a1f      	ldr	r2, [pc, #124]	; (800c2b0 <dhcp_rebind+0x130>)
 800c234:	6979      	ldr	r1, [r7, #20]
 800c236:	f7fe fdb9 	bl	800adac <udp_sendto_if>
 800c23a:	4603      	mov	r3, r0
 800c23c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c23e:	6978      	ldr	r0, [r7, #20]
 800c240:	f7f8 feae 	bl	8004fa0 <pbuf_free>
 800c244:	e001      	b.n	800c24a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c246:	23ff      	movs	r3, #255	; 0xff
 800c248:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	799b      	ldrb	r3, [r3, #6]
 800c24e:	2bff      	cmp	r3, #255	; 0xff
 800c250:	d005      	beq.n	800c25e <dhcp_rebind+0xde>
    dhcp->tries++;
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	799b      	ldrb	r3, [r3, #6]
 800c256:	3301      	adds	r3, #1
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	799b      	ldrb	r3, [r3, #6]
 800c262:	2b09      	cmp	r3, #9
 800c264:	d80a      	bhi.n	800c27c <dhcp_rebind+0xfc>
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	799b      	ldrb	r3, [r3, #6]
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	461a      	mov	r2, r3
 800c26e:	0152      	lsls	r2, r2, #5
 800c270:	1ad2      	subs	r2, r2, r3
 800c272:	0092      	lsls	r2, r2, #2
 800c274:	4413      	add	r3, r2
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	b29b      	uxth	r3, r3
 800c27a:	e001      	b.n	800c280 <dhcp_rebind+0x100>
 800c27c:	f242 7310 	movw	r3, #10000	; 0x2710
 800c280:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c282:	89fb      	ldrh	r3, [r7, #14]
 800c284:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c288:	4a0a      	ldr	r2, [pc, #40]	; (800c2b4 <dhcp_rebind+0x134>)
 800c28a:	fb82 1203 	smull	r1, r2, r2, r3
 800c28e:	1152      	asrs	r2, r2, #5
 800c290:	17db      	asrs	r3, r3, #31
 800c292:	1ad3      	subs	r3, r2, r3
 800c294:	b29a      	uxth	r2, r3
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c29a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3720      	adds	r7, #32
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	2000002c 	.word	0x2000002c
 800c2ac:	2000a4d4 	.word	0x2000a4d4
 800c2b0:	08013550 	.word	0x08013550
 800c2b4:	10624dd3 	.word	0x10624dd3

0800c2b8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c2b8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ba:	b08a      	sub	sp, #40	; 0x28
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c2c6:	2103      	movs	r1, #3
 800c2c8:	69b8      	ldr	r0, [r7, #24]
 800c2ca:	f000 f945 	bl	800c558 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c2ce:	f107 030c 	add.w	r3, r7, #12
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	69b9      	ldr	r1, [r7, #24]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fdca 	bl	800ce70 <dhcp_create_msg>
 800c2dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d066      	beq.n	800c3b2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c2ea:	89b8      	ldrh	r0, [r7, #12]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	2239      	movs	r2, #57	; 0x39
 800c2f6:	f000 f949 	bl	800c58c <dhcp_option>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c2fe:	89b8      	ldrh	r0, [r7, #12]
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	33f0      	adds	r3, #240	; 0xf0
 800c304:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c308:	4619      	mov	r1, r3
 800c30a:	f000 f999 	bl	800c640 <dhcp_option_short>
 800c30e:	4603      	mov	r3, r0
 800c310:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c312:	89b8      	ldrh	r0, [r7, #12]
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c31a:	2304      	movs	r3, #4
 800c31c:	2232      	movs	r2, #50	; 0x32
 800c31e:	f000 f935 	bl	800c58c <dhcp_option>
 800c322:	4603      	mov	r3, r0
 800c324:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c326:	89bc      	ldrh	r4, [r7, #12]
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	69db      	ldr	r3, [r3, #28]
 800c332:	4618      	mov	r0, r3
 800c334:	f7f7 fadf 	bl	80038f6 <lwip_htonl>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	4629      	mov	r1, r5
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 f9b0 	bl	800c6a4 <dhcp_option_long>
 800c344:	4603      	mov	r3, r0
 800c346:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c348:	89b8      	ldrh	r0, [r7, #12]
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c350:	2303      	movs	r3, #3
 800c352:	2237      	movs	r2, #55	; 0x37
 800c354:	f000 f91a 	bl	800c58c <dhcp_option>
 800c358:	4603      	mov	r3, r0
 800c35a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c35c:	2300      	movs	r3, #0
 800c35e:	77bb      	strb	r3, [r7, #30]
 800c360:	e00e      	b.n	800c380 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c362:	89b8      	ldrh	r0, [r7, #12]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c36a:	7fbb      	ldrb	r3, [r7, #30]
 800c36c:	4a29      	ldr	r2, [pc, #164]	; (800c414 <dhcp_reboot+0x15c>)
 800c36e:	5cd3      	ldrb	r3, [r2, r3]
 800c370:	461a      	mov	r2, r3
 800c372:	f000 f93f 	bl	800c5f4 <dhcp_option_byte>
 800c376:	4603      	mov	r3, r0
 800c378:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c37a:	7fbb      	ldrb	r3, [r7, #30]
 800c37c:	3301      	adds	r3, #1
 800c37e:	77bb      	strb	r3, [r7, #30]
 800c380:	7fbb      	ldrb	r3, [r7, #30]
 800c382:	2b02      	cmp	r3, #2
 800c384:	d9ed      	bls.n	800c362 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c386:	89b8      	ldrh	r0, [r7, #12]
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	33f0      	adds	r3, #240	; 0xf0
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4619      	mov	r1, r3
 800c390:	f000 fe44 	bl	800d01c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c394:	4b20      	ldr	r3, [pc, #128]	; (800c418 <dhcp_reboot+0x160>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	2343      	movs	r3, #67	; 0x43
 800c39e:	4a1f      	ldr	r2, [pc, #124]	; (800c41c <dhcp_reboot+0x164>)
 800c3a0:	6979      	ldr	r1, [r7, #20]
 800c3a2:	f7fe fd03 	bl	800adac <udp_sendto_if>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c3aa:	6978      	ldr	r0, [r7, #20]
 800c3ac:	f7f8 fdf8 	bl	8004fa0 <pbuf_free>
 800c3b0:	e001      	b.n	800c3b6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c3b2:	23ff      	movs	r3, #255	; 0xff
 800c3b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	799b      	ldrb	r3, [r3, #6]
 800c3ba:	2bff      	cmp	r3, #255	; 0xff
 800c3bc:	d005      	beq.n	800c3ca <dhcp_reboot+0x112>
    dhcp->tries++;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	799b      	ldrb	r3, [r3, #6]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	799b      	ldrb	r3, [r3, #6]
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d80a      	bhi.n	800c3e8 <dhcp_reboot+0x130>
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	799b      	ldrb	r3, [r3, #6]
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	461a      	mov	r2, r3
 800c3da:	0152      	lsls	r2, r2, #5
 800c3dc:	1ad2      	subs	r2, r2, r3
 800c3de:	0092      	lsls	r2, r2, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	e001      	b.n	800c3ec <dhcp_reboot+0x134>
 800c3e8:	f242 7310 	movw	r3, #10000	; 0x2710
 800c3ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c3ee:	89fb      	ldrh	r3, [r7, #14]
 800c3f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c3f4:	4a0a      	ldr	r2, [pc, #40]	; (800c420 <dhcp_reboot+0x168>)
 800c3f6:	fb82 1203 	smull	r1, r2, r2, r3
 800c3fa:	1152      	asrs	r2, r2, #5
 800c3fc:	17db      	asrs	r3, r3, #31
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	b29a      	uxth	r2, r3
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c406:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bdb0      	pop	{r4, r5, r7, pc}
 800c412:	bf00      	nop
 800c414:	2000002c 	.word	0x2000002c
 800c418:	2000a4d4 	.word	0x2000a4d4
 800c41c:	08013550 	.word	0x08013550
 800c420:	10624dd3 	.word	0x10624dd3

0800c424 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800c424:	b5b0      	push	{r4, r5, r7, lr}
 800c426:	b08a      	sub	sp, #40	; 0x28
 800c428:	af02      	add	r7, sp, #8
 800c42a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c430:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 8084 	beq.w	800c542 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	795b      	ldrb	r3, [r3, #5]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 8081 	beq.w	800c546 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	2200      	movs	r2, #0
 800c44e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	2200      	movs	r2, #0
 800c454:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	2200      	movs	r2, #0
 800c45a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	2200      	movs	r2, #0
 800c460:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c462:	69fb      	ldr	r3, [r7, #28]
 800c464:	2200      	movs	r2, #0
 800c466:	631a      	str	r2, [r3, #48]	; 0x30
 800c468:	69fb      	ldr	r3, [r7, #28]
 800c46a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	2200      	movs	r2, #0
 800c47c:	829a      	strh	r2, [r3, #20]
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	8a9a      	ldrh	r2, [r3, #20]
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	825a      	strh	r2, [r3, #18]
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	8a5a      	ldrh	r2, [r3, #18]
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	821a      	strh	r2, [r3, #16]
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	8a1a      	ldrh	r2, [r3, #16]
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fdee 	bl	800d078 <dhcp_supplied_address>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d03b      	beq.n	800c51a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800c4a2:	f107 030e 	add.w	r3, r7, #14
 800c4a6:	2207      	movs	r2, #7
 800c4a8:	69f9      	ldr	r1, [r7, #28]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fce0 	bl	800ce70 <dhcp_create_msg>
 800c4b0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d030      	beq.n	800c51a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c4be:	89f8      	ldrh	r0, [r7, #14]
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	2236      	movs	r2, #54	; 0x36
 800c4ca:	f000 f85f 	bl	800c58c <dhcp_option>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c4d2:	89fc      	ldrh	r4, [r7, #14]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7f7 fa0a 	bl	80038f6 <lwip_htonl>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 f8db 	bl	800c6a4 <dhcp_option_long>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c4f2:	89f8      	ldrh	r0, [r7, #14]
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	33f0      	adds	r3, #240	; 0xf0
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	f000 fd8e 	bl	800d01c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c500:	4b13      	ldr	r3, [pc, #76]	; (800c550 <dhcp_release_and_stop+0x12c>)
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	f107 0210 	add.w	r2, r7, #16
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	2343      	movs	r3, #67	; 0x43
 800c50e:	69b9      	ldr	r1, [r7, #24]
 800c510:	f7fe fc4c 	bl	800adac <udp_sendto_if>
      pbuf_free(p_out);
 800c514:	69b8      	ldr	r0, [r7, #24]
 800c516:	f7f8 fd43 	bl	8004fa0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c51a:	4b0e      	ldr	r3, [pc, #56]	; (800c554 <dhcp_release_and_stop+0x130>)
 800c51c:	4a0d      	ldr	r2, [pc, #52]	; (800c554 <dhcp_release_and_stop+0x130>)
 800c51e:	490d      	ldr	r1, [pc, #52]	; (800c554 <dhcp_release_and_stop+0x130>)
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7f8 f85d 	bl	80045e0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c526:	2100      	movs	r1, #0
 800c528:	69f8      	ldr	r0, [r7, #28]
 800c52a:	f000 f815 	bl	800c558 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	791b      	ldrb	r3, [r3, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d008      	beq.n	800c548 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c536:	f7fe ff85 	bl	800b444 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	2200      	movs	r2, #0
 800c53e:	711a      	strb	r2, [r3, #4]
 800c540:	e002      	b.n	800c548 <dhcp_release_and_stop+0x124>
    return;
 800c542:	bf00      	nop
 800c544:	e000      	b.n	800c548 <dhcp_release_and_stop+0x124>
    return;
 800c546:	bf00      	nop
  }
}
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bdb0      	pop	{r4, r5, r7, pc}
 800c54e:	bf00      	nop
 800c550:	2000a4d4 	.word	0x2000a4d4
 800c554:	0801354c 	.word	0x0801354c

0800c558 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	460b      	mov	r3, r1
 800c562:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	795b      	ldrb	r3, [r3, #5]
 800c568:	78fa      	ldrb	r2, [r7, #3]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d008      	beq.n	800c580 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	78fa      	ldrb	r2, [r7, #3]
 800c572:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	811a      	strh	r2, [r3, #8]
  }
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
 800c592:	6039      	str	r1, [r7, #0]
 800c594:	4611      	mov	r1, r2
 800c596:	461a      	mov	r2, r3
 800c598:	4603      	mov	r3, r0
 800c59a:	80fb      	strh	r3, [r7, #6]
 800c59c:	460b      	mov	r3, r1
 800c59e:	717b      	strb	r3, [r7, #5]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c5a4:	88fa      	ldrh	r2, [r7, #6]
 800c5a6:	793b      	ldrb	r3, [r7, #4]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	3302      	adds	r3, #2
 800c5ac:	2b44      	cmp	r3, #68	; 0x44
 800c5ae:	d906      	bls.n	800c5be <dhcp_option+0x32>
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <dhcp_option+0x5c>)
 800c5b2:	f240 529a 	movw	r2, #1434	; 0x59a
 800c5b6:	490d      	ldr	r1, [pc, #52]	; (800c5ec <dhcp_option+0x60>)
 800c5b8:	480d      	ldr	r0, [pc, #52]	; (800c5f0 <dhcp_option+0x64>)
 800c5ba:	f003 f96b 	bl	800f894 <iprintf>
  options[options_out_len++] = option_type;
 800c5be:	88fb      	ldrh	r3, [r7, #6]
 800c5c0:	1c5a      	adds	r2, r3, #1
 800c5c2:	80fa      	strh	r2, [r7, #6]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	797a      	ldrb	r2, [r7, #5]
 800c5cc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800c5ce:	88fb      	ldrh	r3, [r7, #6]
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	80fa      	strh	r2, [r7, #6]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	4413      	add	r3, r2
 800c5da:	793a      	ldrb	r2, [r7, #4]
 800c5dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c5de:	88fb      	ldrh	r3, [r7, #6]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	080129ec 	.word	0x080129ec
 800c5ec:	08012b80 	.word	0x08012b80
 800c5f0:	08012a4c 	.word	0x08012a4c

0800c5f4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	6039      	str	r1, [r7, #0]
 800c5fe:	80fb      	strh	r3, [r7, #6]
 800c600:	4613      	mov	r3, r2
 800c602:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800c604:	88fb      	ldrh	r3, [r7, #6]
 800c606:	2b43      	cmp	r3, #67	; 0x43
 800c608:	d906      	bls.n	800c618 <dhcp_option_byte+0x24>
 800c60a:	4b0a      	ldr	r3, [pc, #40]	; (800c634 <dhcp_option_byte+0x40>)
 800c60c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800c610:	4909      	ldr	r1, [pc, #36]	; (800c638 <dhcp_option_byte+0x44>)
 800c612:	480a      	ldr	r0, [pc, #40]	; (800c63c <dhcp_option_byte+0x48>)
 800c614:	f003 f93e 	bl	800f894 <iprintf>
  options[options_out_len++] = value;
 800c618:	88fb      	ldrh	r3, [r7, #6]
 800c61a:	1c5a      	adds	r2, r3, #1
 800c61c:	80fa      	strh	r2, [r7, #6]
 800c61e:	461a      	mov	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	4413      	add	r3, r2
 800c624:	797a      	ldrb	r2, [r7, #5]
 800c626:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c628:	88fb      	ldrh	r3, [r7, #6]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	080129ec 	.word	0x080129ec
 800c638:	08012bc4 	.word	0x08012bc4
 800c63c:	08012a4c 	.word	0x08012a4c

0800c640 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	6039      	str	r1, [r7, #0]
 800c64a:	80fb      	strh	r3, [r7, #6]
 800c64c:	4613      	mov	r3, r2
 800c64e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	3302      	adds	r3, #2
 800c654:	2b44      	cmp	r3, #68	; 0x44
 800c656:	d906      	bls.n	800c666 <dhcp_option_short+0x26>
 800c658:	4b0f      	ldr	r3, [pc, #60]	; (800c698 <dhcp_option_short+0x58>)
 800c65a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800c65e:	490f      	ldr	r1, [pc, #60]	; (800c69c <dhcp_option_short+0x5c>)
 800c660:	480f      	ldr	r0, [pc, #60]	; (800c6a0 <dhcp_option_short+0x60>)
 800c662:	f003 f917 	bl	800f894 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800c666:	88bb      	ldrh	r3, [r7, #4]
 800c668:	0a1b      	lsrs	r3, r3, #8
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	88fb      	ldrh	r3, [r7, #6]
 800c66e:	1c59      	adds	r1, r3, #1
 800c670:	80f9      	strh	r1, [r7, #6]
 800c672:	4619      	mov	r1, r3
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	440b      	add	r3, r1
 800c678:	b2d2      	uxtb	r2, r2
 800c67a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800c67c:	88fb      	ldrh	r3, [r7, #6]
 800c67e:	1c5a      	adds	r2, r3, #1
 800c680:	80fa      	strh	r2, [r7, #6]
 800c682:	461a      	mov	r2, r3
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	4413      	add	r3, r2
 800c688:	88ba      	ldrh	r2, [r7, #4]
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c68e:	88fb      	ldrh	r3, [r7, #6]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	080129ec 	.word	0x080129ec
 800c69c:	08012bfc 	.word	0x08012bfc
 800c6a0:	08012a4c 	.word	0x08012a4c

0800c6a4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800c6b2:	89fb      	ldrh	r3, [r7, #14]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	2b44      	cmp	r3, #68	; 0x44
 800c6b8:	d906      	bls.n	800c6c8 <dhcp_option_long+0x24>
 800c6ba:	4b19      	ldr	r3, [pc, #100]	; (800c720 <dhcp_option_long+0x7c>)
 800c6bc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800c6c0:	4918      	ldr	r1, [pc, #96]	; (800c724 <dhcp_option_long+0x80>)
 800c6c2:	4819      	ldr	r0, [pc, #100]	; (800c728 <dhcp_option_long+0x84>)
 800c6c4:	f003 f8e6 	bl	800f894 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	0e1a      	lsrs	r2, r3, #24
 800c6cc:	89fb      	ldrh	r3, [r7, #14]
 800c6ce:	1c59      	adds	r1, r3, #1
 800c6d0:	81f9      	strh	r1, [r7, #14]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	440b      	add	r3, r1
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	0c1a      	lsrs	r2, r3, #16
 800c6e0:	89fb      	ldrh	r3, [r7, #14]
 800c6e2:	1c59      	adds	r1, r3, #1
 800c6e4:	81f9      	strh	r1, [r7, #14]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	440b      	add	r3, r1
 800c6ec:	b2d2      	uxtb	r2, r2
 800c6ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	0a1a      	lsrs	r2, r3, #8
 800c6f4:	89fb      	ldrh	r3, [r7, #14]
 800c6f6:	1c59      	adds	r1, r3, #1
 800c6f8:	81f9      	strh	r1, [r7, #14]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	440b      	add	r3, r1
 800c700:	b2d2      	uxtb	r2, r2
 800c702:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800c704:	89fb      	ldrh	r3, [r7, #14]
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	81fa      	strh	r2, [r7, #14]
 800c70a:	461a      	mov	r2, r3
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	4413      	add	r3, r2
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800c716:	89fb      	ldrh	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	080129ec 	.word	0x080129ec
 800c724:	08012c38 	.word	0x08012c38
 800c728:	08012a4c 	.word	0x08012a4c

0800c72c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b090      	sub	sp, #64	; 0x40
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800c73e:	2208      	movs	r2, #8
 800c740:	2100      	movs	r1, #0
 800c742:	48b5      	ldr	r0, [pc, #724]	; (800ca18 <dhcp_parse_reply+0x2ec>)
 800c744:	f003 f90b 	bl	800f95e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	895b      	ldrh	r3, [r3, #10]
 800c74c:	2b2b      	cmp	r3, #43	; 0x2b
 800c74e:	d802      	bhi.n	800c756 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800c750:	f06f 0301 	mvn.w	r3, #1
 800c754:	e2a7      	b.n	800cca6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800c75c:	23f0      	movs	r3, #240	; 0xf0
 800c75e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	891b      	ldrh	r3, [r3, #8]
 800c764:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c76a:	e00c      	b.n	800c786 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	895b      	ldrh	r3, [r3, #10]
 800c770:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800c776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c778:	895b      	ldrh	r3, [r3, #10]
 800c77a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800c786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d004      	beq.n	800c796 <dhcp_parse_reply+0x6a>
 800c78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78e:	895b      	ldrh	r3, [r3, #10]
 800c790:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c792:	429a      	cmp	r2, r3
 800c794:	d2ea      	bcs.n	800c76c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800c79c:	f06f 0301 	mvn.w	r3, #1
 800c7a0:	e281      	b.n	800cca6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800c7a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c7a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800c7a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c7a8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800c7b0:	e239      	b.n	800cc26 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800c7b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c7b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7b6:	4413      	add	r3, r2
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800c7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800c7c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c7ca:	3302      	adds	r3, #2
 800c7cc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800c7ce:	8bfa      	ldrh	r2, [r7, #30]
 800c7d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d202      	bcs.n	800c7dc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800c7d6:	f06f 0301 	mvn.w	r3, #1
 800c7da:	e264      	b.n	800cca6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800c7dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c7de:	3301      	adds	r3, #1
 800c7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e2:	8952      	ldrh	r2, [r2, #10]
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	da07      	bge.n	800c7f8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800c7e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7ee:	4413      	add	r3, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c7f6:	e00b      	b.n	800c810 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d004      	beq.n	800c80a <dhcp_parse_reply+0xde>
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	e000      	b.n	800c80c <dhcp_parse_reply+0xe0>
 800c80a:	2300      	movs	r3, #0
 800c80c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800c810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	2b3b      	cmp	r3, #59	; 0x3b
 800c81c:	f200 812c 	bhi.w	800ca78 <dhcp_parse_reply+0x34c>
 800c820:	a201      	add	r2, pc, #4	; (adr r2, 800c828 <dhcp_parse_reply+0xfc>)
 800c822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c826:	bf00      	nop
 800c828:	0800c919 	.word	0x0800c919
 800c82c:	0800c929 	.word	0x0800c929
 800c830:	0800ca79 	.word	0x0800ca79
 800c834:	0800c94b 	.word	0x0800c94b
 800c838:	0800ca79 	.word	0x0800ca79
 800c83c:	0800ca79 	.word	0x0800ca79
 800c840:	0800ca79 	.word	0x0800ca79
 800c844:	0800ca79 	.word	0x0800ca79
 800c848:	0800ca79 	.word	0x0800ca79
 800c84c:	0800ca79 	.word	0x0800ca79
 800c850:	0800ca79 	.word	0x0800ca79
 800c854:	0800ca79 	.word	0x0800ca79
 800c858:	0800ca79 	.word	0x0800ca79
 800c85c:	0800ca79 	.word	0x0800ca79
 800c860:	0800ca79 	.word	0x0800ca79
 800c864:	0800ca79 	.word	0x0800ca79
 800c868:	0800ca79 	.word	0x0800ca79
 800c86c:	0800ca79 	.word	0x0800ca79
 800c870:	0800ca79 	.word	0x0800ca79
 800c874:	0800ca79 	.word	0x0800ca79
 800c878:	0800ca79 	.word	0x0800ca79
 800c87c:	0800ca79 	.word	0x0800ca79
 800c880:	0800ca79 	.word	0x0800ca79
 800c884:	0800ca79 	.word	0x0800ca79
 800c888:	0800ca79 	.word	0x0800ca79
 800c88c:	0800ca79 	.word	0x0800ca79
 800c890:	0800ca79 	.word	0x0800ca79
 800c894:	0800ca79 	.word	0x0800ca79
 800c898:	0800ca79 	.word	0x0800ca79
 800c89c:	0800ca79 	.word	0x0800ca79
 800c8a0:	0800ca79 	.word	0x0800ca79
 800c8a4:	0800ca79 	.word	0x0800ca79
 800c8a8:	0800ca79 	.word	0x0800ca79
 800c8ac:	0800ca79 	.word	0x0800ca79
 800c8b0:	0800ca79 	.word	0x0800ca79
 800c8b4:	0800ca79 	.word	0x0800ca79
 800c8b8:	0800ca79 	.word	0x0800ca79
 800c8bc:	0800ca79 	.word	0x0800ca79
 800c8c0:	0800ca79 	.word	0x0800ca79
 800c8c4:	0800ca79 	.word	0x0800ca79
 800c8c8:	0800ca79 	.word	0x0800ca79
 800c8cc:	0800ca79 	.word	0x0800ca79
 800c8d0:	0800ca79 	.word	0x0800ca79
 800c8d4:	0800ca79 	.word	0x0800ca79
 800c8d8:	0800ca79 	.word	0x0800ca79
 800c8dc:	0800ca79 	.word	0x0800ca79
 800c8e0:	0800ca79 	.word	0x0800ca79
 800c8e4:	0800ca79 	.word	0x0800ca79
 800c8e8:	0800ca79 	.word	0x0800ca79
 800c8ec:	0800ca79 	.word	0x0800ca79
 800c8f0:	0800ca79 	.word	0x0800ca79
 800c8f4:	0800c977 	.word	0x0800c977
 800c8f8:	0800c999 	.word	0x0800c999
 800c8fc:	0800c9d5 	.word	0x0800c9d5
 800c900:	0800c9f7 	.word	0x0800c9f7
 800c904:	0800ca79 	.word	0x0800ca79
 800c908:	0800ca79 	.word	0x0800ca79
 800c90c:	0800ca79 	.word	0x0800ca79
 800c910:	0800ca35 	.word	0x0800ca35
 800c914:	0800ca57 	.word	0x0800ca57
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c91e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800c926:	e0ab      	b.n	800ca80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c92c:	2b04      	cmp	r3, #4
 800c92e:	d009      	beq.n	800c944 <dhcp_parse_reply+0x218>
 800c930:	4b3a      	ldr	r3, [pc, #232]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800c932:	f240 622e 	movw	r2, #1582	; 0x62e
 800c936:	493a      	ldr	r1, [pc, #232]	; (800ca20 <dhcp_parse_reply+0x2f4>)
 800c938:	483a      	ldr	r0, [pc, #232]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800c93a:	f002 ffab 	bl	800f894 <iprintf>
 800c93e:	f06f 0305 	mvn.w	r3, #5
 800c942:	e1b0      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800c944:	2306      	movs	r3, #6
 800c946:	623b      	str	r3, [r7, #32]
        break;
 800c948:	e09a      	b.n	800ca80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800c94a:	2304      	movs	r3, #4
 800c94c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800c950:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c958:	429a      	cmp	r2, r3
 800c95a:	d209      	bcs.n	800c970 <dhcp_parse_reply+0x244>
 800c95c:	4b2f      	ldr	r3, [pc, #188]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800c95e:	f240 6233 	movw	r2, #1587	; 0x633
 800c962:	4931      	ldr	r1, [pc, #196]	; (800ca28 <dhcp_parse_reply+0x2fc>)
 800c964:	482f      	ldr	r0, [pc, #188]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800c966:	f002 ff95 	bl	800f894 <iprintf>
 800c96a:	f06f 0305 	mvn.w	r3, #5
 800c96e:	e19a      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800c970:	2307      	movs	r3, #7
 800c972:	623b      	str	r3, [r7, #32]
        break;
 800c974:	e084      	b.n	800ca80 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	d009      	beq.n	800c992 <dhcp_parse_reply+0x266>
 800c97e:	4b27      	ldr	r3, [pc, #156]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800c980:	f240 6241 	movw	r2, #1601	; 0x641
 800c984:	4926      	ldr	r1, [pc, #152]	; (800ca20 <dhcp_parse_reply+0x2f4>)
 800c986:	4827      	ldr	r0, [pc, #156]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800c988:	f002 ff84 	bl	800f894 <iprintf>
 800c98c:	f06f 0305 	mvn.w	r3, #5
 800c990:	e189      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800c992:	2303      	movs	r3, #3
 800c994:	623b      	str	r3, [r7, #32]
        break;
 800c996:	e073      	b.n	800ca80 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800c998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d009      	beq.n	800c9b4 <dhcp_parse_reply+0x288>
 800c9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800c9a2:	f240 624f 	movw	r2, #1615	; 0x64f
 800c9a6:	4921      	ldr	r1, [pc, #132]	; (800ca2c <dhcp_parse_reply+0x300>)
 800c9a8:	481e      	ldr	r0, [pc, #120]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800c9aa:	f002 ff73 	bl	800f894 <iprintf>
 800c9ae:	f06f 0305 	mvn.w	r3, #5
 800c9b2:	e178      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800c9b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c9b6:	2bf0      	cmp	r3, #240	; 0xf0
 800c9b8:	d009      	beq.n	800c9ce <dhcp_parse_reply+0x2a2>
 800c9ba:	4b18      	ldr	r3, [pc, #96]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800c9bc:	f240 6251 	movw	r2, #1617	; 0x651
 800c9c0:	491b      	ldr	r1, [pc, #108]	; (800ca30 <dhcp_parse_reply+0x304>)
 800c9c2:	4818      	ldr	r0, [pc, #96]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800c9c4:	f002 ff66 	bl	800f894 <iprintf>
 800c9c8:	f06f 0305 	mvn.w	r3, #5
 800c9cc:	e16b      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	623b      	str	r3, [r7, #32]
        break;
 800c9d2:	e055      	b.n	800ca80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800c9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d009      	beq.n	800c9f0 <dhcp_parse_reply+0x2c4>
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800c9de:	f240 6255 	movw	r2, #1621	; 0x655
 800c9e2:	4912      	ldr	r1, [pc, #72]	; (800ca2c <dhcp_parse_reply+0x300>)
 800c9e4:	480f      	ldr	r0, [pc, #60]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800c9e6:	f002 ff55 	bl	800f894 <iprintf>
 800c9ea:	f06f 0305 	mvn.w	r3, #5
 800c9ee:	e15a      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	623b      	str	r3, [r7, #32]
        break;
 800c9f4:	e044      	b.n	800ca80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800c9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d009      	beq.n	800ca12 <dhcp_parse_reply+0x2e6>
 800c9fe:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <dhcp_parse_reply+0x2f0>)
 800ca00:	f240 6259 	movw	r2, #1625	; 0x659
 800ca04:	4906      	ldr	r1, [pc, #24]	; (800ca20 <dhcp_parse_reply+0x2f4>)
 800ca06:	4807      	ldr	r0, [pc, #28]	; (800ca24 <dhcp_parse_reply+0x2f8>)
 800ca08:	f002 ff44 	bl	800f894 <iprintf>
 800ca0c:	f06f 0305 	mvn.w	r3, #5
 800ca10:	e149      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ca12:	2302      	movs	r3, #2
 800ca14:	623b      	str	r3, [r7, #32]
        break;
 800ca16:	e033      	b.n	800ca80 <dhcp_parse_reply+0x354>
 800ca18:	2000a4cc 	.word	0x2000a4cc
 800ca1c:	080129ec 	.word	0x080129ec
 800ca20:	08012c74 	.word	0x08012c74
 800ca24:	08012a4c 	.word	0x08012a4c
 800ca28:	08012c80 	.word	0x08012c80
 800ca2c:	08012c94 	.word	0x08012c94
 800ca30:	08012ca0 	.word	0x08012ca0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ca34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca38:	2b04      	cmp	r3, #4
 800ca3a:	d009      	beq.n	800ca50 <dhcp_parse_reply+0x324>
 800ca3c:	4b9c      	ldr	r3, [pc, #624]	; (800ccb0 <dhcp_parse_reply+0x584>)
 800ca3e:	f240 625d 	movw	r2, #1629	; 0x65d
 800ca42:	499c      	ldr	r1, [pc, #624]	; (800ccb4 <dhcp_parse_reply+0x588>)
 800ca44:	489c      	ldr	r0, [pc, #624]	; (800ccb8 <dhcp_parse_reply+0x58c>)
 800ca46:	f002 ff25 	bl	800f894 <iprintf>
 800ca4a:	f06f 0305 	mvn.w	r3, #5
 800ca4e:	e12a      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800ca50:	2304      	movs	r3, #4
 800ca52:	623b      	str	r3, [r7, #32]
        break;
 800ca54:	e014      	b.n	800ca80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ca56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d009      	beq.n	800ca72 <dhcp_parse_reply+0x346>
 800ca5e:	4b94      	ldr	r3, [pc, #592]	; (800ccb0 <dhcp_parse_reply+0x584>)
 800ca60:	f240 6261 	movw	r2, #1633	; 0x661
 800ca64:	4993      	ldr	r1, [pc, #588]	; (800ccb4 <dhcp_parse_reply+0x588>)
 800ca66:	4894      	ldr	r0, [pc, #592]	; (800ccb8 <dhcp_parse_reply+0x58c>)
 800ca68:	f002 ff14 	bl	800f894 <iprintf>
 800ca6c:	f06f 0305 	mvn.w	r3, #5
 800ca70:	e119      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ca72:	2305      	movs	r3, #5
 800ca74:	623b      	str	r3, [r7, #32]
        break;
 800ca76:	e003      	b.n	800ca80 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800ca7e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d103      	bne.n	800ca8e <dhcp_parse_reply+0x362>
      offset++;
 800ca86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca88:	3301      	adds	r3, #1
 800ca8a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ca8c:	e0a1      	b.n	800cbd2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800ca8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ca90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca94:	4413      	add	r3, r2
 800ca96:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	dd02      	ble.n	800caa4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800ca9e:	f06f 0301 	mvn.w	r3, #1
 800caa2:	e100      	b.n	800cca6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800caa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800caac:	4413      	add	r3, r2
 800caae:	b29b      	uxth	r3, r3
 800cab0:	3302      	adds	r3, #2
 800cab2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800cab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f000 808a 	beq.w	800cbd2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800cabe:	2300      	movs	r3, #0
 800cac0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800cac2:	6a3b      	ldr	r3, [r7, #32]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	db02      	blt.n	800cace <dhcp_parse_reply+0x3a2>
 800cac8:	6a3b      	ldr	r3, [r7, #32]
 800caca:	2b07      	cmp	r3, #7
 800cacc:	dd06      	ble.n	800cadc <dhcp_parse_reply+0x3b0>
 800cace:	4b78      	ldr	r3, [pc, #480]	; (800ccb0 <dhcp_parse_reply+0x584>)
 800cad0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800cad4:	4979      	ldr	r1, [pc, #484]	; (800ccbc <dhcp_parse_reply+0x590>)
 800cad6:	4878      	ldr	r0, [pc, #480]	; (800ccb8 <dhcp_parse_reply+0x58c>)
 800cad8:	f002 fedc 	bl	800f894 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800cadc:	4a78      	ldr	r2, [pc, #480]	; (800ccc0 <dhcp_parse_reply+0x594>)
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	4413      	add	r3, r2
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d174      	bne.n	800cbd2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800cae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caec:	2b04      	cmp	r3, #4
 800caee:	bf28      	it	cs
 800caf0:	2304      	movcs	r3, #4
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800caf6:	8bfb      	ldrh	r3, [r7, #30]
 800caf8:	8aba      	ldrh	r2, [r7, #20]
 800cafa:	f107 0108 	add.w	r1, r7, #8
 800cafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb00:	f7f8 fc48 	bl	8005394 <pbuf_copy_partial>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	8abb      	ldrh	r3, [r7, #20]
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d002      	beq.n	800cb14 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800cb0e:	f06f 0301 	mvn.w	r3, #1
 800cb12:	e0c8      	b.n	800cca6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800cb14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb18:	2b04      	cmp	r3, #4
 800cb1a:	d933      	bls.n	800cb84 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800cb1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d009      	beq.n	800cb3e <dhcp_parse_reply+0x412>
 800cb2a:	4b61      	ldr	r3, [pc, #388]	; (800ccb0 <dhcp_parse_reply+0x584>)
 800cb2c:	f240 6281 	movw	r2, #1665	; 0x681
 800cb30:	4964      	ldr	r1, [pc, #400]	; (800ccc4 <dhcp_parse_reply+0x598>)
 800cb32:	4861      	ldr	r0, [pc, #388]	; (800ccb8 <dhcp_parse_reply+0x58c>)
 800cb34:	f002 feae 	bl	800f894 <iprintf>
 800cb38:	f06f 0305 	mvn.w	r3, #5
 800cb3c:	e0b3      	b.n	800cca6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800cb3e:	4a60      	ldr	r2, [pc, #384]	; (800ccc0 <dhcp_parse_reply+0x594>)
 800cb40:	6a3b      	ldr	r3, [r7, #32]
 800cb42:	4413      	add	r3, r2
 800cb44:	2201      	movs	r2, #1
 800cb46:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7f6 fed3 	bl	80038f6 <lwip_htonl>
 800cb50:	4602      	mov	r2, r0
 800cb52:	495d      	ldr	r1, [pc, #372]	; (800ccc8 <dhcp_parse_reply+0x59c>)
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800cb5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb5e:	3b04      	subs	r3, #4
 800cb60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800cb64:	8bfb      	ldrh	r3, [r7, #30]
 800cb66:	3304      	adds	r3, #4
 800cb68:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800cb6a:	8a7a      	ldrh	r2, [r7, #18]
 800cb6c:	8bfb      	ldrh	r3, [r7, #30]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d202      	bcs.n	800cb78 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800cb72:	f06f 0301 	mvn.w	r3, #1
 800cb76:	e096      	b.n	800cca6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800cb78:	8a7b      	ldrh	r3, [r7, #18]
 800cb7a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800cb82:	e79e      	b.n	800cac2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800cb84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	d106      	bne.n	800cb9a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f6 feb1 	bl	80038f6 <lwip_htonl>
 800cb94:	4603      	mov	r3, r0
 800cb96:	60bb      	str	r3, [r7, #8]
 800cb98:	e011      	b.n	800cbbe <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800cb9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d009      	beq.n	800cbb6 <dhcp_parse_reply+0x48a>
 800cba2:	4b43      	ldr	r3, [pc, #268]	; (800ccb0 <dhcp_parse_reply+0x584>)
 800cba4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800cba8:	4948      	ldr	r1, [pc, #288]	; (800cccc <dhcp_parse_reply+0x5a0>)
 800cbaa:	4843      	ldr	r0, [pc, #268]	; (800ccb8 <dhcp_parse_reply+0x58c>)
 800cbac:	f002 fe72 	bl	800f894 <iprintf>
 800cbb0:	f06f 0305 	mvn.w	r3, #5
 800cbb4:	e077      	b.n	800cca6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800cbb6:	f107 0308 	add.w	r3, r7, #8
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800cbbe:	4a40      	ldr	r2, [pc, #256]	; (800ccc0 <dhcp_parse_reply+0x594>)
 800cbc0:	6a3b      	ldr	r3, [r7, #32]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	493f      	ldr	r1, [pc, #252]	; (800ccc8 <dhcp_parse_reply+0x59c>)
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd4:	895b      	ldrh	r3, [r3, #10]
 800cbd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d324      	bcc.n	800cc26 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbde:	895b      	ldrh	r3, [r3, #10]
 800cbe0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	895b      	ldrh	r3, [r3, #10]
 800cbea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800cbf0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cbf2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d213      	bcs.n	800cc20 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d109      	bne.n	800cc18 <dhcp_parse_reply+0x4ec>
 800cc04:	4b2a      	ldr	r3, [pc, #168]	; (800ccb0 <dhcp_parse_reply+0x584>)
 800cc06:	f240 629d 	movw	r2, #1693	; 0x69d
 800cc0a:	4931      	ldr	r1, [pc, #196]	; (800ccd0 <dhcp_parse_reply+0x5a4>)
 800cc0c:	482a      	ldr	r0, [pc, #168]	; (800ccb8 <dhcp_parse_reply+0x58c>)
 800cc0e:	f002 fe41 	bl	800f894 <iprintf>
 800cc12:	f06f 0305 	mvn.w	r3, #5
 800cc16:	e046      	b.n	800cca6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc1e:	e002      	b.n	800cc26 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800cc20:	f06f 0301 	mvn.w	r3, #1
 800cc24:	e03f      	b.n	800cca6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00a      	beq.n	800cc42 <dhcp_parse_reply+0x516>
 800cc2c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cc2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d206      	bcs.n	800cc42 <dhcp_parse_reply+0x516>
 800cc34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc38:	4413      	add	r3, r2
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2bff      	cmp	r3, #255	; 0xff
 800cc3e:	f47f adb8 	bne.w	800c7b2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800cc42:	4b1f      	ldr	r3, [pc, #124]	; (800ccc0 <dhcp_parse_reply+0x594>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d018      	beq.n	800cc7c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cc4a:	4b1f      	ldr	r3, [pc, #124]	; (800ccc8 <dhcp_parse_reply+0x59c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800cc50:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <dhcp_parse_reply+0x594>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d102      	bne.n	800cc62 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc60:	e00c      	b.n	800cc7c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d102      	bne.n	800cc6e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc6c:	e006      	b.n	800cc7c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b03      	cmp	r3, #3
 800cc72:	d103      	bne.n	800cc7c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800cc74:	2301      	movs	r3, #1
 800cc76:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d006      	beq.n	800cc90 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800cc86:	236c      	movs	r3, #108	; 0x6c
 800cc88:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800cc8a:	23ec      	movs	r3, #236	; 0xec
 800cc8c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800cc8e:	e56a      	b.n	800c766 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d006      	beq.n	800cca4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800cc9a:	232c      	movs	r3, #44	; 0x2c
 800cc9c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800cc9e:	236c      	movs	r3, #108	; 0x6c
 800cca0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800cca2:	e560      	b.n	800c766 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3740      	adds	r7, #64	; 0x40
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	080129ec 	.word	0x080129ec
 800ccb4:	08012c74 	.word	0x08012c74
 800ccb8:	08012a4c 	.word	0x08012a4c
 800ccbc:	08012cb8 	.word	0x08012cb8
 800ccc0:	2000a4cc 	.word	0x2000a4cc
 800ccc4:	08012ccc 	.word	0x08012ccc
 800ccc8:	2000a4ac 	.word	0x2000a4ac
 800cccc:	08012ce4 	.word	0x08012ce4
 800ccd0:	08012cf8 	.word	0x08012cf8

0800ccd4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b08a      	sub	sp, #40	; 0x28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800cce2:	4b60      	ldr	r3, [pc, #384]	; (800ce64 <dhcp_recv+0x190>)
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 809d 	beq.w	800ce36 <dhcp_recv+0x162>
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	791b      	ldrb	r3, [r3, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 8098 	beq.w	800ce36 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	895b      	ldrh	r3, [r3, #10]
 800cd0a:	2b2b      	cmp	r3, #43	; 0x2b
 800cd0c:	f240 8095 	bls.w	800ce3a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	f040 8092 	bne.w	800ce3e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd20:	e012      	b.n	800cd48 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800cd22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd26:	6a3a      	ldr	r2, [r7, #32]
 800cd28:	4413      	add	r3, r2
 800cd2a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800cd2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd32:	69b9      	ldr	r1, [r7, #24]
 800cd34:	440b      	add	r3, r1
 800cd36:	7f1b      	ldrb	r3, [r3, #28]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	f040 8082 	bne.w	800ce42 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cd3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd42:	3301      	adds	r3, #1
 800cd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d203      	bcs.n	800cd5e <dhcp_recv+0x8a>
 800cd56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd5a:	2b05      	cmp	r3, #5
 800cd5c:	d9e1      	bls.n	800cd22 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7f6 fdc7 	bl	80038f6 <lwip_htonl>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d169      	bne.n	800ce46 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800cd72:	69f9      	ldr	r1, [r7, #28]
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7ff fcd9 	bl	800c72c <dhcp_parse_reply>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d164      	bne.n	800ce4a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800cd80:	4b39      	ldr	r3, [pc, #228]	; (800ce68 <dhcp_recv+0x194>)
 800cd82:	785b      	ldrb	r3, [r3, #1]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d062      	beq.n	800ce4e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800cd8e:	4b37      	ldr	r3, [pc, #220]	; (800ce6c <dhcp_recv+0x198>)
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800cd94:	7cfb      	ldrb	r3, [r7, #19]
 800cd96:	2b05      	cmp	r3, #5
 800cd98:	d12a      	bne.n	800cdf0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	795b      	ldrb	r3, [r3, #5]
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d112      	bne.n	800cdc8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800cda2:	6979      	ldr	r1, [r7, #20]
 800cda4:	6a38      	ldr	r0, [r7, #32]
 800cda6:	f7fe fe17 	bl	800b9d8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800cdaa:	6a3b      	ldr	r3, [r7, #32]
 800cdac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cdb0:	f003 0308 	and.w	r3, r3, #8
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d003      	beq.n	800cdc0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800cdb8:	6a38      	ldr	r0, [r7, #32]
 800cdba:	f7fe fb87 	bl	800b4cc <dhcp_check>
 800cdbe:	e049      	b.n	800ce54 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800cdc0:	6a38      	ldr	r0, [r7, #32]
 800cdc2:	f7ff f867 	bl	800be94 <dhcp_bind>
 800cdc6:	e045      	b.n	800ce54 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	795b      	ldrb	r3, [r3, #5]
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d007      	beq.n	800cde0 <dhcp_recv+0x10c>
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	795b      	ldrb	r3, [r3, #5]
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	d003      	beq.n	800cde0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800cddc:	2b05      	cmp	r3, #5
 800cdde:	d139      	bne.n	800ce54 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800cde0:	6979      	ldr	r1, [r7, #20]
 800cde2:	6a38      	ldr	r0, [r7, #32]
 800cde4:	f7fe fdf8 	bl	800b9d8 <dhcp_handle_ack>
      dhcp_bind(netif);
 800cde8:	6a38      	ldr	r0, [r7, #32]
 800cdea:	f7ff f853 	bl	800be94 <dhcp_bind>
 800cdee:	e031      	b.n	800ce54 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800cdf0:	7cfb      	ldrb	r3, [r7, #19]
 800cdf2:	2b06      	cmp	r3, #6
 800cdf4:	d113      	bne.n	800ce1e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800cdfa:	2b03      	cmp	r3, #3
 800cdfc:	d00b      	beq.n	800ce16 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	795b      	ldrb	r3, [r3, #5]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d007      	beq.n	800ce16 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ce0a:	2b04      	cmp	r3, #4
 800ce0c:	d003      	beq.n	800ce16 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	795b      	ldrb	r3, [r3, #5]
 800ce12:	2b05      	cmp	r3, #5
 800ce14:	d103      	bne.n	800ce1e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ce16:	6a38      	ldr	r0, [r7, #32]
 800ce18:	f7fe fb3e 	bl	800b498 <dhcp_handle_nak>
 800ce1c:	e01a      	b.n	800ce54 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ce1e:	7cfb      	ldrb	r3, [r7, #19]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d116      	bne.n	800ce52 <dhcp_recv+0x17e>
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	795b      	ldrb	r3, [r3, #5]
 800ce28:	2b06      	cmp	r3, #6
 800ce2a:	d112      	bne.n	800ce52 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800ce2c:	6979      	ldr	r1, [r7, #20]
 800ce2e:	6a38      	ldr	r0, [r7, #32]
 800ce30:	f7fe fb80 	bl	800b534 <dhcp_handle_offer>
 800ce34:	e00e      	b.n	800ce54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ce36:	bf00      	nop
 800ce38:	e00c      	b.n	800ce54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ce3a:	bf00      	nop
 800ce3c:	e00a      	b.n	800ce54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ce3e:	bf00      	nop
 800ce40:	e008      	b.n	800ce54 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800ce42:	bf00      	nop
 800ce44:	e006      	b.n	800ce54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ce46:	bf00      	nop
 800ce48:	e004      	b.n	800ce54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ce4a:	bf00      	nop
 800ce4c:	e002      	b.n	800ce54 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ce4e:	bf00      	nop
 800ce50:	e000      	b.n	800ce54 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800ce52:	bf00      	nop
  pbuf_free(p);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7f8 f8a3 	bl	8004fa0 <pbuf_free>
}
 800ce5a:	bf00      	nop
 800ce5c:	3728      	adds	r7, #40	; 0x28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20004cfc 	.word	0x20004cfc
 800ce68:	2000a4cc 	.word	0x2000a4cc
 800ce6c:	2000a4ac 	.word	0x2000a4ac

0800ce70 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	603b      	str	r3, [r7, #0]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d108      	bne.n	800ce98 <dhcp_create_msg+0x28>
 800ce86:	4b5f      	ldr	r3, [pc, #380]	; (800d004 <dhcp_create_msg+0x194>)
 800ce88:	f240 7269 	movw	r2, #1897	; 0x769
 800ce8c:	495e      	ldr	r1, [pc, #376]	; (800d008 <dhcp_create_msg+0x198>)
 800ce8e:	485f      	ldr	r0, [pc, #380]	; (800d00c <dhcp_create_msg+0x19c>)
 800ce90:	f002 fd00 	bl	800f894 <iprintf>
 800ce94:	2300      	movs	r3, #0
 800ce96:	e0b1      	b.n	800cffc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d108      	bne.n	800ceb0 <dhcp_create_msg+0x40>
 800ce9e:	4b59      	ldr	r3, [pc, #356]	; (800d004 <dhcp_create_msg+0x194>)
 800cea0:	f240 726a 	movw	r2, #1898	; 0x76a
 800cea4:	495a      	ldr	r1, [pc, #360]	; (800d010 <dhcp_create_msg+0x1a0>)
 800cea6:	4859      	ldr	r0, [pc, #356]	; (800d00c <dhcp_create_msg+0x19c>)
 800cea8:	f002 fcf4 	bl	800f894 <iprintf>
 800ceac:	2300      	movs	r3, #0
 800ceae:	e0a5      	b.n	800cffc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800ceb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ceb4:	f44f 719a 	mov.w	r1, #308	; 0x134
 800ceb8:	2036      	movs	r0, #54	; 0x36
 800ceba:	f7f7 fd8d 	bl	80049d8 <pbuf_alloc>
 800cebe:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	e098      	b.n	800cffc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	895b      	ldrh	r3, [r3, #10]
 800cece:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800ced2:	d206      	bcs.n	800cee2 <dhcp_create_msg+0x72>
 800ced4:	4b4b      	ldr	r3, [pc, #300]	; (800d004 <dhcp_create_msg+0x194>)
 800ced6:	f240 7271 	movw	r2, #1905	; 0x771
 800ceda:	494e      	ldr	r1, [pc, #312]	; (800d014 <dhcp_create_msg+0x1a4>)
 800cedc:	484b      	ldr	r0, [pc, #300]	; (800d00c <dhcp_create_msg+0x19c>)
 800cede:	f002 fcd9 	bl	800f894 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	d103      	bne.n	800cef0 <dhcp_create_msg+0x80>
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	795b      	ldrb	r3, [r3, #5]
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d10d      	bne.n	800cf0c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	799b      	ldrb	r3, [r3, #6]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d105      	bne.n	800cf04 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800cef8:	f002 fbcc 	bl	800f694 <rand>
 800cefc:	4603      	mov	r3, r0
 800cefe:	461a      	mov	r2, r3
 800cf00:	4b45      	ldr	r3, [pc, #276]	; (800d018 <dhcp_create_msg+0x1a8>)
 800cf02:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800cf04:	4b44      	ldr	r3, [pc, #272]	; (800d018 <dhcp_create_msg+0x1a8>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800cf12:	f44f 729a 	mov.w	r2, #308	; 0x134
 800cf16:	2100      	movs	r1, #0
 800cf18:	6978      	ldr	r0, [r7, #20]
 800cf1a:	f002 fd20 	bl	800f95e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2201      	movs	r2, #1
 800cf22:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2201      	movs	r2, #1
 800cf28:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f6 fcdc 	bl	80038f6 <lwip_htonl>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	2b08      	cmp	r3, #8
 800cf48:	d010      	beq.n	800cf6c <dhcp_create_msg+0xfc>
 800cf4a:	79fb      	ldrb	r3, [r7, #7]
 800cf4c:	2b04      	cmp	r3, #4
 800cf4e:	d00d      	beq.n	800cf6c <dhcp_create_msg+0xfc>
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	2b07      	cmp	r3, #7
 800cf54:	d00a      	beq.n	800cf6c <dhcp_create_msg+0xfc>
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d10c      	bne.n	800cf76 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800cf60:	2b05      	cmp	r3, #5
 800cf62:	d003      	beq.n	800cf6c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	795b      	ldrb	r3, [r3, #5]
 800cf68:	2b04      	cmp	r3, #4
 800cf6a:	d104      	bne.n	800cf76 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cf76:	2300      	movs	r3, #0
 800cf78:	83fb      	strh	r3, [r7, #30]
 800cf7a:	e00c      	b.n	800cf96 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800cf7c:	8bfa      	ldrh	r2, [r7, #30]
 800cf7e:	8bfb      	ldrh	r3, [r7, #30]
 800cf80:	68f9      	ldr	r1, [r7, #12]
 800cf82:	440a      	add	r2, r1
 800cf84:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	460a      	mov	r2, r1
 800cf8e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800cf90:	8bfb      	ldrh	r3, [r7, #30]
 800cf92:	3301      	adds	r3, #1
 800cf94:	83fb      	strh	r3, [r7, #30]
 800cf96:	8bfb      	ldrh	r3, [r7, #30]
 800cf98:	2b05      	cmp	r3, #5
 800cf9a:	d9ef      	bls.n	800cf7c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800cfa4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800cfae:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800cfb8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800cfc2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cfcc:	2301      	movs	r3, #1
 800cfce:	2235      	movs	r2, #53	; 0x35
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	f7ff fadb 	bl	800c58c <dhcp_option>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cfe0:	79fa      	ldrb	r2, [r7, #7]
 800cfe2:	8a7b      	ldrh	r3, [r7, #18]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7ff fb05 	bl	800c5f4 <dhcp_option_byte>
 800cfea:	4603      	mov	r3, r0
 800cfec:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	8a7a      	ldrh	r2, [r7, #18]
 800cff8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800cffa:	69bb      	ldr	r3, [r7, #24]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	080129ec 	.word	0x080129ec
 800d008:	08012d0c 	.word	0x08012d0c
 800d00c:	08012a4c 	.word	0x08012a4c
 800d010:	08012d2c 	.word	0x08012d2c
 800d014:	08012d4c 	.word	0x08012d4c
 800d018:	2000a4dc 	.word	0x2000a4dc

0800d01c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
 800d028:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800d02a:	89fb      	ldrh	r3, [r7, #14]
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	81fa      	strh	r2, [r7, #14]
 800d030:	461a      	mov	r2, r3
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	4413      	add	r3, r2
 800d036:	22ff      	movs	r2, #255	; 0xff
 800d038:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d03a:	e007      	b.n	800d04c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d03c:	89fb      	ldrh	r3, [r7, #14]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	81fa      	strh	r2, [r7, #14]
 800d042:	461a      	mov	r2, r3
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	4413      	add	r3, r2
 800d048:	2200      	movs	r2, #0
 800d04a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d04c:	89fb      	ldrh	r3, [r7, #14]
 800d04e:	2b43      	cmp	r3, #67	; 0x43
 800d050:	d904      	bls.n	800d05c <dhcp_option_trailer+0x40>
 800d052:	89fb      	ldrh	r3, [r7, #14]
 800d054:	f003 0303 	and.w	r3, r3, #3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d002      	beq.n	800d062 <dhcp_option_trailer+0x46>
 800d05c:	89fb      	ldrh	r3, [r7, #14]
 800d05e:	2b43      	cmp	r3, #67	; 0x43
 800d060:	d9ec      	bls.n	800d03c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d062:	89fb      	ldrh	r3, [r7, #14]
 800d064:	33f0      	adds	r3, #240	; 0xf0
 800d066:	b29b      	uxth	r3, r3
 800d068:	4619      	mov	r1, r3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7f7 fe12 	bl	8004c94 <pbuf_realloc>
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d078:	b480      	push	{r7}
 800d07a:	b085      	sub	sp, #20
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d017      	beq.n	800d0b6 <dhcp_supplied_address+0x3e>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d013      	beq.n	800d0b6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d092:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	795b      	ldrb	r3, [r3, #5]
 800d098:	2b0a      	cmp	r3, #10
 800d09a:	d007      	beq.n	800d0ac <dhcp_supplied_address+0x34>
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	795b      	ldrb	r3, [r3, #5]
 800d0a0:	2b05      	cmp	r3, #5
 800d0a2:	d003      	beq.n	800d0ac <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d0a8:	2b04      	cmp	r3, #4
 800d0aa:	d101      	bne.n	800d0b0 <dhcp_supplied_address+0x38>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <dhcp_supplied_address+0x3a>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	e000      	b.n	800d0b8 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d0cc:	4915      	ldr	r1, [pc, #84]	; (800d124 <etharp_free_entry+0x60>)
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	4413      	add	r3, r2
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	440b      	add	r3, r1
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d013      	beq.n	800d108 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d0e0:	4910      	ldr	r1, [pc, #64]	; (800d124 <etharp_free_entry+0x60>)
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	005b      	lsls	r3, r3, #1
 800d0e8:	4413      	add	r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	440b      	add	r3, r1
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7f7 ff55 	bl	8004fa0 <pbuf_free>
    arp_table[i].q = NULL;
 800d0f6:	490b      	ldr	r1, [pc, #44]	; (800d124 <etharp_free_entry+0x60>)
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	4413      	add	r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	440b      	add	r3, r1
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d108:	4906      	ldr	r1, [pc, #24]	; (800d124 <etharp_free_entry+0x60>)
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4613      	mov	r3, r2
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	4413      	add	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	440b      	add	r3, r1
 800d116:	3314      	adds	r3, #20
 800d118:	2200      	movs	r2, #0
 800d11a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d11c:	bf00      	nop
 800d11e:	3708      	adds	r7, #8
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	2000a4e0 	.word	0x2000a4e0

0800d128 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d12e:	2300      	movs	r3, #0
 800d130:	607b      	str	r3, [r7, #4]
 800d132:	e096      	b.n	800d262 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d134:	494f      	ldr	r1, [pc, #316]	; (800d274 <etharp_tmr+0x14c>)
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	4613      	mov	r3, r2
 800d13a:	005b      	lsls	r3, r3, #1
 800d13c:	4413      	add	r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	440b      	add	r3, r1
 800d142:	3314      	adds	r3, #20
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d148:	78fb      	ldrb	r3, [r7, #3]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 8086 	beq.w	800d25c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d150:	4948      	ldr	r1, [pc, #288]	; (800d274 <etharp_tmr+0x14c>)
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	4613      	mov	r3, r2
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	4413      	add	r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	440b      	add	r3, r1
 800d15e:	3312      	adds	r3, #18
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	b298      	uxth	r0, r3
 800d166:	4943      	ldr	r1, [pc, #268]	; (800d274 <etharp_tmr+0x14c>)
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	4613      	mov	r3, r2
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	4413      	add	r3, r2
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	440b      	add	r3, r1
 800d174:	3312      	adds	r3, #18
 800d176:	4602      	mov	r2, r0
 800d178:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d17a:	493e      	ldr	r1, [pc, #248]	; (800d274 <etharp_tmr+0x14c>)
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	4613      	mov	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4413      	add	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	440b      	add	r3, r1
 800d188:	3312      	adds	r3, #18
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d190:	d215      	bcs.n	800d1be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d192:	4938      	ldr	r1, [pc, #224]	; (800d274 <etharp_tmr+0x14c>)
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	4613      	mov	r3, r2
 800d198:	005b      	lsls	r3, r3, #1
 800d19a:	4413      	add	r3, r2
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	440b      	add	r3, r1
 800d1a0:	3314      	adds	r3, #20
 800d1a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d10e      	bne.n	800d1c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d1a8:	4932      	ldr	r1, [pc, #200]	; (800d274 <etharp_tmr+0x14c>)
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	4413      	add	r3, r2
 800d1b2:	00db      	lsls	r3, r3, #3
 800d1b4:	440b      	add	r3, r1
 800d1b6:	3312      	adds	r3, #18
 800d1b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d903      	bls.n	800d1c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff ff80 	bl	800d0c4 <etharp_free_entry>
 800d1c4:	e04a      	b.n	800d25c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d1c6:	492b      	ldr	r1, [pc, #172]	; (800d274 <etharp_tmr+0x14c>)
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	005b      	lsls	r3, r3, #1
 800d1ce:	4413      	add	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	440b      	add	r3, r1
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d10a      	bne.n	800d1f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d1dc:	4925      	ldr	r1, [pc, #148]	; (800d274 <etharp_tmr+0x14c>)
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	4413      	add	r3, r2
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	440b      	add	r3, r1
 800d1ea:	3314      	adds	r3, #20
 800d1ec:	2204      	movs	r2, #4
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	e034      	b.n	800d25c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d1f2:	4920      	ldr	r1, [pc, #128]	; (800d274 <etharp_tmr+0x14c>)
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	005b      	lsls	r3, r3, #1
 800d1fa:	4413      	add	r3, r2
 800d1fc:	00db      	lsls	r3, r3, #3
 800d1fe:	440b      	add	r3, r1
 800d200:	3314      	adds	r3, #20
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2b04      	cmp	r3, #4
 800d206:	d10a      	bne.n	800d21e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d208:	491a      	ldr	r1, [pc, #104]	; (800d274 <etharp_tmr+0x14c>)
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	4613      	mov	r3, r2
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	4413      	add	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	440b      	add	r3, r1
 800d216:	3314      	adds	r3, #20
 800d218:	2202      	movs	r2, #2
 800d21a:	701a      	strb	r2, [r3, #0]
 800d21c:	e01e      	b.n	800d25c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d21e:	4915      	ldr	r1, [pc, #84]	; (800d274 <etharp_tmr+0x14c>)
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	4613      	mov	r3, r2
 800d224:	005b      	lsls	r3, r3, #1
 800d226:	4413      	add	r3, r2
 800d228:	00db      	lsls	r3, r3, #3
 800d22a:	440b      	add	r3, r1
 800d22c:	3314      	adds	r3, #20
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d113      	bne.n	800d25c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d234:	490f      	ldr	r1, [pc, #60]	; (800d274 <etharp_tmr+0x14c>)
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	4613      	mov	r3, r2
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	4413      	add	r3, r2
 800d23e:	00db      	lsls	r3, r3, #3
 800d240:	440b      	add	r3, r1
 800d242:	3308      	adds	r3, #8
 800d244:	6818      	ldr	r0, [r3, #0]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	4613      	mov	r3, r2
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	4413      	add	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	4a08      	ldr	r2, [pc, #32]	; (800d274 <etharp_tmr+0x14c>)
 800d252:	4413      	add	r3, r2
 800d254:	3304      	adds	r3, #4
 800d256:	4619      	mov	r1, r3
 800d258:	f000 fe72 	bl	800df40 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	3301      	adds	r3, #1
 800d260:	607b      	str	r3, [r7, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2b09      	cmp	r3, #9
 800d266:	f77f af65 	ble.w	800d134 <etharp_tmr+0xc>
      }
    }
  }
}
 800d26a:	bf00      	nop
 800d26c:	bf00      	nop
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	2000a4e0 	.word	0x2000a4e0

0800d278 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	460b      	mov	r3, r1
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d286:	230a      	movs	r3, #10
 800d288:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d28a:	230a      	movs	r3, #10
 800d28c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d28e:	230a      	movs	r3, #10
 800d290:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d296:	230a      	movs	r3, #10
 800d298:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	83bb      	strh	r3, [r7, #28]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	837b      	strh	r3, [r7, #26]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	843b      	strh	r3, [r7, #32]
 800d2aa:	e0ae      	b.n	800d40a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d2ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d2b0:	49a6      	ldr	r1, [pc, #664]	; (800d54c <etharp_find_entry+0x2d4>)
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	4413      	add	r3, r2
 800d2b8:	00db      	lsls	r3, r3, #3
 800d2ba:	440b      	add	r3, r1
 800d2bc:	3314      	adds	r3, #20
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d2c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d2c6:	2b0a      	cmp	r3, #10
 800d2c8:	d105      	bne.n	800d2d6 <etharp_find_entry+0x5e>
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d2d0:	8c3b      	ldrh	r3, [r7, #32]
 800d2d2:	847b      	strh	r3, [r7, #34]	; 0x22
 800d2d4:	e095      	b.n	800d402 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 8092 	beq.w	800d402 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d009      	beq.n	800d2f8 <etharp_find_entry+0x80>
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d806      	bhi.n	800d2f8 <etharp_find_entry+0x80>
 800d2ea:	4b99      	ldr	r3, [pc, #612]	; (800d550 <etharp_find_entry+0x2d8>)
 800d2ec:	f240 1223 	movw	r2, #291	; 0x123
 800d2f0:	4998      	ldr	r1, [pc, #608]	; (800d554 <etharp_find_entry+0x2dc>)
 800d2f2:	4899      	ldr	r0, [pc, #612]	; (800d558 <etharp_find_entry+0x2e0>)
 800d2f4:	f002 face 	bl	800f894 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d020      	beq.n	800d340 <etharp_find_entry+0xc8>
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6819      	ldr	r1, [r3, #0]
 800d302:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d306:	4891      	ldr	r0, [pc, #580]	; (800d54c <etharp_find_entry+0x2d4>)
 800d308:	4613      	mov	r3, r2
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	4413      	add	r3, r2
 800d30e:	00db      	lsls	r3, r3, #3
 800d310:	4403      	add	r3, r0
 800d312:	3304      	adds	r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4299      	cmp	r1, r3
 800d318:	d112      	bne.n	800d340 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00c      	beq.n	800d33a <etharp_find_entry+0xc2>
 800d320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d324:	4989      	ldr	r1, [pc, #548]	; (800d54c <etharp_find_entry+0x2d4>)
 800d326:	4613      	mov	r3, r2
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	4413      	add	r3, r2
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	440b      	add	r3, r1
 800d330:	3308      	adds	r3, #8
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	429a      	cmp	r2, r3
 800d338:	d102      	bne.n	800d340 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d33a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d33e:	e100      	b.n	800d542 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d340:	7dfb      	ldrb	r3, [r7, #23]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d140      	bne.n	800d3c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d34a:	4980      	ldr	r1, [pc, #512]	; (800d54c <etharp_find_entry+0x2d4>)
 800d34c:	4613      	mov	r3, r2
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	4413      	add	r3, r2
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	440b      	add	r3, r1
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d01a      	beq.n	800d392 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d35c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d360:	497a      	ldr	r1, [pc, #488]	; (800d54c <etharp_find_entry+0x2d4>)
 800d362:	4613      	mov	r3, r2
 800d364:	005b      	lsls	r3, r3, #1
 800d366:	4413      	add	r3, r2
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	440b      	add	r3, r1
 800d36c:	3312      	adds	r3, #18
 800d36e:	881b      	ldrh	r3, [r3, #0]
 800d370:	8bba      	ldrh	r2, [r7, #28]
 800d372:	429a      	cmp	r2, r3
 800d374:	d845      	bhi.n	800d402 <etharp_find_entry+0x18a>
            old_queue = i;
 800d376:	8c3b      	ldrh	r3, [r7, #32]
 800d378:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d37a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d37e:	4973      	ldr	r1, [pc, #460]	; (800d54c <etharp_find_entry+0x2d4>)
 800d380:	4613      	mov	r3, r2
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	440b      	add	r3, r1
 800d38a:	3312      	adds	r3, #18
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	83bb      	strh	r3, [r7, #28]
 800d390:	e037      	b.n	800d402 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d396:	496d      	ldr	r1, [pc, #436]	; (800d54c <etharp_find_entry+0x2d4>)
 800d398:	4613      	mov	r3, r2
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	4413      	add	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3312      	adds	r3, #18
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	8b7a      	ldrh	r2, [r7, #26]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d82a      	bhi.n	800d402 <etharp_find_entry+0x18a>
            old_pending = i;
 800d3ac:	8c3b      	ldrh	r3, [r7, #32]
 800d3ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d3b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3b4:	4965      	ldr	r1, [pc, #404]	; (800d54c <etharp_find_entry+0x2d4>)
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	005b      	lsls	r3, r3, #1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	440b      	add	r3, r1
 800d3c0:	3312      	adds	r3, #18
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	837b      	strh	r3, [r7, #26]
 800d3c6:	e01c      	b.n	800d402 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d3c8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d919      	bls.n	800d402 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d3ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3d2:	495e      	ldr	r1, [pc, #376]	; (800d54c <etharp_find_entry+0x2d4>)
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	005b      	lsls	r3, r3, #1
 800d3d8:	4413      	add	r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	440b      	add	r3, r1
 800d3de:	3312      	adds	r3, #18
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	8b3a      	ldrh	r2, [r7, #24]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d80c      	bhi.n	800d402 <etharp_find_entry+0x18a>
            old_stable = i;
 800d3e8:	8c3b      	ldrh	r3, [r7, #32]
 800d3ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d3ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d3f0:	4956      	ldr	r1, [pc, #344]	; (800d54c <etharp_find_entry+0x2d4>)
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	005b      	lsls	r3, r3, #1
 800d3f6:	4413      	add	r3, r2
 800d3f8:	00db      	lsls	r3, r3, #3
 800d3fa:	440b      	add	r3, r1
 800d3fc:	3312      	adds	r3, #18
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d402:	8c3b      	ldrh	r3, [r7, #32]
 800d404:	3301      	adds	r3, #1
 800d406:	b29b      	uxth	r3, r3
 800d408:	843b      	strh	r3, [r7, #32]
 800d40a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d40e:	2b09      	cmp	r3, #9
 800d410:	f77f af4c 	ble.w	800d2ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d414:	7afb      	ldrb	r3, [r7, #11]
 800d416:	f003 0302 	and.w	r3, r3, #2
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d108      	bne.n	800d430 <etharp_find_entry+0x1b8>
 800d41e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d422:	2b0a      	cmp	r3, #10
 800d424:	d107      	bne.n	800d436 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d426:	7afb      	ldrb	r3, [r7, #11]
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d102      	bne.n	800d436 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d430:	f04f 33ff 	mov.w	r3, #4294967295
 800d434:	e085      	b.n	800d542 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d43a:	2b09      	cmp	r3, #9
 800d43c:	dc02      	bgt.n	800d444 <etharp_find_entry+0x1cc>
    i = empty;
 800d43e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d440:	843b      	strh	r3, [r7, #32]
 800d442:	e039      	b.n	800d4b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d444:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d448:	2b09      	cmp	r3, #9
 800d44a:	dc14      	bgt.n	800d476 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d44c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d44e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d454:	493d      	ldr	r1, [pc, #244]	; (800d54c <etharp_find_entry+0x2d4>)
 800d456:	4613      	mov	r3, r2
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4413      	add	r3, r2
 800d45c:	00db      	lsls	r3, r3, #3
 800d45e:	440b      	add	r3, r1
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d018      	beq.n	800d498 <etharp_find_entry+0x220>
 800d466:	4b3a      	ldr	r3, [pc, #232]	; (800d550 <etharp_find_entry+0x2d8>)
 800d468:	f240 126d 	movw	r2, #365	; 0x16d
 800d46c:	493b      	ldr	r1, [pc, #236]	; (800d55c <etharp_find_entry+0x2e4>)
 800d46e:	483a      	ldr	r0, [pc, #232]	; (800d558 <etharp_find_entry+0x2e0>)
 800d470:	f002 fa10 	bl	800f894 <iprintf>
 800d474:	e010      	b.n	800d498 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d476:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d47a:	2b09      	cmp	r3, #9
 800d47c:	dc02      	bgt.n	800d484 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d47e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d480:	843b      	strh	r3, [r7, #32]
 800d482:	e009      	b.n	800d498 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d484:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d488:	2b09      	cmp	r3, #9
 800d48a:	dc02      	bgt.n	800d492 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d48c:	8bfb      	ldrh	r3, [r7, #30]
 800d48e:	843b      	strh	r3, [r7, #32]
 800d490:	e002      	b.n	800d498 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d492:	f04f 33ff 	mov.w	r3, #4294967295
 800d496:	e054      	b.n	800d542 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d498:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d49c:	2b09      	cmp	r3, #9
 800d49e:	dd06      	ble.n	800d4ae <etharp_find_entry+0x236>
 800d4a0:	4b2b      	ldr	r3, [pc, #172]	; (800d550 <etharp_find_entry+0x2d8>)
 800d4a2:	f240 127f 	movw	r2, #383	; 0x17f
 800d4a6:	492e      	ldr	r1, [pc, #184]	; (800d560 <etharp_find_entry+0x2e8>)
 800d4a8:	482b      	ldr	r0, [pc, #172]	; (800d558 <etharp_find_entry+0x2e0>)
 800d4aa:	f002 f9f3 	bl	800f894 <iprintf>
    etharp_free_entry(i);
 800d4ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fe06 	bl	800d0c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d4b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d4bc:	2b09      	cmp	r3, #9
 800d4be:	dd06      	ble.n	800d4ce <etharp_find_entry+0x256>
 800d4c0:	4b23      	ldr	r3, [pc, #140]	; (800d550 <etharp_find_entry+0x2d8>)
 800d4c2:	f240 1283 	movw	r2, #387	; 0x183
 800d4c6:	4926      	ldr	r1, [pc, #152]	; (800d560 <etharp_find_entry+0x2e8>)
 800d4c8:	4823      	ldr	r0, [pc, #140]	; (800d558 <etharp_find_entry+0x2e0>)
 800d4ca:	f002 f9e3 	bl	800f894 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d4ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4d2:	491e      	ldr	r1, [pc, #120]	; (800d54c <etharp_find_entry+0x2d4>)
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	4413      	add	r3, r2
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	440b      	add	r3, r1
 800d4de:	3314      	adds	r3, #20
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d006      	beq.n	800d4f4 <etharp_find_entry+0x27c>
 800d4e6:	4b1a      	ldr	r3, [pc, #104]	; (800d550 <etharp_find_entry+0x2d8>)
 800d4e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d4ec:	491d      	ldr	r1, [pc, #116]	; (800d564 <etharp_find_entry+0x2ec>)
 800d4ee:	481a      	ldr	r0, [pc, #104]	; (800d558 <etharp_find_entry+0x2e0>)
 800d4f0:	f002 f9d0 	bl	800f894 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00b      	beq.n	800d512 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6819      	ldr	r1, [r3, #0]
 800d502:	4812      	ldr	r0, [pc, #72]	; (800d54c <etharp_find_entry+0x2d4>)
 800d504:	4613      	mov	r3, r2
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	4413      	add	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	4403      	add	r3, r0
 800d50e:	3304      	adds	r3, #4
 800d510:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d516:	490d      	ldr	r1, [pc, #52]	; (800d54c <etharp_find_entry+0x2d4>)
 800d518:	4613      	mov	r3, r2
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	4413      	add	r3, r2
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	440b      	add	r3, r1
 800d522:	3312      	adds	r3, #18
 800d524:	2200      	movs	r2, #0
 800d526:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d52c:	4907      	ldr	r1, [pc, #28]	; (800d54c <etharp_find_entry+0x2d4>)
 800d52e:	4613      	mov	r3, r2
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	4413      	add	r3, r2
 800d534:	00db      	lsls	r3, r3, #3
 800d536:	440b      	add	r3, r1
 800d538:	3308      	adds	r3, #8
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d53e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3728      	adds	r7, #40	; 0x28
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	2000a4e0 	.word	0x2000a4e0
 800d550:	08012d8c 	.word	0x08012d8c
 800d554:	08012dc4 	.word	0x08012dc4
 800d558:	08012e04 	.word	0x08012e04
 800d55c:	08012e2c 	.word	0x08012e2c
 800d560:	08012e44 	.word	0x08012e44
 800d564:	08012e58 	.word	0x08012e58

0800d568 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
 800d574:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d57c:	2b06      	cmp	r3, #6
 800d57e:	d006      	beq.n	800d58e <etharp_update_arp_entry+0x26>
 800d580:	4b48      	ldr	r3, [pc, #288]	; (800d6a4 <etharp_update_arp_entry+0x13c>)
 800d582:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d586:	4948      	ldr	r1, [pc, #288]	; (800d6a8 <etharp_update_arp_entry+0x140>)
 800d588:	4848      	ldr	r0, [pc, #288]	; (800d6ac <etharp_update_arp_entry+0x144>)
 800d58a:	f002 f983 	bl	800f894 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d012      	beq.n	800d5ba <etharp_update_arp_entry+0x52>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00e      	beq.n	800d5ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68f9      	ldr	r1, [r7, #12]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f001 f920 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800d5a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d105      	bne.n	800d5ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d5b6:	2be0      	cmp	r3, #224	; 0xe0
 800d5b8:	d102      	bne.n	800d5c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d5ba:	f06f 030f 	mvn.w	r3, #15
 800d5be:	e06c      	b.n	800d69a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	68b8      	ldr	r0, [r7, #8]
 800d5c8:	f7ff fe56 	bl	800d278 <etharp_find_entry>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d5d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	da02      	bge.n	800d5de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d5d8:	8afb      	ldrh	r3, [r7, #22]
 800d5da:	b25b      	sxtb	r3, r3
 800d5dc:	e05d      	b.n	800d69a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d5de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d5e2:	4933      	ldr	r1, [pc, #204]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4413      	add	r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	440b      	add	r3, r1
 800d5ee:	3314      	adds	r3, #20
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d5f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d5f8:	492d      	ldr	r1, [pc, #180]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	4413      	add	r3, r2
 800d600:	00db      	lsls	r3, r3, #3
 800d602:	440b      	add	r3, r1
 800d604:	3308      	adds	r3, #8
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d60a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d60e:	4613      	mov	r3, r2
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	4413      	add	r3, r2
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	3308      	adds	r3, #8
 800d618:	4a25      	ldr	r2, [pc, #148]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d61a:	4413      	add	r3, r2
 800d61c:	3304      	adds	r3, #4
 800d61e:	2206      	movs	r2, #6
 800d620:	6879      	ldr	r1, [r7, #4]
 800d622:	4618      	mov	r0, r3
 800d624:	f002 fa11 	bl	800fa4a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d62c:	4920      	ldr	r1, [pc, #128]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d62e:	4613      	mov	r3, r2
 800d630:	005b      	lsls	r3, r3, #1
 800d632:	4413      	add	r3, r2
 800d634:	00db      	lsls	r3, r3, #3
 800d636:	440b      	add	r3, r1
 800d638:	3312      	adds	r3, #18
 800d63a:	2200      	movs	r2, #0
 800d63c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d63e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d642:	491b      	ldr	r1, [pc, #108]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d644:	4613      	mov	r3, r2
 800d646:	005b      	lsls	r3, r3, #1
 800d648:	4413      	add	r3, r2
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	440b      	add	r3, r1
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d021      	beq.n	800d698 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d658:	4915      	ldr	r1, [pc, #84]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d65a:	4613      	mov	r3, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	4413      	add	r3, r2
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	440b      	add	r3, r1
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d668:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d66c:	4910      	ldr	r1, [pc, #64]	; (800d6b0 <etharp_update_arp_entry+0x148>)
 800d66e:	4613      	mov	r3, r2
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	4413      	add	r3, r2
 800d674:	00db      	lsls	r3, r3, #3
 800d676:	440b      	add	r3, r1
 800d678:	2200      	movs	r2, #0
 800d67a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800d682:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6939      	ldr	r1, [r7, #16]
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f001 ffb9 	bl	800f604 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d692:	6938      	ldr	r0, [r7, #16]
 800d694:	f7f7 fc84 	bl	8004fa0 <pbuf_free>
  }
  return ERR_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3718      	adds	r7, #24
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	08012d8c 	.word	0x08012d8c
 800d6a8:	08012e84 	.word	0x08012e84
 800d6ac:	08012e04 	.word	0x08012e04
 800d6b0:	2000a4e0 	.word	0x2000a4e0

0800d6b4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6bc:	2300      	movs	r3, #0
 800d6be:	60fb      	str	r3, [r7, #12]
 800d6c0:	e01e      	b.n	800d700 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d6c2:	4913      	ldr	r1, [pc, #76]	; (800d710 <etharp_cleanup_netif+0x5c>)
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	4413      	add	r3, r2
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3314      	adds	r3, #20
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d6d6:	7afb      	ldrb	r3, [r7, #11]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00e      	beq.n	800d6fa <etharp_cleanup_netif+0x46>
 800d6dc:	490c      	ldr	r1, [pc, #48]	; (800d710 <etharp_cleanup_netif+0x5c>)
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	4613      	mov	r3, r2
 800d6e2:	005b      	lsls	r3, r3, #1
 800d6e4:	4413      	add	r3, r2
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	440b      	add	r3, r1
 800d6ea:	3308      	adds	r3, #8
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d102      	bne.n	800d6fa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fce5 	bl	800d0c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b09      	cmp	r3, #9
 800d704:	dddd      	ble.n	800d6c2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d706:	bf00      	nop
 800d708:	bf00      	nop
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	2000a4e0 	.word	0x2000a4e0

0800d714 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d714:	b5b0      	push	{r4, r5, r7, lr}
 800d716:	b08a      	sub	sp, #40	; 0x28
 800d718:	af04      	add	r7, sp, #16
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d107      	bne.n	800d734 <etharp_input+0x20>
 800d724:	4b3f      	ldr	r3, [pc, #252]	; (800d824 <etharp_input+0x110>)
 800d726:	f240 228a 	movw	r2, #650	; 0x28a
 800d72a:	493f      	ldr	r1, [pc, #252]	; (800d828 <etharp_input+0x114>)
 800d72c:	483f      	ldr	r0, [pc, #252]	; (800d82c <etharp_input+0x118>)
 800d72e:	f002 f8b1 	bl	800f894 <iprintf>
 800d732:	e074      	b.n	800d81e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d744:	d10c      	bne.n	800d760 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d74a:	2b06      	cmp	r3, #6
 800d74c:	d108      	bne.n	800d760 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d752:	2b04      	cmp	r3, #4
 800d754:	d104      	bne.n	800d760 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	885b      	ldrh	r3, [r3, #2]
 800d75a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d75c:	2b08      	cmp	r3, #8
 800d75e:	d003      	beq.n	800d768 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7f7 fc1d 	bl	8004fa0 <pbuf_free>
    return;
 800d766:	e05a      	b.n	800d81e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	330e      	adds	r3, #14
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	3318      	adds	r3, #24
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	3304      	adds	r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <etharp_input+0x74>
    for_us = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	75fb      	strb	r3, [r7, #23]
 800d786:	e009      	b.n	800d79c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	3304      	adds	r3, #4
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	bf0c      	ite	eq
 800d794:	2301      	moveq	r3, #1
 800d796:	2300      	movne	r3, #0
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f103 0208 	add.w	r2, r3, #8
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <etharp_input+0x98>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e000      	b.n	800d7ae <etharp_input+0x9a>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	f107 010c 	add.w	r1, r7, #12
 800d7b2:	6838      	ldr	r0, [r7, #0]
 800d7b4:	f7ff fed8 	bl	800d568 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	88db      	ldrh	r3, [r3, #6]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7c2:	d003      	beq.n	800d7cc <etharp_input+0xb8>
 800d7c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7c8:	d01e      	beq.n	800d808 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d7ca:	e025      	b.n	800d818 <etharp_input+0x104>
      if (for_us) {
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d021      	beq.n	800d816 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d7ec:	2102      	movs	r1, #2
 800d7ee:	9103      	str	r1, [sp, #12]
 800d7f0:	f107 010c 	add.w	r1, r7, #12
 800d7f4:	9102      	str	r1, [sp, #8]
 800d7f6:	9201      	str	r2, [sp, #4]
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	4622      	mov	r2, r4
 800d7fe:	4601      	mov	r1, r0
 800d800:	6838      	ldr	r0, [r7, #0]
 800d802:	f000 faef 	bl	800dde4 <etharp_raw>
      break;
 800d806:	e006      	b.n	800d816 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800d808:	f107 030c 	add.w	r3, r7, #12
 800d80c:	4619      	mov	r1, r3
 800d80e:	6838      	ldr	r0, [r7, #0]
 800d810:	f7fe f9fc 	bl	800bc0c <dhcp_arp_reply>
      break;
 800d814:	e000      	b.n	800d818 <etharp_input+0x104>
      break;
 800d816:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7f7 fbc1 	bl	8004fa0 <pbuf_free>
}
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bdb0      	pop	{r4, r5, r7, pc}
 800d824:	08012d8c 	.word	0x08012d8c
 800d828:	08012edc 	.word	0x08012edc
 800d82c:	08012e04 	.word	0x08012e04

0800d830 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af02      	add	r7, sp, #8
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	4613      	mov	r3, r2
 800d83c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d83e:	79fa      	ldrb	r2, [r7, #7]
 800d840:	4944      	ldr	r1, [pc, #272]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	440b      	add	r3, r1
 800d84c:	3314      	adds	r3, #20
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d806      	bhi.n	800d862 <etharp_output_to_arp_index+0x32>
 800d854:	4b40      	ldr	r3, [pc, #256]	; (800d958 <etharp_output_to_arp_index+0x128>)
 800d856:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d85a:	4940      	ldr	r1, [pc, #256]	; (800d95c <etharp_output_to_arp_index+0x12c>)
 800d85c:	4840      	ldr	r0, [pc, #256]	; (800d960 <etharp_output_to_arp_index+0x130>)
 800d85e:	f002 f819 	bl	800f894 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d862:	79fa      	ldrb	r2, [r7, #7]
 800d864:	493b      	ldr	r1, [pc, #236]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d866:	4613      	mov	r3, r2
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	4413      	add	r3, r2
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	440b      	add	r3, r1
 800d870:	3314      	adds	r3, #20
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b02      	cmp	r3, #2
 800d876:	d153      	bne.n	800d920 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d878:	79fa      	ldrb	r2, [r7, #7]
 800d87a:	4936      	ldr	r1, [pc, #216]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d87c:	4613      	mov	r3, r2
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	4413      	add	r3, r2
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	440b      	add	r3, r1
 800d886:	3312      	adds	r3, #18
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d88e:	d919      	bls.n	800d8c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d890:	79fa      	ldrb	r2, [r7, #7]
 800d892:	4613      	mov	r3, r2
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	4413      	add	r3, r2
 800d898:	00db      	lsls	r3, r3, #3
 800d89a:	4a2e      	ldr	r2, [pc, #184]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d89c:	4413      	add	r3, r2
 800d89e:	3304      	adds	r3, #4
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f000 fb4c 	bl	800df40 <etharp_request>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d138      	bne.n	800d920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d8ae:	79fa      	ldrb	r2, [r7, #7]
 800d8b0:	4928      	ldr	r1, [pc, #160]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	005b      	lsls	r3, r3, #1
 800d8b6:	4413      	add	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3314      	adds	r3, #20
 800d8be:	2203      	movs	r2, #3
 800d8c0:	701a      	strb	r2, [r3, #0]
 800d8c2:	e02d      	b.n	800d920 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d8c4:	79fa      	ldrb	r2, [r7, #7]
 800d8c6:	4923      	ldr	r1, [pc, #140]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	4413      	add	r3, r2
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	440b      	add	r3, r1
 800d8d2:	3312      	adds	r3, #18
 800d8d4:	881b      	ldrh	r3, [r3, #0]
 800d8d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d8da:	d321      	bcc.n	800d920 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d8dc:	79fa      	ldrb	r2, [r7, #7]
 800d8de:	4613      	mov	r3, r2
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4413      	add	r3, r2
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	4a1b      	ldr	r2, [pc, #108]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d8e8:	4413      	add	r3, r2
 800d8ea:	1d19      	adds	r1, r3, #4
 800d8ec:	79fa      	ldrb	r2, [r7, #7]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	4413      	add	r3, r2
 800d8f4:	00db      	lsls	r3, r3, #3
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	4a16      	ldr	r2, [pc, #88]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d8fa:	4413      	add	r3, r2
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	461a      	mov	r2, r3
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f000 fafb 	bl	800defc <etharp_request_dst>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d109      	bne.n	800d920 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d90c:	79fa      	ldrb	r2, [r7, #7]
 800d90e:	4911      	ldr	r1, [pc, #68]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d910:	4613      	mov	r3, r2
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	4413      	add	r3, r2
 800d916:	00db      	lsls	r3, r3, #3
 800d918:	440b      	add	r3, r1
 800d91a:	3314      	adds	r3, #20
 800d91c:	2203      	movs	r2, #3
 800d91e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800d926:	79fa      	ldrb	r2, [r7, #7]
 800d928:	4613      	mov	r3, r2
 800d92a:	005b      	lsls	r3, r3, #1
 800d92c:	4413      	add	r3, r2
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	3308      	adds	r3, #8
 800d932:	4a08      	ldr	r2, [pc, #32]	; (800d954 <etharp_output_to_arp_index+0x124>)
 800d934:	4413      	add	r3, r2
 800d936:	3304      	adds	r3, #4
 800d938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d93c:	9200      	str	r2, [sp, #0]
 800d93e:	460a      	mov	r2, r1
 800d940:	68b9      	ldr	r1, [r7, #8]
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f001 fe5e 	bl	800f604 <ethernet_output>
 800d948:	4603      	mov	r3, r0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	2000a4e0 	.word	0x2000a4e0
 800d958:	08012d8c 	.word	0x08012d8c
 800d95c:	08012efc 	.word	0x08012efc
 800d960:	08012e04 	.word	0x08012e04

0800d964 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af02      	add	r7, sp, #8
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d106      	bne.n	800d988 <etharp_output+0x24>
 800d97a:	4b73      	ldr	r3, [pc, #460]	; (800db48 <etharp_output+0x1e4>)
 800d97c:	f240 321e 	movw	r2, #798	; 0x31e
 800d980:	4972      	ldr	r1, [pc, #456]	; (800db4c <etharp_output+0x1e8>)
 800d982:	4873      	ldr	r0, [pc, #460]	; (800db50 <etharp_output+0x1ec>)
 800d984:	f001 ff86 	bl	800f894 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <etharp_output+0x38>
 800d98e:	4b6e      	ldr	r3, [pc, #440]	; (800db48 <etharp_output+0x1e4>)
 800d990:	f240 321f 	movw	r2, #799	; 0x31f
 800d994:	496f      	ldr	r1, [pc, #444]	; (800db54 <etharp_output+0x1f0>)
 800d996:	486e      	ldr	r0, [pc, #440]	; (800db50 <etharp_output+0x1ec>)
 800d998:	f001 ff7c 	bl	800f894 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d106      	bne.n	800d9b0 <etharp_output+0x4c>
 800d9a2:	4b69      	ldr	r3, [pc, #420]	; (800db48 <etharp_output+0x1e4>)
 800d9a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d9a8:	496b      	ldr	r1, [pc, #428]	; (800db58 <etharp_output+0x1f4>)
 800d9aa:	4869      	ldr	r0, [pc, #420]	; (800db50 <etharp_output+0x1ec>)
 800d9ac:	f001 ff72 	bl	800f894 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68f9      	ldr	r1, [r7, #12]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 ff16 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d9c2:	4b66      	ldr	r3, [pc, #408]	; (800db5c <etharp_output+0x1f8>)
 800d9c4:	61fb      	str	r3, [r7, #28]
 800d9c6:	e0af      	b.n	800db28 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9d0:	2be0      	cmp	r3, #224	; 0xe0
 800d9d2:	d118      	bne.n	800da06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d9dc:	235e      	movs	r3, #94	; 0x5e
 800d9de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	3303      	adds	r3, #3
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d9fe:	f107 0310 	add.w	r3, r7, #16
 800da02:	61fb      	str	r3, [r7, #28]
 800da04:	e090      	b.n	800db28 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3304      	adds	r3, #4
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	405a      	eors	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	3308      	adds	r3, #8
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4013      	ands	r3, r2
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d012      	beq.n	800da44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800da24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800da28:	4293      	cmp	r3, r2
 800da2a:	d00b      	beq.n	800da44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	330c      	adds	r3, #12
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	330c      	adds	r3, #12
 800da3a:	61bb      	str	r3, [r7, #24]
 800da3c:	e002      	b.n	800da44 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800da3e:	f06f 0303 	mvn.w	r3, #3
 800da42:	e07d      	b.n	800db40 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800da44:	4b46      	ldr	r3, [pc, #280]	; (800db60 <etharp_output+0x1fc>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	4619      	mov	r1, r3
 800da4a:	4a46      	ldr	r2, [pc, #280]	; (800db64 <etharp_output+0x200>)
 800da4c:	460b      	mov	r3, r1
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	440b      	add	r3, r1
 800da52:	00db      	lsls	r3, r3, #3
 800da54:	4413      	add	r3, r2
 800da56:	3314      	adds	r3, #20
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d925      	bls.n	800daaa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800da5e:	4b40      	ldr	r3, [pc, #256]	; (800db60 <etharp_output+0x1fc>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	4619      	mov	r1, r3
 800da64:	4a3f      	ldr	r2, [pc, #252]	; (800db64 <etharp_output+0x200>)
 800da66:	460b      	mov	r3, r1
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	440b      	add	r3, r1
 800da6c:	00db      	lsls	r3, r3, #3
 800da6e:	4413      	add	r3, r2
 800da70:	3308      	adds	r3, #8
 800da72:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	429a      	cmp	r2, r3
 800da78:	d117      	bne.n	800daaa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	4b38      	ldr	r3, [pc, #224]	; (800db60 <etharp_output+0x1fc>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	4937      	ldr	r1, [pc, #220]	; (800db64 <etharp_output+0x200>)
 800da86:	4603      	mov	r3, r0
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	4403      	add	r3, r0
 800da8c:	00db      	lsls	r3, r3, #3
 800da8e:	440b      	add	r3, r1
 800da90:	3304      	adds	r3, #4
 800da92:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800da94:	429a      	cmp	r2, r3
 800da96:	d108      	bne.n	800daaa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800da98:	4b31      	ldr	r3, [pc, #196]	; (800db60 <etharp_output+0x1fc>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	461a      	mov	r2, r3
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff fec5 	bl	800d830 <etharp_output_to_arp_index>
 800daa6:	4603      	mov	r3, r0
 800daa8:	e04a      	b.n	800db40 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800daaa:	2300      	movs	r3, #0
 800daac:	75fb      	strb	r3, [r7, #23]
 800daae:	e031      	b.n	800db14 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dab0:	7dfa      	ldrb	r2, [r7, #23]
 800dab2:	492c      	ldr	r1, [pc, #176]	; (800db64 <etharp_output+0x200>)
 800dab4:	4613      	mov	r3, r2
 800dab6:	005b      	lsls	r3, r3, #1
 800dab8:	4413      	add	r3, r2
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	440b      	add	r3, r1
 800dabe:	3314      	adds	r3, #20
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d923      	bls.n	800db0e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800dac6:	7dfa      	ldrb	r2, [r7, #23]
 800dac8:	4926      	ldr	r1, [pc, #152]	; (800db64 <etharp_output+0x200>)
 800daca:	4613      	mov	r3, r2
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	4413      	add	r3, r2
 800dad0:	00db      	lsls	r3, r3, #3
 800dad2:	440b      	add	r3, r1
 800dad4:	3308      	adds	r3, #8
 800dad6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d117      	bne.n	800db0e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	6819      	ldr	r1, [r3, #0]
 800dae2:	7dfa      	ldrb	r2, [r7, #23]
 800dae4:	481f      	ldr	r0, [pc, #124]	; (800db64 <etharp_output+0x200>)
 800dae6:	4613      	mov	r3, r2
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	4413      	add	r3, r2
 800daec:	00db      	lsls	r3, r3, #3
 800daee:	4403      	add	r3, r0
 800daf0:	3304      	adds	r3, #4
 800daf2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800daf4:	4299      	cmp	r1, r3
 800daf6:	d10a      	bne.n	800db0e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800daf8:	4a19      	ldr	r2, [pc, #100]	; (800db60 <etharp_output+0x1fc>)
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dafe:	7dfb      	ldrb	r3, [r7, #23]
 800db00:	461a      	mov	r2, r3
 800db02:	68b9      	ldr	r1, [r7, #8]
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f7ff fe93 	bl	800d830 <etharp_output_to_arp_index>
 800db0a:	4603      	mov	r3, r0
 800db0c:	e018      	b.n	800db40 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800db0e:	7dfb      	ldrb	r3, [r7, #23]
 800db10:	3301      	adds	r3, #1
 800db12:	75fb      	strb	r3, [r7, #23]
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b09      	cmp	r3, #9
 800db18:	d9ca      	bls.n	800dab0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	69b9      	ldr	r1, [r7, #24]
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f000 f822 	bl	800db68 <etharp_query>
 800db24:	4603      	mov	r3, r0
 800db26:	e00b      	b.n	800db40 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800db2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	68b9      	ldr	r1, [r7, #8]
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f001 fd63 	bl	800f604 <ethernet_output>
 800db3e:	4603      	mov	r3, r0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	08012d8c 	.word	0x08012d8c
 800db4c:	08012edc 	.word	0x08012edc
 800db50:	08012e04 	.word	0x08012e04
 800db54:	08012f2c 	.word	0x08012f2c
 800db58:	08012ecc 	.word	0x08012ecc
 800db5c:	08013554 	.word	0x08013554
 800db60:	2000a5d0 	.word	0x2000a5d0
 800db64:	2000a4e0 	.word	0x2000a4e0

0800db68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08c      	sub	sp, #48	; 0x30
 800db6c:	af02      	add	r7, sp, #8
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	332a      	adds	r3, #42	; 0x2a
 800db78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800db7a:	23ff      	movs	r3, #255	; 0xff
 800db7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800db80:	2300      	movs	r3, #0
 800db82:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68f9      	ldr	r1, [r7, #12]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fe2c 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10c      	bne.n	800dbb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800db9e:	2be0      	cmp	r3, #224	; 0xe0
 800dba0:	d006      	beq.n	800dbb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d003      	beq.n	800dbb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d102      	bne.n	800dbb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dbb0:	f06f 030f 	mvn.w	r3, #15
 800dbb4:	e101      	b.n	800ddba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	2101      	movs	r1, #1
 800dbba:	68b8      	ldr	r0, [r7, #8]
 800dbbc:	f7ff fb5c 	bl	800d278 <etharp_find_entry>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800dbc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	da02      	bge.n	800dbd2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800dbcc:	8a7b      	ldrh	r3, [r7, #18]
 800dbce:	b25b      	sxtb	r3, r3
 800dbd0:	e0f3      	b.n	800ddba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800dbd2:	8a7b      	ldrh	r3, [r7, #18]
 800dbd4:	2b7e      	cmp	r3, #126	; 0x7e
 800dbd6:	d906      	bls.n	800dbe6 <etharp_query+0x7e>
 800dbd8:	4b7a      	ldr	r3, [pc, #488]	; (800ddc4 <etharp_query+0x25c>)
 800dbda:	f240 32c1 	movw	r2, #961	; 0x3c1
 800dbde:	497a      	ldr	r1, [pc, #488]	; (800ddc8 <etharp_query+0x260>)
 800dbe0:	487a      	ldr	r0, [pc, #488]	; (800ddcc <etharp_query+0x264>)
 800dbe2:	f001 fe57 	bl	800f894 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800dbe6:	8a7b      	ldrh	r3, [r7, #18]
 800dbe8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dbea:	7c7a      	ldrb	r2, [r7, #17]
 800dbec:	4978      	ldr	r1, [pc, #480]	; (800ddd0 <etharp_query+0x268>)
 800dbee:	4613      	mov	r3, r2
 800dbf0:	005b      	lsls	r3, r3, #1
 800dbf2:	4413      	add	r3, r2
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	440b      	add	r3, r1
 800dbf8:	3314      	adds	r3, #20
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d115      	bne.n	800dc2c <etharp_query+0xc4>
    is_new_entry = 1;
 800dc00:	2301      	movs	r3, #1
 800dc02:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800dc04:	7c7a      	ldrb	r2, [r7, #17]
 800dc06:	4972      	ldr	r1, [pc, #456]	; (800ddd0 <etharp_query+0x268>)
 800dc08:	4613      	mov	r3, r2
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	4413      	add	r3, r2
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	440b      	add	r3, r1
 800dc12:	3314      	adds	r3, #20
 800dc14:	2201      	movs	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800dc18:	7c7a      	ldrb	r2, [r7, #17]
 800dc1a:	496d      	ldr	r1, [pc, #436]	; (800ddd0 <etharp_query+0x268>)
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	4413      	add	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	440b      	add	r3, r1
 800dc26:	3308      	adds	r3, #8
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dc2c:	7c7a      	ldrb	r2, [r7, #17]
 800dc2e:	4968      	ldr	r1, [pc, #416]	; (800ddd0 <etharp_query+0x268>)
 800dc30:	4613      	mov	r3, r2
 800dc32:	005b      	lsls	r3, r3, #1
 800dc34:	4413      	add	r3, r2
 800dc36:	00db      	lsls	r3, r3, #3
 800dc38:	440b      	add	r3, r1
 800dc3a:	3314      	adds	r3, #20
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d011      	beq.n	800dc66 <etharp_query+0xfe>
 800dc42:	7c7a      	ldrb	r2, [r7, #17]
 800dc44:	4962      	ldr	r1, [pc, #392]	; (800ddd0 <etharp_query+0x268>)
 800dc46:	4613      	mov	r3, r2
 800dc48:	005b      	lsls	r3, r3, #1
 800dc4a:	4413      	add	r3, r2
 800dc4c:	00db      	lsls	r3, r3, #3
 800dc4e:	440b      	add	r3, r1
 800dc50:	3314      	adds	r3, #20
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d806      	bhi.n	800dc66 <etharp_query+0xfe>
 800dc58:	4b5a      	ldr	r3, [pc, #360]	; (800ddc4 <etharp_query+0x25c>)
 800dc5a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800dc5e:	495d      	ldr	r1, [pc, #372]	; (800ddd4 <etharp_query+0x26c>)
 800dc60:	485a      	ldr	r0, [pc, #360]	; (800ddcc <etharp_query+0x264>)
 800dc62:	f001 fe17 	bl	800f894 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dc66:	6a3b      	ldr	r3, [r7, #32]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <etharp_query+0x10a>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10c      	bne.n	800dc8c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dc72:	68b9      	ldr	r1, [r7, #8]
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 f963 	bl	800df40 <etharp_request>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d102      	bne.n	800dc8c <etharp_query+0x124>
      return result;
 800dc86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc8a:	e096      	b.n	800ddba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <etharp_query+0x138>
 800dc92:	4b4c      	ldr	r3, [pc, #304]	; (800ddc4 <etharp_query+0x25c>)
 800dc94:	f240 32e1 	movw	r2, #993	; 0x3e1
 800dc98:	494f      	ldr	r1, [pc, #316]	; (800ddd8 <etharp_query+0x270>)
 800dc9a:	484c      	ldr	r0, [pc, #304]	; (800ddcc <etharp_query+0x264>)
 800dc9c:	f001 fdfa 	bl	800f894 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dca0:	7c7a      	ldrb	r2, [r7, #17]
 800dca2:	494b      	ldr	r1, [pc, #300]	; (800ddd0 <etharp_query+0x268>)
 800dca4:	4613      	mov	r3, r2
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	4413      	add	r3, r2
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	440b      	add	r3, r1
 800dcae:	3314      	adds	r3, #20
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d917      	bls.n	800dce6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800dcb6:	4a49      	ldr	r2, [pc, #292]	; (800dddc <etharp_query+0x274>)
 800dcb8:	7c7b      	ldrb	r3, [r7, #17]
 800dcba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dcbc:	7c7a      	ldrb	r2, [r7, #17]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	4413      	add	r3, r2
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	3308      	adds	r3, #8
 800dcc8:	4a41      	ldr	r2, [pc, #260]	; (800ddd0 <etharp_query+0x268>)
 800dcca:	4413      	add	r3, r2
 800dccc:	3304      	adds	r3, #4
 800dcce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcd2:	9200      	str	r2, [sp, #0]
 800dcd4:	697a      	ldr	r2, [r7, #20]
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f001 fc93 	bl	800f604 <ethernet_output>
 800dcde:	4603      	mov	r3, r0
 800dce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dce4:	e067      	b.n	800ddb6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dce6:	7c7a      	ldrb	r2, [r7, #17]
 800dce8:	4939      	ldr	r1, [pc, #228]	; (800ddd0 <etharp_query+0x268>)
 800dcea:	4613      	mov	r3, r2
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4413      	add	r3, r2
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	440b      	add	r3, r1
 800dcf4:	3314      	adds	r3, #20
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d15c      	bne.n	800ddb6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dd04:	e01c      	b.n	800dd40 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	895a      	ldrh	r2, [r3, #10]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	891b      	ldrh	r3, [r3, #8]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d10a      	bne.n	800dd28 <etharp_query+0x1c0>
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d006      	beq.n	800dd28 <etharp_query+0x1c0>
 800dd1a:	4b2a      	ldr	r3, [pc, #168]	; (800ddc4 <etharp_query+0x25c>)
 800dd1c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800dd20:	492f      	ldr	r1, [pc, #188]	; (800dde0 <etharp_query+0x278>)
 800dd22:	482a      	ldr	r0, [pc, #168]	; (800ddcc <etharp_query+0x264>)
 800dd24:	f001 fdb6 	bl	800f894 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	7b1b      	ldrb	r3, [r3, #12]
 800dd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <etharp_query+0x1d2>
        copy_needed = 1;
 800dd34:	2301      	movs	r3, #1
 800dd36:	61bb      	str	r3, [r7, #24]
        break;
 800dd38:	e005      	b.n	800dd46 <etharp_query+0x1de>
      }
      p = p->next;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1df      	bne.n	800dd06 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d007      	beq.n	800dd5c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800dd52:	200e      	movs	r0, #14
 800dd54:	f7f7 fb90 	bl	8005478 <pbuf_clone>
 800dd58:	61f8      	str	r0, [r7, #28]
 800dd5a:	e004      	b.n	800dd66 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800dd60:	69f8      	ldr	r0, [r7, #28]
 800dd62:	f7f7 f9bd 	bl	80050e0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d021      	beq.n	800ddb0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800dd6c:	7c7a      	ldrb	r2, [r7, #17]
 800dd6e:	4918      	ldr	r1, [pc, #96]	; (800ddd0 <etharp_query+0x268>)
 800dd70:	4613      	mov	r3, r2
 800dd72:	005b      	lsls	r3, r3, #1
 800dd74:	4413      	add	r3, r2
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	440b      	add	r3, r1
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00a      	beq.n	800dd96 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800dd80:	7c7a      	ldrb	r2, [r7, #17]
 800dd82:	4913      	ldr	r1, [pc, #76]	; (800ddd0 <etharp_query+0x268>)
 800dd84:	4613      	mov	r3, r2
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	4413      	add	r3, r2
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	440b      	add	r3, r1
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7f7 f905 	bl	8004fa0 <pbuf_free>
      }
      arp_table[i].q = p;
 800dd96:	7c7a      	ldrb	r2, [r7, #17]
 800dd98:	490d      	ldr	r1, [pc, #52]	; (800ddd0 <etharp_query+0x268>)
 800dd9a:	4613      	mov	r3, r2
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	4413      	add	r3, r2
 800dda0:	00db      	lsls	r3, r3, #3
 800dda2:	440b      	add	r3, r1
 800dda4:	69fa      	ldr	r2, [r7, #28]
 800dda6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddae:	e002      	b.n	800ddb6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ddb0:	23ff      	movs	r3, #255	; 0xff
 800ddb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ddb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3728      	adds	r7, #40	; 0x28
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	08012d8c 	.word	0x08012d8c
 800ddc8:	08012f38 	.word	0x08012f38
 800ddcc:	08012e04 	.word	0x08012e04
 800ddd0:	2000a4e0 	.word	0x2000a4e0
 800ddd4:	08012f48 	.word	0x08012f48
 800ddd8:	08012f2c 	.word	0x08012f2c
 800dddc:	2000a5d0 	.word	0x2000a5d0
 800dde0:	08012f70 	.word	0x08012f70

0800dde4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08a      	sub	sp, #40	; 0x28
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d106      	bne.n	800de0a <etharp_raw+0x26>
 800ddfc:	4b3a      	ldr	r3, [pc, #232]	; (800dee8 <etharp_raw+0x104>)
 800ddfe:	f240 4257 	movw	r2, #1111	; 0x457
 800de02:	493a      	ldr	r1, [pc, #232]	; (800deec <etharp_raw+0x108>)
 800de04:	483a      	ldr	r0, [pc, #232]	; (800def0 <etharp_raw+0x10c>)
 800de06:	f001 fd45 	bl	800f894 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800de0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de0e:	211c      	movs	r1, #28
 800de10:	200e      	movs	r0, #14
 800de12:	f7f6 fde1 	bl	80049d8 <pbuf_alloc>
 800de16:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d102      	bne.n	800de24 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800de1e:	f04f 33ff 	mov.w	r3, #4294967295
 800de22:	e05d      	b.n	800dee0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	895b      	ldrh	r3, [r3, #10]
 800de28:	2b1b      	cmp	r3, #27
 800de2a:	d806      	bhi.n	800de3a <etharp_raw+0x56>
 800de2c:	4b2e      	ldr	r3, [pc, #184]	; (800dee8 <etharp_raw+0x104>)
 800de2e:	f240 4262 	movw	r2, #1122	; 0x462
 800de32:	4930      	ldr	r1, [pc, #192]	; (800def4 <etharp_raw+0x110>)
 800de34:	482e      	ldr	r0, [pc, #184]	; (800def0 <etharp_raw+0x10c>)
 800de36:	f001 fd2d 	bl	800f894 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800de40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800de42:	4618      	mov	r0, r3
 800de44:	f7f5 fd42 	bl	80038cc <lwip_htons>
 800de48:	4603      	mov	r3, r0
 800de4a:	461a      	mov	r2, r3
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de56:	2b06      	cmp	r3, #6
 800de58:	d006      	beq.n	800de68 <etharp_raw+0x84>
 800de5a:	4b23      	ldr	r3, [pc, #140]	; (800dee8 <etharp_raw+0x104>)
 800de5c:	f240 4269 	movw	r2, #1129	; 0x469
 800de60:	4925      	ldr	r1, [pc, #148]	; (800def8 <etharp_raw+0x114>)
 800de62:	4823      	ldr	r0, [pc, #140]	; (800def0 <etharp_raw+0x10c>)
 800de64:	f001 fd16 	bl	800f894 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	3308      	adds	r3, #8
 800de6c:	2206      	movs	r2, #6
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	4618      	mov	r0, r3
 800de72:	f001 fdea 	bl	800fa4a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	3312      	adds	r3, #18
 800de7a:	2206      	movs	r2, #6
 800de7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de7e:	4618      	mov	r0, r3
 800de80:	f001 fde3 	bl	800fa4a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	330e      	adds	r3, #14
 800de88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de8a:	6812      	ldr	r2, [r2, #0]
 800de8c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	3318      	adds	r3, #24
 800de92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de94:	6812      	ldr	r2, [r2, #0]
 800de96:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	2200      	movs	r2, #0
 800de9c:	701a      	strb	r2, [r3, #0]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f042 0201 	orr.w	r2, r2, #1
 800dea4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	2200      	movs	r2, #0
 800deaa:	f042 0208 	orr.w	r2, r2, #8
 800deae:	709a      	strb	r2, [r3, #2]
 800deb0:	2200      	movs	r2, #0
 800deb2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2206      	movs	r2, #6
 800deb8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2204      	movs	r2, #4
 800debe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800dec0:	f640 0306 	movw	r3, #2054	; 0x806
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	69b9      	ldr	r1, [r7, #24]
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f001 fb99 	bl	800f604 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ded2:	69b8      	ldr	r0, [r7, #24]
 800ded4:	f7f7 f864 	bl	8004fa0 <pbuf_free>
  p = NULL;
 800ded8:	2300      	movs	r3, #0
 800deda:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dedc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3720      	adds	r7, #32
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	08012d8c 	.word	0x08012d8c
 800deec:	08012edc 	.word	0x08012edc
 800def0:	08012e04 	.word	0x08012e04
 800def4:	08012f8c 	.word	0x08012f8c
 800def8:	08012fc0 	.word	0x08012fc0

0800defc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af04      	add	r7, sp, #16
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800df18:	2201      	movs	r2, #1
 800df1a:	9203      	str	r2, [sp, #12]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	9202      	str	r2, [sp, #8]
 800df20:	4a06      	ldr	r2, [pc, #24]	; (800df3c <etharp_request_dst+0x40>)
 800df22:	9201      	str	r2, [sp, #4]
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	4603      	mov	r3, r0
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff ff5a 	bl	800dde4 <etharp_raw>
 800df30:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	0801355c 	.word	0x0801355c

0800df40 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800df4a:	4a05      	ldr	r2, [pc, #20]	; (800df60 <etharp_request+0x20>)
 800df4c:	6839      	ldr	r1, [r7, #0]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff ffd4 	bl	800defc <etharp_request_dst>
 800df54:	4603      	mov	r3, r0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3708      	adds	r7, #8
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	08013554 	.word	0x08013554

0800df64 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b08e      	sub	sp, #56	; 0x38
 800df68:	af04      	add	r7, sp, #16
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800df6e:	4b79      	ldr	r3, [pc, #484]	; (800e154 <icmp_input+0x1f0>)
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	f003 030f 	and.w	r3, r3, #15
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	b2db      	uxtb	r3, r3
 800df82:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800df84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df86:	2b13      	cmp	r3, #19
 800df88:	f240 80cd 	bls.w	800e126 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	895b      	ldrh	r3, [r3, #10]
 800df90:	2b03      	cmp	r3, #3
 800df92:	f240 80ca 	bls.w	800e12a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dfa0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 80b7 	beq.w	800e118 <icmp_input+0x1b4>
 800dfaa:	2b08      	cmp	r3, #8
 800dfac:	f040 80b7 	bne.w	800e11e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800dfb0:	4b69      	ldr	r3, [pc, #420]	; (800e158 <icmp_input+0x1f4>)
 800dfb2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dfb4:	4b67      	ldr	r3, [pc, #412]	; (800e154 <icmp_input+0x1f0>)
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfbc:	2be0      	cmp	r3, #224	; 0xe0
 800dfbe:	f000 80bb 	beq.w	800e138 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dfc2:	4b64      	ldr	r3, [pc, #400]	; (800e154 <icmp_input+0x1f0>)
 800dfc4:	695b      	ldr	r3, [r3, #20]
 800dfc6:	4a63      	ldr	r2, [pc, #396]	; (800e154 <icmp_input+0x1f0>)
 800dfc8:	6812      	ldr	r2, [r2, #0]
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 fc0b 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f040 80b1 	bne.w	800e13c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	891b      	ldrh	r3, [r3, #8]
 800dfde:	2b07      	cmp	r3, #7
 800dfe0:	f240 80a5 	bls.w	800e12e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dfe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfe6:	330e      	adds	r3, #14
 800dfe8:	4619      	mov	r1, r3
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7f6 ff42 	bl	8004e74 <pbuf_add_header>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d04b      	beq.n	800e08e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	891a      	ldrh	r2, [r3, #8]
 800dffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dffc:	4413      	add	r3, r2
 800dffe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	8b7a      	ldrh	r2, [r7, #26]
 800e006:	429a      	cmp	r2, r3
 800e008:	f0c0 809a 	bcc.w	800e140 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e00c:	8b7b      	ldrh	r3, [r7, #26]
 800e00e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e012:	4619      	mov	r1, r3
 800e014:	200e      	movs	r0, #14
 800e016:	f7f6 fcdf 	bl	80049d8 <pbuf_alloc>
 800e01a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 8090 	beq.w	800e144 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	895b      	ldrh	r3, [r3, #10]
 800e028:	461a      	mov	r2, r3
 800e02a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e02c:	3308      	adds	r3, #8
 800e02e:	429a      	cmp	r2, r3
 800e030:	d203      	bcs.n	800e03a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e032:	6978      	ldr	r0, [r7, #20]
 800e034:	f7f6 ffb4 	bl	8004fa0 <pbuf_free>
          goto icmperr;
 800e038:	e085      	b.n	800e146 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e042:	4618      	mov	r0, r3
 800e044:	f001 fd01 	bl	800fa4a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e04a:	4619      	mov	r1, r3
 800e04c:	6978      	ldr	r0, [r7, #20]
 800e04e:	f7f6 ff21 	bl	8004e94 <pbuf_remove_header>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d009      	beq.n	800e06c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e058:	4b40      	ldr	r3, [pc, #256]	; (800e15c <icmp_input+0x1f8>)
 800e05a:	22b6      	movs	r2, #182	; 0xb6
 800e05c:	4940      	ldr	r1, [pc, #256]	; (800e160 <icmp_input+0x1fc>)
 800e05e:	4841      	ldr	r0, [pc, #260]	; (800e164 <icmp_input+0x200>)
 800e060:	f001 fc18 	bl	800f894 <iprintf>
          pbuf_free(r);
 800e064:	6978      	ldr	r0, [r7, #20]
 800e066:	f7f6 ff9b 	bl	8004fa0 <pbuf_free>
          goto icmperr;
 800e06a:	e06c      	b.n	800e146 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e06c:	6879      	ldr	r1, [r7, #4]
 800e06e:	6978      	ldr	r0, [r7, #20]
 800e070:	f7f7 f8be 	bl	80051f0 <pbuf_copy>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d003      	beq.n	800e082 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e07a:	6978      	ldr	r0, [r7, #20]
 800e07c:	f7f6 ff90 	bl	8004fa0 <pbuf_free>
          goto icmperr;
 800e080:	e061      	b.n	800e146 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7f6 ff8c 	bl	8004fa0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	607b      	str	r3, [r7, #4]
 800e08c:	e00f      	b.n	800e0ae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e08e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e090:	330e      	adds	r3, #14
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7f6 fefd 	bl	8004e94 <pbuf_remove_header>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d006      	beq.n	800e0ae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e0a0:	4b2e      	ldr	r3, [pc, #184]	; (800e15c <icmp_input+0x1f8>)
 800e0a2:	22c7      	movs	r2, #199	; 0xc7
 800e0a4:	4930      	ldr	r1, [pc, #192]	; (800e168 <icmp_input+0x204>)
 800e0a6:	482f      	ldr	r0, [pc, #188]	; (800e164 <icmp_input+0x200>)
 800e0a8:	f001 fbf4 	bl	800f894 <iprintf>
          goto icmperr;
 800e0ac:	e04b      	b.n	800e146 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e0b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7f6 fedb 	bl	8004e74 <pbuf_add_header>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d12b      	bne.n	800e11c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e0d2:	4b20      	ldr	r3, [pc, #128]	; (800e154 <icmp_input+0x1f0>)
 800e0d4:	691a      	ldr	r2, [r3, #16]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	709a      	strb	r2, [r3, #2]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	22ff      	movs	r2, #255	; 0xff
 800e0ee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	729a      	strb	r2, [r3, #10]
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	9302      	str	r3, [sp, #8]
 800e0fe:	2301      	movs	r3, #1
 800e100:	9301      	str	r3, [sp, #4]
 800e102:	2300      	movs	r3, #0
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	23ff      	movs	r3, #255	; 0xff
 800e108:	2200      	movs	r2, #0
 800e10a:	69f9      	ldr	r1, [r7, #28]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 fa93 	bl	800e638 <ip4_output_if>
 800e112:	4603      	mov	r3, r0
 800e114:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e116:	e001      	b.n	800e11c <icmp_input+0x1b8>
      break;
 800e118:	bf00      	nop
 800e11a:	e000      	b.n	800e11e <icmp_input+0x1ba>
      break;
 800e11c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7f6 ff3e 	bl	8004fa0 <pbuf_free>
  return;
 800e124:	e013      	b.n	800e14e <icmp_input+0x1ea>
    goto lenerr;
 800e126:	bf00      	nop
 800e128:	e002      	b.n	800e130 <icmp_input+0x1cc>
    goto lenerr;
 800e12a:	bf00      	nop
 800e12c:	e000      	b.n	800e130 <icmp_input+0x1cc>
        goto lenerr;
 800e12e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7f6 ff35 	bl	8004fa0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e136:	e00a      	b.n	800e14e <icmp_input+0x1ea>
        goto icmperr;
 800e138:	bf00      	nop
 800e13a:	e004      	b.n	800e146 <icmp_input+0x1e2>
        goto icmperr;
 800e13c:	bf00      	nop
 800e13e:	e002      	b.n	800e146 <icmp_input+0x1e2>
          goto icmperr;
 800e140:	bf00      	nop
 800e142:	e000      	b.n	800e146 <icmp_input+0x1e2>
          goto icmperr;
 800e144:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7f6 ff2a 	bl	8004fa0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e14c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e14e:	3728      	adds	r7, #40	; 0x28
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20004cfc 	.word	0x20004cfc
 800e158:	20004d10 	.word	0x20004d10
 800e15c:	08013004 	.word	0x08013004
 800e160:	0801303c 	.word	0x0801303c
 800e164:	08013074 	.word	0x08013074
 800e168:	0801309c 	.word	0x0801309c

0800e16c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	460b      	mov	r3, r1
 800e176:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e178:	78fb      	ldrb	r3, [r7, #3]
 800e17a:	461a      	mov	r2, r3
 800e17c:	2103      	movs	r1, #3
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f814 	bl	800e1ac <icmp_send_response>
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e198:	78fb      	ldrb	r3, [r7, #3]
 800e19a:	461a      	mov	r2, r3
 800e19c:	210b      	movs	r1, #11
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 f804 	bl	800e1ac <icmp_send_response>
}
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08c      	sub	sp, #48	; 0x30
 800e1b0:	af04      	add	r7, sp, #16
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e1bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e1c0:	2124      	movs	r1, #36	; 0x24
 800e1c2:	2022      	movs	r0, #34	; 0x22
 800e1c4:	f7f6 fc08 	bl	80049d8 <pbuf_alloc>
 800e1c8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d04c      	beq.n	800e26a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	895b      	ldrh	r3, [r3, #10]
 800e1d4:	2b23      	cmp	r3, #35	; 0x23
 800e1d6:	d806      	bhi.n	800e1e6 <icmp_send_response+0x3a>
 800e1d8:	4b26      	ldr	r3, [pc, #152]	; (800e274 <icmp_send_response+0xc8>)
 800e1da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e1de:	4926      	ldr	r1, [pc, #152]	; (800e278 <icmp_send_response+0xcc>)
 800e1e0:	4826      	ldr	r0, [pc, #152]	; (800e27c <icmp_send_response+0xd0>)
 800e1e2:	f001 fb57 	bl	800f894 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	78fa      	ldrb	r2, [r7, #3]
 800e1f6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	78ba      	ldrb	r2, [r7, #2]
 800e1fc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2200      	movs	r2, #0
 800e202:	711a      	strb	r2, [r3, #4]
 800e204:	2200      	movs	r2, #0
 800e206:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	2200      	movs	r2, #0
 800e20c:	719a      	strb	r2, [r3, #6]
 800e20e:	2200      	movs	r2, #0
 800e210:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	f103 0008 	add.w	r0, r3, #8
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	221c      	movs	r2, #28
 800e220:	4619      	mov	r1, r3
 800e222:	f001 fc12 	bl	800fa4a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e22c:	f107 030c 	add.w	r3, r7, #12
 800e230:	4618      	mov	r0, r3
 800e232:	f000 f825 	bl	800e280 <ip4_route>
 800e236:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d011      	beq.n	800e262 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	2200      	movs	r2, #0
 800e242:	709a      	strb	r2, [r3, #2]
 800e244:	2200      	movs	r2, #0
 800e246:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e248:	f107 020c 	add.w	r2, r7, #12
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	2301      	movs	r3, #1
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	2300      	movs	r3, #0
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	23ff      	movs	r3, #255	; 0xff
 800e25a:	2100      	movs	r1, #0
 800e25c:	69f8      	ldr	r0, [r7, #28]
 800e25e:	f000 f9eb 	bl	800e638 <ip4_output_if>
  }
  pbuf_free(q);
 800e262:	69f8      	ldr	r0, [r7, #28]
 800e264:	f7f6 fe9c 	bl	8004fa0 <pbuf_free>
 800e268:	e000      	b.n	800e26c <icmp_send_response+0xc0>
    return;
 800e26a:	bf00      	nop
}
 800e26c:	3720      	adds	r7, #32
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	08013004 	.word	0x08013004
 800e278:	080130d0 	.word	0x080130d0
 800e27c:	08013074 	.word	0x08013074

0800e280 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e288:	4b33      	ldr	r3, [pc, #204]	; (800e358 <ip4_route+0xd8>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	60fb      	str	r3, [r7, #12]
 800e28e:	e036      	b.n	800e2fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02b      	beq.n	800e2f8 <ip4_route+0x78>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e2a6:	089b      	lsrs	r3, r3, #2
 800e2a8:	f003 0301 	and.w	r3, r3, #1
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d022      	beq.n	800e2f8 <ip4_route+0x78>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d01d      	beq.n	800e2f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3304      	adds	r3, #4
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	405a      	eors	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d101      	bne.n	800e2d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	e038      	b.n	800e34a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e2de:	f003 0302 	and.w	r3, r3, #2
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d108      	bne.n	800e2f8 <ip4_route+0x78>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	330c      	adds	r3, #12
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d101      	bne.n	800e2f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	e028      	b.n	800e34a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1c5      	bne.n	800e290 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e304:	4b15      	ldr	r3, [pc, #84]	; (800e35c <ip4_route+0xdc>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d01a      	beq.n	800e342 <ip4_route+0xc2>
 800e30c:	4b13      	ldr	r3, [pc, #76]	; (800e35c <ip4_route+0xdc>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d012      	beq.n	800e342 <ip4_route+0xc2>
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <ip4_route+0xdc>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00a      	beq.n	800e342 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e32c:	4b0b      	ldr	r3, [pc, #44]	; (800e35c <ip4_route+0xdc>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3304      	adds	r3, #4
 800e332:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	2b7f      	cmp	r3, #127	; 0x7f
 800e340:	d101      	bne.n	800e346 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e342:	2300      	movs	r3, #0
 800e344:	e001      	b.n	800e34a <ip4_route+0xca>
  }

  return netif_default;
 800e346:	4b05      	ldr	r3, [pc, #20]	; (800e35c <ip4_route+0xdc>)
 800e348:	681b      	ldr	r3, [r3, #0]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	2000a440 	.word	0x2000a440
 800e35c:	2000a444 	.word	0x2000a444

0800e360 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	b2db      	uxtb	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d016      	beq.n	800e3a6 <ip4_input_accept+0x46>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	3304      	adds	r3, #4
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d011      	beq.n	800e3a6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e382:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <ip4_input_accept+0x50>)
 800e384:	695a      	ldr	r2, [r3, #20]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3304      	adds	r3, #4
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d008      	beq.n	800e3a2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e390:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <ip4_input_accept+0x50>)
 800e392:	695b      	ldr	r3, [r3, #20]
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4618      	mov	r0, r3
 800e398:	f000 fa26 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800e39c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e000      	b.n	800e3a8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e3a6:	2300      	movs	r3, #0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	20004cfc 	.word	0x20004cfc

0800e3b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	091b      	lsrs	r3, r3, #4
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b04      	cmp	r3, #4
 800e3d2:	d004      	beq.n	800e3de <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7f6 fde3 	bl	8004fa0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e123      	b.n	800e626 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	f003 030f 	and.w	r3, r3, #15
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	885b      	ldrh	r3, [r3, #2]
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7f5 fa69 	bl	80038cc <lwip_htons>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	891b      	ldrh	r3, [r3, #8]
 800e402:	8a3a      	ldrh	r2, [r7, #16]
 800e404:	429a      	cmp	r2, r3
 800e406:	d204      	bcs.n	800e412 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800e408:	8a3b      	ldrh	r3, [r7, #16]
 800e40a:	4619      	mov	r1, r3
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7f6 fc41 	bl	8004c94 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	895b      	ldrh	r3, [r3, #10]
 800e416:	8a7a      	ldrh	r2, [r7, #18]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d807      	bhi.n	800e42c <ip4_input+0x78>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	891b      	ldrh	r3, [r3, #8]
 800e420:	8a3a      	ldrh	r2, [r7, #16]
 800e422:	429a      	cmp	r2, r3
 800e424:	d802      	bhi.n	800e42c <ip4_input+0x78>
 800e426:	8a7b      	ldrh	r3, [r7, #18]
 800e428:	2b13      	cmp	r3, #19
 800e42a:	d804      	bhi.n	800e436 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7f6 fdb7 	bl	8004fa0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	e0f7      	b.n	800e626 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	4a7d      	ldr	r2, [pc, #500]	; (800e630 <ip4_input+0x27c>)
 800e43c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	4a7b      	ldr	r2, [pc, #492]	; (800e630 <ip4_input+0x27c>)
 800e444:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e446:	4b7a      	ldr	r3, [pc, #488]	; (800e630 <ip4_input+0x27c>)
 800e448:	695b      	ldr	r3, [r3, #20]
 800e44a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e44e:	2be0      	cmp	r3, #224	; 0xe0
 800e450:	d112      	bne.n	800e478 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e458:	f003 0301 	and.w	r3, r3, #1
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d007      	beq.n	800e472 <ip4_input+0xbe>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	3304      	adds	r3, #4
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <ip4_input+0xbe>
      netif = inp;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	61bb      	str	r3, [r7, #24]
 800e470:	e02a      	b.n	800e4c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	61bb      	str	r3, [r7, #24]
 800e476:	e027      	b.n	800e4c8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e478:	6838      	ldr	r0, [r7, #0]
 800e47a:	f7ff ff71 	bl	800e360 <ip4_input_accept>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <ip4_input+0xd6>
      netif = inp;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e01e      	b.n	800e4c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e48e:	4b68      	ldr	r3, [pc, #416]	; (800e630 <ip4_input+0x27c>)
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	b2db      	uxtb	r3, r3
 800e494:	2b7f      	cmp	r3, #127	; 0x7f
 800e496:	d017      	beq.n	800e4c8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e498:	4b66      	ldr	r3, [pc, #408]	; (800e634 <ip4_input+0x280>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	61bb      	str	r3, [r7, #24]
 800e49e:	e00e      	b.n	800e4be <ip4_input+0x10a>
          if (netif == inp) {
 800e4a0:	69ba      	ldr	r2, [r7, #24]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d006      	beq.n	800e4b6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e4a8:	69b8      	ldr	r0, [r7, #24]
 800e4aa:	f7ff ff59 	bl	800e360 <ip4_input_accept>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d108      	bne.n	800e4c6 <ip4_input+0x112>
 800e4b4:	e000      	b.n	800e4b8 <ip4_input+0x104>
            continue;
 800e4b6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	61bb      	str	r3, [r7, #24]
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1ed      	bne.n	800e4a0 <ip4_input+0xec>
 800e4c4:	e000      	b.n	800e4c8 <ip4_input+0x114>
            break;
 800e4c6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d111      	bne.n	800e4f2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	7a5b      	ldrb	r3, [r3, #9]
 800e4d2:	2b11      	cmp	r3, #17
 800e4d4:	d10d      	bne.n	800e4f2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800e4d6:	8a7b      	ldrh	r3, [r7, #18]
 800e4d8:	69fa      	ldr	r2, [r7, #28]
 800e4da:	4413      	add	r3, r2
 800e4dc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	885b      	ldrh	r3, [r3, #2]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800e4e8:	d103      	bne.n	800e4f2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d017      	beq.n	800e528 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800e4f8:	4b4d      	ldr	r3, [pc, #308]	; (800e630 <ip4_input+0x27c>)
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d013      	beq.n	800e528 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e500:	4b4b      	ldr	r3, [pc, #300]	; (800e630 <ip4_input+0x27c>)
 800e502:	691b      	ldr	r3, [r3, #16]
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	4618      	mov	r0, r3
 800e508:	f000 f96e 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d105      	bne.n	800e51e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e512:	4b47      	ldr	r3, [pc, #284]	; (800e630 <ip4_input+0x27c>)
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e51a:	2be0      	cmp	r3, #224	; 0xe0
 800e51c:	d104      	bne.n	800e528 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f7f6 fd3e 	bl	8004fa0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	e07e      	b.n	800e626 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d104      	bne.n	800e538 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7f6 fd36 	bl	8004fa0 <pbuf_free>
    return ERR_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	e076      	b.n	800e626 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	88db      	ldrh	r3, [r3, #6]
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	461a      	mov	r2, r3
 800e540:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e544:	4013      	ands	r3, r2
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00b      	beq.n	800e562 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 fc92 	bl	800ee74 <ip4_reass>
 800e550:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d101      	bne.n	800e55c <ip4_input+0x1a8>
      return ERR_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	e064      	b.n	800e626 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e562:	4a33      	ldr	r2, [pc, #204]	; (800e630 <ip4_input+0x27c>)
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e568:	4a31      	ldr	r2, [pc, #196]	; (800e630 <ip4_input+0x27c>)
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e56e:	4a30      	ldr	r2, [pc, #192]	; (800e630 <ip4_input+0x27c>)
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	f003 030f 	and.w	r3, r3, #15
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	009b      	lsls	r3, r3, #2
 800e580:	b2db      	uxtb	r3, r3
 800e582:	b29a      	uxth	r2, r3
 800e584:	4b2a      	ldr	r3, [pc, #168]	; (800e630 <ip4_input+0x27c>)
 800e586:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e588:	8a7b      	ldrh	r3, [r7, #18]
 800e58a:	4619      	mov	r1, r3
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7f6 fc81 	bl	8004e94 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	7a5b      	ldrb	r3, [r3, #9]
 800e596:	2b11      	cmp	r3, #17
 800e598:	d006      	beq.n	800e5a8 <ip4_input+0x1f4>
 800e59a:	2b11      	cmp	r3, #17
 800e59c:	dc13      	bgt.n	800e5c6 <ip4_input+0x212>
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d00c      	beq.n	800e5bc <ip4_input+0x208>
 800e5a2:	2b06      	cmp	r3, #6
 800e5a4:	d005      	beq.n	800e5b2 <ip4_input+0x1fe>
 800e5a6:	e00e      	b.n	800e5c6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7fc faea 	bl	800ab84 <udp_input>
        break;
 800e5b0:	e026      	b.n	800e600 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7f8 fb2b 	bl	8006c10 <tcp_input>
        break;
 800e5ba:	e021      	b.n	800e600 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e5bc:	6839      	ldr	r1, [r7, #0]
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7ff fcd0 	bl	800df64 <icmp_input>
        break;
 800e5c4:	e01c      	b.n	800e600 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e5c6:	4b1a      	ldr	r3, [pc, #104]	; (800e630 <ip4_input+0x27c>)
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	69b9      	ldr	r1, [r7, #24]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f000 f90b 	bl	800e7e8 <ip4_addr_isbroadcast_u32>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10f      	bne.n	800e5f8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e5d8:	4b15      	ldr	r3, [pc, #84]	; (800e630 <ip4_input+0x27c>)
 800e5da:	695b      	ldr	r3, [r3, #20]
 800e5dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e5e0:	2be0      	cmp	r3, #224	; 0xe0
 800e5e2:	d009      	beq.n	800e5f8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e5e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7f6 fcc5 	bl	8004f7a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e5f0:	2102      	movs	r1, #2
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7ff fdba 	bl	800e16c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7f6 fcd1 	bl	8004fa0 <pbuf_free>
        break;
 800e5fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <ip4_input+0x27c>)
 800e602:	2200      	movs	r2, #0
 800e604:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e606:	4b0a      	ldr	r3, [pc, #40]	; (800e630 <ip4_input+0x27c>)
 800e608:	2200      	movs	r2, #0
 800e60a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e60c:	4b08      	ldr	r3, [pc, #32]	; (800e630 <ip4_input+0x27c>)
 800e60e:	2200      	movs	r2, #0
 800e610:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e612:	4b07      	ldr	r3, [pc, #28]	; (800e630 <ip4_input+0x27c>)
 800e614:	2200      	movs	r2, #0
 800e616:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e618:	4b05      	ldr	r3, [pc, #20]	; (800e630 <ip4_input+0x27c>)
 800e61a:	2200      	movs	r2, #0
 800e61c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e61e:	4b04      	ldr	r3, [pc, #16]	; (800e630 <ip4_input+0x27c>)
 800e620:	2200      	movs	r2, #0
 800e622:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3720      	adds	r7, #32
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20004cfc 	.word	0x20004cfc
 800e634:	2000a440 	.word	0x2000a440

0800e638 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08a      	sub	sp, #40	; 0x28
 800e63c:	af04      	add	r7, sp, #16
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
 800e644:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d009      	beq.n	800e664 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d003      	beq.n	800e65e <ip4_output_if+0x26>
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e660:	3304      	adds	r3, #4
 800e662:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e664:	78fa      	ldrb	r2, [r7, #3]
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	9302      	str	r3, [sp, #8]
 800e66a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	4613      	mov	r3, r2
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	6979      	ldr	r1, [r7, #20]
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 f805 	bl	800e68c <ip4_output_if_src>
 800e682:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	7b9b      	ldrb	r3, [r3, #14]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d006      	beq.n	800e6b0 <ip4_output_if_src+0x24>
 800e6a2:	4b4b      	ldr	r3, [pc, #300]	; (800e7d0 <ip4_output_if_src+0x144>)
 800e6a4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e6a8:	494a      	ldr	r1, [pc, #296]	; (800e7d4 <ip4_output_if_src+0x148>)
 800e6aa:	484b      	ldr	r0, [pc, #300]	; (800e7d8 <ip4_output_if_src+0x14c>)
 800e6ac:	f001 f8f2 	bl	800f894 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d060      	beq.n	800e778 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e6b6:	2314      	movs	r3, #20
 800e6b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e6ba:	2114      	movs	r1, #20
 800e6bc:	68f8      	ldr	r0, [r7, #12]
 800e6be:	f7f6 fbd9 	bl	8004e74 <pbuf_add_header>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d002      	beq.n	800e6ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e6c8:	f06f 0301 	mvn.w	r3, #1
 800e6cc:	e07c      	b.n	800e7c8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	895b      	ldrh	r3, [r3, #10]
 800e6d8:	2b13      	cmp	r3, #19
 800e6da:	d806      	bhi.n	800e6ea <ip4_output_if_src+0x5e>
 800e6dc:	4b3c      	ldr	r3, [pc, #240]	; (800e7d0 <ip4_output_if_src+0x144>)
 800e6de:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e6e2:	493e      	ldr	r1, [pc, #248]	; (800e7dc <ip4_output_if_src+0x150>)
 800e6e4:	483c      	ldr	r0, [pc, #240]	; (800e7d8 <ip4_output_if_src+0x14c>)
 800e6e6:	f001 f8d5 	bl	800f894 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	78fa      	ldrb	r2, [r7, #3]
 800e6ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e6f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e700:	8b7b      	ldrh	r3, [r7, #26]
 800e702:	089b      	lsrs	r3, r3, #2
 800e704:	b29b      	uxth	r3, r3
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e718:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	891b      	ldrh	r3, [r3, #8]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f5 f8d4 	bl	80038cc <lwip_htons>
 800e724:	4603      	mov	r3, r0
 800e726:	461a      	mov	r2, r3
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	2200      	movs	r2, #0
 800e730:	719a      	strb	r2, [r3, #6]
 800e732:	2200      	movs	r2, #0
 800e734:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e736:	4b2a      	ldr	r3, [pc, #168]	; (800e7e0 <ip4_output_if_src+0x154>)
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7f5 f8c6 	bl	80038cc <lwip_htons>
 800e740:	4603      	mov	r3, r0
 800e742:	461a      	mov	r2, r3
 800e744:	69fb      	ldr	r3, [r7, #28]
 800e746:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e748:	4b25      	ldr	r3, [pc, #148]	; (800e7e0 <ip4_output_if_src+0x154>)
 800e74a:	881b      	ldrh	r3, [r3, #0]
 800e74c:	3301      	adds	r3, #1
 800e74e:	b29a      	uxth	r2, r3
 800e750:	4b23      	ldr	r3, [pc, #140]	; (800e7e0 <ip4_output_if_src+0x154>)
 800e752:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d104      	bne.n	800e764 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e75a:	4b22      	ldr	r3, [pc, #136]	; (800e7e4 <ip4_output_if_src+0x158>)
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	60da      	str	r2, [r3, #12]
 800e762:	e003      	b.n	800e76c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	2200      	movs	r2, #0
 800e770:	729a      	strb	r2, [r3, #10]
 800e772:	2200      	movs	r2, #0
 800e774:	72da      	strb	r2, [r3, #11]
 800e776:	e00f      	b.n	800e798 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	895b      	ldrh	r3, [r3, #10]
 800e77c:	2b13      	cmp	r3, #19
 800e77e:	d802      	bhi.n	800e786 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e780:	f06f 0301 	mvn.w	r3, #1
 800e784:	e020      	b.n	800e7c8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e792:	f107 0314 	add.w	r3, r7, #20
 800e796:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00c      	beq.n	800e7ba <ip4_output_if_src+0x12e>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	891a      	ldrh	r2, [r3, #8]
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d906      	bls.n	800e7ba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f000 fd53 	bl	800f25c <ip4_frag>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	e006      	b.n	800e7c8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	68f9      	ldr	r1, [r7, #12]
 800e7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7c4:	4798      	blx	r3
 800e7c6:	4603      	mov	r3, r0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3720      	adds	r7, #32
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	080130fc 	.word	0x080130fc
 800e7d4:	08013130 	.word	0x08013130
 800e7d8:	0801313c 	.word	0x0801313c
 800e7dc:	08013164 	.word	0x08013164
 800e7e0:	2000a5d2 	.word	0x2000a5d2
 800e7e4:	0801354c 	.word	0x0801354c

0800e7e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7fc:	d002      	beq.n	800e804 <ip4_addr_isbroadcast_u32+0x1c>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d101      	bne.n	800e808 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e804:	2301      	movs	r3, #1
 800e806:	e02a      	b.n	800e85e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e80e:	f003 0302 	and.w	r3, r3, #2
 800e812:	2b00      	cmp	r3, #0
 800e814:	d101      	bne.n	800e81a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e816:	2300      	movs	r3, #0
 800e818:	e021      	b.n	800e85e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	3304      	adds	r3, #4
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	429a      	cmp	r2, r3
 800e824:	d101      	bne.n	800e82a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e826:	2300      	movs	r3, #0
 800e828:	e019      	b.n	800e85e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	3304      	adds	r3, #4
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	405a      	eors	r2, r3
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	3308      	adds	r3, #8
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4013      	ands	r3, r2
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10d      	bne.n	800e85c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	43da      	mvns	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	3308      	adds	r3, #8
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e854:	429a      	cmp	r2, r3
 800e856:	d101      	bne.n	800e85c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e858:	2301      	movs	r3, #1
 800e85a:	e000      	b.n	800e85e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e85c:	2300      	movs	r3, #0
  }
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
	...

0800e86c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e872:	2300      	movs	r3, #0
 800e874:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e876:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <ip_reass_tmr+0x54>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e87c:	e018      	b.n	800e8b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	7fdb      	ldrb	r3, [r3, #31]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00b      	beq.n	800e89e <ip_reass_tmr+0x32>
      r->timer--;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	7fdb      	ldrb	r3, [r3, #31]
 800e88a:	3b01      	subs	r3, #1
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	e008      	b.n	800e8b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e8a8:	68b9      	ldr	r1, [r7, #8]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f80a 	bl	800e8c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e3      	bne.n	800e87e <ip_reass_tmr+0x12>
    }
  }
}
 800e8b6:	bf00      	nop
 800e8b8:	bf00      	nop
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	2000a5d4 	.word	0x2000a5d4

0800e8c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b088      	sub	sp, #32
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e8d2:	683a      	ldr	r2, [r7, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d105      	bne.n	800e8e6 <ip_reass_free_complete_datagram+0x22>
 800e8da:	4b45      	ldr	r3, [pc, #276]	; (800e9f0 <ip_reass_free_complete_datagram+0x12c>)
 800e8dc:	22ab      	movs	r2, #171	; 0xab
 800e8de:	4945      	ldr	r1, [pc, #276]	; (800e9f4 <ip_reass_free_complete_datagram+0x130>)
 800e8e0:	4845      	ldr	r0, [pc, #276]	; (800e9f8 <ip_reass_free_complete_datagram+0x134>)
 800e8e2:	f000 ffd7 	bl	800f894 <iprintf>
  if (prev != NULL) {
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00a      	beq.n	800e902 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d005      	beq.n	800e902 <ip_reass_free_complete_datagram+0x3e>
 800e8f6:	4b3e      	ldr	r3, [pc, #248]	; (800e9f0 <ip_reass_free_complete_datagram+0x12c>)
 800e8f8:	22ad      	movs	r2, #173	; 0xad
 800e8fa:	4940      	ldr	r1, [pc, #256]	; (800e9fc <ip_reass_free_complete_datagram+0x138>)
 800e8fc:	483e      	ldr	r0, [pc, #248]	; (800e9f8 <ip_reass_free_complete_datagram+0x134>)
 800e8fe:	f000 ffc9 	bl	800f894 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	889b      	ldrh	r3, [r3, #4]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	2b00      	cmp	r3, #0
 800e912:	d12a      	bne.n	800e96a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	6858      	ldr	r0, [r3, #4]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3308      	adds	r3, #8
 800e92a:	2214      	movs	r2, #20
 800e92c:	4619      	mov	r1, r3
 800e92e:	f001 f88c 	bl	800fa4a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e932:	2101      	movs	r1, #1
 800e934:	69b8      	ldr	r0, [r7, #24]
 800e936:	f7ff fc29 	bl	800e18c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e93a:	69b8      	ldr	r0, [r7, #24]
 800e93c:	f7f6 fbb8 	bl	80050b0 <pbuf_clen>
 800e940:	4603      	mov	r3, r0
 800e942:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e944:	8bfa      	ldrh	r2, [r7, #30]
 800e946:	8a7b      	ldrh	r3, [r7, #18]
 800e948:	4413      	add	r3, r2
 800e94a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e94e:	db05      	blt.n	800e95c <ip_reass_free_complete_datagram+0x98>
 800e950:	4b27      	ldr	r3, [pc, #156]	; (800e9f0 <ip_reass_free_complete_datagram+0x12c>)
 800e952:	22bc      	movs	r2, #188	; 0xbc
 800e954:	492a      	ldr	r1, [pc, #168]	; (800ea00 <ip_reass_free_complete_datagram+0x13c>)
 800e956:	4828      	ldr	r0, [pc, #160]	; (800e9f8 <ip_reass_free_complete_datagram+0x134>)
 800e958:	f000 ff9c 	bl	800f894 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e95c:	8bfa      	ldrh	r2, [r7, #30]
 800e95e:	8a7b      	ldrh	r3, [r7, #18]
 800e960:	4413      	add	r3, r2
 800e962:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e964:	69b8      	ldr	r0, [r7, #24]
 800e966:	f7f6 fb1b 	bl	8004fa0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e970:	e01f      	b.n	800e9b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f7f6 fb94 	bl	80050b0 <pbuf_clen>
 800e988:	4603      	mov	r3, r0
 800e98a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e98c:	8bfa      	ldrh	r2, [r7, #30]
 800e98e:	8a7b      	ldrh	r3, [r7, #18]
 800e990:	4413      	add	r3, r2
 800e992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e996:	db05      	blt.n	800e9a4 <ip_reass_free_complete_datagram+0xe0>
 800e998:	4b15      	ldr	r3, [pc, #84]	; (800e9f0 <ip_reass_free_complete_datagram+0x12c>)
 800e99a:	22cc      	movs	r2, #204	; 0xcc
 800e99c:	4918      	ldr	r1, [pc, #96]	; (800ea00 <ip_reass_free_complete_datagram+0x13c>)
 800e99e:	4816      	ldr	r0, [pc, #88]	; (800e9f8 <ip_reass_free_complete_datagram+0x134>)
 800e9a0:	f000 ff78 	bl	800f894 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e9a4:	8bfa      	ldrh	r2, [r7, #30]
 800e9a6:	8a7b      	ldrh	r3, [r7, #18]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7f6 faf7 	bl	8004fa0 <pbuf_free>
  while (p != NULL) {
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1dc      	bne.n	800e972 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f8c2 	bl	800eb44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e9c0:	4b10      	ldr	r3, [pc, #64]	; (800ea04 <ip_reass_free_complete_datagram+0x140>)
 800e9c2:	881b      	ldrh	r3, [r3, #0]
 800e9c4:	8bfa      	ldrh	r2, [r7, #30]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d905      	bls.n	800e9d6 <ip_reass_free_complete_datagram+0x112>
 800e9ca:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <ip_reass_free_complete_datagram+0x12c>)
 800e9cc:	22d2      	movs	r2, #210	; 0xd2
 800e9ce:	490e      	ldr	r1, [pc, #56]	; (800ea08 <ip_reass_free_complete_datagram+0x144>)
 800e9d0:	4809      	ldr	r0, [pc, #36]	; (800e9f8 <ip_reass_free_complete_datagram+0x134>)
 800e9d2:	f000 ff5f 	bl	800f894 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ea04 <ip_reass_free_complete_datagram+0x140>)
 800e9d8:	881a      	ldrh	r2, [r3, #0]
 800e9da:	8bfb      	ldrh	r3, [r7, #30]
 800e9dc:	1ad3      	subs	r3, r2, r3
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	4b08      	ldr	r3, [pc, #32]	; (800ea04 <ip_reass_free_complete_datagram+0x140>)
 800e9e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e9e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	08013194 	.word	0x08013194
 800e9f4:	080131d0 	.word	0x080131d0
 800e9f8:	080131dc 	.word	0x080131dc
 800e9fc:	08013204 	.word	0x08013204
 800ea00:	08013218 	.word	0x08013218
 800ea04:	2000a5d8 	.word	0x2000a5d8
 800ea08:	08013238 	.word	0x08013238

0800ea0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08a      	sub	sp, #40	; 0x28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ea16:	2300      	movs	r3, #0
 800ea18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ea2a:	4b28      	ldr	r3, [pc, #160]	; (800eacc <ip_reass_remove_oldest_datagram+0xc0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ea30:	e030      	b.n	800ea94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea34:	695a      	ldr	r2, [r3, #20]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d10c      	bne.n	800ea58 <ip_reass_remove_oldest_datagram+0x4c>
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea40:	699a      	ldr	r2, [r3, #24]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d106      	bne.n	800ea58 <ip_reass_remove_oldest_datagram+0x4c>
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	899a      	ldrh	r2, [r3, #12]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	889b      	ldrh	r3, [r3, #4]
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d014      	beq.n	800ea82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d104      	bne.n	800ea6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	61bb      	str	r3, [r7, #24]
 800ea6c:	e009      	b.n	800ea82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	7fda      	ldrb	r2, [r3, #31]
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	7fdb      	ldrb	r3, [r3, #31]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d803      	bhi.n	800ea82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ea82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1cb      	bne.n	800ea32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ea9a:	6a3b      	ldr	r3, [r7, #32]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d008      	beq.n	800eab2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800eaa0:	69b9      	ldr	r1, [r7, #24]
 800eaa2:	6a38      	ldr	r0, [r7, #32]
 800eaa4:	f7ff ff0e 	bl	800e8c4 <ip_reass_free_complete_datagram>
 800eaa8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	4413      	add	r3, r2
 800eab0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	da02      	bge.n	800eac0 <ip_reass_remove_oldest_datagram+0xb4>
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	dcac      	bgt.n	800ea1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800eac0:	697b      	ldr	r3, [r7, #20]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3728      	adds	r7, #40	; 0x28
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	2000a5d4 	.word	0x2000a5d4

0800ead0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eada:	2004      	movs	r0, #4
 800eadc:	f7f5 fb6e 	bl	80041bc <memp_malloc>
 800eae0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d110      	bne.n	800eb0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7ff ff8e 	bl	800ea0c <ip_reass_remove_oldest_datagram>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	dc03      	bgt.n	800eb00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800eaf8:	2004      	movs	r0, #4
 800eafa:	f7f5 fb5f 	bl	80041bc <memp_malloc>
 800eafe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d101      	bne.n	800eb0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	e016      	b.n	800eb38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800eb0a:	2220      	movs	r2, #32
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f000 ff25 	bl	800f95e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	220f      	movs	r2, #15
 800eb18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800eb1a:	4b09      	ldr	r3, [pc, #36]	; (800eb40 <ip_reass_enqueue_new_datagram+0x70>)
 800eb1c:	681a      	ldr	r2, [r3, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800eb22:	4a07      	ldr	r2, [pc, #28]	; (800eb40 <ip_reass_enqueue_new_datagram+0x70>)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3308      	adds	r3, #8
 800eb2c:	2214      	movs	r2, #20
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	4618      	mov	r0, r3
 800eb32:	f000 ff8a 	bl	800fa4a <memcpy>
  return ipr;
 800eb36:	68fb      	ldr	r3, [r7, #12]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3710      	adds	r7, #16
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	2000a5d4 	.word	0x2000a5d4

0800eb44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800eb4e:	4b10      	ldr	r3, [pc, #64]	; (800eb90 <ip_reass_dequeue_datagram+0x4c>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d104      	bne.n	800eb62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a0c      	ldr	r2, [pc, #48]	; (800eb90 <ip_reass_dequeue_datagram+0x4c>)
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	e00d      	b.n	800eb7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d106      	bne.n	800eb76 <ip_reass_dequeue_datagram+0x32>
 800eb68:	4b0a      	ldr	r3, [pc, #40]	; (800eb94 <ip_reass_dequeue_datagram+0x50>)
 800eb6a:	f240 1245 	movw	r2, #325	; 0x145
 800eb6e:	490a      	ldr	r1, [pc, #40]	; (800eb98 <ip_reass_dequeue_datagram+0x54>)
 800eb70:	480a      	ldr	r0, [pc, #40]	; (800eb9c <ip_reass_dequeue_datagram+0x58>)
 800eb72:	f000 fe8f 	bl	800f894 <iprintf>
    prev->next = ipr->next;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800eb7e:	6879      	ldr	r1, [r7, #4]
 800eb80:	2004      	movs	r0, #4
 800eb82:	f7f5 fb8b 	bl	800429c <memp_free>
}
 800eb86:	bf00      	nop
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000a5d4 	.word	0x2000a5d4
 800eb94:	08013194 	.word	0x08013194
 800eb98:	0801325c 	.word	0x0801325c
 800eb9c:	080131dc 	.word	0x080131dc

0800eba0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08c      	sub	sp, #48	; 0x30
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ebac:	2300      	movs	r3, #0
 800ebae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	885b      	ldrh	r3, [r3, #2]
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7f4 fe83 	bl	80038cc <lwip_htons>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	f003 030f 	and.w	r3, r3, #15
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ebd8:	7e7b      	ldrb	r3, [r7, #25]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	8b7a      	ldrh	r2, [r7, #26]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d202      	bcs.n	800ebe8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ebe2:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe6:	e135      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ebe8:	7e7b      	ldrb	r3, [r7, #25]
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	8b7a      	ldrh	r2, [r7, #26]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	88db      	ldrh	r3, [r3, #6]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f4 fe67 	bl	80038cc <lwip_htons>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	00db      	lsls	r3, r3, #3
 800ec08:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	2200      	movs	r2, #0
 800ec14:	701a      	strb	r2, [r3, #0]
 800ec16:	2200      	movs	r2, #0
 800ec18:	705a      	strb	r2, [r3, #1]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	709a      	strb	r2, [r3, #2]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ec22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec24:	8afa      	ldrh	r2, [r7, #22]
 800ec26:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ec28:	8afa      	ldrh	r2, [r7, #22]
 800ec2a:	8b7b      	ldrh	r3, [r7, #26]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	88db      	ldrh	r3, [r3, #6]
 800ec38:	b29b      	uxth	r3, r3
 800ec3a:	8afa      	ldrh	r2, [r7, #22]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d902      	bls.n	800ec46 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec40:	f04f 33ff 	mov.w	r3, #4294967295
 800ec44:	e106      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec4c:	e068      	b.n	800ed20 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ec54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec56:	889b      	ldrh	r3, [r3, #4]
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	889b      	ldrh	r3, [r3, #4]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d235      	bcs.n	800ecd0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ec64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec68:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d020      	beq.n	800ecb2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	889b      	ldrh	r3, [r3, #4]
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec78:	88db      	ldrh	r3, [r3, #6]
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d307      	bcc.n	800ec90 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	88db      	ldrh	r3, [r3, #6]
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	889b      	ldrh	r3, [r3, #4]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d902      	bls.n	800ec96 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ec90:	f04f 33ff 	mov.w	r3, #4294967295
 800ec94:	e0de      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9e:	88db      	ldrh	r3, [r3, #6]
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca4:	889b      	ldrh	r3, [r3, #4]
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d03d      	beq.n	800ed28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ecb0:	e03a      	b.n	800ed28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	88db      	ldrh	r3, [r3, #6]
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	889b      	ldrh	r3, [r3, #4]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d902      	bls.n	800ecc8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ecc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc6:	e0c5      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	605a      	str	r2, [r3, #4]
      break;
 800ecce:	e02b      	b.n	800ed28 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ecd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd2:	889b      	ldrh	r3, [r3, #4]
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	889b      	ldrh	r3, [r3, #4]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d102      	bne.n	800ece6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ece0:	f04f 33ff 	mov.w	r3, #4294967295
 800ece4:	e0b6      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	889b      	ldrh	r3, [r3, #4]
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	88db      	ldrh	r3, [r3, #6]
 800ecf0:	b29b      	uxth	r3, r3
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d202      	bcs.n	800ecfc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ecf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfa:	e0ab      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ecfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d009      	beq.n	800ed16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	88db      	ldrh	r3, [r3, #6]
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	889b      	ldrh	r3, [r3, #4]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d001      	beq.n	800ed16 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ed20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d193      	bne.n	800ec4e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ed26:	e000      	b.n	800ed2a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ed28:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d12d      	bne.n	800ed8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d01c      	beq.n	800ed70 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ed36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed38:	88db      	ldrh	r3, [r3, #6]
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	889b      	ldrh	r3, [r3, #4]
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d906      	bls.n	800ed54 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ed46:	4b45      	ldr	r3, [pc, #276]	; (800ee5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ed48:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ed4c:	4944      	ldr	r1, [pc, #272]	; (800ee60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ed4e:	4845      	ldr	r0, [pc, #276]	; (800ee64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed50:	f000 fda0 	bl	800f894 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ed54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed56:	68ba      	ldr	r2, [r7, #8]
 800ed58:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5c:	88db      	ldrh	r3, [r3, #6]
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed62:	889b      	ldrh	r3, [r3, #4]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d010      	beq.n	800ed8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	623b      	str	r3, [r7, #32]
 800ed6e:	e00d      	b.n	800ed8c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d006      	beq.n	800ed86 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ed78:	4b38      	ldr	r3, [pc, #224]	; (800ee5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ed7a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ed7e:	493a      	ldr	r1, [pc, #232]	; (800ee68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ed80:	4838      	ldr	r0, [pc, #224]	; (800ee64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ed82:	f000 fd87 	bl	800f894 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	68ba      	ldr	r2, [r7, #8]
 800ed8a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d105      	bne.n	800ed9e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	7f9b      	ldrb	r3, [r3, #30]
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d059      	beq.n	800ee52 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d04f      	beq.n	800ee44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d006      	beq.n	800edba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	889b      	ldrh	r3, [r3, #4]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d002      	beq.n	800edc0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800edba:	2300      	movs	r3, #0
 800edbc:	623b      	str	r3, [r7, #32]
 800edbe:	e041      	b.n	800ee44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800edc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800edc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800edca:	e012      	b.n	800edf2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800edd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd4:	88db      	ldrh	r3, [r3, #6]
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	889b      	ldrh	r3, [r3, #4]
 800eddc:	b29b      	uxth	r3, r3
 800edde:	429a      	cmp	r2, r3
 800ede0:	d002      	beq.n	800ede8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	623b      	str	r3, [r7, #32]
            break;
 800ede6:	e007      	b.n	800edf8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ede8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1e9      	bne.n	800edcc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800edf8:	6a3b      	ldr	r3, [r7, #32]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d022      	beq.n	800ee44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ee06:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ee08:	f240 12df 	movw	r2, #479	; 0x1df
 800ee0c:	4917      	ldr	r1, [pc, #92]	; (800ee6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ee0e:	4815      	ldr	r0, [pc, #84]	; (800ee64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ee10:	f000 fd40 	bl	800f894 <iprintf>
          LWIP_ASSERT("sanity check",
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d106      	bne.n	800ee2e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ee20:	4b0e      	ldr	r3, [pc, #56]	; (800ee5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ee22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ee26:	4911      	ldr	r1, [pc, #68]	; (800ee6c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ee28:	480e      	ldr	r0, [pc, #56]	; (800ee64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ee2a:	f000 fd33 	bl	800f894 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d006      	beq.n	800ee44 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ee36:	4b09      	ldr	r3, [pc, #36]	; (800ee5c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ee38:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800ee3c:	490c      	ldr	r1, [pc, #48]	; (800ee70 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ee3e:	4809      	ldr	r0, [pc, #36]	; (800ee64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ee40:	f000 fd28 	bl	800f894 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ee44:	6a3b      	ldr	r3, [r7, #32]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	bf14      	ite	ne
 800ee4a:	2301      	movne	r3, #1
 800ee4c:	2300      	moveq	r3, #0
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	e000      	b.n	800ee54 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3730      	adds	r7, #48	; 0x30
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	08013194 	.word	0x08013194
 800ee60:	08013278 	.word	0x08013278
 800ee64:	080131dc 	.word	0x080131dc
 800ee68:	08013298 	.word	0x08013298
 800ee6c:	080132d0 	.word	0x080132d0
 800ee70:	080132e0 	.word	0x080132e0

0800ee74 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b08e      	sub	sp, #56	; 0x38
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	f003 030f 	and.w	r3, r3, #15
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b14      	cmp	r3, #20
 800ee92:	f040 8171 	bne.w	800f178 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	88db      	ldrh	r3, [r3, #6]
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f7f4 fd15 	bl	80038cc <lwip_htons>
 800eea2:	4603      	mov	r3, r0
 800eea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	885b      	ldrh	r3, [r3, #2]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f7f4 fd09 	bl	80038cc <lwip_htons>
 800eeba:	4603      	mov	r3, r0
 800eebc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	f003 030f 	and.w	r3, r3, #15
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800eece:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eed6:	429a      	cmp	r2, r3
 800eed8:	f0c0 8150 	bcc.w	800f17c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800eedc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eee4:	1ad3      	subs	r3, r2, r3
 800eee6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f7f6 f8e1 	bl	80050b0 <pbuf_clen>
 800eeee:	4603      	mov	r3, r0
 800eef0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eef2:	4b8c      	ldr	r3, [pc, #560]	; (800f124 <ip4_reass+0x2b0>)
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	461a      	mov	r2, r3
 800eef8:	8c3b      	ldrh	r3, [r7, #32]
 800eefa:	4413      	add	r3, r2
 800eefc:	2b0a      	cmp	r3, #10
 800eefe:	dd10      	ble.n	800ef22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ef00:	8c3b      	ldrh	r3, [r7, #32]
 800ef02:	4619      	mov	r1, r3
 800ef04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef06:	f7ff fd81 	bl	800ea0c <ip_reass_remove_oldest_datagram>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f000 8137 	beq.w	800f180 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ef12:	4b84      	ldr	r3, [pc, #528]	; (800f124 <ip4_reass+0x2b0>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	8c3b      	ldrh	r3, [r7, #32]
 800ef1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ef1c:	2b0a      	cmp	r3, #10
 800ef1e:	f300 812f 	bgt.w	800f180 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ef22:	4b81      	ldr	r3, [pc, #516]	; (800f128 <ip4_reass+0x2b4>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	633b      	str	r3, [r7, #48]	; 0x30
 800ef28:	e015      	b.n	800ef56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	695a      	ldr	r2, [r3, #20]
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d10c      	bne.n	800ef50 <ip4_reass+0xdc>
 800ef36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef38:	699a      	ldr	r2, [r3, #24]
 800ef3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d106      	bne.n	800ef50 <ip4_reass+0xdc>
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	899a      	ldrh	r2, [r3, #12]
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	889b      	ldrh	r3, [r3, #4]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d006      	beq.n	800ef5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ef50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	633b      	str	r3, [r7, #48]	; 0x30
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1e6      	bne.n	800ef2a <ip4_reass+0xb6>
 800ef5c:	e000      	b.n	800ef60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ef5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ef60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d109      	bne.n	800ef7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ef66:	8c3b      	ldrh	r3, [r7, #32]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef6c:	f7ff fdb0 	bl	800ead0 <ip_reass_enqueue_new_datagram>
 800ef70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d11c      	bne.n	800efb2 <ip4_reass+0x13e>
      goto nullreturn;
 800ef78:	e105      	b.n	800f186 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ef7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7c:	88db      	ldrh	r3, [r3, #6]
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7f4 fca3 	bl	80038cc <lwip_htons>
 800ef86:	4603      	mov	r3, r0
 800ef88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d110      	bne.n	800efb2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	89db      	ldrh	r3, [r3, #14]
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7f4 fc99 	bl	80038cc <lwip_htons>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d006      	beq.n	800efb2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800efa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa6:	3308      	adds	r3, #8
 800efa8:	2214      	movs	r2, #20
 800efaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efac:	4618      	mov	r0, r3
 800efae:	f000 fd4c 	bl	800fa4a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800efb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb4:	88db      	ldrh	r3, [r3, #6]
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	f003 0320 	and.w	r3, r3, #32
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	bf0c      	ite	eq
 800efc0:	2301      	moveq	r3, #1
 800efc2:	2300      	movne	r3, #0
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00e      	beq.n	800efec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800efce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800efd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efd2:	4413      	add	r3, r2
 800efd4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800efd6:	8b7a      	ldrh	r2, [r7, #26]
 800efd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800efda:	429a      	cmp	r2, r3
 800efdc:	f0c0 80a0 	bcc.w	800f120 <ip4_reass+0x2ac>
 800efe0:	8b7b      	ldrh	r3, [r7, #26]
 800efe2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800efe6:	4293      	cmp	r3, r2
 800efe8:	f200 809a 	bhi.w	800f120 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800efec:	69fa      	ldr	r2, [r7, #28]
 800efee:	6879      	ldr	r1, [r7, #4]
 800eff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eff2:	f7ff fdd5 	bl	800eba0 <ip_reass_chain_frag_into_datagram_and_validate>
 800eff6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800effe:	f000 809b 	beq.w	800f138 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f002:	4b48      	ldr	r3, [pc, #288]	; (800f124 <ip4_reass+0x2b0>)
 800f004:	881a      	ldrh	r2, [r3, #0]
 800f006:	8c3b      	ldrh	r3, [r7, #32]
 800f008:	4413      	add	r3, r2
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	4b45      	ldr	r3, [pc, #276]	; (800f124 <ip4_reass+0x2b0>)
 800f00e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00d      	beq.n	800f032 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f016:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f01a:	4413      	add	r3, r2
 800f01c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	8a7a      	ldrh	r2, [r7, #18]
 800f022:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	7f9b      	ldrb	r3, [r3, #30]
 800f028:	f043 0301 	orr.w	r3, r3, #1
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d171      	bne.n	800f11c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	8b9b      	ldrh	r3, [r3, #28]
 800f03c:	3314      	adds	r3, #20
 800f03e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	685b      	ldr	r3, [r3, #4]
 800f050:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	3308      	adds	r3, #8
 800f056:	2214      	movs	r2, #20
 800f058:	4619      	mov	r1, r3
 800f05a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f05c:	f000 fcf5 	bl	800fa4a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f060:	8a3b      	ldrh	r3, [r7, #16]
 800f062:	4618      	mov	r0, r3
 800f064:	f7f4 fc32 	bl	80038cc <lwip_htons>
 800f068:	4603      	mov	r3, r0
 800f06a:	461a      	mov	r2, r3
 800f06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f072:	2200      	movs	r2, #0
 800f074:	719a      	strb	r2, [r3, #6]
 800f076:	2200      	movs	r2, #0
 800f078:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	2200      	movs	r2, #0
 800f07e:	729a      	strb	r2, [r3, #10]
 800f080:	2200      	movs	r2, #0
 800f082:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f08a:	e00d      	b.n	800f0a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f092:	2114      	movs	r1, #20
 800f094:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f096:	f7f5 fefd 	bl	8004e94 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f09a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7f6 f841 	bl	8005124 <pbuf_cat>
      r = iprh->next_pbuf;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1ee      	bne.n	800f08c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f0ae:	4b1e      	ldr	r3, [pc, #120]	; (800f128 <ip4_reass+0x2b4>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d102      	bne.n	800f0be <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0bc:	e010      	b.n	800f0e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f0be:	4b1a      	ldr	r3, [pc, #104]	; (800f128 <ip4_reass+0x2b4>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0c4:	e007      	b.n	800f0d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d006      	beq.n	800f0de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1f4      	bne.n	800f0c6 <ip4_reass+0x252>
 800f0dc:	e000      	b.n	800f0e0 <ip4_reass+0x26c>
          break;
 800f0de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f0e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0e4:	f7ff fd2e 	bl	800eb44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7f5 ffe1 	bl	80050b0 <pbuf_clen>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f0f2:	4b0c      	ldr	r3, [pc, #48]	; (800f124 <ip4_reass+0x2b0>)
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	8c3a      	ldrh	r2, [r7, #32]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d906      	bls.n	800f10a <ip4_reass+0x296>
 800f0fc:	4b0b      	ldr	r3, [pc, #44]	; (800f12c <ip4_reass+0x2b8>)
 800f0fe:	f240 229b 	movw	r2, #667	; 0x29b
 800f102:	490b      	ldr	r1, [pc, #44]	; (800f130 <ip4_reass+0x2bc>)
 800f104:	480b      	ldr	r0, [pc, #44]	; (800f134 <ip4_reass+0x2c0>)
 800f106:	f000 fbc5 	bl	800f894 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f10a:	4b06      	ldr	r3, [pc, #24]	; (800f124 <ip4_reass+0x2b0>)
 800f10c:	881a      	ldrh	r2, [r3, #0]
 800f10e:	8c3b      	ldrh	r3, [r7, #32]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	b29a      	uxth	r2, r3
 800f114:	4b03      	ldr	r3, [pc, #12]	; (800f124 <ip4_reass+0x2b0>)
 800f116:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	e038      	b.n	800f18e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f11c:	2300      	movs	r3, #0
 800f11e:	e036      	b.n	800f18e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f120:	bf00      	nop
 800f122:	e00a      	b.n	800f13a <ip4_reass+0x2c6>
 800f124:	2000a5d8 	.word	0x2000a5d8
 800f128:	2000a5d4 	.word	0x2000a5d4
 800f12c:	08013194 	.word	0x08013194
 800f130:	08013304 	.word	0x08013304
 800f134:	080131dc 	.word	0x080131dc
    goto nullreturn_ipr;
 800f138:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <ip4_reass+0x2da>
 800f140:	4b15      	ldr	r3, [pc, #84]	; (800f198 <ip4_reass+0x324>)
 800f142:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f146:	4915      	ldr	r1, [pc, #84]	; (800f19c <ip4_reass+0x328>)
 800f148:	4815      	ldr	r0, [pc, #84]	; (800f1a0 <ip4_reass+0x32c>)
 800f14a:	f000 fba3 	bl	800f894 <iprintf>
  if (ipr->p == NULL) {
 800f14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d116      	bne.n	800f184 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f156:	4b13      	ldr	r3, [pc, #76]	; (800f1a4 <ip4_reass+0x330>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d006      	beq.n	800f16e <ip4_reass+0x2fa>
 800f160:	4b0d      	ldr	r3, [pc, #52]	; (800f198 <ip4_reass+0x324>)
 800f162:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f166:	4910      	ldr	r1, [pc, #64]	; (800f1a8 <ip4_reass+0x334>)
 800f168:	480d      	ldr	r0, [pc, #52]	; (800f1a0 <ip4_reass+0x32c>)
 800f16a:	f000 fb93 	bl	800f894 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f16e:	2100      	movs	r1, #0
 800f170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f172:	f7ff fce7 	bl	800eb44 <ip_reass_dequeue_datagram>
 800f176:	e006      	b.n	800f186 <ip4_reass+0x312>
    goto nullreturn;
 800f178:	bf00      	nop
 800f17a:	e004      	b.n	800f186 <ip4_reass+0x312>
    goto nullreturn;
 800f17c:	bf00      	nop
 800f17e:	e002      	b.n	800f186 <ip4_reass+0x312>
      goto nullreturn;
 800f180:	bf00      	nop
 800f182:	e000      	b.n	800f186 <ip4_reass+0x312>
  }

nullreturn:
 800f184:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f7f5 ff0a 	bl	8004fa0 <pbuf_free>
  return NULL;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3738      	adds	r7, #56	; 0x38
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	08013194 	.word	0x08013194
 800f19c:	08013320 	.word	0x08013320
 800f1a0:	080131dc 	.word	0x080131dc
 800f1a4:	2000a5d4 	.word	0x2000a5d4
 800f1a8:	0801332c 	.word	0x0801332c

0800f1ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f1b0:	2005      	movs	r0, #5
 800f1b2:	f7f5 f803 	bl	80041bc <memp_malloc>
 800f1b6:	4603      	mov	r3, r0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d106      	bne.n	800f1d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f1ca:	4b07      	ldr	r3, [pc, #28]	; (800f1e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f1cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f1d0:	4906      	ldr	r1, [pc, #24]	; (800f1ec <ip_frag_free_pbuf_custom_ref+0x30>)
 800f1d2:	4807      	ldr	r0, [pc, #28]	; (800f1f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f1d4:	f000 fb5e 	bl	800f894 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f1d8:	6879      	ldr	r1, [r7, #4]
 800f1da:	2005      	movs	r0, #5
 800f1dc:	f7f5 f85e 	bl	800429c <memp_free>
}
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	08013194 	.word	0x08013194
 800f1ec:	0801334c 	.word	0x0801334c
 800f1f0:	080131dc 	.word	0x080131dc

0800f1f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d106      	bne.n	800f214 <ipfrag_free_pbuf_custom+0x20>
 800f206:	4b11      	ldr	r3, [pc, #68]	; (800f24c <ipfrag_free_pbuf_custom+0x58>)
 800f208:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f20c:	4910      	ldr	r1, [pc, #64]	; (800f250 <ipfrag_free_pbuf_custom+0x5c>)
 800f20e:	4811      	ldr	r0, [pc, #68]	; (800f254 <ipfrag_free_pbuf_custom+0x60>)
 800f210:	f000 fb40 	bl	800f894 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	429a      	cmp	r2, r3
 800f21a:	d006      	beq.n	800f22a <ipfrag_free_pbuf_custom+0x36>
 800f21c:	4b0b      	ldr	r3, [pc, #44]	; (800f24c <ipfrag_free_pbuf_custom+0x58>)
 800f21e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f222:	490d      	ldr	r1, [pc, #52]	; (800f258 <ipfrag_free_pbuf_custom+0x64>)
 800f224:	480b      	ldr	r0, [pc, #44]	; (800f254 <ipfrag_free_pbuf_custom+0x60>)
 800f226:	f000 fb35 	bl	800f894 <iprintf>
  if (pcr->original != NULL) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	695b      	ldr	r3, [r3, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d004      	beq.n	800f23c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	4618      	mov	r0, r3
 800f238:	f7f5 feb2 	bl	8004fa0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f7ff ffbd 	bl	800f1bc <ip_frag_free_pbuf_custom_ref>
}
 800f242:	bf00      	nop
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	08013194 	.word	0x08013194
 800f250:	08013358 	.word	0x08013358
 800f254:	080131dc 	.word	0x080131dc
 800f258:	08013364 	.word	0x08013364

0800f25c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b094      	sub	sp, #80	; 0x50
 800f260:	af02      	add	r7, sp, #8
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f268:	2300      	movs	r3, #0
 800f26a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f272:	3b14      	subs	r3, #20
 800f274:	2b00      	cmp	r3, #0
 800f276:	da00      	bge.n	800f27a <ip4_frag+0x1e>
 800f278:	3307      	adds	r3, #7
 800f27a:	10db      	asrs	r3, r3, #3
 800f27c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f27e:	2314      	movs	r3, #20
 800f280:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f28a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 030f 	and.w	r3, r3, #15
 800f294:	b2db      	uxtb	r3, r3
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	2b14      	cmp	r3, #20
 800f29c:	d002      	beq.n	800f2a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f29e:	f06f 0305 	mvn.w	r3, #5
 800f2a2:	e110      	b.n	800f4c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	895b      	ldrh	r3, [r3, #10]
 800f2a8:	2b13      	cmp	r3, #19
 800f2aa:	d809      	bhi.n	800f2c0 <ip4_frag+0x64>
 800f2ac:	4b88      	ldr	r3, [pc, #544]	; (800f4d0 <ip4_frag+0x274>)
 800f2ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f2b2:	4988      	ldr	r1, [pc, #544]	; (800f4d4 <ip4_frag+0x278>)
 800f2b4:	4888      	ldr	r0, [pc, #544]	; (800f4d8 <ip4_frag+0x27c>)
 800f2b6:	f000 faed 	bl	800f894 <iprintf>
 800f2ba:	f06f 0305 	mvn.w	r3, #5
 800f2be:	e102      	b.n	800f4c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c2:	88db      	ldrh	r3, [r3, #6]
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7f4 fb00 	bl	80038cc <lwip_htons>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f2d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f2d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f2da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f2dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f2e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	891b      	ldrh	r3, [r3, #8]
 800f2e6:	3b14      	subs	r3, #20
 800f2e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f2ec:	e0e1      	b.n	800f4b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f2ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f2f0:	00db      	lsls	r3, r3, #3
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	bf28      	it	cs
 800f2fc:	4613      	movcs	r3, r2
 800f2fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f300:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f304:	2114      	movs	r1, #20
 800f306:	200e      	movs	r0, #14
 800f308:	f7f5 fb66 	bl	80049d8 <pbuf_alloc>
 800f30c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f310:	2b00      	cmp	r3, #0
 800f312:	f000 80d5 	beq.w	800f4c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f318:	895b      	ldrh	r3, [r3, #10]
 800f31a:	2b13      	cmp	r3, #19
 800f31c:	d806      	bhi.n	800f32c <ip4_frag+0xd0>
 800f31e:	4b6c      	ldr	r3, [pc, #432]	; (800f4d0 <ip4_frag+0x274>)
 800f320:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f324:	496d      	ldr	r1, [pc, #436]	; (800f4dc <ip4_frag+0x280>)
 800f326:	486c      	ldr	r0, [pc, #432]	; (800f4d8 <ip4_frag+0x27c>)
 800f328:	f000 fab4 	bl	800f894 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	2214      	movs	r2, #20
 800f332:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f334:	4618      	mov	r0, r3
 800f336:	f000 fb88 	bl	800fa4a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f342:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f346:	e064      	b.n	800f412 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	895a      	ldrh	r2, [r3, #10]
 800f34c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	895b      	ldrh	r3, [r3, #10]
 800f356:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f358:	429a      	cmp	r2, r3
 800f35a:	d906      	bls.n	800f36a <ip4_frag+0x10e>
 800f35c:	4b5c      	ldr	r3, [pc, #368]	; (800f4d0 <ip4_frag+0x274>)
 800f35e:	f240 322d 	movw	r2, #813	; 0x32d
 800f362:	495f      	ldr	r1, [pc, #380]	; (800f4e0 <ip4_frag+0x284>)
 800f364:	485c      	ldr	r0, [pc, #368]	; (800f4d8 <ip4_frag+0x27c>)
 800f366:	f000 fa95 	bl	800f894 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f36a:	8bfa      	ldrh	r2, [r7, #30]
 800f36c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f370:	4293      	cmp	r3, r2
 800f372:	bf28      	it	cs
 800f374:	4613      	movcs	r3, r2
 800f376:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f37a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d105      	bne.n	800f38e <ip4_frag+0x132>
        poff = 0;
 800f382:	2300      	movs	r3, #0
 800f384:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	60fb      	str	r3, [r7, #12]
        continue;
 800f38c:	e041      	b.n	800f412 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f38e:	f7ff ff0d 	bl	800f1ac <ip_frag_alloc_pbuf_custom_ref>
 800f392:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f394:	69bb      	ldr	r3, [r7, #24]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d103      	bne.n	800f3a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f39a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f39c:	f7f5 fe00 	bl	8004fa0 <pbuf_free>
        goto memerr;
 800f3a0:	e08f      	b.n	800f4c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f3a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f3a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f3b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f3b4:	9201      	str	r2, [sp, #4]
 800f3b6:	9300      	str	r3, [sp, #0]
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2241      	movs	r2, #65	; 0x41
 800f3bc:	2000      	movs	r0, #0
 800f3be:	f7f5 fc35 	bl	8004c2c <pbuf_alloced_custom>
 800f3c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d106      	bne.n	800f3d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f3ca:	69b8      	ldr	r0, [r7, #24]
 800f3cc:	f7ff fef6 	bl	800f1bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f3d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3d2:	f7f5 fde5 	bl	8004fa0 <pbuf_free>
        goto memerr;
 800f3d6:	e074      	b.n	800f4c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f3d8:	68f8      	ldr	r0, [r7, #12]
 800f3da:	f7f5 fe81 	bl	80050e0 <pbuf_ref>
      pcr->original = p;
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	4a3f      	ldr	r2, [pc, #252]	; (800f4e4 <ip4_frag+0x288>)
 800f3e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f3ea:	6979      	ldr	r1, [r7, #20]
 800f3ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ee:	f7f5 fe99 	bl	8005124 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f3f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f3f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f400:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f404:	2b00      	cmp	r3, #0
 800f406:	d004      	beq.n	800f412 <ip4_frag+0x1b6>
        poff = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f412:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f416:	2b00      	cmp	r3, #0
 800f418:	d196      	bne.n	800f348 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f41a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f41c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f420:	4413      	add	r3, r2
 800f422:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f428:	f1a3 0213 	sub.w	r2, r3, #19
 800f42c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f430:	429a      	cmp	r2, r3
 800f432:	bfcc      	ite	gt
 800f434:	2301      	movgt	r3, #1
 800f436:	2300      	movle	r3, #0
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f43c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f444:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f446:	6a3b      	ldr	r3, [r7, #32]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <ip4_frag+0x1f6>
 800f44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d003      	beq.n	800f45a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f452:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f458:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f45a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7f4 fa35 	bl	80038cc <lwip_htons>
 800f462:	4603      	mov	r3, r0
 800f464:	461a      	mov	r2, r3
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f46a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f46c:	3314      	adds	r3, #20
 800f46e:	b29b      	uxth	r3, r3
 800f470:	4618      	mov	r0, r3
 800f472:	f7f4 fa2b 	bl	80038cc <lwip_htons>
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f480:	2200      	movs	r2, #0
 800f482:	729a      	strb	r2, [r3, #10]
 800f484:	2200      	movs	r2, #0
 800f486:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	695b      	ldr	r3, [r3, #20]
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f490:	68b8      	ldr	r0, [r7, #8]
 800f492:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f496:	f7f5 fd83 	bl	8004fa0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f49a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f49e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f4a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f4aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f4ac:	4413      	add	r3, r2
 800f4ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f4b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	f47f af19 	bne.w	800f2ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	e002      	b.n	800f4c6 <ip4_frag+0x26a>
      goto memerr;
 800f4c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f4c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3748      	adds	r7, #72	; 0x48
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	08013194 	.word	0x08013194
 800f4d4:	08013370 	.word	0x08013370
 800f4d8:	080131dc 	.word	0x080131dc
 800f4dc:	0801338c 	.word	0x0801338c
 800f4e0:	080133ac 	.word	0x080133ac
 800f4e4:	0800f1f5 	.word	0x0800f1f5

0800f4e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f4f2:	230e      	movs	r3, #14
 800f4f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	895b      	ldrh	r3, [r3, #10]
 800f4fa:	2b0e      	cmp	r3, #14
 800f4fc:	d96e      	bls.n	800f5dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	7bdb      	ldrb	r3, [r3, #15]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d106      	bne.n	800f514 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f50c:	3301      	adds	r3, #1
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	7b1a      	ldrb	r2, [r3, #12]
 800f51e:	7b5b      	ldrb	r3, [r3, #13]
 800f520:	021b      	lsls	r3, r3, #8
 800f522:	4313      	orrs	r3, r2
 800f524:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	f003 0301 	and.w	r3, r3, #1
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d023      	beq.n	800f57a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b01      	cmp	r3, #1
 800f538:	d10f      	bne.n	800f55a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	785b      	ldrb	r3, [r3, #1]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d11b      	bne.n	800f57a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f546:	2b5e      	cmp	r3, #94	; 0x5e
 800f548:	d117      	bne.n	800f57a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	7b5b      	ldrb	r3, [r3, #13]
 800f54e:	f043 0310 	orr.w	r3, r3, #16
 800f552:	b2da      	uxtb	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	735a      	strb	r2, [r3, #13]
 800f558:	e00f      	b.n	800f57a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2206      	movs	r2, #6
 800f55e:	4928      	ldr	r1, [pc, #160]	; (800f600 <ethernet_input+0x118>)
 800f560:	4618      	mov	r0, r3
 800f562:	f000 f9ec 	bl	800f93e <memcmp>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d106      	bne.n	800f57a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	7b5b      	ldrb	r3, [r3, #13]
 800f570:	f043 0308 	orr.w	r3, r3, #8
 800f574:	b2da      	uxtb	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f57a:	89fb      	ldrh	r3, [r7, #14]
 800f57c:	2b08      	cmp	r3, #8
 800f57e:	d003      	beq.n	800f588 <ethernet_input+0xa0>
 800f580:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f584:	d014      	beq.n	800f5b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f586:	e032      	b.n	800f5ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f58e:	f003 0308 	and.w	r3, r3, #8
 800f592:	2b00      	cmp	r3, #0
 800f594:	d024      	beq.n	800f5e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f596:	8afb      	ldrh	r3, [r7, #22]
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7f5 fc7a 	bl	8004e94 <pbuf_remove_header>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d11e      	bne.n	800f5e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7fe ff03 	bl	800e3b4 <ip4_input>
      break;
 800f5ae:	e013      	b.n	800f5d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f5b6:	f003 0308 	and.w	r3, r3, #8
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d014      	beq.n	800f5e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f5be:	8afb      	ldrh	r3, [r7, #22]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f7f5 fc66 	bl	8004e94 <pbuf_remove_header>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10e      	bne.n	800f5ec <ethernet_input+0x104>
        etharp_input(p, netif);
 800f5ce:	6839      	ldr	r1, [r7, #0]
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f7fe f89f 	bl	800d714 <etharp_input>
      break;
 800f5d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e00c      	b.n	800f5f6 <ethernet_input+0x10e>
    goto free_and_return;
 800f5dc:	bf00      	nop
 800f5de:	e006      	b.n	800f5ee <ethernet_input+0x106>
        goto free_and_return;
 800f5e0:	bf00      	nop
 800f5e2:	e004      	b.n	800f5ee <ethernet_input+0x106>
        goto free_and_return;
 800f5e4:	bf00      	nop
 800f5e6:	e002      	b.n	800f5ee <ethernet_input+0x106>
        goto free_and_return;
 800f5e8:	bf00      	nop
 800f5ea:	e000      	b.n	800f5ee <ethernet_input+0x106>
        goto free_and_return;
 800f5ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7f5 fcd6 	bl	8004fa0 <pbuf_free>
  return ERR_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	08013554 	.word	0x08013554

0800f604 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	607a      	str	r2, [r7, #4]
 800f610:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f612:	8c3b      	ldrh	r3, [r7, #32]
 800f614:	4618      	mov	r0, r3
 800f616:	f7f4 f959 	bl	80038cc <lwip_htons>
 800f61a:	4603      	mov	r3, r0
 800f61c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f61e:	210e      	movs	r1, #14
 800f620:	68b8      	ldr	r0, [r7, #8]
 800f622:	f7f5 fc27 	bl	8004e74 <pbuf_add_header>
 800f626:	4603      	mov	r3, r0
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d125      	bne.n	800f678 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	8afa      	ldrh	r2, [r7, #22]
 800f636:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	2206      	movs	r2, #6
 800f63c:	6839      	ldr	r1, [r7, #0]
 800f63e:	4618      	mov	r0, r3
 800f640:	f000 fa03 	bl	800fa4a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	3306      	adds	r3, #6
 800f648:	2206      	movs	r2, #6
 800f64a:	6879      	ldr	r1, [r7, #4]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f000 f9fc 	bl	800fa4a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f658:	2b06      	cmp	r3, #6
 800f65a:	d006      	beq.n	800f66a <ethernet_output+0x66>
 800f65c:	4b0a      	ldr	r3, [pc, #40]	; (800f688 <ethernet_output+0x84>)
 800f65e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f662:	490a      	ldr	r1, [pc, #40]	; (800f68c <ethernet_output+0x88>)
 800f664:	480a      	ldr	r0, [pc, #40]	; (800f690 <ethernet_output+0x8c>)
 800f666:	f000 f915 	bl	800f894 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	68b9      	ldr	r1, [r7, #8]
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	4798      	blx	r3
 800f674:	4603      	mov	r3, r0
 800f676:	e002      	b.n	800f67e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f678:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f67a:	f06f 0301 	mvn.w	r3, #1
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3718      	adds	r7, #24
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	080133bc 	.word	0x080133bc
 800f68c:	080133f4 	.word	0x080133f4
 800f690:	08013428 	.word	0x08013428

0800f694 <rand>:
 800f694:	4b16      	ldr	r3, [pc, #88]	; (800f6f0 <rand+0x5c>)
 800f696:	b510      	push	{r4, lr}
 800f698:	681c      	ldr	r4, [r3, #0]
 800f69a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f69c:	b9b3      	cbnz	r3, 800f6cc <rand+0x38>
 800f69e:	2018      	movs	r0, #24
 800f6a0:	f000 fa4c 	bl	800fb3c <malloc>
 800f6a4:	4602      	mov	r2, r0
 800f6a6:	6320      	str	r0, [r4, #48]	; 0x30
 800f6a8:	b920      	cbnz	r0, 800f6b4 <rand+0x20>
 800f6aa:	4b12      	ldr	r3, [pc, #72]	; (800f6f4 <rand+0x60>)
 800f6ac:	4812      	ldr	r0, [pc, #72]	; (800f6f8 <rand+0x64>)
 800f6ae:	2152      	movs	r1, #82	; 0x52
 800f6b0:	f000 f9da 	bl	800fa68 <__assert_func>
 800f6b4:	4911      	ldr	r1, [pc, #68]	; (800f6fc <rand+0x68>)
 800f6b6:	4b12      	ldr	r3, [pc, #72]	; (800f700 <rand+0x6c>)
 800f6b8:	e9c0 1300 	strd	r1, r3, [r0]
 800f6bc:	4b11      	ldr	r3, [pc, #68]	; (800f704 <rand+0x70>)
 800f6be:	6083      	str	r3, [r0, #8]
 800f6c0:	230b      	movs	r3, #11
 800f6c2:	8183      	strh	r3, [r0, #12]
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	2001      	movs	r0, #1
 800f6c8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f6cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f6ce:	480e      	ldr	r0, [pc, #56]	; (800f708 <rand+0x74>)
 800f6d0:	690b      	ldr	r3, [r1, #16]
 800f6d2:	694c      	ldr	r4, [r1, #20]
 800f6d4:	4a0d      	ldr	r2, [pc, #52]	; (800f70c <rand+0x78>)
 800f6d6:	4358      	muls	r0, r3
 800f6d8:	fb02 0004 	mla	r0, r2, r4, r0
 800f6dc:	fba3 3202 	umull	r3, r2, r3, r2
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	eb40 0002 	adc.w	r0, r0, r2
 800f6e6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f6ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f6ee:	bd10      	pop	{r4, pc}
 800f6f0:	20000088 	.word	0x20000088
 800f6f4:	08013562 	.word	0x08013562
 800f6f8:	08013579 	.word	0x08013579
 800f6fc:	abcd330e 	.word	0xabcd330e
 800f700:	e66d1234 	.word	0xe66d1234
 800f704:	0005deec 	.word	0x0005deec
 800f708:	5851f42d 	.word	0x5851f42d
 800f70c:	4c957f2d 	.word	0x4c957f2d

0800f710 <std>:
 800f710:	2300      	movs	r3, #0
 800f712:	b510      	push	{r4, lr}
 800f714:	4604      	mov	r4, r0
 800f716:	e9c0 3300 	strd	r3, r3, [r0]
 800f71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f71e:	6083      	str	r3, [r0, #8]
 800f720:	8181      	strh	r1, [r0, #12]
 800f722:	6643      	str	r3, [r0, #100]	; 0x64
 800f724:	81c2      	strh	r2, [r0, #14]
 800f726:	6183      	str	r3, [r0, #24]
 800f728:	4619      	mov	r1, r3
 800f72a:	2208      	movs	r2, #8
 800f72c:	305c      	adds	r0, #92	; 0x5c
 800f72e:	f000 f916 	bl	800f95e <memset>
 800f732:	4b0d      	ldr	r3, [pc, #52]	; (800f768 <std+0x58>)
 800f734:	6263      	str	r3, [r4, #36]	; 0x24
 800f736:	4b0d      	ldr	r3, [pc, #52]	; (800f76c <std+0x5c>)
 800f738:	62a3      	str	r3, [r4, #40]	; 0x28
 800f73a:	4b0d      	ldr	r3, [pc, #52]	; (800f770 <std+0x60>)
 800f73c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f73e:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <std+0x64>)
 800f740:	6323      	str	r3, [r4, #48]	; 0x30
 800f742:	4b0d      	ldr	r3, [pc, #52]	; (800f778 <std+0x68>)
 800f744:	6224      	str	r4, [r4, #32]
 800f746:	429c      	cmp	r4, r3
 800f748:	d006      	beq.n	800f758 <std+0x48>
 800f74a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f74e:	4294      	cmp	r4, r2
 800f750:	d002      	beq.n	800f758 <std+0x48>
 800f752:	33d0      	adds	r3, #208	; 0xd0
 800f754:	429c      	cmp	r4, r3
 800f756:	d105      	bne.n	800f764 <std+0x54>
 800f758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f760:	f000 b970 	b.w	800fa44 <__retarget_lock_init_recursive>
 800f764:	bd10      	pop	{r4, pc}
 800f766:	bf00      	nop
 800f768:	0800f8b9 	.word	0x0800f8b9
 800f76c:	0800f8db 	.word	0x0800f8db
 800f770:	0800f913 	.word	0x0800f913
 800f774:	0800f937 	.word	0x0800f937
 800f778:	2000a5dc 	.word	0x2000a5dc

0800f77c <stdio_exit_handler>:
 800f77c:	4a02      	ldr	r2, [pc, #8]	; (800f788 <stdio_exit_handler+0xc>)
 800f77e:	4903      	ldr	r1, [pc, #12]	; (800f78c <stdio_exit_handler+0x10>)
 800f780:	4803      	ldr	r0, [pc, #12]	; (800f790 <stdio_exit_handler+0x14>)
 800f782:	f000 b869 	b.w	800f858 <_fwalk_sglue>
 800f786:	bf00      	nop
 800f788:	20000030 	.word	0x20000030
 800f78c:	08010359 	.word	0x08010359
 800f790:	2000003c 	.word	0x2000003c

0800f794 <cleanup_stdio>:
 800f794:	6841      	ldr	r1, [r0, #4]
 800f796:	4b0c      	ldr	r3, [pc, #48]	; (800f7c8 <cleanup_stdio+0x34>)
 800f798:	4299      	cmp	r1, r3
 800f79a:	b510      	push	{r4, lr}
 800f79c:	4604      	mov	r4, r0
 800f79e:	d001      	beq.n	800f7a4 <cleanup_stdio+0x10>
 800f7a0:	f000 fdda 	bl	8010358 <_fflush_r>
 800f7a4:	68a1      	ldr	r1, [r4, #8]
 800f7a6:	4b09      	ldr	r3, [pc, #36]	; (800f7cc <cleanup_stdio+0x38>)
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	d002      	beq.n	800f7b2 <cleanup_stdio+0x1e>
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f000 fdd3 	bl	8010358 <_fflush_r>
 800f7b2:	68e1      	ldr	r1, [r4, #12]
 800f7b4:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <cleanup_stdio+0x3c>)
 800f7b6:	4299      	cmp	r1, r3
 800f7b8:	d004      	beq.n	800f7c4 <cleanup_stdio+0x30>
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7c0:	f000 bdca 	b.w	8010358 <_fflush_r>
 800f7c4:	bd10      	pop	{r4, pc}
 800f7c6:	bf00      	nop
 800f7c8:	2000a5dc 	.word	0x2000a5dc
 800f7cc:	2000a644 	.word	0x2000a644
 800f7d0:	2000a6ac 	.word	0x2000a6ac

0800f7d4 <global_stdio_init.part.0>:
 800f7d4:	b510      	push	{r4, lr}
 800f7d6:	4b0b      	ldr	r3, [pc, #44]	; (800f804 <global_stdio_init.part.0+0x30>)
 800f7d8:	4c0b      	ldr	r4, [pc, #44]	; (800f808 <global_stdio_init.part.0+0x34>)
 800f7da:	4a0c      	ldr	r2, [pc, #48]	; (800f80c <global_stdio_init.part.0+0x38>)
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	4620      	mov	r0, r4
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	2104      	movs	r1, #4
 800f7e4:	f7ff ff94 	bl	800f710 <std>
 800f7e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	2109      	movs	r1, #9
 800f7f0:	f7ff ff8e 	bl	800f710 <std>
 800f7f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7fe:	2112      	movs	r1, #18
 800f800:	f7ff bf86 	b.w	800f710 <std>
 800f804:	2000a714 	.word	0x2000a714
 800f808:	2000a5dc 	.word	0x2000a5dc
 800f80c:	0800f77d 	.word	0x0800f77d

0800f810 <__sfp_lock_acquire>:
 800f810:	4801      	ldr	r0, [pc, #4]	; (800f818 <__sfp_lock_acquire+0x8>)
 800f812:	f000 b918 	b.w	800fa46 <__retarget_lock_acquire_recursive>
 800f816:	bf00      	nop
 800f818:	2000a71d 	.word	0x2000a71d

0800f81c <__sfp_lock_release>:
 800f81c:	4801      	ldr	r0, [pc, #4]	; (800f824 <__sfp_lock_release+0x8>)
 800f81e:	f000 b913 	b.w	800fa48 <__retarget_lock_release_recursive>
 800f822:	bf00      	nop
 800f824:	2000a71d 	.word	0x2000a71d

0800f828 <__sinit>:
 800f828:	b510      	push	{r4, lr}
 800f82a:	4604      	mov	r4, r0
 800f82c:	f7ff fff0 	bl	800f810 <__sfp_lock_acquire>
 800f830:	6a23      	ldr	r3, [r4, #32]
 800f832:	b11b      	cbz	r3, 800f83c <__sinit+0x14>
 800f834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f838:	f7ff bff0 	b.w	800f81c <__sfp_lock_release>
 800f83c:	4b04      	ldr	r3, [pc, #16]	; (800f850 <__sinit+0x28>)
 800f83e:	6223      	str	r3, [r4, #32]
 800f840:	4b04      	ldr	r3, [pc, #16]	; (800f854 <__sinit+0x2c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d1f5      	bne.n	800f834 <__sinit+0xc>
 800f848:	f7ff ffc4 	bl	800f7d4 <global_stdio_init.part.0>
 800f84c:	e7f2      	b.n	800f834 <__sinit+0xc>
 800f84e:	bf00      	nop
 800f850:	0800f795 	.word	0x0800f795
 800f854:	2000a714 	.word	0x2000a714

0800f858 <_fwalk_sglue>:
 800f858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f85c:	4607      	mov	r7, r0
 800f85e:	4688      	mov	r8, r1
 800f860:	4614      	mov	r4, r2
 800f862:	2600      	movs	r6, #0
 800f864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f868:	f1b9 0901 	subs.w	r9, r9, #1
 800f86c:	d505      	bpl.n	800f87a <_fwalk_sglue+0x22>
 800f86e:	6824      	ldr	r4, [r4, #0]
 800f870:	2c00      	cmp	r4, #0
 800f872:	d1f7      	bne.n	800f864 <_fwalk_sglue+0xc>
 800f874:	4630      	mov	r0, r6
 800f876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f87a:	89ab      	ldrh	r3, [r5, #12]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d907      	bls.n	800f890 <_fwalk_sglue+0x38>
 800f880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f884:	3301      	adds	r3, #1
 800f886:	d003      	beq.n	800f890 <_fwalk_sglue+0x38>
 800f888:	4629      	mov	r1, r5
 800f88a:	4638      	mov	r0, r7
 800f88c:	47c0      	blx	r8
 800f88e:	4306      	orrs	r6, r0
 800f890:	3568      	adds	r5, #104	; 0x68
 800f892:	e7e9      	b.n	800f868 <_fwalk_sglue+0x10>

0800f894 <iprintf>:
 800f894:	b40f      	push	{r0, r1, r2, r3}
 800f896:	b507      	push	{r0, r1, r2, lr}
 800f898:	4906      	ldr	r1, [pc, #24]	; (800f8b4 <iprintf+0x20>)
 800f89a:	ab04      	add	r3, sp, #16
 800f89c:	6808      	ldr	r0, [r1, #0]
 800f89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8a2:	6881      	ldr	r1, [r0, #8]
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	f000 fa27 	bl	800fcf8 <_vfiprintf_r>
 800f8aa:	b003      	add	sp, #12
 800f8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8b0:	b004      	add	sp, #16
 800f8b2:	4770      	bx	lr
 800f8b4:	20000088 	.word	0x20000088

0800f8b8 <__sread>:
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c0:	f000 f878 	bl	800f9b4 <_read_r>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	bfab      	itete	ge
 800f8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f8cc:	181b      	addge	r3, r3, r0
 800f8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8d2:	bfac      	ite	ge
 800f8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8d6:	81a3      	strhlt	r3, [r4, #12]
 800f8d8:	bd10      	pop	{r4, pc}

0800f8da <__swrite>:
 800f8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8de:	461f      	mov	r7, r3
 800f8e0:	898b      	ldrh	r3, [r1, #12]
 800f8e2:	05db      	lsls	r3, r3, #23
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	4616      	mov	r6, r2
 800f8ea:	d505      	bpl.n	800f8f8 <__swrite+0x1e>
 800f8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f0:	2302      	movs	r3, #2
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f000 f84c 	bl	800f990 <_lseek_r>
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f902:	81a3      	strh	r3, [r4, #12]
 800f904:	4632      	mov	r2, r6
 800f906:	463b      	mov	r3, r7
 800f908:	4628      	mov	r0, r5
 800f90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f90e:	f000 b863 	b.w	800f9d8 <_write_r>

0800f912 <__sseek>:
 800f912:	b510      	push	{r4, lr}
 800f914:	460c      	mov	r4, r1
 800f916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f91a:	f000 f839 	bl	800f990 <_lseek_r>
 800f91e:	1c43      	adds	r3, r0, #1
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	bf15      	itete	ne
 800f924:	6560      	strne	r0, [r4, #84]	; 0x54
 800f926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f92e:	81a3      	strheq	r3, [r4, #12]
 800f930:	bf18      	it	ne
 800f932:	81a3      	strhne	r3, [r4, #12]
 800f934:	bd10      	pop	{r4, pc}

0800f936 <__sclose>:
 800f936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f93a:	f000 b819 	b.w	800f970 <_close_r>

0800f93e <memcmp>:
 800f93e:	b510      	push	{r4, lr}
 800f940:	3901      	subs	r1, #1
 800f942:	4402      	add	r2, r0
 800f944:	4290      	cmp	r0, r2
 800f946:	d101      	bne.n	800f94c <memcmp+0xe>
 800f948:	2000      	movs	r0, #0
 800f94a:	e005      	b.n	800f958 <memcmp+0x1a>
 800f94c:	7803      	ldrb	r3, [r0, #0]
 800f94e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f952:	42a3      	cmp	r3, r4
 800f954:	d001      	beq.n	800f95a <memcmp+0x1c>
 800f956:	1b18      	subs	r0, r3, r4
 800f958:	bd10      	pop	{r4, pc}
 800f95a:	3001      	adds	r0, #1
 800f95c:	e7f2      	b.n	800f944 <memcmp+0x6>

0800f95e <memset>:
 800f95e:	4402      	add	r2, r0
 800f960:	4603      	mov	r3, r0
 800f962:	4293      	cmp	r3, r2
 800f964:	d100      	bne.n	800f968 <memset+0xa>
 800f966:	4770      	bx	lr
 800f968:	f803 1b01 	strb.w	r1, [r3], #1
 800f96c:	e7f9      	b.n	800f962 <memset+0x4>
	...

0800f970 <_close_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d06      	ldr	r5, [pc, #24]	; (800f98c <_close_r+0x1c>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	602b      	str	r3, [r5, #0]
 800f97c:	f7f1 f897 	bl	8000aae <_close>
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	d102      	bne.n	800f98a <_close_r+0x1a>
 800f984:	682b      	ldr	r3, [r5, #0]
 800f986:	b103      	cbz	r3, 800f98a <_close_r+0x1a>
 800f988:	6023      	str	r3, [r4, #0]
 800f98a:	bd38      	pop	{r3, r4, r5, pc}
 800f98c:	2000a718 	.word	0x2000a718

0800f990 <_lseek_r>:
 800f990:	b538      	push	{r3, r4, r5, lr}
 800f992:	4d07      	ldr	r5, [pc, #28]	; (800f9b0 <_lseek_r+0x20>)
 800f994:	4604      	mov	r4, r0
 800f996:	4608      	mov	r0, r1
 800f998:	4611      	mov	r1, r2
 800f99a:	2200      	movs	r2, #0
 800f99c:	602a      	str	r2, [r5, #0]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	f7f1 f8ac 	bl	8000afc <_lseek>
 800f9a4:	1c43      	adds	r3, r0, #1
 800f9a6:	d102      	bne.n	800f9ae <_lseek_r+0x1e>
 800f9a8:	682b      	ldr	r3, [r5, #0]
 800f9aa:	b103      	cbz	r3, 800f9ae <_lseek_r+0x1e>
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	bd38      	pop	{r3, r4, r5, pc}
 800f9b0:	2000a718 	.word	0x2000a718

0800f9b4 <_read_r>:
 800f9b4:	b538      	push	{r3, r4, r5, lr}
 800f9b6:	4d07      	ldr	r5, [pc, #28]	; (800f9d4 <_read_r+0x20>)
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	4608      	mov	r0, r1
 800f9bc:	4611      	mov	r1, r2
 800f9be:	2200      	movs	r2, #0
 800f9c0:	602a      	str	r2, [r5, #0]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f7f1 f83a 	bl	8000a3c <_read>
 800f9c8:	1c43      	adds	r3, r0, #1
 800f9ca:	d102      	bne.n	800f9d2 <_read_r+0x1e>
 800f9cc:	682b      	ldr	r3, [r5, #0]
 800f9ce:	b103      	cbz	r3, 800f9d2 <_read_r+0x1e>
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}
 800f9d4:	2000a718 	.word	0x2000a718

0800f9d8 <_write_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4d07      	ldr	r5, [pc, #28]	; (800f9f8 <_write_r+0x20>)
 800f9dc:	4604      	mov	r4, r0
 800f9de:	4608      	mov	r0, r1
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	602a      	str	r2, [r5, #0]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f7f1 f845 	bl	8000a76 <_write>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_write_r+0x1e>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_write_r+0x1e>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	2000a718 	.word	0x2000a718

0800f9fc <__libc_init_array>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	4d0d      	ldr	r5, [pc, #52]	; (800fa34 <__libc_init_array+0x38>)
 800fa00:	4c0d      	ldr	r4, [pc, #52]	; (800fa38 <__libc_init_array+0x3c>)
 800fa02:	1b64      	subs	r4, r4, r5
 800fa04:	10a4      	asrs	r4, r4, #2
 800fa06:	2600      	movs	r6, #0
 800fa08:	42a6      	cmp	r6, r4
 800fa0a:	d109      	bne.n	800fa20 <__libc_init_array+0x24>
 800fa0c:	4d0b      	ldr	r5, [pc, #44]	; (800fa3c <__libc_init_array+0x40>)
 800fa0e:	4c0c      	ldr	r4, [pc, #48]	; (800fa40 <__libc_init_array+0x44>)
 800fa10:	f000 fe52 	bl	80106b8 <_init>
 800fa14:	1b64      	subs	r4, r4, r5
 800fa16:	10a4      	asrs	r4, r4, #2
 800fa18:	2600      	movs	r6, #0
 800fa1a:	42a6      	cmp	r6, r4
 800fa1c:	d105      	bne.n	800fa2a <__libc_init_array+0x2e>
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
 800fa20:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa24:	4798      	blx	r3
 800fa26:	3601      	adds	r6, #1
 800fa28:	e7ee      	b.n	800fa08 <__libc_init_array+0xc>
 800fa2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa2e:	4798      	blx	r3
 800fa30:	3601      	adds	r6, #1
 800fa32:	e7f2      	b.n	800fa1a <__libc_init_array+0x1e>
 800fa34:	08013648 	.word	0x08013648
 800fa38:	08013648 	.word	0x08013648
 800fa3c:	08013648 	.word	0x08013648
 800fa40:	0801364c 	.word	0x0801364c

0800fa44 <__retarget_lock_init_recursive>:
 800fa44:	4770      	bx	lr

0800fa46 <__retarget_lock_acquire_recursive>:
 800fa46:	4770      	bx	lr

0800fa48 <__retarget_lock_release_recursive>:
 800fa48:	4770      	bx	lr

0800fa4a <memcpy>:
 800fa4a:	440a      	add	r2, r1
 800fa4c:	4291      	cmp	r1, r2
 800fa4e:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa52:	d100      	bne.n	800fa56 <memcpy+0xc>
 800fa54:	4770      	bx	lr
 800fa56:	b510      	push	{r4, lr}
 800fa58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa60:	4291      	cmp	r1, r2
 800fa62:	d1f9      	bne.n	800fa58 <memcpy+0xe>
 800fa64:	bd10      	pop	{r4, pc}
	...

0800fa68 <__assert_func>:
 800fa68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa6a:	4614      	mov	r4, r2
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	4b09      	ldr	r3, [pc, #36]	; (800fa94 <__assert_func+0x2c>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4605      	mov	r5, r0
 800fa74:	68d8      	ldr	r0, [r3, #12]
 800fa76:	b14c      	cbz	r4, 800fa8c <__assert_func+0x24>
 800fa78:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <__assert_func+0x30>)
 800fa7a:	9100      	str	r1, [sp, #0]
 800fa7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa80:	4906      	ldr	r1, [pc, #24]	; (800fa9c <__assert_func+0x34>)
 800fa82:	462b      	mov	r3, r5
 800fa84:	f000 fc90 	bl	80103a8 <fiprintf>
 800fa88:	f000 fd46 	bl	8010518 <abort>
 800fa8c:	4b04      	ldr	r3, [pc, #16]	; (800faa0 <__assert_func+0x38>)
 800fa8e:	461c      	mov	r4, r3
 800fa90:	e7f3      	b.n	800fa7a <__assert_func+0x12>
 800fa92:	bf00      	nop
 800fa94:	20000088 	.word	0x20000088
 800fa98:	080135d1 	.word	0x080135d1
 800fa9c:	080135de 	.word	0x080135de
 800faa0:	0801360c 	.word	0x0801360c

0800faa4 <_free_r>:
 800faa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800faa6:	2900      	cmp	r1, #0
 800faa8:	d044      	beq.n	800fb34 <_free_r+0x90>
 800faaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faae:	9001      	str	r0, [sp, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f1a1 0404 	sub.w	r4, r1, #4
 800fab6:	bfb8      	it	lt
 800fab8:	18e4      	addlt	r4, r4, r3
 800faba:	f000 f8e7 	bl	800fc8c <__malloc_lock>
 800fabe:	4a1e      	ldr	r2, [pc, #120]	; (800fb38 <_free_r+0x94>)
 800fac0:	9801      	ldr	r0, [sp, #4]
 800fac2:	6813      	ldr	r3, [r2, #0]
 800fac4:	b933      	cbnz	r3, 800fad4 <_free_r+0x30>
 800fac6:	6063      	str	r3, [r4, #4]
 800fac8:	6014      	str	r4, [r2, #0]
 800faca:	b003      	add	sp, #12
 800facc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fad0:	f000 b8e2 	b.w	800fc98 <__malloc_unlock>
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	d908      	bls.n	800faea <_free_r+0x46>
 800fad8:	6825      	ldr	r5, [r4, #0]
 800fada:	1961      	adds	r1, r4, r5
 800fadc:	428b      	cmp	r3, r1
 800fade:	bf01      	itttt	eq
 800fae0:	6819      	ldreq	r1, [r3, #0]
 800fae2:	685b      	ldreq	r3, [r3, #4]
 800fae4:	1949      	addeq	r1, r1, r5
 800fae6:	6021      	streq	r1, [r4, #0]
 800fae8:	e7ed      	b.n	800fac6 <_free_r+0x22>
 800faea:	461a      	mov	r2, r3
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	b10b      	cbz	r3, 800faf4 <_free_r+0x50>
 800faf0:	42a3      	cmp	r3, r4
 800faf2:	d9fa      	bls.n	800faea <_free_r+0x46>
 800faf4:	6811      	ldr	r1, [r2, #0]
 800faf6:	1855      	adds	r5, r2, r1
 800faf8:	42a5      	cmp	r5, r4
 800fafa:	d10b      	bne.n	800fb14 <_free_r+0x70>
 800fafc:	6824      	ldr	r4, [r4, #0]
 800fafe:	4421      	add	r1, r4
 800fb00:	1854      	adds	r4, r2, r1
 800fb02:	42a3      	cmp	r3, r4
 800fb04:	6011      	str	r1, [r2, #0]
 800fb06:	d1e0      	bne.n	800faca <_free_r+0x26>
 800fb08:	681c      	ldr	r4, [r3, #0]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	6053      	str	r3, [r2, #4]
 800fb0e:	440c      	add	r4, r1
 800fb10:	6014      	str	r4, [r2, #0]
 800fb12:	e7da      	b.n	800faca <_free_r+0x26>
 800fb14:	d902      	bls.n	800fb1c <_free_r+0x78>
 800fb16:	230c      	movs	r3, #12
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	e7d6      	b.n	800faca <_free_r+0x26>
 800fb1c:	6825      	ldr	r5, [r4, #0]
 800fb1e:	1961      	adds	r1, r4, r5
 800fb20:	428b      	cmp	r3, r1
 800fb22:	bf04      	itt	eq
 800fb24:	6819      	ldreq	r1, [r3, #0]
 800fb26:	685b      	ldreq	r3, [r3, #4]
 800fb28:	6063      	str	r3, [r4, #4]
 800fb2a:	bf04      	itt	eq
 800fb2c:	1949      	addeq	r1, r1, r5
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	6054      	str	r4, [r2, #4]
 800fb32:	e7ca      	b.n	800faca <_free_r+0x26>
 800fb34:	b003      	add	sp, #12
 800fb36:	bd30      	pop	{r4, r5, pc}
 800fb38:	2000a720 	.word	0x2000a720

0800fb3c <malloc>:
 800fb3c:	4b02      	ldr	r3, [pc, #8]	; (800fb48 <malloc+0xc>)
 800fb3e:	4601      	mov	r1, r0
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	f000 b823 	b.w	800fb8c <_malloc_r>
 800fb46:	bf00      	nop
 800fb48:	20000088 	.word	0x20000088

0800fb4c <sbrk_aligned>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	4e0e      	ldr	r6, [pc, #56]	; (800fb88 <sbrk_aligned+0x3c>)
 800fb50:	460c      	mov	r4, r1
 800fb52:	6831      	ldr	r1, [r6, #0]
 800fb54:	4605      	mov	r5, r0
 800fb56:	b911      	cbnz	r1, 800fb5e <sbrk_aligned+0x12>
 800fb58:	f000 fcce 	bl	80104f8 <_sbrk_r>
 800fb5c:	6030      	str	r0, [r6, #0]
 800fb5e:	4621      	mov	r1, r4
 800fb60:	4628      	mov	r0, r5
 800fb62:	f000 fcc9 	bl	80104f8 <_sbrk_r>
 800fb66:	1c43      	adds	r3, r0, #1
 800fb68:	d00a      	beq.n	800fb80 <sbrk_aligned+0x34>
 800fb6a:	1cc4      	adds	r4, r0, #3
 800fb6c:	f024 0403 	bic.w	r4, r4, #3
 800fb70:	42a0      	cmp	r0, r4
 800fb72:	d007      	beq.n	800fb84 <sbrk_aligned+0x38>
 800fb74:	1a21      	subs	r1, r4, r0
 800fb76:	4628      	mov	r0, r5
 800fb78:	f000 fcbe 	bl	80104f8 <_sbrk_r>
 800fb7c:	3001      	adds	r0, #1
 800fb7e:	d101      	bne.n	800fb84 <sbrk_aligned+0x38>
 800fb80:	f04f 34ff 	mov.w	r4, #4294967295
 800fb84:	4620      	mov	r0, r4
 800fb86:	bd70      	pop	{r4, r5, r6, pc}
 800fb88:	2000a724 	.word	0x2000a724

0800fb8c <_malloc_r>:
 800fb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb90:	1ccd      	adds	r5, r1, #3
 800fb92:	f025 0503 	bic.w	r5, r5, #3
 800fb96:	3508      	adds	r5, #8
 800fb98:	2d0c      	cmp	r5, #12
 800fb9a:	bf38      	it	cc
 800fb9c:	250c      	movcc	r5, #12
 800fb9e:	2d00      	cmp	r5, #0
 800fba0:	4607      	mov	r7, r0
 800fba2:	db01      	blt.n	800fba8 <_malloc_r+0x1c>
 800fba4:	42a9      	cmp	r1, r5
 800fba6:	d905      	bls.n	800fbb4 <_malloc_r+0x28>
 800fba8:	230c      	movs	r3, #12
 800fbaa:	603b      	str	r3, [r7, #0]
 800fbac:	2600      	movs	r6, #0
 800fbae:	4630      	mov	r0, r6
 800fbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fc88 <_malloc_r+0xfc>
 800fbb8:	f000 f868 	bl	800fc8c <__malloc_lock>
 800fbbc:	f8d8 3000 	ldr.w	r3, [r8]
 800fbc0:	461c      	mov	r4, r3
 800fbc2:	bb5c      	cbnz	r4, 800fc1c <_malloc_r+0x90>
 800fbc4:	4629      	mov	r1, r5
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	f7ff ffc0 	bl	800fb4c <sbrk_aligned>
 800fbcc:	1c43      	adds	r3, r0, #1
 800fbce:	4604      	mov	r4, r0
 800fbd0:	d155      	bne.n	800fc7e <_malloc_r+0xf2>
 800fbd2:	f8d8 4000 	ldr.w	r4, [r8]
 800fbd6:	4626      	mov	r6, r4
 800fbd8:	2e00      	cmp	r6, #0
 800fbda:	d145      	bne.n	800fc68 <_malloc_r+0xdc>
 800fbdc:	2c00      	cmp	r4, #0
 800fbde:	d048      	beq.n	800fc72 <_malloc_r+0xe6>
 800fbe0:	6823      	ldr	r3, [r4, #0]
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	eb04 0903 	add.w	r9, r4, r3
 800fbea:	f000 fc85 	bl	80104f8 <_sbrk_r>
 800fbee:	4581      	cmp	r9, r0
 800fbf0:	d13f      	bne.n	800fc72 <_malloc_r+0xe6>
 800fbf2:	6821      	ldr	r1, [r4, #0]
 800fbf4:	1a6d      	subs	r5, r5, r1
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	4638      	mov	r0, r7
 800fbfa:	f7ff ffa7 	bl	800fb4c <sbrk_aligned>
 800fbfe:	3001      	adds	r0, #1
 800fc00:	d037      	beq.n	800fc72 <_malloc_r+0xe6>
 800fc02:	6823      	ldr	r3, [r4, #0]
 800fc04:	442b      	add	r3, r5
 800fc06:	6023      	str	r3, [r4, #0]
 800fc08:	f8d8 3000 	ldr.w	r3, [r8]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d038      	beq.n	800fc82 <_malloc_r+0xf6>
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	42a2      	cmp	r2, r4
 800fc14:	d12b      	bne.n	800fc6e <_malloc_r+0xe2>
 800fc16:	2200      	movs	r2, #0
 800fc18:	605a      	str	r2, [r3, #4]
 800fc1a:	e00f      	b.n	800fc3c <_malloc_r+0xb0>
 800fc1c:	6822      	ldr	r2, [r4, #0]
 800fc1e:	1b52      	subs	r2, r2, r5
 800fc20:	d41f      	bmi.n	800fc62 <_malloc_r+0xd6>
 800fc22:	2a0b      	cmp	r2, #11
 800fc24:	d917      	bls.n	800fc56 <_malloc_r+0xca>
 800fc26:	1961      	adds	r1, r4, r5
 800fc28:	42a3      	cmp	r3, r4
 800fc2a:	6025      	str	r5, [r4, #0]
 800fc2c:	bf18      	it	ne
 800fc2e:	6059      	strne	r1, [r3, #4]
 800fc30:	6863      	ldr	r3, [r4, #4]
 800fc32:	bf08      	it	eq
 800fc34:	f8c8 1000 	streq.w	r1, [r8]
 800fc38:	5162      	str	r2, [r4, r5]
 800fc3a:	604b      	str	r3, [r1, #4]
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	f104 060b 	add.w	r6, r4, #11
 800fc42:	f000 f829 	bl	800fc98 <__malloc_unlock>
 800fc46:	f026 0607 	bic.w	r6, r6, #7
 800fc4a:	1d23      	adds	r3, r4, #4
 800fc4c:	1af2      	subs	r2, r6, r3
 800fc4e:	d0ae      	beq.n	800fbae <_malloc_r+0x22>
 800fc50:	1b9b      	subs	r3, r3, r6
 800fc52:	50a3      	str	r3, [r4, r2]
 800fc54:	e7ab      	b.n	800fbae <_malloc_r+0x22>
 800fc56:	42a3      	cmp	r3, r4
 800fc58:	6862      	ldr	r2, [r4, #4]
 800fc5a:	d1dd      	bne.n	800fc18 <_malloc_r+0x8c>
 800fc5c:	f8c8 2000 	str.w	r2, [r8]
 800fc60:	e7ec      	b.n	800fc3c <_malloc_r+0xb0>
 800fc62:	4623      	mov	r3, r4
 800fc64:	6864      	ldr	r4, [r4, #4]
 800fc66:	e7ac      	b.n	800fbc2 <_malloc_r+0x36>
 800fc68:	4634      	mov	r4, r6
 800fc6a:	6876      	ldr	r6, [r6, #4]
 800fc6c:	e7b4      	b.n	800fbd8 <_malloc_r+0x4c>
 800fc6e:	4613      	mov	r3, r2
 800fc70:	e7cc      	b.n	800fc0c <_malloc_r+0x80>
 800fc72:	230c      	movs	r3, #12
 800fc74:	603b      	str	r3, [r7, #0]
 800fc76:	4638      	mov	r0, r7
 800fc78:	f000 f80e 	bl	800fc98 <__malloc_unlock>
 800fc7c:	e797      	b.n	800fbae <_malloc_r+0x22>
 800fc7e:	6025      	str	r5, [r4, #0]
 800fc80:	e7dc      	b.n	800fc3c <_malloc_r+0xb0>
 800fc82:	605b      	str	r3, [r3, #4]
 800fc84:	deff      	udf	#255	; 0xff
 800fc86:	bf00      	nop
 800fc88:	2000a720 	.word	0x2000a720

0800fc8c <__malloc_lock>:
 800fc8c:	4801      	ldr	r0, [pc, #4]	; (800fc94 <__malloc_lock+0x8>)
 800fc8e:	f7ff beda 	b.w	800fa46 <__retarget_lock_acquire_recursive>
 800fc92:	bf00      	nop
 800fc94:	2000a71c 	.word	0x2000a71c

0800fc98 <__malloc_unlock>:
 800fc98:	4801      	ldr	r0, [pc, #4]	; (800fca0 <__malloc_unlock+0x8>)
 800fc9a:	f7ff bed5 	b.w	800fa48 <__retarget_lock_release_recursive>
 800fc9e:	bf00      	nop
 800fca0:	2000a71c 	.word	0x2000a71c

0800fca4 <__sfputc_r>:
 800fca4:	6893      	ldr	r3, [r2, #8]
 800fca6:	3b01      	subs	r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	b410      	push	{r4}
 800fcac:	6093      	str	r3, [r2, #8]
 800fcae:	da08      	bge.n	800fcc2 <__sfputc_r+0x1e>
 800fcb0:	6994      	ldr	r4, [r2, #24]
 800fcb2:	42a3      	cmp	r3, r4
 800fcb4:	db01      	blt.n	800fcba <__sfputc_r+0x16>
 800fcb6:	290a      	cmp	r1, #10
 800fcb8:	d103      	bne.n	800fcc2 <__sfputc_r+0x1e>
 800fcba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcbe:	f000 bb85 	b.w	80103cc <__swbuf_r>
 800fcc2:	6813      	ldr	r3, [r2, #0]
 800fcc4:	1c58      	adds	r0, r3, #1
 800fcc6:	6010      	str	r0, [r2, #0]
 800fcc8:	7019      	strb	r1, [r3, #0]
 800fcca:	4608      	mov	r0, r1
 800fccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <__sfputs_r>:
 800fcd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	4614      	mov	r4, r2
 800fcda:	18d5      	adds	r5, r2, r3
 800fcdc:	42ac      	cmp	r4, r5
 800fcde:	d101      	bne.n	800fce4 <__sfputs_r+0x12>
 800fce0:	2000      	movs	r0, #0
 800fce2:	e007      	b.n	800fcf4 <__sfputs_r+0x22>
 800fce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fce8:	463a      	mov	r2, r7
 800fcea:	4630      	mov	r0, r6
 800fcec:	f7ff ffda 	bl	800fca4 <__sfputc_r>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	d1f3      	bne.n	800fcdc <__sfputs_r+0xa>
 800fcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fcf8 <_vfiprintf_r>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	460d      	mov	r5, r1
 800fcfe:	b09d      	sub	sp, #116	; 0x74
 800fd00:	4614      	mov	r4, r2
 800fd02:	4698      	mov	r8, r3
 800fd04:	4606      	mov	r6, r0
 800fd06:	b118      	cbz	r0, 800fd10 <_vfiprintf_r+0x18>
 800fd08:	6a03      	ldr	r3, [r0, #32]
 800fd0a:	b90b      	cbnz	r3, 800fd10 <_vfiprintf_r+0x18>
 800fd0c:	f7ff fd8c 	bl	800f828 <__sinit>
 800fd10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd12:	07d9      	lsls	r1, r3, #31
 800fd14:	d405      	bmi.n	800fd22 <_vfiprintf_r+0x2a>
 800fd16:	89ab      	ldrh	r3, [r5, #12]
 800fd18:	059a      	lsls	r2, r3, #22
 800fd1a:	d402      	bmi.n	800fd22 <_vfiprintf_r+0x2a>
 800fd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd1e:	f7ff fe92 	bl	800fa46 <__retarget_lock_acquire_recursive>
 800fd22:	89ab      	ldrh	r3, [r5, #12]
 800fd24:	071b      	lsls	r3, r3, #28
 800fd26:	d501      	bpl.n	800fd2c <_vfiprintf_r+0x34>
 800fd28:	692b      	ldr	r3, [r5, #16]
 800fd2a:	b99b      	cbnz	r3, 800fd54 <_vfiprintf_r+0x5c>
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f000 fb8a 	bl	8010448 <__swsetup_r>
 800fd34:	b170      	cbz	r0, 800fd54 <_vfiprintf_r+0x5c>
 800fd36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd38:	07dc      	lsls	r4, r3, #31
 800fd3a:	d504      	bpl.n	800fd46 <_vfiprintf_r+0x4e>
 800fd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd40:	b01d      	add	sp, #116	; 0x74
 800fd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd46:	89ab      	ldrh	r3, [r5, #12]
 800fd48:	0598      	lsls	r0, r3, #22
 800fd4a:	d4f7      	bmi.n	800fd3c <_vfiprintf_r+0x44>
 800fd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd4e:	f7ff fe7b 	bl	800fa48 <__retarget_lock_release_recursive>
 800fd52:	e7f3      	b.n	800fd3c <_vfiprintf_r+0x44>
 800fd54:	2300      	movs	r3, #0
 800fd56:	9309      	str	r3, [sp, #36]	; 0x24
 800fd58:	2320      	movs	r3, #32
 800fd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd62:	2330      	movs	r3, #48	; 0x30
 800fd64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ff18 <_vfiprintf_r+0x220>
 800fd68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd6c:	f04f 0901 	mov.w	r9, #1
 800fd70:	4623      	mov	r3, r4
 800fd72:	469a      	mov	sl, r3
 800fd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd78:	b10a      	cbz	r2, 800fd7e <_vfiprintf_r+0x86>
 800fd7a:	2a25      	cmp	r2, #37	; 0x25
 800fd7c:	d1f9      	bne.n	800fd72 <_vfiprintf_r+0x7a>
 800fd7e:	ebba 0b04 	subs.w	fp, sl, r4
 800fd82:	d00b      	beq.n	800fd9c <_vfiprintf_r+0xa4>
 800fd84:	465b      	mov	r3, fp
 800fd86:	4622      	mov	r2, r4
 800fd88:	4629      	mov	r1, r5
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7ff ffa1 	bl	800fcd2 <__sfputs_r>
 800fd90:	3001      	adds	r0, #1
 800fd92:	f000 80a9 	beq.w	800fee8 <_vfiprintf_r+0x1f0>
 800fd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd98:	445a      	add	r2, fp
 800fd9a:	9209      	str	r2, [sp, #36]	; 0x24
 800fd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f000 80a1 	beq.w	800fee8 <_vfiprintf_r+0x1f0>
 800fda6:	2300      	movs	r3, #0
 800fda8:	f04f 32ff 	mov.w	r2, #4294967295
 800fdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdb0:	f10a 0a01 	add.w	sl, sl, #1
 800fdb4:	9304      	str	r3, [sp, #16]
 800fdb6:	9307      	str	r3, [sp, #28]
 800fdb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdbc:	931a      	str	r3, [sp, #104]	; 0x68
 800fdbe:	4654      	mov	r4, sl
 800fdc0:	2205      	movs	r2, #5
 800fdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdc6:	4854      	ldr	r0, [pc, #336]	; (800ff18 <_vfiprintf_r+0x220>)
 800fdc8:	f7f0 fa12 	bl	80001f0 <memchr>
 800fdcc:	9a04      	ldr	r2, [sp, #16]
 800fdce:	b9d8      	cbnz	r0, 800fe08 <_vfiprintf_r+0x110>
 800fdd0:	06d1      	lsls	r1, r2, #27
 800fdd2:	bf44      	itt	mi
 800fdd4:	2320      	movmi	r3, #32
 800fdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdda:	0713      	lsls	r3, r2, #28
 800fddc:	bf44      	itt	mi
 800fdde:	232b      	movmi	r3, #43	; 0x2b
 800fde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fde4:	f89a 3000 	ldrb.w	r3, [sl]
 800fde8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdea:	d015      	beq.n	800fe18 <_vfiprintf_r+0x120>
 800fdec:	9a07      	ldr	r2, [sp, #28]
 800fdee:	4654      	mov	r4, sl
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	f04f 0c0a 	mov.w	ip, #10
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdfc:	3b30      	subs	r3, #48	; 0x30
 800fdfe:	2b09      	cmp	r3, #9
 800fe00:	d94d      	bls.n	800fe9e <_vfiprintf_r+0x1a6>
 800fe02:	b1b0      	cbz	r0, 800fe32 <_vfiprintf_r+0x13a>
 800fe04:	9207      	str	r2, [sp, #28]
 800fe06:	e014      	b.n	800fe32 <_vfiprintf_r+0x13a>
 800fe08:	eba0 0308 	sub.w	r3, r0, r8
 800fe0c:	fa09 f303 	lsl.w	r3, r9, r3
 800fe10:	4313      	orrs	r3, r2
 800fe12:	9304      	str	r3, [sp, #16]
 800fe14:	46a2      	mov	sl, r4
 800fe16:	e7d2      	b.n	800fdbe <_vfiprintf_r+0xc6>
 800fe18:	9b03      	ldr	r3, [sp, #12]
 800fe1a:	1d19      	adds	r1, r3, #4
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	9103      	str	r1, [sp, #12]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	bfbb      	ittet	lt
 800fe24:	425b      	neglt	r3, r3
 800fe26:	f042 0202 	orrlt.w	r2, r2, #2
 800fe2a:	9307      	strge	r3, [sp, #28]
 800fe2c:	9307      	strlt	r3, [sp, #28]
 800fe2e:	bfb8      	it	lt
 800fe30:	9204      	strlt	r2, [sp, #16]
 800fe32:	7823      	ldrb	r3, [r4, #0]
 800fe34:	2b2e      	cmp	r3, #46	; 0x2e
 800fe36:	d10c      	bne.n	800fe52 <_vfiprintf_r+0x15a>
 800fe38:	7863      	ldrb	r3, [r4, #1]
 800fe3a:	2b2a      	cmp	r3, #42	; 0x2a
 800fe3c:	d134      	bne.n	800fea8 <_vfiprintf_r+0x1b0>
 800fe3e:	9b03      	ldr	r3, [sp, #12]
 800fe40:	1d1a      	adds	r2, r3, #4
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	9203      	str	r2, [sp, #12]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	bfb8      	it	lt
 800fe4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe4e:	3402      	adds	r4, #2
 800fe50:	9305      	str	r3, [sp, #20]
 800fe52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ff28 <_vfiprintf_r+0x230>
 800fe56:	7821      	ldrb	r1, [r4, #0]
 800fe58:	2203      	movs	r2, #3
 800fe5a:	4650      	mov	r0, sl
 800fe5c:	f7f0 f9c8 	bl	80001f0 <memchr>
 800fe60:	b138      	cbz	r0, 800fe72 <_vfiprintf_r+0x17a>
 800fe62:	9b04      	ldr	r3, [sp, #16]
 800fe64:	eba0 000a 	sub.w	r0, r0, sl
 800fe68:	2240      	movs	r2, #64	; 0x40
 800fe6a:	4082      	lsls	r2, r0
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	3401      	adds	r4, #1
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe76:	4829      	ldr	r0, [pc, #164]	; (800ff1c <_vfiprintf_r+0x224>)
 800fe78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe7c:	2206      	movs	r2, #6
 800fe7e:	f7f0 f9b7 	bl	80001f0 <memchr>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d03f      	beq.n	800ff06 <_vfiprintf_r+0x20e>
 800fe86:	4b26      	ldr	r3, [pc, #152]	; (800ff20 <_vfiprintf_r+0x228>)
 800fe88:	bb1b      	cbnz	r3, 800fed2 <_vfiprintf_r+0x1da>
 800fe8a:	9b03      	ldr	r3, [sp, #12]
 800fe8c:	3307      	adds	r3, #7
 800fe8e:	f023 0307 	bic.w	r3, r3, #7
 800fe92:	3308      	adds	r3, #8
 800fe94:	9303      	str	r3, [sp, #12]
 800fe96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe98:	443b      	add	r3, r7
 800fe9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe9c:	e768      	b.n	800fd70 <_vfiprintf_r+0x78>
 800fe9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fea2:	460c      	mov	r4, r1
 800fea4:	2001      	movs	r0, #1
 800fea6:	e7a6      	b.n	800fdf6 <_vfiprintf_r+0xfe>
 800fea8:	2300      	movs	r3, #0
 800feaa:	3401      	adds	r4, #1
 800feac:	9305      	str	r3, [sp, #20]
 800feae:	4619      	mov	r1, r3
 800feb0:	f04f 0c0a 	mov.w	ip, #10
 800feb4:	4620      	mov	r0, r4
 800feb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feba:	3a30      	subs	r2, #48	; 0x30
 800febc:	2a09      	cmp	r2, #9
 800febe:	d903      	bls.n	800fec8 <_vfiprintf_r+0x1d0>
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d0c6      	beq.n	800fe52 <_vfiprintf_r+0x15a>
 800fec4:	9105      	str	r1, [sp, #20]
 800fec6:	e7c4      	b.n	800fe52 <_vfiprintf_r+0x15a>
 800fec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fecc:	4604      	mov	r4, r0
 800fece:	2301      	movs	r3, #1
 800fed0:	e7f0      	b.n	800feb4 <_vfiprintf_r+0x1bc>
 800fed2:	ab03      	add	r3, sp, #12
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	462a      	mov	r2, r5
 800fed8:	4b12      	ldr	r3, [pc, #72]	; (800ff24 <_vfiprintf_r+0x22c>)
 800feda:	a904      	add	r1, sp, #16
 800fedc:	4630      	mov	r0, r6
 800fede:	f3af 8000 	nop.w
 800fee2:	4607      	mov	r7, r0
 800fee4:	1c78      	adds	r0, r7, #1
 800fee6:	d1d6      	bne.n	800fe96 <_vfiprintf_r+0x19e>
 800fee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feea:	07d9      	lsls	r1, r3, #31
 800feec:	d405      	bmi.n	800fefa <_vfiprintf_r+0x202>
 800feee:	89ab      	ldrh	r3, [r5, #12]
 800fef0:	059a      	lsls	r2, r3, #22
 800fef2:	d402      	bmi.n	800fefa <_vfiprintf_r+0x202>
 800fef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fef6:	f7ff fda7 	bl	800fa48 <__retarget_lock_release_recursive>
 800fefa:	89ab      	ldrh	r3, [r5, #12]
 800fefc:	065b      	lsls	r3, r3, #25
 800fefe:	f53f af1d 	bmi.w	800fd3c <_vfiprintf_r+0x44>
 800ff02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff04:	e71c      	b.n	800fd40 <_vfiprintf_r+0x48>
 800ff06:	ab03      	add	r3, sp, #12
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	462a      	mov	r2, r5
 800ff0c:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <_vfiprintf_r+0x22c>)
 800ff0e:	a904      	add	r1, sp, #16
 800ff10:	4630      	mov	r0, r6
 800ff12:	f000 f879 	bl	8010008 <_printf_i>
 800ff16:	e7e4      	b.n	800fee2 <_vfiprintf_r+0x1ea>
 800ff18:	0801360d 	.word	0x0801360d
 800ff1c:	08013617 	.word	0x08013617
 800ff20:	00000000 	.word	0x00000000
 800ff24:	0800fcd3 	.word	0x0800fcd3
 800ff28:	08013613 	.word	0x08013613

0800ff2c <_printf_common>:
 800ff2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff30:	4616      	mov	r6, r2
 800ff32:	4699      	mov	r9, r3
 800ff34:	688a      	ldr	r2, [r1, #8]
 800ff36:	690b      	ldr	r3, [r1, #16]
 800ff38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	bfb8      	it	lt
 800ff40:	4613      	movlt	r3, r2
 800ff42:	6033      	str	r3, [r6, #0]
 800ff44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff48:	4607      	mov	r7, r0
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	b10a      	cbz	r2, 800ff52 <_printf_common+0x26>
 800ff4e:	3301      	adds	r3, #1
 800ff50:	6033      	str	r3, [r6, #0]
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	0699      	lsls	r1, r3, #26
 800ff56:	bf42      	ittt	mi
 800ff58:	6833      	ldrmi	r3, [r6, #0]
 800ff5a:	3302      	addmi	r3, #2
 800ff5c:	6033      	strmi	r3, [r6, #0]
 800ff5e:	6825      	ldr	r5, [r4, #0]
 800ff60:	f015 0506 	ands.w	r5, r5, #6
 800ff64:	d106      	bne.n	800ff74 <_printf_common+0x48>
 800ff66:	f104 0a19 	add.w	sl, r4, #25
 800ff6a:	68e3      	ldr	r3, [r4, #12]
 800ff6c:	6832      	ldr	r2, [r6, #0]
 800ff6e:	1a9b      	subs	r3, r3, r2
 800ff70:	42ab      	cmp	r3, r5
 800ff72:	dc26      	bgt.n	800ffc2 <_printf_common+0x96>
 800ff74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ff78:	1e13      	subs	r3, r2, #0
 800ff7a:	6822      	ldr	r2, [r4, #0]
 800ff7c:	bf18      	it	ne
 800ff7e:	2301      	movne	r3, #1
 800ff80:	0692      	lsls	r2, r2, #26
 800ff82:	d42b      	bmi.n	800ffdc <_printf_common+0xb0>
 800ff84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ff88:	4649      	mov	r1, r9
 800ff8a:	4638      	mov	r0, r7
 800ff8c:	47c0      	blx	r8
 800ff8e:	3001      	adds	r0, #1
 800ff90:	d01e      	beq.n	800ffd0 <_printf_common+0xa4>
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	6922      	ldr	r2, [r4, #16]
 800ff96:	f003 0306 	and.w	r3, r3, #6
 800ff9a:	2b04      	cmp	r3, #4
 800ff9c:	bf02      	ittt	eq
 800ff9e:	68e5      	ldreq	r5, [r4, #12]
 800ffa0:	6833      	ldreq	r3, [r6, #0]
 800ffa2:	1aed      	subeq	r5, r5, r3
 800ffa4:	68a3      	ldr	r3, [r4, #8]
 800ffa6:	bf0c      	ite	eq
 800ffa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffac:	2500      	movne	r5, #0
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	bfc4      	itt	gt
 800ffb2:	1a9b      	subgt	r3, r3, r2
 800ffb4:	18ed      	addgt	r5, r5, r3
 800ffb6:	2600      	movs	r6, #0
 800ffb8:	341a      	adds	r4, #26
 800ffba:	42b5      	cmp	r5, r6
 800ffbc:	d11a      	bne.n	800fff4 <_printf_common+0xc8>
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e008      	b.n	800ffd4 <_printf_common+0xa8>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	4652      	mov	r2, sl
 800ffc6:	4649      	mov	r1, r9
 800ffc8:	4638      	mov	r0, r7
 800ffca:	47c0      	blx	r8
 800ffcc:	3001      	adds	r0, #1
 800ffce:	d103      	bne.n	800ffd8 <_printf_common+0xac>
 800ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffd8:	3501      	adds	r5, #1
 800ffda:	e7c6      	b.n	800ff6a <_printf_common+0x3e>
 800ffdc:	18e1      	adds	r1, r4, r3
 800ffde:	1c5a      	adds	r2, r3, #1
 800ffe0:	2030      	movs	r0, #48	; 0x30
 800ffe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ffe6:	4422      	add	r2, r4
 800ffe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ffec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fff0:	3302      	adds	r3, #2
 800fff2:	e7c7      	b.n	800ff84 <_printf_common+0x58>
 800fff4:	2301      	movs	r3, #1
 800fff6:	4622      	mov	r2, r4
 800fff8:	4649      	mov	r1, r9
 800fffa:	4638      	mov	r0, r7
 800fffc:	47c0      	blx	r8
 800fffe:	3001      	adds	r0, #1
 8010000:	d0e6      	beq.n	800ffd0 <_printf_common+0xa4>
 8010002:	3601      	adds	r6, #1
 8010004:	e7d9      	b.n	800ffba <_printf_common+0x8e>
	...

08010008 <_printf_i>:
 8010008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801000c:	7e0f      	ldrb	r7, [r1, #24]
 801000e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010010:	2f78      	cmp	r7, #120	; 0x78
 8010012:	4691      	mov	r9, r2
 8010014:	4680      	mov	r8, r0
 8010016:	460c      	mov	r4, r1
 8010018:	469a      	mov	sl, r3
 801001a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801001e:	d807      	bhi.n	8010030 <_printf_i+0x28>
 8010020:	2f62      	cmp	r7, #98	; 0x62
 8010022:	d80a      	bhi.n	801003a <_printf_i+0x32>
 8010024:	2f00      	cmp	r7, #0
 8010026:	f000 80d4 	beq.w	80101d2 <_printf_i+0x1ca>
 801002a:	2f58      	cmp	r7, #88	; 0x58
 801002c:	f000 80c0 	beq.w	80101b0 <_printf_i+0x1a8>
 8010030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010038:	e03a      	b.n	80100b0 <_printf_i+0xa8>
 801003a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801003e:	2b15      	cmp	r3, #21
 8010040:	d8f6      	bhi.n	8010030 <_printf_i+0x28>
 8010042:	a101      	add	r1, pc, #4	; (adr r1, 8010048 <_printf_i+0x40>)
 8010044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010048:	080100a1 	.word	0x080100a1
 801004c:	080100b5 	.word	0x080100b5
 8010050:	08010031 	.word	0x08010031
 8010054:	08010031 	.word	0x08010031
 8010058:	08010031 	.word	0x08010031
 801005c:	08010031 	.word	0x08010031
 8010060:	080100b5 	.word	0x080100b5
 8010064:	08010031 	.word	0x08010031
 8010068:	08010031 	.word	0x08010031
 801006c:	08010031 	.word	0x08010031
 8010070:	08010031 	.word	0x08010031
 8010074:	080101b9 	.word	0x080101b9
 8010078:	080100e1 	.word	0x080100e1
 801007c:	08010173 	.word	0x08010173
 8010080:	08010031 	.word	0x08010031
 8010084:	08010031 	.word	0x08010031
 8010088:	080101db 	.word	0x080101db
 801008c:	08010031 	.word	0x08010031
 8010090:	080100e1 	.word	0x080100e1
 8010094:	08010031 	.word	0x08010031
 8010098:	08010031 	.word	0x08010031
 801009c:	0801017b 	.word	0x0801017b
 80100a0:	682b      	ldr	r3, [r5, #0]
 80100a2:	1d1a      	adds	r2, r3, #4
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	602a      	str	r2, [r5, #0]
 80100a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100b0:	2301      	movs	r3, #1
 80100b2:	e09f      	b.n	80101f4 <_printf_i+0x1ec>
 80100b4:	6820      	ldr	r0, [r4, #0]
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	0607      	lsls	r7, r0, #24
 80100ba:	f103 0104 	add.w	r1, r3, #4
 80100be:	6029      	str	r1, [r5, #0]
 80100c0:	d501      	bpl.n	80100c6 <_printf_i+0xbe>
 80100c2:	681e      	ldr	r6, [r3, #0]
 80100c4:	e003      	b.n	80100ce <_printf_i+0xc6>
 80100c6:	0646      	lsls	r6, r0, #25
 80100c8:	d5fb      	bpl.n	80100c2 <_printf_i+0xba>
 80100ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80100ce:	2e00      	cmp	r6, #0
 80100d0:	da03      	bge.n	80100da <_printf_i+0xd2>
 80100d2:	232d      	movs	r3, #45	; 0x2d
 80100d4:	4276      	negs	r6, r6
 80100d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100da:	485a      	ldr	r0, [pc, #360]	; (8010244 <_printf_i+0x23c>)
 80100dc:	230a      	movs	r3, #10
 80100de:	e012      	b.n	8010106 <_printf_i+0xfe>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	6820      	ldr	r0, [r4, #0]
 80100e4:	1d19      	adds	r1, r3, #4
 80100e6:	6029      	str	r1, [r5, #0]
 80100e8:	0605      	lsls	r5, r0, #24
 80100ea:	d501      	bpl.n	80100f0 <_printf_i+0xe8>
 80100ec:	681e      	ldr	r6, [r3, #0]
 80100ee:	e002      	b.n	80100f6 <_printf_i+0xee>
 80100f0:	0641      	lsls	r1, r0, #25
 80100f2:	d5fb      	bpl.n	80100ec <_printf_i+0xe4>
 80100f4:	881e      	ldrh	r6, [r3, #0]
 80100f6:	4853      	ldr	r0, [pc, #332]	; (8010244 <_printf_i+0x23c>)
 80100f8:	2f6f      	cmp	r7, #111	; 0x6f
 80100fa:	bf0c      	ite	eq
 80100fc:	2308      	moveq	r3, #8
 80100fe:	230a      	movne	r3, #10
 8010100:	2100      	movs	r1, #0
 8010102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010106:	6865      	ldr	r5, [r4, #4]
 8010108:	60a5      	str	r5, [r4, #8]
 801010a:	2d00      	cmp	r5, #0
 801010c:	bfa2      	ittt	ge
 801010e:	6821      	ldrge	r1, [r4, #0]
 8010110:	f021 0104 	bicge.w	r1, r1, #4
 8010114:	6021      	strge	r1, [r4, #0]
 8010116:	b90e      	cbnz	r6, 801011c <_printf_i+0x114>
 8010118:	2d00      	cmp	r5, #0
 801011a:	d04b      	beq.n	80101b4 <_printf_i+0x1ac>
 801011c:	4615      	mov	r5, r2
 801011e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010122:	fb03 6711 	mls	r7, r3, r1, r6
 8010126:	5dc7      	ldrb	r7, [r0, r7]
 8010128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801012c:	4637      	mov	r7, r6
 801012e:	42bb      	cmp	r3, r7
 8010130:	460e      	mov	r6, r1
 8010132:	d9f4      	bls.n	801011e <_printf_i+0x116>
 8010134:	2b08      	cmp	r3, #8
 8010136:	d10b      	bne.n	8010150 <_printf_i+0x148>
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	07de      	lsls	r6, r3, #31
 801013c:	d508      	bpl.n	8010150 <_printf_i+0x148>
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	6861      	ldr	r1, [r4, #4]
 8010142:	4299      	cmp	r1, r3
 8010144:	bfde      	ittt	le
 8010146:	2330      	movle	r3, #48	; 0x30
 8010148:	f805 3c01 	strble.w	r3, [r5, #-1]
 801014c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010150:	1b52      	subs	r2, r2, r5
 8010152:	6122      	str	r2, [r4, #16]
 8010154:	f8cd a000 	str.w	sl, [sp]
 8010158:	464b      	mov	r3, r9
 801015a:	aa03      	add	r2, sp, #12
 801015c:	4621      	mov	r1, r4
 801015e:	4640      	mov	r0, r8
 8010160:	f7ff fee4 	bl	800ff2c <_printf_common>
 8010164:	3001      	adds	r0, #1
 8010166:	d14a      	bne.n	80101fe <_printf_i+0x1f6>
 8010168:	f04f 30ff 	mov.w	r0, #4294967295
 801016c:	b004      	add	sp, #16
 801016e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	f043 0320 	orr.w	r3, r3, #32
 8010178:	6023      	str	r3, [r4, #0]
 801017a:	4833      	ldr	r0, [pc, #204]	; (8010248 <_printf_i+0x240>)
 801017c:	2778      	movs	r7, #120	; 0x78
 801017e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	6829      	ldr	r1, [r5, #0]
 8010186:	061f      	lsls	r7, r3, #24
 8010188:	f851 6b04 	ldr.w	r6, [r1], #4
 801018c:	d402      	bmi.n	8010194 <_printf_i+0x18c>
 801018e:	065f      	lsls	r7, r3, #25
 8010190:	bf48      	it	mi
 8010192:	b2b6      	uxthmi	r6, r6
 8010194:	07df      	lsls	r7, r3, #31
 8010196:	bf48      	it	mi
 8010198:	f043 0320 	orrmi.w	r3, r3, #32
 801019c:	6029      	str	r1, [r5, #0]
 801019e:	bf48      	it	mi
 80101a0:	6023      	strmi	r3, [r4, #0]
 80101a2:	b91e      	cbnz	r6, 80101ac <_printf_i+0x1a4>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	f023 0320 	bic.w	r3, r3, #32
 80101aa:	6023      	str	r3, [r4, #0]
 80101ac:	2310      	movs	r3, #16
 80101ae:	e7a7      	b.n	8010100 <_printf_i+0xf8>
 80101b0:	4824      	ldr	r0, [pc, #144]	; (8010244 <_printf_i+0x23c>)
 80101b2:	e7e4      	b.n	801017e <_printf_i+0x176>
 80101b4:	4615      	mov	r5, r2
 80101b6:	e7bd      	b.n	8010134 <_printf_i+0x12c>
 80101b8:	682b      	ldr	r3, [r5, #0]
 80101ba:	6826      	ldr	r6, [r4, #0]
 80101bc:	6961      	ldr	r1, [r4, #20]
 80101be:	1d18      	adds	r0, r3, #4
 80101c0:	6028      	str	r0, [r5, #0]
 80101c2:	0635      	lsls	r5, r6, #24
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	d501      	bpl.n	80101cc <_printf_i+0x1c4>
 80101c8:	6019      	str	r1, [r3, #0]
 80101ca:	e002      	b.n	80101d2 <_printf_i+0x1ca>
 80101cc:	0670      	lsls	r0, r6, #25
 80101ce:	d5fb      	bpl.n	80101c8 <_printf_i+0x1c0>
 80101d0:	8019      	strh	r1, [r3, #0]
 80101d2:	2300      	movs	r3, #0
 80101d4:	6123      	str	r3, [r4, #16]
 80101d6:	4615      	mov	r5, r2
 80101d8:	e7bc      	b.n	8010154 <_printf_i+0x14c>
 80101da:	682b      	ldr	r3, [r5, #0]
 80101dc:	1d1a      	adds	r2, r3, #4
 80101de:	602a      	str	r2, [r5, #0]
 80101e0:	681d      	ldr	r5, [r3, #0]
 80101e2:	6862      	ldr	r2, [r4, #4]
 80101e4:	2100      	movs	r1, #0
 80101e6:	4628      	mov	r0, r5
 80101e8:	f7f0 f802 	bl	80001f0 <memchr>
 80101ec:	b108      	cbz	r0, 80101f2 <_printf_i+0x1ea>
 80101ee:	1b40      	subs	r0, r0, r5
 80101f0:	6060      	str	r0, [r4, #4]
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	6123      	str	r3, [r4, #16]
 80101f6:	2300      	movs	r3, #0
 80101f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101fc:	e7aa      	b.n	8010154 <_printf_i+0x14c>
 80101fe:	6923      	ldr	r3, [r4, #16]
 8010200:	462a      	mov	r2, r5
 8010202:	4649      	mov	r1, r9
 8010204:	4640      	mov	r0, r8
 8010206:	47d0      	blx	sl
 8010208:	3001      	adds	r0, #1
 801020a:	d0ad      	beq.n	8010168 <_printf_i+0x160>
 801020c:	6823      	ldr	r3, [r4, #0]
 801020e:	079b      	lsls	r3, r3, #30
 8010210:	d413      	bmi.n	801023a <_printf_i+0x232>
 8010212:	68e0      	ldr	r0, [r4, #12]
 8010214:	9b03      	ldr	r3, [sp, #12]
 8010216:	4298      	cmp	r0, r3
 8010218:	bfb8      	it	lt
 801021a:	4618      	movlt	r0, r3
 801021c:	e7a6      	b.n	801016c <_printf_i+0x164>
 801021e:	2301      	movs	r3, #1
 8010220:	4632      	mov	r2, r6
 8010222:	4649      	mov	r1, r9
 8010224:	4640      	mov	r0, r8
 8010226:	47d0      	blx	sl
 8010228:	3001      	adds	r0, #1
 801022a:	d09d      	beq.n	8010168 <_printf_i+0x160>
 801022c:	3501      	adds	r5, #1
 801022e:	68e3      	ldr	r3, [r4, #12]
 8010230:	9903      	ldr	r1, [sp, #12]
 8010232:	1a5b      	subs	r3, r3, r1
 8010234:	42ab      	cmp	r3, r5
 8010236:	dcf2      	bgt.n	801021e <_printf_i+0x216>
 8010238:	e7eb      	b.n	8010212 <_printf_i+0x20a>
 801023a:	2500      	movs	r5, #0
 801023c:	f104 0619 	add.w	r6, r4, #25
 8010240:	e7f5      	b.n	801022e <_printf_i+0x226>
 8010242:	bf00      	nop
 8010244:	0801361e 	.word	0x0801361e
 8010248:	0801362f 	.word	0x0801362f

0801024c <__sflush_r>:
 801024c:	898a      	ldrh	r2, [r1, #12]
 801024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010252:	4605      	mov	r5, r0
 8010254:	0710      	lsls	r0, r2, #28
 8010256:	460c      	mov	r4, r1
 8010258:	d458      	bmi.n	801030c <__sflush_r+0xc0>
 801025a:	684b      	ldr	r3, [r1, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	dc05      	bgt.n	801026c <__sflush_r+0x20>
 8010260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010262:	2b00      	cmp	r3, #0
 8010264:	dc02      	bgt.n	801026c <__sflush_r+0x20>
 8010266:	2000      	movs	r0, #0
 8010268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801026c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801026e:	2e00      	cmp	r6, #0
 8010270:	d0f9      	beq.n	8010266 <__sflush_r+0x1a>
 8010272:	2300      	movs	r3, #0
 8010274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010278:	682f      	ldr	r7, [r5, #0]
 801027a:	6a21      	ldr	r1, [r4, #32]
 801027c:	602b      	str	r3, [r5, #0]
 801027e:	d032      	beq.n	80102e6 <__sflush_r+0x9a>
 8010280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010282:	89a3      	ldrh	r3, [r4, #12]
 8010284:	075a      	lsls	r2, r3, #29
 8010286:	d505      	bpl.n	8010294 <__sflush_r+0x48>
 8010288:	6863      	ldr	r3, [r4, #4]
 801028a:	1ac0      	subs	r0, r0, r3
 801028c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801028e:	b10b      	cbz	r3, 8010294 <__sflush_r+0x48>
 8010290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010292:	1ac0      	subs	r0, r0, r3
 8010294:	2300      	movs	r3, #0
 8010296:	4602      	mov	r2, r0
 8010298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801029a:	6a21      	ldr	r1, [r4, #32]
 801029c:	4628      	mov	r0, r5
 801029e:	47b0      	blx	r6
 80102a0:	1c43      	adds	r3, r0, #1
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	d106      	bne.n	80102b4 <__sflush_r+0x68>
 80102a6:	6829      	ldr	r1, [r5, #0]
 80102a8:	291d      	cmp	r1, #29
 80102aa:	d82b      	bhi.n	8010304 <__sflush_r+0xb8>
 80102ac:	4a29      	ldr	r2, [pc, #164]	; (8010354 <__sflush_r+0x108>)
 80102ae:	410a      	asrs	r2, r1
 80102b0:	07d6      	lsls	r6, r2, #31
 80102b2:	d427      	bmi.n	8010304 <__sflush_r+0xb8>
 80102b4:	2200      	movs	r2, #0
 80102b6:	6062      	str	r2, [r4, #4]
 80102b8:	04d9      	lsls	r1, r3, #19
 80102ba:	6922      	ldr	r2, [r4, #16]
 80102bc:	6022      	str	r2, [r4, #0]
 80102be:	d504      	bpl.n	80102ca <__sflush_r+0x7e>
 80102c0:	1c42      	adds	r2, r0, #1
 80102c2:	d101      	bne.n	80102c8 <__sflush_r+0x7c>
 80102c4:	682b      	ldr	r3, [r5, #0]
 80102c6:	b903      	cbnz	r3, 80102ca <__sflush_r+0x7e>
 80102c8:	6560      	str	r0, [r4, #84]	; 0x54
 80102ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102cc:	602f      	str	r7, [r5, #0]
 80102ce:	2900      	cmp	r1, #0
 80102d0:	d0c9      	beq.n	8010266 <__sflush_r+0x1a>
 80102d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102d6:	4299      	cmp	r1, r3
 80102d8:	d002      	beq.n	80102e0 <__sflush_r+0x94>
 80102da:	4628      	mov	r0, r5
 80102dc:	f7ff fbe2 	bl	800faa4 <_free_r>
 80102e0:	2000      	movs	r0, #0
 80102e2:	6360      	str	r0, [r4, #52]	; 0x34
 80102e4:	e7c0      	b.n	8010268 <__sflush_r+0x1c>
 80102e6:	2301      	movs	r3, #1
 80102e8:	4628      	mov	r0, r5
 80102ea:	47b0      	blx	r6
 80102ec:	1c41      	adds	r1, r0, #1
 80102ee:	d1c8      	bne.n	8010282 <__sflush_r+0x36>
 80102f0:	682b      	ldr	r3, [r5, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d0c5      	beq.n	8010282 <__sflush_r+0x36>
 80102f6:	2b1d      	cmp	r3, #29
 80102f8:	d001      	beq.n	80102fe <__sflush_r+0xb2>
 80102fa:	2b16      	cmp	r3, #22
 80102fc:	d101      	bne.n	8010302 <__sflush_r+0xb6>
 80102fe:	602f      	str	r7, [r5, #0]
 8010300:	e7b1      	b.n	8010266 <__sflush_r+0x1a>
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010308:	81a3      	strh	r3, [r4, #12]
 801030a:	e7ad      	b.n	8010268 <__sflush_r+0x1c>
 801030c:	690f      	ldr	r7, [r1, #16]
 801030e:	2f00      	cmp	r7, #0
 8010310:	d0a9      	beq.n	8010266 <__sflush_r+0x1a>
 8010312:	0793      	lsls	r3, r2, #30
 8010314:	680e      	ldr	r6, [r1, #0]
 8010316:	bf08      	it	eq
 8010318:	694b      	ldreq	r3, [r1, #20]
 801031a:	600f      	str	r7, [r1, #0]
 801031c:	bf18      	it	ne
 801031e:	2300      	movne	r3, #0
 8010320:	eba6 0807 	sub.w	r8, r6, r7
 8010324:	608b      	str	r3, [r1, #8]
 8010326:	f1b8 0f00 	cmp.w	r8, #0
 801032a:	dd9c      	ble.n	8010266 <__sflush_r+0x1a>
 801032c:	6a21      	ldr	r1, [r4, #32]
 801032e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010330:	4643      	mov	r3, r8
 8010332:	463a      	mov	r2, r7
 8010334:	4628      	mov	r0, r5
 8010336:	47b0      	blx	r6
 8010338:	2800      	cmp	r0, #0
 801033a:	dc06      	bgt.n	801034a <__sflush_r+0xfe>
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010342:	81a3      	strh	r3, [r4, #12]
 8010344:	f04f 30ff 	mov.w	r0, #4294967295
 8010348:	e78e      	b.n	8010268 <__sflush_r+0x1c>
 801034a:	4407      	add	r7, r0
 801034c:	eba8 0800 	sub.w	r8, r8, r0
 8010350:	e7e9      	b.n	8010326 <__sflush_r+0xda>
 8010352:	bf00      	nop
 8010354:	dfbffffe 	.word	0xdfbffffe

08010358 <_fflush_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	690b      	ldr	r3, [r1, #16]
 801035c:	4605      	mov	r5, r0
 801035e:	460c      	mov	r4, r1
 8010360:	b913      	cbnz	r3, 8010368 <_fflush_r+0x10>
 8010362:	2500      	movs	r5, #0
 8010364:	4628      	mov	r0, r5
 8010366:	bd38      	pop	{r3, r4, r5, pc}
 8010368:	b118      	cbz	r0, 8010372 <_fflush_r+0x1a>
 801036a:	6a03      	ldr	r3, [r0, #32]
 801036c:	b90b      	cbnz	r3, 8010372 <_fflush_r+0x1a>
 801036e:	f7ff fa5b 	bl	800f828 <__sinit>
 8010372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d0f3      	beq.n	8010362 <_fflush_r+0xa>
 801037a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801037c:	07d0      	lsls	r0, r2, #31
 801037e:	d404      	bmi.n	801038a <_fflush_r+0x32>
 8010380:	0599      	lsls	r1, r3, #22
 8010382:	d402      	bmi.n	801038a <_fflush_r+0x32>
 8010384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010386:	f7ff fb5e 	bl	800fa46 <__retarget_lock_acquire_recursive>
 801038a:	4628      	mov	r0, r5
 801038c:	4621      	mov	r1, r4
 801038e:	f7ff ff5d 	bl	801024c <__sflush_r>
 8010392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010394:	07da      	lsls	r2, r3, #31
 8010396:	4605      	mov	r5, r0
 8010398:	d4e4      	bmi.n	8010364 <_fflush_r+0xc>
 801039a:	89a3      	ldrh	r3, [r4, #12]
 801039c:	059b      	lsls	r3, r3, #22
 801039e:	d4e1      	bmi.n	8010364 <_fflush_r+0xc>
 80103a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103a2:	f7ff fb51 	bl	800fa48 <__retarget_lock_release_recursive>
 80103a6:	e7dd      	b.n	8010364 <_fflush_r+0xc>

080103a8 <fiprintf>:
 80103a8:	b40e      	push	{r1, r2, r3}
 80103aa:	b503      	push	{r0, r1, lr}
 80103ac:	4601      	mov	r1, r0
 80103ae:	ab03      	add	r3, sp, #12
 80103b0:	4805      	ldr	r0, [pc, #20]	; (80103c8 <fiprintf+0x20>)
 80103b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80103b6:	6800      	ldr	r0, [r0, #0]
 80103b8:	9301      	str	r3, [sp, #4]
 80103ba:	f7ff fc9d 	bl	800fcf8 <_vfiprintf_r>
 80103be:	b002      	add	sp, #8
 80103c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80103c4:	b003      	add	sp, #12
 80103c6:	4770      	bx	lr
 80103c8:	20000088 	.word	0x20000088

080103cc <__swbuf_r>:
 80103cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ce:	460e      	mov	r6, r1
 80103d0:	4614      	mov	r4, r2
 80103d2:	4605      	mov	r5, r0
 80103d4:	b118      	cbz	r0, 80103de <__swbuf_r+0x12>
 80103d6:	6a03      	ldr	r3, [r0, #32]
 80103d8:	b90b      	cbnz	r3, 80103de <__swbuf_r+0x12>
 80103da:	f7ff fa25 	bl	800f828 <__sinit>
 80103de:	69a3      	ldr	r3, [r4, #24]
 80103e0:	60a3      	str	r3, [r4, #8]
 80103e2:	89a3      	ldrh	r3, [r4, #12]
 80103e4:	071a      	lsls	r2, r3, #28
 80103e6:	d525      	bpl.n	8010434 <__swbuf_r+0x68>
 80103e8:	6923      	ldr	r3, [r4, #16]
 80103ea:	b31b      	cbz	r3, 8010434 <__swbuf_r+0x68>
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	6922      	ldr	r2, [r4, #16]
 80103f0:	1a98      	subs	r0, r3, r2
 80103f2:	6963      	ldr	r3, [r4, #20]
 80103f4:	b2f6      	uxtb	r6, r6
 80103f6:	4283      	cmp	r3, r0
 80103f8:	4637      	mov	r7, r6
 80103fa:	dc04      	bgt.n	8010406 <__swbuf_r+0x3a>
 80103fc:	4621      	mov	r1, r4
 80103fe:	4628      	mov	r0, r5
 8010400:	f7ff ffaa 	bl	8010358 <_fflush_r>
 8010404:	b9e0      	cbnz	r0, 8010440 <__swbuf_r+0x74>
 8010406:	68a3      	ldr	r3, [r4, #8]
 8010408:	3b01      	subs	r3, #1
 801040a:	60a3      	str	r3, [r4, #8]
 801040c:	6823      	ldr	r3, [r4, #0]
 801040e:	1c5a      	adds	r2, r3, #1
 8010410:	6022      	str	r2, [r4, #0]
 8010412:	701e      	strb	r6, [r3, #0]
 8010414:	6962      	ldr	r2, [r4, #20]
 8010416:	1c43      	adds	r3, r0, #1
 8010418:	429a      	cmp	r2, r3
 801041a:	d004      	beq.n	8010426 <__swbuf_r+0x5a>
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	07db      	lsls	r3, r3, #31
 8010420:	d506      	bpl.n	8010430 <__swbuf_r+0x64>
 8010422:	2e0a      	cmp	r6, #10
 8010424:	d104      	bne.n	8010430 <__swbuf_r+0x64>
 8010426:	4621      	mov	r1, r4
 8010428:	4628      	mov	r0, r5
 801042a:	f7ff ff95 	bl	8010358 <_fflush_r>
 801042e:	b938      	cbnz	r0, 8010440 <__swbuf_r+0x74>
 8010430:	4638      	mov	r0, r7
 8010432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010434:	4621      	mov	r1, r4
 8010436:	4628      	mov	r0, r5
 8010438:	f000 f806 	bl	8010448 <__swsetup_r>
 801043c:	2800      	cmp	r0, #0
 801043e:	d0d5      	beq.n	80103ec <__swbuf_r+0x20>
 8010440:	f04f 37ff 	mov.w	r7, #4294967295
 8010444:	e7f4      	b.n	8010430 <__swbuf_r+0x64>
	...

08010448 <__swsetup_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4b2a      	ldr	r3, [pc, #168]	; (80104f4 <__swsetup_r+0xac>)
 801044c:	4605      	mov	r5, r0
 801044e:	6818      	ldr	r0, [r3, #0]
 8010450:	460c      	mov	r4, r1
 8010452:	b118      	cbz	r0, 801045c <__swsetup_r+0x14>
 8010454:	6a03      	ldr	r3, [r0, #32]
 8010456:	b90b      	cbnz	r3, 801045c <__swsetup_r+0x14>
 8010458:	f7ff f9e6 	bl	800f828 <__sinit>
 801045c:	89a3      	ldrh	r3, [r4, #12]
 801045e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010462:	0718      	lsls	r0, r3, #28
 8010464:	d422      	bmi.n	80104ac <__swsetup_r+0x64>
 8010466:	06d9      	lsls	r1, r3, #27
 8010468:	d407      	bmi.n	801047a <__swsetup_r+0x32>
 801046a:	2309      	movs	r3, #9
 801046c:	602b      	str	r3, [r5, #0]
 801046e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010472:	81a3      	strh	r3, [r4, #12]
 8010474:	f04f 30ff 	mov.w	r0, #4294967295
 8010478:	e034      	b.n	80104e4 <__swsetup_r+0x9c>
 801047a:	0758      	lsls	r0, r3, #29
 801047c:	d512      	bpl.n	80104a4 <__swsetup_r+0x5c>
 801047e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010480:	b141      	cbz	r1, 8010494 <__swsetup_r+0x4c>
 8010482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010486:	4299      	cmp	r1, r3
 8010488:	d002      	beq.n	8010490 <__swsetup_r+0x48>
 801048a:	4628      	mov	r0, r5
 801048c:	f7ff fb0a 	bl	800faa4 <_free_r>
 8010490:	2300      	movs	r3, #0
 8010492:	6363      	str	r3, [r4, #52]	; 0x34
 8010494:	89a3      	ldrh	r3, [r4, #12]
 8010496:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801049a:	81a3      	strh	r3, [r4, #12]
 801049c:	2300      	movs	r3, #0
 801049e:	6063      	str	r3, [r4, #4]
 80104a0:	6923      	ldr	r3, [r4, #16]
 80104a2:	6023      	str	r3, [r4, #0]
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	f043 0308 	orr.w	r3, r3, #8
 80104aa:	81a3      	strh	r3, [r4, #12]
 80104ac:	6923      	ldr	r3, [r4, #16]
 80104ae:	b94b      	cbnz	r3, 80104c4 <__swsetup_r+0x7c>
 80104b0:	89a3      	ldrh	r3, [r4, #12]
 80104b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80104b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104ba:	d003      	beq.n	80104c4 <__swsetup_r+0x7c>
 80104bc:	4621      	mov	r1, r4
 80104be:	4628      	mov	r0, r5
 80104c0:	f000 f857 	bl	8010572 <__smakebuf_r>
 80104c4:	89a0      	ldrh	r0, [r4, #12]
 80104c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104ca:	f010 0301 	ands.w	r3, r0, #1
 80104ce:	d00a      	beq.n	80104e6 <__swsetup_r+0x9e>
 80104d0:	2300      	movs	r3, #0
 80104d2:	60a3      	str	r3, [r4, #8]
 80104d4:	6963      	ldr	r3, [r4, #20]
 80104d6:	425b      	negs	r3, r3
 80104d8:	61a3      	str	r3, [r4, #24]
 80104da:	6923      	ldr	r3, [r4, #16]
 80104dc:	b943      	cbnz	r3, 80104f0 <__swsetup_r+0xa8>
 80104de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80104e2:	d1c4      	bne.n	801046e <__swsetup_r+0x26>
 80104e4:	bd38      	pop	{r3, r4, r5, pc}
 80104e6:	0781      	lsls	r1, r0, #30
 80104e8:	bf58      	it	pl
 80104ea:	6963      	ldrpl	r3, [r4, #20]
 80104ec:	60a3      	str	r3, [r4, #8]
 80104ee:	e7f4      	b.n	80104da <__swsetup_r+0x92>
 80104f0:	2000      	movs	r0, #0
 80104f2:	e7f7      	b.n	80104e4 <__swsetup_r+0x9c>
 80104f4:	20000088 	.word	0x20000088

080104f8 <_sbrk_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d06      	ldr	r5, [pc, #24]	; (8010514 <_sbrk_r+0x1c>)
 80104fc:	2300      	movs	r3, #0
 80104fe:	4604      	mov	r4, r0
 8010500:	4608      	mov	r0, r1
 8010502:	602b      	str	r3, [r5, #0]
 8010504:	f7f0 fb08 	bl	8000b18 <_sbrk>
 8010508:	1c43      	adds	r3, r0, #1
 801050a:	d102      	bne.n	8010512 <_sbrk_r+0x1a>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	b103      	cbz	r3, 8010512 <_sbrk_r+0x1a>
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	bd38      	pop	{r3, r4, r5, pc}
 8010514:	2000a718 	.word	0x2000a718

08010518 <abort>:
 8010518:	b508      	push	{r3, lr}
 801051a:	2006      	movs	r0, #6
 801051c:	f000 f88e 	bl	801063c <raise>
 8010520:	2001      	movs	r0, #1
 8010522:	f7f0 fa81 	bl	8000a28 <_exit>

08010526 <__swhatbuf_r>:
 8010526:	b570      	push	{r4, r5, r6, lr}
 8010528:	460c      	mov	r4, r1
 801052a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801052e:	2900      	cmp	r1, #0
 8010530:	b096      	sub	sp, #88	; 0x58
 8010532:	4615      	mov	r5, r2
 8010534:	461e      	mov	r6, r3
 8010536:	da0d      	bge.n	8010554 <__swhatbuf_r+0x2e>
 8010538:	89a3      	ldrh	r3, [r4, #12]
 801053a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801053e:	f04f 0100 	mov.w	r1, #0
 8010542:	bf0c      	ite	eq
 8010544:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010548:	2340      	movne	r3, #64	; 0x40
 801054a:	2000      	movs	r0, #0
 801054c:	6031      	str	r1, [r6, #0]
 801054e:	602b      	str	r3, [r5, #0]
 8010550:	b016      	add	sp, #88	; 0x58
 8010552:	bd70      	pop	{r4, r5, r6, pc}
 8010554:	466a      	mov	r2, sp
 8010556:	f000 f879 	bl	801064c <_fstat_r>
 801055a:	2800      	cmp	r0, #0
 801055c:	dbec      	blt.n	8010538 <__swhatbuf_r+0x12>
 801055e:	9901      	ldr	r1, [sp, #4]
 8010560:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010564:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010568:	4259      	negs	r1, r3
 801056a:	4159      	adcs	r1, r3
 801056c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010570:	e7eb      	b.n	801054a <__swhatbuf_r+0x24>

08010572 <__smakebuf_r>:
 8010572:	898b      	ldrh	r3, [r1, #12]
 8010574:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010576:	079d      	lsls	r5, r3, #30
 8010578:	4606      	mov	r6, r0
 801057a:	460c      	mov	r4, r1
 801057c:	d507      	bpl.n	801058e <__smakebuf_r+0x1c>
 801057e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010582:	6023      	str	r3, [r4, #0]
 8010584:	6123      	str	r3, [r4, #16]
 8010586:	2301      	movs	r3, #1
 8010588:	6163      	str	r3, [r4, #20]
 801058a:	b002      	add	sp, #8
 801058c:	bd70      	pop	{r4, r5, r6, pc}
 801058e:	ab01      	add	r3, sp, #4
 8010590:	466a      	mov	r2, sp
 8010592:	f7ff ffc8 	bl	8010526 <__swhatbuf_r>
 8010596:	9900      	ldr	r1, [sp, #0]
 8010598:	4605      	mov	r5, r0
 801059a:	4630      	mov	r0, r6
 801059c:	f7ff faf6 	bl	800fb8c <_malloc_r>
 80105a0:	b948      	cbnz	r0, 80105b6 <__smakebuf_r+0x44>
 80105a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105a6:	059a      	lsls	r2, r3, #22
 80105a8:	d4ef      	bmi.n	801058a <__smakebuf_r+0x18>
 80105aa:	f023 0303 	bic.w	r3, r3, #3
 80105ae:	f043 0302 	orr.w	r3, r3, #2
 80105b2:	81a3      	strh	r3, [r4, #12]
 80105b4:	e7e3      	b.n	801057e <__smakebuf_r+0xc>
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	6020      	str	r0, [r4, #0]
 80105ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105be:	81a3      	strh	r3, [r4, #12]
 80105c0:	9b00      	ldr	r3, [sp, #0]
 80105c2:	6163      	str	r3, [r4, #20]
 80105c4:	9b01      	ldr	r3, [sp, #4]
 80105c6:	6120      	str	r0, [r4, #16]
 80105c8:	b15b      	cbz	r3, 80105e2 <__smakebuf_r+0x70>
 80105ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105ce:	4630      	mov	r0, r6
 80105d0:	f000 f84e 	bl	8010670 <_isatty_r>
 80105d4:	b128      	cbz	r0, 80105e2 <__smakebuf_r+0x70>
 80105d6:	89a3      	ldrh	r3, [r4, #12]
 80105d8:	f023 0303 	bic.w	r3, r3, #3
 80105dc:	f043 0301 	orr.w	r3, r3, #1
 80105e0:	81a3      	strh	r3, [r4, #12]
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	431d      	orrs	r5, r3
 80105e6:	81a5      	strh	r5, [r4, #12]
 80105e8:	e7cf      	b.n	801058a <__smakebuf_r+0x18>

080105ea <_raise_r>:
 80105ea:	291f      	cmp	r1, #31
 80105ec:	b538      	push	{r3, r4, r5, lr}
 80105ee:	4604      	mov	r4, r0
 80105f0:	460d      	mov	r5, r1
 80105f2:	d904      	bls.n	80105fe <_raise_r+0x14>
 80105f4:	2316      	movs	r3, #22
 80105f6:	6003      	str	r3, [r0, #0]
 80105f8:	f04f 30ff 	mov.w	r0, #4294967295
 80105fc:	bd38      	pop	{r3, r4, r5, pc}
 80105fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010600:	b112      	cbz	r2, 8010608 <_raise_r+0x1e>
 8010602:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010606:	b94b      	cbnz	r3, 801061c <_raise_r+0x32>
 8010608:	4620      	mov	r0, r4
 801060a:	f000 f853 	bl	80106b4 <_getpid_r>
 801060e:	462a      	mov	r2, r5
 8010610:	4601      	mov	r1, r0
 8010612:	4620      	mov	r0, r4
 8010614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010618:	f000 b83a 	b.w	8010690 <_kill_r>
 801061c:	2b01      	cmp	r3, #1
 801061e:	d00a      	beq.n	8010636 <_raise_r+0x4c>
 8010620:	1c59      	adds	r1, r3, #1
 8010622:	d103      	bne.n	801062c <_raise_r+0x42>
 8010624:	2316      	movs	r3, #22
 8010626:	6003      	str	r3, [r0, #0]
 8010628:	2001      	movs	r0, #1
 801062a:	e7e7      	b.n	80105fc <_raise_r+0x12>
 801062c:	2400      	movs	r4, #0
 801062e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010632:	4628      	mov	r0, r5
 8010634:	4798      	blx	r3
 8010636:	2000      	movs	r0, #0
 8010638:	e7e0      	b.n	80105fc <_raise_r+0x12>
	...

0801063c <raise>:
 801063c:	4b02      	ldr	r3, [pc, #8]	; (8010648 <raise+0xc>)
 801063e:	4601      	mov	r1, r0
 8010640:	6818      	ldr	r0, [r3, #0]
 8010642:	f7ff bfd2 	b.w	80105ea <_raise_r>
 8010646:	bf00      	nop
 8010648:	20000088 	.word	0x20000088

0801064c <_fstat_r>:
 801064c:	b538      	push	{r3, r4, r5, lr}
 801064e:	4d07      	ldr	r5, [pc, #28]	; (801066c <_fstat_r+0x20>)
 8010650:	2300      	movs	r3, #0
 8010652:	4604      	mov	r4, r0
 8010654:	4608      	mov	r0, r1
 8010656:	4611      	mov	r1, r2
 8010658:	602b      	str	r3, [r5, #0]
 801065a:	f7f0 fa34 	bl	8000ac6 <_fstat>
 801065e:	1c43      	adds	r3, r0, #1
 8010660:	d102      	bne.n	8010668 <_fstat_r+0x1c>
 8010662:	682b      	ldr	r3, [r5, #0]
 8010664:	b103      	cbz	r3, 8010668 <_fstat_r+0x1c>
 8010666:	6023      	str	r3, [r4, #0]
 8010668:	bd38      	pop	{r3, r4, r5, pc}
 801066a:	bf00      	nop
 801066c:	2000a718 	.word	0x2000a718

08010670 <_isatty_r>:
 8010670:	b538      	push	{r3, r4, r5, lr}
 8010672:	4d06      	ldr	r5, [pc, #24]	; (801068c <_isatty_r+0x1c>)
 8010674:	2300      	movs	r3, #0
 8010676:	4604      	mov	r4, r0
 8010678:	4608      	mov	r0, r1
 801067a:	602b      	str	r3, [r5, #0]
 801067c:	f7f0 fa33 	bl	8000ae6 <_isatty>
 8010680:	1c43      	adds	r3, r0, #1
 8010682:	d102      	bne.n	801068a <_isatty_r+0x1a>
 8010684:	682b      	ldr	r3, [r5, #0]
 8010686:	b103      	cbz	r3, 801068a <_isatty_r+0x1a>
 8010688:	6023      	str	r3, [r4, #0]
 801068a:	bd38      	pop	{r3, r4, r5, pc}
 801068c:	2000a718 	.word	0x2000a718

08010690 <_kill_r>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	4d07      	ldr	r5, [pc, #28]	; (80106b0 <_kill_r+0x20>)
 8010694:	2300      	movs	r3, #0
 8010696:	4604      	mov	r4, r0
 8010698:	4608      	mov	r0, r1
 801069a:	4611      	mov	r1, r2
 801069c:	602b      	str	r3, [r5, #0]
 801069e:	f7f0 f9b1 	bl	8000a04 <_kill>
 80106a2:	1c43      	adds	r3, r0, #1
 80106a4:	d102      	bne.n	80106ac <_kill_r+0x1c>
 80106a6:	682b      	ldr	r3, [r5, #0]
 80106a8:	b103      	cbz	r3, 80106ac <_kill_r+0x1c>
 80106aa:	6023      	str	r3, [r4, #0]
 80106ac:	bd38      	pop	{r3, r4, r5, pc}
 80106ae:	bf00      	nop
 80106b0:	2000a718 	.word	0x2000a718

080106b4 <_getpid_r>:
 80106b4:	f7f0 b99e 	b.w	80009f4 <_getpid>

080106b8 <_init>:
 80106b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ba:	bf00      	nop
 80106bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106be:	bc08      	pop	{r3}
 80106c0:	469e      	mov	lr, r3
 80106c2:	4770      	bx	lr

080106c4 <_fini>:
 80106c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106c6:	bf00      	nop
 80106c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ca:	bc08      	pop	{r3}
 80106cc:	469e      	mov	lr, r3
 80106ce:	4770      	bx	lr
